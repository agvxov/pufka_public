/*-------------------------------------------------------------------------\\
I---------------------------------------------------------------------------I
I---------------------------------------------------------------------------I
I				  _____                      _               				I
I				 |  _  |                    (_)              				I
I				 | | | |_   _____ _ ____   ___  _____      __				I
I				 | | | \ \ / / _ \ '__\ \ / / |/ _ \ \ /\ / /				I
I				 \ \_/ /\ V /  __/ |   \ V /| |  __/\ V  V / 				I
I				  \___/  \_/ \___|_|    \_/ |_|\___| \_/\_/  				I
I---------------------------------------------------------------------------I
I---------------------------------------------------------------------------I
\\-------------------------------------------------------------------------*/

/*		OVERVIEW: //(0x00000000)➞*/
// #placeholder<overview> BEGIN
Gray(
			Overview
			Contents
			Metadata
			Legend
			Note
			Todo
			Grammar
			Mathematics
			Encoding
			Organization
			Documentation
			Testing
			Management
			Languages
			Patterns
			Data Structures
			Algorithms
			Cryptography
			Databases
			Electricity
			Hardware
			Filesystems
			Filetypes
			Assembly
			Ada
			C Language Family
			Smalltalk
			Tcl
			Python
			Prolog
			Haskell
			Networking
			Ux/ui
			Html
			Css
			Xml
			Xpath
			Latex
			M4
			Php
			Js
			Sql
			Nosql
			Operating Systems
			Ios
			Routeros
			Linux
			Bash
			Programs
			Termdev
			Webdev
			Gamedev
			Useful Sites
			Machine Learning
			Miscellaneous
)

// #placeholder<overview> END

//		LEADING QUOTE:
XXX          0x000000000000000000000000000000000000000000000000000000000000          XXX
XXX         0x0                                                          0x0         XXX
XXX        0x0    "Shall I tell you, my friend,"                          0x0        XXX
XXX        0      "how you will come to under stand it?"                    0        XXX
XXX        0      "Go and write a book upon it."                            0        XXX
XXX        0                        —Henry Home, Lord Kames(1696–1782),     0        XXX
XXX        0x0                      in a letter to Sir Gilbert Elliot     0x0        XXX
XXX         0x0                                                          0x0         XXX
XXX          0x000000000000000000000000000000000000000000000000000000000000          XXX


//		TABLE OF CONTENTS: //(0x00000001)➞*/
// #placeholder<index> BEGIN
			Overview..........................................(0x00000000)➞
			Contents..........................................(0x00000001)➞
			Metadata..........................................(0x00000002)➞
			Legend............................................(0x00000003)➞
			Note..............................................(0x00000004)➞
			Todo..............................................(0x00000005)➞
			Grammar...........................................(0x00000006)➞
				Symbol........................................(0x00000007)➞
				Alphabet......................................(0x00000008)➞
				Word..........................................(0x00000009)➞
				Sentence......................................(0x0000000a)➞
				Language......................................(0x0000000b)➞
				Sigma.........................................(0x0000000c)➞
				Generative....................................(0x0000000d)➞
				Ambiguity.....................................(0x0000000e)➞
				Recursiveness.................................(0x0000000f)➞
				Chomskys Grammar Classes......................(0x00000010)➞
				Parsing.......................................(0x00000011)➞
				Automaton.....................................(0x00000012)➞
					Turing Machines...........................(0x00000013)➞
						Multitape.............................(0x00000014)➞
							Conversation To Single Tape.......(0x00000015)➞
					Modifiers.................................(0x00000016)➞
			Mathematics.......................................(0x00000017)➞
				Logic.........................................(0x00000018)➞
					Orders....................................(0x00000019)➞
					Booleans..................................(0x0000001a)➞
					Universe..................................(0x0000001b)➞
					Variable..................................(0x0000001c)➞
					Literal...................................(0x0000001d)➞
					Statement.................................(0x0000001e)➞
					Operations................................(0x0000001f)➞
						Negation..............................(0x00000020)➞
						Conjuction............................(0x00000021)➞
						Disjunction...........................(0x00000022)➞
						Exclusive Disjunction.................(0x00000023)➞
						Implication...........................(0x00000024)➞
						Equalation............................(0x00000025)➞
						Quentifiers...........................(0x00000026)➞
							All...............................(0x00000027)➞
							Any...............................(0x00000028)➞
					Clause....................................(0x00000029)➞
					Predicate.................................(0x0000002a)➞
					Normal Forms..............................(0x0000002b)➞
						Dnf...................................(0x0000002c)➞
						Cnf...................................(0x0000002d)➞
						Pnf...................................(0x0000002e)➞
					Satisfiability............................(0x0000002f)➞
						Tseitin Transformation................(0x00000030)➞
						Plaisted Greenbaum Transformation.....(0x00000031)➞
						Resolution............................(0x00000032)➞
						Dimacs Format.........................(0x00000033)➞
						Dpll..................................(0x00000034)➞
						Smt...................................(0x00000035)➞
				Sets..........................................(0x00000036)➞
					Null......................................(0x00000037)➞
					Set Systems...............................(0x00000038)➞
					Operations................................(0x00000039)➞
					Set Builder Notation......................(0x0000003a)➞
					Relations.................................(0x0000003b)➞
					Cardinality...............................(0x0000003c)➞
				Matrices......................................(0x0000003d)➞
					Operators.................................(0x0000003e)➞
					Identity Matrix...........................(0x0000003f)➞
					Inversion.................................(0x00000040)➞
					Gaussian Ellimination.....................(0x00000041)➞
				Graphs........................................(0x00000042)➞
				Sequances.....................................(0x00000043)➞
				Combinatorics.................................(0x00000044)➞
				Geometry......................................(0x00000045)➞
				Algebra.......................................(0x00000046)➞
				Calculus......................................(0x00000047)➞
					Assignment................................(0x00000048)➞
					Ordered Pair..............................(0x00000049)➞
					Signum....................................(0x0000004a)➞
					Distance..................................(0x0000004b)➞
					Surrounding...............................(0x0000004c)➞
					Infinity..................................(0x0000004d)➞
					Functions.................................(0x0000004e)➞
						Inversion.............................(0x0000004f)➞
						Monotony..............................(0x00000050)➞
						Limit.................................(0x00000051)➞
						Derivative............................(0x00000052)➞
					Integral..................................(0x00000053)➞
				Complex Numbers...............................(0x00000054)➞
					Operators.................................(0x00000055)➞
					Trigonometric Form........................(0x00000056)➞
				Numerical Bases...............................(0x00000057)➞
				Optimization..................................(0x00000058)➞
				Numerical Mathematics.........................(0x00000059)➞
			Encoding..........................................(0x0000005a)➞
				Binary........................................(0x0000005b)➞
				Floats........................................(0x0000005c)➞
				Decimals......................................(0x0000005d)➞
				Ascii.........................................(0x0000005e)➞
				Uncode........................................(0x0000005f)➞
			Organization......................................(0x00000060)➞
				Uncle Bob.....................................(0x00000061)➞
				Formatting....................................(0x00000062)➞
				Naming........................................(0x00000063)➞
					Cases.....................................(0x00000064)➞
					Getter Setter.............................(0x00000065)➞
					Hungarian Notation........................(0x00000066)➞
				Structuring...................................(0x00000067)➞
					Flat Structure............................(0x00000068)➞
					Modularized Structure.....................(0x00000069)➞
					Kenneth Reitz Structure...................(0x0000006a)➞
					Core Java.................................(0x0000006b)➞
					Canonical Project Structure...............(0x0000006c)➞
					By File Type..............................(0x0000006d)➞
					Feature Sliced Design.....................(0x0000006e)➞
				Code Discovery................................(0x0000006f)➞
			Documentation.....................................(0x00000070)➞
				Specifications................................(0x00000071)➞
				Inline........................................(0x00000072)➞
				Uml...........................................(0x00000073)➞
				Conventional Commits..........................(0x00000074)➞
				Man...........................................(0x00000075)➞
				Markdown......................................(0x00000076)➞
			Testing...........................................(0x00000077)➞
				Tests As Code.................................(0x00000078)➞
				Tdd...........................................(0x00000079)➞
				Prototype.....................................(0x0000007a)➞
				Risks Mitigation..............................(0x0000007b)➞
				Cmdtest.......................................(0x0000007c)➞
				Postman.......................................(0x0000007d)➞
				Cypress.......................................(0x0000007e)➞
				Gprof.........................................(0x0000007f)➞
				Perf..........................................(0x00000080)➞
				Valgrind......................................(0x00000081)➞
				Gdb...........................................(0x00000082)➞
			Management........................................(0x00000083)➞
				Implementation................................(0x00000084)➞
				Framework.....................................(0x00000085)➞
				Most Common Code Quality Errors...............(0x00000086)➞
				Imaginary Software............................(0x00000087)➞
				Owned Code....................................(0x00000088)➞
				Fountain Dilemma..............................(0x00000089)➞
				Project.......................................(0x0000008a)➞
				Tasks.........................................(0x0000008b)➞
				Ideal Planning Space..........................(0x0000008c)➞
				Solid.........................................(0x0000008d)➞
					Srp.......................................(0x0000008e)➞
					Ocp.......................................(0x0000008f)➞
					Lsp.......................................(0x00000090)➞
					Isp.......................................(0x00000091)➞
					Dip.......................................(0x00000092)➞
				Software Development Life Cycle...............(0x00000093)➞
					Waterfall.................................(0x00000094)➞
					Ssadm.....................................(0x00000095)➞
					V.........................................(0x00000096)➞
					Rad.......................................(0x00000097)➞
				Development...................................(0x00000098)➞
					Agile Development.........................(0x00000099)➞
					Extreme Programming.......................(0x0000009a)➞
					Scrum.....................................(0x0000009b)➞
				Pair Programming..............................(0x0000009c)➞
				Pert..........................................(0x0000009d)➞
				Refactoring...................................(0x0000009e)➞
				Backlog Grooming..............................(0x0000009f)➞
				Licenses......................................(0x000000a0)➞
					Licensing.................................(0x000000a1)➞
					Copyright.................................(0x000000a2)➞
					Proprietary...............................(0x000000a3)➞
					Public Domain.............................(0x000000a4)➞
					Permissive................................(0x000000a5)➞
						Bsd...................................(0x000000a6)➞
						Mit...................................(0x000000a7)➞
						Apache2...............................(0x000000a8)➞
					Copyleft..................................(0x000000a9)➞
						Gpl...................................(0x000000aa)➞
							Gplv2.............................(0x000000ab)➞
							Gplv3.............................(0x000000ac)➞
						Agplv3................................(0x000000ad)➞
					Modifiers.................................(0x000000ae)➞
				Version Controll..............................(0x000000af)➞
			Languages.........................................(0x000000b0)➞
				Turing Tarpit.................................(0x000000b1)➞
				Typing........................................(0x000000b2)➞
				Paradigms.....................................(0x000000b3)➞
					Oop.......................................(0x000000b4)➞
				Whitespace....................................(0x000000b5)➞
				Healthy Stack Of Development Tools............(0x000000b6)➞
				Esolang.......................................(0x000000b7)➞
				Memelang......................................(0x000000b8)➞
			Patterns..........................................(0x000000b9)➞
				Gigo..........................................(0x000000ba)➞
				Control.......................................(0x000000bb)➞
				For Loop......................................(0x000000bc)➞
				Zahns Construct...............................(0x000000bd)➞
				Lambdas.......................................(0x000000be)➞
				Error Handling................................(0x000000bf)➞
				Monad.........................................(0x000000c0)➞
				Design........................................(0x000000c1)➞
				Regex.........................................(0x000000c2)➞
				Singleton.....................................(0x000000c3)➞
				Access........................................(0x000000c4)➞
				Aggregation...................................(0x000000c5)➞
					Composition...............................(0x000000c6)➞
						Inheritance...........................(0x000000c7)➞
					Dependency Injection......................(0x000000c8)➞
				Strategy......................................(0x000000c9)➞
				Mock..........................................(0x000000ca)➞
				Facade........................................(0x000000cb)➞
				Proxy.........................................(0x000000cc)➞
					Decorator.................................(0x000000cd)➞
				Template......................................(0x000000ce)➞
				Adapter.......................................(0x000000cf)➞
				Observer......................................(0x000000d0)➞
				Command.......................................(0x000000d1)➞
				Migration.....................................(0x000000d2)➞
				Factory.......................................(0x000000d3)➞
				Visitor.......................................(0x000000d4)➞
				Builder.......................................(0x000000d5)➞
				Inversion Of Control..........................(0x000000d6)➞
				Inhonourable Mentions.........................(0x000000d7)➞
					Bridge....................................(0x000000d8)➞
					Monostate.................................(0x000000d9)➞
					State.....................................(0x000000da)➞
					Composite.................................(0x000000db)➞
				Performance...................................(0x000000dc)➞
				Compounds.....................................(0x000000dd)➞
				Mvc...........................................(0x000000de)➞
			Data Structures...................................(0x000000df)➞
				Array.........................................(0x000000e0)➞
				Terminated Array..............................(0x000000e1)➞
				Parallel Arrays...............................(0x000000e2)➞
				Vector........................................(0x000000e3)➞
				Stack.........................................(0x000000e4)➞
				Object........................................(0x000000e5)➞
				Linked List...................................(0x000000e6)➞
					Forward...................................(0x000000e7)➞
					Doubly....................................(0x000000e8)➞
					Chunk List................................(0x000000e9)➞
					Tree......................................(0x000000ea)➞
				Hash Table....................................(0x000000eb)➞
			Algorithms........................................(0x000000ec)➞
				Flow Charts...................................(0x000000ed)➞
				Computability.................................(0x000000ee)➞
				Complexity....................................(0x000000ef)➞
				Swap..........................................(0x000000f0)➞
				Data Structure Based..........................(0x000000f1)➞
					Summary...................................(0x000000f2)➞
					Selection.................................(0x000000f3)➞
					Counting..................................(0x000000f4)➞
					Minmax Selection..........................(0x000000f5)➞
					Descision.................................(0x000000f6)➞
					Intersection..............................(0x000000f7)➞
					Union.....................................(0x000000f8)➞
					Merge.....................................(0x000000f9)➞
					Search....................................(0x000000fa)➞
						Linear................................(0x000000fb)➞
						Sentinel..............................(0x000000fc)➞
						Jump..................................(0x000000fd)➞
						Binary................................(0x000000fe)➞
						Graph.................................(0x000000ff)➞
							Random............................(0x00000100)➞
							Dfs...............................(0x00000101)➞
							Bfs...............................(0x00000102)➞
					Sorting...................................(0x00000103)➞
						Bubble................................(0x00000104)➞
						Cocktail..............................(0x00000105)➞
						Insertion.............................(0x00000106)➞
						Selection.............................(0x00000107)➞
						Quick.................................(0x00000108)➞
						Merge.................................(0x00000109)➞
						Shell.................................(0x0000010a)➞
						Sleep.................................(0x0000010b)➞
				Combinatoric..................................(0x0000010c)➞
					Permutation...............................(0x0000010d)➞
				Compression...................................(0x0000010e)➞
					Lossless..................................(0x0000010f)➞
						Huffman Algorithm.....................(0x00000110)➞
					Entropy...................................(0x00000111)➞
				Raster........................................(0x00000112)➞
					Line......................................(0x00000113)➞
						Dda...................................(0x00000114)➞
						Midpoint..............................(0x00000115)➞
					Circle....................................(0x00000116)➞
				Levenshtein...................................(0x00000117)➞
			Cryptography......................................(0x00000118)➞
				Classical Cryptography........................(0x00000119)➞
					Statistical Decryption....................(0x0000011a)➞
					Monoalphabetic Systems....................(0x0000011b)➞
						Casear................................(0x0000011c)➞
						Polybios..............................(0x0000011d)➞
					Polyalphabetic Systems....................(0x0000011e)➞
				Modern Cryptography...........................(0x0000011f)➞
					Brief Case Metaphore......................(0x00000120)➞
					Symmetric.................................(0x00000121)➞
						Des...................................(0x00000122)➞
						Aes...................................(0x00000123)➞
					Public Key................................(0x00000124)➞
						Knapsack..............................(0x00000125)➞
						Rsa...................................(0x00000126)➞
					Signing...................................(0x00000127)➞
						Timestamping..........................(0x00000128)➞
					Web Of Trust..............................(0x00000129)➞
					Programs..................................(0x0000012a)➞
			Databases.........................................(0x0000012b)➞
				Dependency....................................(0x0000012c)➞
				Key...........................................(0x0000012d)➞
				Normal Forms..................................(0x0000012e)➞
				Object Diagramm...............................(0x0000012f)➞
			Electricity.......................................(0x00000130)➞
				Current Flow In A Cable.......................(0x00000131)➞
				Semmiconductor Devices........................(0x00000132)➞
				Coulomb.......................................(0x00000133)➞
				Voltage.......................................(0x00000134)➞
				Current.......................................(0x00000135)➞
				Ohm...........................................(0x00000136)➞
				Joule.........................................(0x00000137)➞
				Watt..........................................(0x00000138)➞
				Transformer...................................(0x00000139)➞
				Currents......................................(0x0000013a)➞
				Semiconductor.................................(0x0000013b)➞
				Diode.........................................(0x0000013c)➞
				Transistor....................................(0x0000013d)➞
					Unipolar..................................(0x0000013e)➞
					Bipolar...................................(0x0000013f)➞
			Hardware..........................................(0x00000140)➞
				Logic Gates...................................(0x00000141)➞
				Circuits......................................(0x00000142)➞
					Voting Machine............................(0x00000143)➞
					Half Adder................................(0x00000144)➞
					Adder.....................................(0x00000145)➞
					Single Bit Artimetric Unit................(0x00000146)➞
					Flip Flops................................(0x00000147)➞
						Set Reset Flip Flop...................(0x00000148)➞
						D Flip Flop...........................(0x00000149)➞
				Dangers.......................................(0x0000014a)➞
				Computer Components...........................(0x0000014b)➞
					Parts.....................................(0x0000014c)➞
					Psu.......................................(0x0000014d)➞
					Motherboards..............................(0x0000014e)➞
					Cpu.......................................(0x0000014f)➞
						Instruction Sets......................(0x00000150)➞
						Branch Prediction.....................(0x00000151)➞
						Multi Core............................(0x00000152)➞
					Pipeline Execution........................(0x00000153)➞
					Memory....................................(0x00000154)➞
						Memory Hierarchy......................(0x00000155)➞
						Types By Technology...................(0x00000156)➞
							Ssd...............................(0x00000157)➞
								Rom...........................(0x00000158)➞
								Prom..........................(0x00000159)➞
								Eprom.........................(0x0000015a)➞
								Eeprom........................(0x0000015b)➞
									Flash.....................(0x0000015c)➞
							Disc..............................(0x0000015d)➞
								Hdd...........................(0x0000015e)➞
								Ram...........................(0x0000015f)➞
							Types By Usage....................(0x00000160)➞
								Cache.........................(0x00000161)➞
							Smart.............................(0x00000162)➞
							Raid..............................(0x00000163)➞
					Expension Cards...........................(0x00000164)➞
						Gpu...................................(0x00000165)➞
						Ram...................................(0x00000166)➞
						Sound Card............................(0x00000167)➞
						Network Interface Card................(0x00000168)➞
						Tv Tuner Card.........................(0x00000169)➞
						Capture Card..........................(0x0000016a)➞
						Riser.................................(0x0000016b)➞
					Cooling...................................(0x0000016c)➞
					Accessories...............................(0x0000016d)➞
						Keyboards.............................(0x0000016e)➞
					Ports.....................................(0x0000016f)➞
						Power.................................(0x00000170)➞
							P1................................(0x00000171)➞
							Aux...............................(0x00000172)➞
							Molex.............................(0x00000173)➞
						Data..................................(0x00000174)➞
							Gpio..............................(0x00000175)➞
							Serial............................(0x00000176)➞
							Paralel...........................(0x00000177)➞
							S Video...........................(0x00000178)➞
							Vga...............................(0x00000179)➞
							Dvi...............................(0x0000017a)➞
							Hdmi..............................(0x0000017b)➞
							Modem.............................(0x0000017c)➞
							Ethernet..........................(0x0000017d)➞
							Usb...............................(0x0000017e)➞
							Esata.............................(0x0000017f)➞
							Ps2...............................(0x00000180)➞
							Sata..............................(0x00000181)➞
							Ide...............................(0x00000182)➞
					Computer Models...........................(0x00000183)➞
					Serial Port...............................(0x00000184)➞
					Settings..................................(0x00000185)➞
					Overclocking..............................(0x00000186)➞
					Boot Process..............................(0x00000187)➞
					Networking Hardware.......................(0x00000188)➞
					Casio Classwiz Fx85ce X...................(0x00000189)➞
			Filesystems.......................................(0x0000018a)➞
					Partitions................................(0x0000018b)➞
				Fat...........................................(0x0000018c)➞
				Ntfs..........................................(0x0000018d)➞
				Ext...........................................(0x0000018e)➞
			Filetypes.........................................(0x0000018f)➞
					Extensions................................(0x00000190)➞
					Mimetype..................................(0x00000191)➞
				Binary........................................(0x00000192)➞
					Executable................................(0x00000193)➞
				Plain Text....................................(0x00000194)➞
					Value.....................................(0x00000195)➞
					List......................................(0x00000196)➞
					Csv.......................................(0x00000197)➞
					Cfg.......................................(0x00000198)➞
					Ini.......................................(0x00000199)➞
					Json......................................(0x0000019a)➞
				Extention Refrence Table......................(0x0000019b)➞
				Metadata......................................(0x0000019c)➞
					Id3.......................................(0x0000019d)➞
					Exif......................................(0x0000019e)➞
				Audio.........................................(0x0000019f)➞
					Mp3.......................................(0x000001a0)➞
				Image.........................................(0x000001a1)➞
					Bmp.......................................(0x000001a2)➞
					Gif.......................................(0x000001a3)➞
					Png.......................................(0x000001a4)➞
					Jpeg......................................(0x000001a5)➞
			Assembly..........................................(0x000001a6)➞
				Memory........................................(0x000001a7)➞
				Stack.........................................(0x000001a8)➞
				Heap..........................................(0x000001a9)➞
				Memory Usage..................................(0x000001aa)➞
				Registers.....................................(0x000001ab)➞
				Extensions....................................(0x000001ac)➞
				Commenting....................................(0x000001ad)➞
				Segmentation..................................(0x000001ae)➞
				Labels........................................(0x000001af)➞
				Language Statements...........................(0x000001b0)➞
					Notations.................................(0x000001b1)➞
					Instructions..............................(0x000001b2)➞
				Programs......................................(0x000001b3)➞
			Ada...............................................(0x000001b4)➞
			C Language Family.................................(0x000001b5)➞
				Files.........................................(0x000001b6)➞
				C.............................................(0x000001b7)➞
					Programs..................................(0x000001b8)➞
					Commenting................................(0x000001b9)➞
					Semicolons................................(0x000001ba)➞
					Literals..................................(0x000001bb)➞
							Escape Sequences..................(0x000001bc)➞
					Variables.................................(0x000001bd)➞
					Casting...................................(0x000001be)➞
					Pointers..................................(0x000001bf)➞
					Compiling.................................(0x000001c0)➞
						Jumbo Builds..........................(0x000001c1)➞
					Preprocessor..............................(0x000001c2)➞
					Object Files..............................(0x000001c3)➞
					Linker....................................(0x000001c4)➞
					Operators.................................(0x000001c5)➞
					Logic.....................................(0x000001c6)➞
					Loops.....................................(0x000001c7)➞
					Data Groups And Objects...................(0x000001c8)➞
					Functions.................................(0x000001c9)➞
					Goto......................................(0x000001ca)➞
					Misc Keywords.............................(0x000001cb)➞
					Digraph Characters........................(0x000001cc)➞
					Trigraph Characters.......................(0x000001cd)➞
					C Stl.....................................(0x000001ce)➞
					Unix Std..................................(0x000001cf)➞
					3th Party C Libs..........................(0x000001d0)➞
						Gnu Readline..........................(0x000001d1)➞
						Ncurses...............................(0x000001d2)➞
					C And Cpp Code Generators.................(0x000001d3)➞
						Flex..................................(0x000001d4)➞
						Bison.................................(0x000001d5)➞
						Re2c..................................(0x000001d6)➞
				C++...........................................(0x000001d7)➞
					Casting...................................(0x000001d8)➞
					References................................(0x000001d9)➞
					Loops.....................................(0x000001da)➞
					Data Groups And Objects...................(0x000001db)➞
					Lambdas...................................(0x000001dc)➞
					Functors..................................(0x000001dd)➞
					Templates.................................(0x000001de)➞
					Value Types...............................(0x000001df)➞
					Exception Handling........................(0x000001e0)➞
					Namespaces................................(0x000001e1)➞
					Misc Keywords.............................(0x000001e2)➞
					C++ Stl...................................(0x000001e3)➞
					3th Party C++ Libs........................(0x000001e4)➞
						Boost.................................(0x000001e5)➞
						Sdl2..................................(0x000001e6)➞
							Initialization....................(0x000001e7)➞
							Window Related Stuff..............(0x000001e8)➞
							Raylib............................(0x000001e9)➞
							Rapidcsv..........................(0x000001ea)➞
							Turbovision.......................(0x000001eb)➞
					Snippets..................................(0x000001ec)➞
						String................................(0x000001ed)➞
						Strtok................................(0x000001ee)➞
						Nested Strtok With Strtok R...........(0x000001ef)➞
						Get Tty Size..........................(0x000001f0)➞
				Arduino.......................................(0x000001f1)➞
					Files.....................................(0x000001f2)➞
					Arduino...................................(0x000001f3)➞
					Sketches..................................(0x000001f4)➞
					Variables.................................(0x000001f5)➞
					Functions.................................(0x000001f6)➞
					Interupts.................................(0x000001f7)➞
					Standard Libary...........................(0x000001f8)➞
				Holy C........................................(0x000001f9)➞
					Programs..................................(0x000001fa)➞
					Types.....................................(0x000001fb)➞
					Preprocessor..............................(0x000001fc)➞
					Functions.................................(0x000001fd)➞
					Operators.................................(0x000001fe)➞
					Logic.....................................(0x000001ff)➞
					Lock......................................(0x00000200)➞
					Std.......................................(0x00000201)➞
				C Sharp.......................................(0x00000202)➞
					Programs..................................(0x00000203)➞
					Files.....................................(0x00000204)➞
					C Compateble Features.....................(0x00000205)➞
					Commenting................................(0x00000206)➞
					Variables.................................(0x00000207)➞
					Preprocessor..............................(0x00000208)➞
					C Sharp Std...............................(0x00000209)➞
			Smalltalk.........................................(0x0000020a)➞
				Programs......................................(0x0000020b)➞
				Cpp Compateble Features.......................(0x0000020c)➞
				Primitives....................................(0x0000020d)➞
				Projects......................................(0x0000020e)➞
				Files.........................................(0x0000020f)➞
				Classes.......................................(0x00000210)➞
					Records...................................(0x00000211)➞
					Nesting...................................(0x00000212)➞
				Packages......................................(0x00000213)➞
				Exceptions....................................(0x00000214)➞
				Try Resource..................................(0x00000215)➞
				Annotations...................................(0x00000216)➞
				Objects.......................................(0x00000217)➞
				Kotlin........................................(0x00000218)➞
			Tcl...............................................(0x00000219)➞
				Programs......................................(0x0000021a)➞
				Syntax........................................(0x0000021b)➞
				Return Codes..................................(0x0000021c)➞
				Builtins......................................(0x0000021d)➞
					Variables.................................(0x0000021e)➞
					Functions.................................(0x0000021f)➞
						Io....................................(0x00000220)➞
						Math..................................(0x00000221)➞
						Variables.............................(0x00000222)➞
						Control...............................(0x00000223)➞
						Strings...............................(0x00000224)➞
						Lists.................................(0x00000225)➞
						Dictionary............................(0x00000226)➞
					Tk........................................(0x00000227)➞
						Widgets...............................(0x00000228)➞
						Popups................................(0x00000229)➞
			Python............................................(0x0000022a)➞
					Python-programs...........................(0x0000022b)➞
				Python-language...............................(0x0000022c)➞
					Files.....................................(0x0000022d)➞
					Commenting................................(0x0000022e)➞
					Importig..................................(0x0000022f)➞
					Operators.................................(0x00000230)➞
					Logic.....................................(0x00000231)➞
					Loops.....................................(0x00000232)➞
					Variables.................................(0x00000233)➞
					Comprehensions............................(0x00000234)➞
					Functions.................................(0x00000235)➞
					Type Members..............................(0x00000236)➞
					Builtin Functions.........................(0x00000237)➞
					Classes...................................(0x00000238)➞
					Exceptions................................(0x00000239)➞
					Misc Keywords.............................(0x0000023a)➞
				Python Std Modules............................(0x0000023b)➞
					Argparse..................................(0x0000023c)➞
					Ctypes....................................(0x0000023d)➞
					Dir.......................................(0x0000023e)➞
					Numpy.....................................(0x0000023f)➞
					Matplotlib................................(0x00000240)➞
					Os........................................(0x00000241)➞
					Pdb.......................................(0x00000242)➞
					Time......................................(0x00000243)➞
					Timeit....................................(0x00000244)➞
					Math......................................(0x00000245)➞
					Sys.......................................(0x00000246)➞
					Getpass...................................(0x00000247)➞
					Random....................................(0x00000248)➞
					Regex.....................................(0x00000249)➞
					Socket....................................(0x0000024a)➞
					Requests..................................(0x0000024b)➞
					Hashlib...................................(0x0000024c)➞
				Tkinter.......................................(0x0000024d)➞
				Python 3th Party Modules......................(0x0000024e)➞
					Pyautogui.................................(0x0000024f)➞
					Pillow....................................(0x00000250)➞
					Python Scrapping..........................(0x00000251)➞
						Beautiful Soup........................(0x00000252)➞
						Selenium..............................(0x00000253)➞
					Python Machine Learning...................(0x00000254)➞
						Transformers..........................(0x00000255)➞
						Petals................................(0x00000256)➞
			Prolog............................................(0x00000257)➞
			Haskell...........................................(0x00000258)➞
				Programs......................................(0x00000259)➞
				Commenting....................................(0x0000025a)➞
				Operators.....................................(0x0000025b)➞
				Functions.....................................(0x0000025c)➞
				Conditionals..................................(0x0000025d)➞
				Types.........................................(0x0000025e)➞
				Lists.........................................(0x0000025f)➞
				Importing.....................................(0x00000260)➞
				Standard Library..............................(0x00000261)➞
			Networking........................................(0x00000262)➞
				Size..........................................(0x00000263)➞
				Hierarchy.....................................(0x00000264)➞
				Transmission..................................(0x00000265)➞
				Topology......................................(0x00000266)➞
					Mesh......................................(0x00000267)➞
					Bus.......................................(0x00000268)➞
					Ring......................................(0x00000269)➞
					Star......................................(0x0000026a)➞
					Hybrid....................................(0x0000026b)➞
				Networking Hardware...........................(0x0000026c)➞
					Repeater..................................(0x0000026d)➞
					Hub.......................................(0x0000026e)➞
					Bridge....................................(0x0000026f)➞
					Switch....................................(0x00000270)➞
					Router....................................(0x00000271)➞
					Multilayer Switches.......................(0x00000272)➞
				Networking Models.............................(0x00000273)➞
					Osi.......................................(0x00000274)➞
					Ips.......................................(0x00000275)➞
				Networking Protocols..........................(0x00000276)➞
					Arp.......................................(0x00000277)➞
						Mac Address...........................(0x00000278)➞
				Network Applications..........................(0x00000279)➞
					Http......................................(0x0000027a)➞
						Response Codes........................(0x0000027b)➞
			Ux/ui.............................................(0x0000027c)➞
				Cli...........................................(0x0000027d)➞
				Sloppy Focus..................................(0x0000027e)➞
				Window........................................(0x0000027f)➞
				Cursor........................................(0x00000280)➞
				Switch........................................(0x00000281)➞
				Dropdown......................................(0x00000282)➞
				Snipper.......................................(0x00000283)➞
				Slider........................................(0x00000284)➞
				Canvas........................................(0x00000285)➞
				Miller Collumns...............................(0x00000286)➞
				Popup.........................................(0x00000287)➞
				Minimap.......................................(0x00000288)➞
				Layout Engines................................(0x00000289)➞
			Html..............................................(0x0000028a)➞
				Doctype.......................................(0x0000028b)➞
				Comments......................................(0x0000028c)➞
				Chars.........................................(0x0000028d)➞
				Elements......................................(0x0000028e)➞
				Text..........................................(0x0000028f)➞
				Attribute.....................................(0x00000290)➞
				Layout........................................(0x00000291)➞
					Metadata..................................(0x00000292)➞
					Inline....................................(0x00000293)➞
				Parts.........................................(0x00000294)➞
					Html......................................(0x00000295)➞
					Head......................................(0x00000296)➞
					Body......................................(0x00000297)➞
				Types.........................................(0x00000298)➞
					Legend....................................(0x00000299)➞
					Head......................................(0x0000029a)➞
					Body......................................(0x0000029b)➞
						Text Style............................(0x0000029c)➞
						Text Placement........................(0x0000029d)➞
						Media.................................(0x0000029e)➞
						Forms.................................(0x0000029f)➞
					List By Layout............................(0x000002a0)➞
			Css...............................................(0x000002a1)➞
				Comments......................................(0x000002a2)➞
				Rules.........................................(0x000002a3)➞
				Values........................................(0x000002a4)➞
					Size......................................(0x000002a5)➞
					Pos.......................................(0x000002a6)➞
					Angle.....................................(0x000002a7)➞
					Color.....................................(0x000002a8)➞
					List Style Type...........................(0x000002a9)➞
				Variables.....................................(0x000002aa)➞
				Css Complementary.............................(0x000002ab)➞
					Background................................(0x000002ac)➞
					Text......................................(0x000002ad)➞
						Fonts.................................(0x000002ae)➞
						Writing Mode..........................(0x000002af)➞
					Size......................................(0x000002b0)➞
					Box Modell................................(0x000002b1)➞
						Padding...............................(0x000002b2)➞
						Border................................(0x000002b3)➞
						Margin................................(0x000002b4)➞
					Overflow..................................(0x000002b5)➞
					Position..................................(0x000002b6)➞
					Stacking..................................(0x000002b7)➞
					Layout....................................(0x000002b8)➞
						None..................................(0x000002b9)➞
						Inline Block..........................(0x000002ba)➞
						Float.................................(0x000002bb)➞
						Flex..................................(0x000002bc)➞
							Direction.........................(0x000002bd)➞
							Grow..............................(0x000002be)➞
							Shrink............................(0x000002bf)➞
							Basis.............................(0x000002c0)➞
							Justifying........................(0x000002c1)➞
							Alignment.........................(0x000002c2)➞
						Grid..................................(0x000002c3)➞
					Lists.....................................(0x000002c4)➞
				Functions.....................................(0x000002c5)➞
				Hacks.........................................(0x000002c6)➞
					Width Dependent Height....................(0x000002c7)➞
			Xml...............................................(0x000002c8)➞
			Xpath.............................................(0x000002c9)➞
			Latex.............................................(0x000002ca)➞
			M4................................................(0x000002cb)➞
			Php...............................................(0x000002cc)➞
				Commenting....................................(0x000002cd)➞
				Variables.....................................(0x000002ce)➞
				Logic.........................................(0x000002cf)➞
				Loops.........................................(0x000002d0)➞
				Operators.....................................(0x000002d1)➞
				Inclusion.....................................(0x000002d2)➞
				Builtins......................................(0x000002d3)➞
				Laravel.......................................(0x000002d4)➞
			Js................................................(0x000002d5)➞
				Files.........................................(0x000002d6)➞
				Commenting....................................(0x000002d7)➞
				Variables.....................................(0x000002d8)➞
				Operators.....................................(0x000002d9)➞
				Logic.........................................(0x000002da)➞
				Loops.........................................(0x000002db)➞
				Functions.....................................(0x000002dc)➞
				Variable Members..............................(0x000002dd)➞
				Builtin Functions.............................(0x000002de)➞
				Globals.......................................(0x000002df)➞
				Objects.......................................(0x000002e0)➞
				Async.........................................(0x000002e1)➞
				Events........................................(0x000002e2)➞
				Misc Keywords.................................(0x000002e3)➞
			Sql...............................................(0x000002e4)➞
					Example Data..............................(0x000002e5)➞
				Programs......................................(0x000002e6)➞
					Sqlite....................................(0x000002e7)➞
					Postgresql................................(0x000002e8)➞
					Mysql.....................................(0x000002e9)➞
					Other Implementations.....................(0x000002ea)➞
				Files.........................................(0x000002eb)➞
				Comments......................................(0x000002ec)➞
				Semicolons....................................(0x000002ed)➞
				Typenames.....................................(0x000002ee)➞
				Operators.....................................(0x000002ef)➞
				Data Definition Language......................(0x000002f0)➞
				Data Manipulation Language....................(0x000002f1)➞
				Data Query Language...........................(0x000002f2)➞
				Data Control Language.........................(0x000002f3)➞
				Transaction Contol Language...................(0x000002f4)➞
				Functions.....................................(0x000002f5)➞
				Complex Examples..............................(0x000002f6)➞
			Nosql.............................................(0x000002f7)➞
			Operating Systems.................................(0x000002f8)➞
			Ios...............................................(0x000002f9)➞
			Routeros..........................................(0x000002fa)➞
			Linux.............................................(0x000002fb)➞
				Help..........................................(0x000002fc)➞
				File System...................................(0x000002fd)➞
					Disk Management...........................(0x000002fe)➞
				Boot..........................................(0x000002ff)➞
				Shutting Down.................................(0x00000300)➞
				Logging.......................................(0x00000301)➞
				System Time...................................(0x00000302)➞
				Kernel........................................(0x00000303)➞
				Permission....................................(0x00000304)➞
					System....................................(0x00000305)➞
					Users.....................................(0x00000306)➞
						Query.................................(0x00000307)➞
						Modify................................(0x00000308)➞
					Groups....................................(0x00000309)➞
					Files.....................................(0x0000030a)➞
				Manuvering....................................(0x0000030b)➞
				File Managing.................................(0x0000030c)➞
						Text Files............................(0x0000030d)➞
				Processes.....................................(0x0000030e)➞
					Signals...................................(0x0000030f)➞
				Jobs..........................................(0x00000310)➞
				Networking....................................(0x00000311)➞
					Config Files..............................(0x00000312)➞
					Routing Subsystem.........................(0x00000313)➞
					Programs..................................(0x00000314)➞
						Iptables..............................(0x00000315)➞
				Devices.......................................(0x00000316)➞
					Distributions.............................(0x00000317)➞
						Debian................................(0x00000318)➞
						Ubuntu................................(0x00000319)➞
						Kali..................................(0x0000031a)➞
						Arch..................................(0x0000031b)➞
						Gentoo................................(0x0000031c)➞
				Init System...................................(0x0000031d)➞
					Emulators.................................(0x0000031e)➞
					Multiplexers..............................(0x0000031f)➞
				Pkg Manager...................................(0x00000320)➞
					Apt.......................................(0x00000321)➞
					Pacman....................................(0x00000322)➞
					Portage...................................(0x00000323)➞
			Bash..............................................(0x00000324)➞
				Files.........................................(0x00000325)➞
				Builtins......................................(0x00000326)➞
				Globs.........................................(0x00000327)➞
				Directory Stack...............................(0x00000328)➞
				Scripting.....................................(0x00000329)➞
					Comments..................................(0x0000032a)➞
					Variables.................................(0x0000032b)➞
						Default...............................(0x0000032c)➞
					Execution.................................(0x0000032d)➞
					Operators.................................(0x0000032e)➞
					Logic.....................................(0x0000032f)➞
					Loops.....................................(0x00000330)➞
					Functions.................................(0x00000331)➞
				Commenting....................................(0x00000332)➞
				Rules.........................................(0x00000333)➞
				Variables.....................................(0x00000334)➞
				Logic.........................................(0x00000335)➞
				Functions.....................................(0x00000336)➞
				Directives....................................(0x00000337)➞
				Operators.....................................(0x00000338)➞
				Globs.........................................(0x00000339)➞
			Programs..........................................(0x0000033a)➞
				Manuvering....................................(0x0000033b)➞
				Binary........................................(0x0000033c)➞
				Text..........................................(0x0000033d)➞
					Vim.......................................(0x0000033e)➞
				Tui...........................................(0x0000033f)➞
				Image.........................................(0x00000340)➞
				Video.........................................(0x00000341)➞
				Filesystem Management.........................(0x00000342)➞
				Processes.....................................(0x00000343)➞
				Virtualization................................(0x00000344)➞
				Networking....................................(0x00000345)➞
					Netcat....................................(0x00000346)➞
				Git...........................................(0x00000347)➞
					Peru......................................(0x00000348)➞
					Tor.......................................(0x00000349)➞
						Yt-dlp................................(0x0000034a)➞
						Bittorrenting.........................(0x0000034b)➞
						Httpie................................(0x0000034c)➞
						Ftp...................................(0x0000034d)➞
						Ssh...................................(0x0000034e)➞
					Firefox...................................(0x0000034f)➞
			Termdev...........................................(0x00000350)➞
				Vt100.........................................(0x00000351)➞
				Vt320.........................................(0x00000352)➞
			Webdev............................................(0x00000353)➞
				Captcha.......................................(0x00000354)➞
				Classical Web Workstack.......................(0x00000355)➞
				Cors..........................................(0x00000356)➞
				Brython.......................................(0x00000357)➞
				Cgi...........................................(0x00000358)➞
			Gamedev...........................................(0x00000359)➞
				Models........................................(0x0000035a)➞
				Rendering.....................................(0x0000035b)➞
			Useful Sites......................................(0x0000035c)➞
			Machine Learning..................................(0x0000035d)➞
				Neurons.......................................(0x0000035e)➞
					Perceptron................................(0x0000035f)➞
					Logical Neuron............................(0x00000360)➞
				Neural Networks...............................(0x00000361)➞
					Architecture..............................(0x00000362)➞
						Layers................................(0x00000363)➞
						Network Of Perceptron Neurons.........(0x00000364)➞
							Xor Problem.......................(0x00000365)➞
				Training......................................(0x00000366)➞
					Supervision...............................(0x00000367)➞
					Learning Rate.............................(0x00000368)➞
					Weight Updating...........................(0x00000369)➞
				Dataset.......................................(0x0000036a)➞
					Pca.......................................(0x0000036b)➞
					Batching..................................(0x0000036c)➞
					Tokenization..............................(0x0000036d)➞
						Natural Language......................(0x0000036e)➞
			Miscellaneous.....................................(0x0000036f)➞

// #placeholder<index> END

//		METADATA: //(0x00000002)➞*/
			.............................
			|      KEY     |   VALUE    |
			:...........................:
			# Author:              Anon #
			# Creation:        ~2019.10 #
			# Encoding:           UTF-8 #
			# Line ending:         Unix #
			# Tabsize:                4 #
			# Syntax:               cdd #
			# Version:          2024.11 #
			#...........................#

//		LEGEND: //(0x00000003)➞*/
			  ...   : replace with anything (do not take it literally)
			 <...>	: supplement; <...> being some specification or ...	// in the process to be replaced with <>s
			 		   shall be expanded (as a variable)
			 [...]  : ... is optional/not mandatory
			{<...>}	: <...> is an example, or syntax which by design has to be multiline
			[<...-1>|<...-2>] : <...-1> or <...-2> is mandatory; all such options are list-ed
			//		: comment / authors note
			>these bracket syntaxes can and will be nested
			>there's a chance that the brackets are part of the syntax tho,
			  so be cautious; look for examples
			>a ĐĐnodeĐĐ is a block of text related to a single thing
			>a ĐĐchildnodeĐĐ is a node explaining a subpart of another node,
			  called its ĐĐparentnodeĐĐ
			>ĐchildnodesĐ always have more indentation than their ĐparentnodesĐ
			><...>	: a simple ĐnodeĐ; only explains cannot be a ĐparentnodeĐ
			 <...>:	: a ĐĐtitleĐĐ; grandiose logical group
			           which ought to have childnodes;
			           titles shall conform with C label syntax
			-<...>:	: a ĐnodeĐ; has/likely going to have
			           childnodes, but ain't grandiose
			           enough to be a title
			¤<...>	: a ĐnodeĐ for some logical group which has
					   child nodes, but isn't information
					   in itself; NOTE how it doesnt have
					   a ':' after it { ¤types }
			XXX:	: a ĐnodeĐ which is there to list dependencies,
                       { such as a program relying on a daemon;
                         or required knowledge to understand a chapter;
                         not libraries};
                       can have childnodes
			ĐĐ...ĐĐ	: bold text; if used inside a node then it marks that
					   that node provides the definition for the bold term;
					   concept-s defined such a way are simple and short,
					   therefor judged to not deserve mentioning in the legend;
					   otherwise its may be used freely, but preferably to
					   stress import-ant segments
			Đ...Đ	: italic text; marks not obvious concept-s defined nearby;
					   practically a notice to the reader saying: "hey, do be\
					   intimidated, you either missed a part ABOVE or further\
					   explanation is soon to follow"
			YYY:	: "see also"; marks related sources;
					    NOTE: can be extern { manual pages; websites },
						       locals sources can be recognized from
							   the quoted path pattern
			?!		: return mark; something around this mark 
					   should be further researched, rewritten
					   or otherwise fixed
.			### [...] ### : signals a guide/tutorial;
							 most likely repeats information,
							 however organized in a practically
							 useful manner
			<...>^[country_code]	: signals the language of [...];
									   similar how the base of numbers
									   are written after them,
									   in lower index;
                                       except the upper index '^' is
                                       easier to type and is larger
                                       under most fonts
					HU	: Hungarian
			NOTE	: a piece of information that is not formally required
					   to state as it is not directly related to the topic,
					   or could be directly concluded from previously stated
					   information, however it is judged to be important to
					   stress or further clarify; can be inline with text or
					   behave as an independent node
			>"random" braces, and quote marks are scattered 
			  around the document to avoid vim syntax error marks
			>"random" dots are sometimes included at the beginning
			  of lines to avoid the following to be recognized as
			  a label (and therefor be highlighted)
			>some words conjucted forms are occasionally written
			  with a hyphen to get syntax highlighting
			-some words are short-ened to get syntax highlighting,
			  and or for convenience/space preservation e.g.:
			  	-variable type names
                    character		 -> char
				>evaluate/evaluation -> eval
				>variable			 -> var
				>external			 -> extern
			See_directives:
				see <location>	: signals there is something 
								   related to the current subject
								   located somewhere else, such as
								   explanations or causations
				<location>:
					ABOVE		: inside the same paragraph,
							   	   ĐsomewhereĐ above the current text
					BELOW		: inside the same paragraph,
								   ĐsomewhereĐ under the current text
					AT <path>	: a path leading to a specific 
							       paragraph inside this file;
							       paths, follow Unix conventions,
							       therefor a preceding '/' signals
							       an absolute path, otherwise the
							       path is relative to the current
							       paragraph
			Color_coding:
				>ascii art may have coloring without any
				  deeper meaning
				>color coding may be used freely when
				  highlighting patterns
				>Purple() signals information, which when it was
				  last reviewed were considered deprecated,
				  obsolete, changed and/or broken
				  { a feature which has been removed from 
				  the latest realize or an application 
				  that no longer functions or has been 
				  functionally replaced and surpassed
				  by another }

			Highlighting:
				>Pufka uses a special syntax called "cdd",
				  its cpp grammar with many extensions to
				  specialize it in note taking
				>using vim + cdd.vim is highly advised
				>cpp highlighting is your second best bet
				  

~~~~~~~~~~~~~
.	NOTE: //(0x00000004)➞
~~~~~~~~~~~~~
	>the way to learn is NOT through coding camps
	>learn the fastest by reading books and doing ĐĐrealisticĐĐ exercises you're interested in


//	TODO: //(0x00000005)➞
		>fix return marks (duh)
		>making a C/C++ std reference without return types/values was a horrible idea
		>C++ attributes
		>remove all [x]([...])s and switch it to something more regex-y {\+, \*}
		>convert []s to <>s
		>move general container information from C++/Containers to Theory/Containers
		>SMART

// EDITORS CHEAT AREA
#define box drawing
			┌───────┐
			│       │
			│       │
			│       │
			└───────┘
			┌───────┐
			│       │
			├───────┤
			│       │
			└───────┘
			┌───┬───┐
			│   │   │
			│   │   │
			│   │   │
			└───┴───┘
			┏━━━━━━━┓
			┃       ┃
			┃       ┃
			┃       ┃
			┗━━━━━━━┛
			┏━━━━━━━┓
			┃       ┃
			┣━━━━━━━┫
			┃       ┃
			┗━━━━━━━┛
			┏━━━┳━━━┓
			┃   ┃   ┃
			┃   ┃   ┃
			┃   ┃   ┃
			┗━━━┻━━━┛
			┎───┰───┒
			┃   ┃   ┃
			┠───╂───┨
			┃   ┃   ┃
			┖───┸───┚
        ¤diagonals
            ╱
            ╲
            ╳
		¤arrows
			▲
			▶
			▼
			◀
		¤tree chars [
			│ ├ └ ─ 

			│

			├

			└

			─ 
		]
		¤tree blocks [
			│ ├── └──

			│

			├──

			└──
		]
		¤sub-/superscript
			⁰¹²³⁴⁵⁶⁷⁸⁹
			ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖ𐞥ʳˢᵗᵘᵛʷˣʸᶻ 
			⁺⁻⁼⁽⁾
			₀₁₂₃₄₅₆₇₈₉
            ₐₑₒₓₔₕₖₗₘₙₚₛₜᵢ
			₊₋₍₎

        ¤‾
        ¤∑Π√π

#define grammar: //(0x00000006)➞\
I---------------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------------\
I                                                                                             \
I          /$$$$$$                                                                            \
I         /$$__  $$                                                                           \
I        | $$  \__/  /$$$$$$  /$$$$$$  /$$$$$$/$$$$  /$$$$$$/$$$$   /$$$$$$   /$$$$$$         \
I        | $$ /$$$$ /$$__  $$|____  $$| $$_  $$_  $$| $$_  $$_  $$ |____  $$ /$$__  $$        \
I        | $$|_  $$| $$  \__/ /$$$$$$$| $$ \ $$ \ $$| $$ \ $$ \ $$  /$$$$$$$| $$  \__/        \
I        | $$  \ $$| $$      /$$__  $$| $$ | $$ | $$| $$ | $$ | $$ /$$__  $$| $$              \
I        |  $$$$$$/| $$     |  $$$$$$$| $$ | $$ | $$| $$ | $$ | $$|  $$$$$$$| $$              \
I         \______/ |__/      \_______/|__/ |__/ |__/|__/ |__/ |__/ \_______/|__/              \
I---------------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------------I
																									 
	¤tldr formal notation //₩
		a, b, c...	: terminal symbol
		A, B, C...	: non-terminal symbol
		...X, Y, Z	: symbol
		...x, y, z	: string of terminal symbols
		α, β, γ...	: string of non-terminal symbols

	Symbol: //(0x00000007)➞
		>primitive definition
		>an atomic part of text
		{ 'a'
		  'b'
		  "asd"	// NOTE: how "asd" is a single symbol, not a string of 3;
		  		//        there's nothing stopping one from defining a symbol
				//        to be composed of an arbitrary number of chars
		}
		>formally represented by upper case letters from the end of the English alphabet
		-terminality:
			>symbols, which are place holders of an arbitrary int of any other symbols,
			  following an arbitrary int of schematics are called ĐĐnon-terminanal symbolsĐĐ
			>every symbol which is not a Đnon-terminal symbolĐ is called a ĐĐterminal symbolĐĐ
			>Đterminal symbolĐs are formally represented by lower case letters
			>Đnon-terminal symbolĐs are formally represented by upper case letters
			>Đnon-terminal symbolĐs are "assigned" to a placeholder/schematic with "->" or "::=",
			  an arbitrary number values may be separated by '|'s to assign them all in the same line
			NOTE: non-terminal symbols in strings will be escaped ('\\') for readability's sake
			{ t := 'a'	  		// defines t to represent the terminal symbol 'a'
			  N -> 'b'	  		// defines N to be able to represent the terminal symbol 'b'
			  N ::= 'c' | 'd'	// defines N to be able to represent the terminal symbol 'c' or 'd'
			  N -> "ef"  		// defines N to be able to represent the string of terminal symbols "ef";
						  		//	NOTE: how its still able to represent 'b' too
			  N ::= "e\Nf" 		// defines N to be able to represent any string which starts with an 'e',
			  			  		//	has an N in the middle and ends with an 'f'
						  		//    NOTE: how it contains a non-terminal symbol; in this case
						  		//		   it so happens to itself; recursion is allowed
			  // now "ecdf" could very well be represented by N
			}
			>strings of Đterminal symbolsĐ are formally represented by lower case letters from the end of the English alphabet
			>strings of Đnon-terminal symbolsĐ are formally represented by Greek letters
			
	Alphabet: //(0x00000008)➞
		>a finite set of ĐsymbolsĐ
		operator*:
			[abc-1] * [abc-2]
			>results in a new abc where every symbol is a complex one
			{ A := {'a', 'b'}
.			  B := {'0', '1'}
			  A * b = {"a0", "a1", "b0", "b1"}
			}
		operator^
			<abc>^<int> // <abc>ⁿ
			>where n ∈ N, <abc>^n is the n times multiplication of <abc> with itself
			><abc>^0 results in ε

	Word: //(0x00000009)➞
		>any expression, made up from the ĐsymbolsĐ of an ĐabcĐ is called a ĐĐwordĐĐ
		>the ĐĐlenghtĐĐ of a ĐwordĐ is the number of ĐsymbolsĐ its made of
		>ĐĐ_ε_ĐĐ is an empty word; it is present in all languages and can be made in any alphabet
		operator+:
			<word-1> + <word-2> == <word-1><word-2>
			>"concatenation"
			>associative
			>not commutative
			{"a" + "b" == "ab"}
		operator^:
			>the second operand has to be an int { "myWord"^2 }
			<word>^0 == ε
			>where n ∈ N, <word>^n is the n times concatenation of itself
			{ a := "alpha"
			  a^3 == "alphaalphaalpha"
			}
		operator^T:
			>reverses a word
			>if <word> == <word>^T then the word is called a ĐĐpalidrom wordĐĐ { "görög" }
			{ a := "example"
			  a^T == "elpmaxe"
			}
		>a ĐwordĐ is ĐĐprimitiveĐĐ if it cant be represented as the power of another word
			{ a := "a"			// a is primitive
.			  b := "123123123"	// b is not, as it can be expressed as "123"^3
			}
		Sets:
			>NOTE: sets of words that is, of course
			operator⊗:
				>the set of all words resulting from concatenation of all word in operand 2 to all words in operand 1
				{ s1 := {"Bird", "Kenguru"}
.				  s2 := {"House", "Food"}
				  s1 ⊗ s2 == {"BirdHouse", "BirdFood", "KenguruHouse", "KenguruFood"}
				}
			operator^:
				>the second operand has to be an int { {"myFirstWord", "mySecondWord"}^2 }
				>equivalent to <set> ⊗ <set>^<int-1> (where '^' recursively expands until 0)
				<set>^0 == ε
				lezárt:	//?!
					∞
					Uᵢ=0 V^i ( = V^0 U V^1 U V^2 ...)
					V*
					-positive
						∞
						Uᵢ=1 V^i ( = V^1 U V^2 U V^3 ...)
						V+

	Sentence: //(0x0000000a)➞
		>a ĐworĐ with no Đnon-terminal symbolĐs in it

	Language: //(0x0000000b)➞
		>a set of sentences
		>usually defined by rules which generate sentences which are part of the language,
		  rather than list-ing all elements
		>a language is called ĐĐfiniteĐĐ if it has a finite number of elements
		>a language is called ĐĐinfinitĐĐ if it has an infinite number of elements

	Sigma: //(0x0000000c)➞
		Σ
		>the set of Đterminal symbolĐs of an ĐabcĐ, ie. all 1 ĐlongĐ ĐwordĐ of an ĐabcĐ
		>a ĐĐformal languageĐĐ is a subset of the ĐΣ*Đ of an ĐabcĐ

	Generative: //(0x0000000d)➞
		G(N, Σ, P, S)
		>defined as a 4-tuple of a set of non-terminals (N), a set of terminals (Σ), a set of rules (P) and a start symbol (S)
.		N := Đnon-terminal symbolsĐ
.		Σ := Đterminal symbolsĐ
.		S := Đstart symbolĐ
.		S ∈ N
.		P ⊆ (N U Σ)*<int>(N U Σ)*
		>any grammar that uses Đnon-terminal symbolĐs

	Ambiguity: //(0x0000000e)➞
		>a grammar is ambiguous if there's more than one left- or rightmost derivatives that can generate the same string;
		  NOTE: one of the conditions being true implies the other being also true
		>for any word that implies the ambiguity there are more than 1 parse trees which yield it

	Recursiveness: //(0x0000000f)➞
		<non-terminal_symbol> ->+ (<string-1>)<non-terminal_symbol>(<string-2>)
Yellow(			formarly:		)
				I ->+ "X\IY"
		>a grammar is recursive if it has a rule which assigns a non-terminal symbol to a string which contains the same non-terminal symbol
		>its ĐĐleft recursiveĐĐ if I ->+ "\IX"
		>its ĐĐright recursiveĐĐ if I ->+ "X\I"

	Chomskys_grammar_classes: //(0x00000010)➞
		>any algorithm capable of solving a problem in one of Chomsky's grammar class-es in theory
		  should be able to solve the same problem in another grammar belonging to the same class
		  (with changed parameters of course)
		-class-3 ⊆ class-2 ⊆ class-1 ⊆ class-0:
			+---------------------------------------------------------+
			| Type 0; "Unrestricted grammar"                          |
			|                                                         |
			|    +-----------------------------------------------+    |
			|    | Type 1; "Context Sensitive grammar"           |    |
			|    |                                               |    |
			|    |    +-------------------------------------+    |    |
			|    |    | Type 2; "Context Free grammar"      |    |    |
			|    |    |                                     |    |    |
			|    |    |    +---------------------------+    |    |    |
			|    |    |    | Type 3; "Regular grammar" |    |    |    |
			|    |    |    +---------------------------+    |    |    |
			|    |    |                                     |    |    |
			|    |    +-------------------------------------+    |    |
			|    |                                               |    |
			|    +-----------------------------------------------+    |
			|                                                         |
			+---------------------------------------------------------+
		>the higher the number of Chomsky's class the less complex and permissive it gets
		3:
			>"regular"
			>practically regular expressions (regex)
			-right
				¤every rule follows
					<non-terminal_symbol> -> <terminal_symbol>
					<non-terminal_symbol-1> -> <non-terminal_symbol-2><terminal_symbol>
Yellow(					formarly:		)
						A -> a
						A -> Ba
			-left
				¤every rule follows
					<non-terminal_symbol> -> <terminal_symbol>
					<non-terminal_symbol-1> -> <terminal_symbol><non-terminal_symbol-2>
Yellow(					formarly:		)
						A -> a
						A -> aB
			{ // *this grammar generates unsigned ints (in base 10)
			  //	NOTE: *this is a left regular one in particular
.				V := {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}
.				W := {S}
.				P := {S -> "0\S", S -> "1\S", S -> "2\S", S -> "3\S",
									S -> "4\S", S -> "5\S", S -> "6\S",
									S -> "7\S", S -> "8\S", S -> "9\S"}
			}
		2:
			>"context free"
			>used for describing the syntax of programming languages
			>the way "<>" expressions are detailed in *this very document follow a Chomsky's type 2 grammar
			¤every rule follows
				<non-terminal_symbol> -> <symbol>+
Yellow(				formarly:		)
					A -> ω
			>the Đstarting symbolĐ must be allowed to be empty (S -> ε)
			{ // *this grammar generates binary numbers whichs length % 2 == 0
			  //	NOTE: it does obviously not generate all such binary numbers, that's not our goal
.				N := {'0', '1'}
				Σ := {S}
.				P := {S -> "0\S0", S -> "1\S1", S -> ε}
			}
		1:
			>"context sensitive"
			¤every rule follows
				<terminal_symbol-1><non-terminal_symbol><terminal_symbol-2> -> <terminal_symbol-1>(<symbol>+)<terminal_symbol-2>
Yellow(				formarly:		)
					αAβ -> αωβ
			>in every rule, every non-terminal symbol has to be preserved, along with their relative position
		0:
			>"phase structured"
			¤every rule follows
				<terminal_symbol><non-terminal_symbol><terminal_symbol> -> <symbol>+
Yellow(				formarly:		)
						αAβ -> γ
				>the only constraint is that the left side of every rule contain atleast one non-terminal symbol
				>the right hand side is free to be ε
		-normal form
			¤when ever rule follows
				<non-terminal_symbol-1> -> <non-terminal_symbol-2><non-terminal_symbol-3> or
				<non-terminal_symbol-1> -> <terminal_symbol>*
Yellow(			formarly:		)
					A -> BC
					A -> a
			>every class 2 grammar has an equivalent grammar which is in normal form
		Extended_Bachus_Noir_forma:
			>grammar describing grammar
			<non-terminal> ::= <string>	: assignment operator for non-terminal symbols
			.							: end of rule
			...							: arbitrary number of repetitions of preceding symbol
			[...]						: 1 or more repetitions of receding symbol is required
			(<...>)						: grouping; NOTE: how "<...>" is part of *this documents builtin syntax
			<string> | <string>			: alternative values for the string that gets derived
			"<...>"						: string of terminal symbols; NOTE: how "<...>" is part of *this documents builtin syntax


	PARSING: //(0x00000011)➞
		>every valid word has atleast 1 corresponding parse tree
		>algorithmically generating a word in a context free language
		>very readably visually representable
		{ N := {" - ", " + ", [0-9]}	// [0-9] being the digits from 0 to 9
		  Σ := {S, O}

.		  P := {S -> [0-9], S -> "\S\O\S", O -> " - ", O -> " + ", S -> ε}
		  // we would like to produce the sentence "1 - 4 + 2"
		        S
		        |
		       SOS
			   /|\
			  / | \
			 /  +  2
		    SOS
		    /|\
		   / | \
		  1  -  4
		}
		>see more AT "/C\/C++/3th party libraries/Flex\/Bison"

	AUTOMATON: //(0x00000012)➞
		>"state-automaton"
		NOTE: singular: "automaton";. plural: "automata"
		>a machine which performs a series of predefined steps
		>most notable in the context of analysing strings of text to check whether they belong to a specific language;
		  such operation is necessary for the translation of computer languages (to machine code);
		  NOTE: from now on "automaton" is used as a shorthand for "grammar analyzing automaton"
		>every automaton takes a string as its input
		>every automaton has a reading head which is capable of reading a single symbol at the time and
		  moving the to the next symbol in the input string(, but not to the previous one)
		>every automaton has the capability to store an inner state
		>the automaton finishes execution when there are no more symbols left to read from the input string;
		  the state in which it is at that point is what signals whether the input string valid
		-for the creation of an automaton the following must be established:
			>Đ_Σ_Đ
			>Q; the set of possible inner states of the automaton
			-function δ(state, symbol)	// "delta function"
				δ := {([state-1], [symbol], [state-2])*}	: formally defines δ; means that if the automaton is in [state-1] when [symbol]
															   is read, then it will set its inner state to [state-2];
															   this part (between the parentheses) is called a ĐĐruleĐĐ
				>the defining set is often displayed in table form
				>NOTE: this is a read only automatons δ()
			{ Σ := {'0', '1'}
.			  Q := {q0, q1, q2}
			  δ := {(q0, '0', q2), (q0, '1', q1), (q1, '1', q0), (q1, '0', q2)}
			  +---+----+---+----+
			  | δ | K  | V | K  |
			  +---+----+---+----+
			  | # | q0 | 0 | q2 |
			  | # | q0 | 1 | q1 |
			  | # | q1 | 0 | q2 |
			  | # | q1 | 1 | q0 |
			  +---+----+---+----+
			}
		>Qˇ0 is the initial (starting) state of the automaton (Qˇ0 ∈ Q)
		>an ĐĐaccepting stateĐĐ ("elfogadó állapot"^HU) is a state which signals that the input string is valid,
		  if the automaton has that inner state at the end of its execution
		>Qˇv is the set of Đaccepting stateĐs of the automaton (Qˇv ⊆ Q)
		>every automaton has a ĐĐaccepted languageĐĐ which is composed from the words which leave the automaton in an Đaccepting stateĐ
		>any 2 automata is equivalent if they have the same Đaccepted languageĐ
		>an automaton is called a ĐĐmininal automatonĐĐ if it has the least number of possible inner states for its Đaccepted languageĐ
		-completeness:
			>an automaton is called ĐĐcompleteĐĐ if it has a rule for every symbol in all states
			>an automaton is called ĐĐpartalĐĐ ("parciális"^HU) if it is not complete
			>if an automaton is partial it might have abruptly stop as it was
			  given no instructions on how to handle a situation
		-determinableness:
			>an automaton is not deterministic if there are multiple rules with the same starting state and symbol,
			  but they yield differing states { (q3, 's', q2), (q3, 's', q6) }; otherwise it is
			>when a non-deterministic automaton encounters a situation when the next step is can be executed in
			  multiple allowed ways, it must choose
			>if there exists a series of choices which end in the automaton accepting the input string,
			  the input string is valid
		-configuration:
			>what is needed for saving and later restoring an automaton
			>in every case the configuration contains the remainder of the input string and the inner state
		>if an automaton has 'N' number of inner states and its Đaccepted languageĐ has a sentence which is long-er than 'N',
		  the language is infinite
		-finite automata:
			-has only all the mandatory components
				>input string
				>input head
				>inner state
				>delta function
			>can only analyze regular languages
		-stack automata
			>has not only all the mandatory components (see ABOVE), but also a stack,
			  on which it can freely (as in restricted only by the rules of a stack)
			  perform I/O operations
			>can analyze context free languages
			-the delta function now requites an extra parameter, the symbol stored on the top of the stack:
				function δ(state, input-symbol, stack-symbol)
			>for its configuration the stack must also be saved
			>may not have Qˇv (set of accepting states), rather it signals the recognition of
			  a sentence by having an empty stack when the entirety of the input string was read
		Turing_machines: //(0x00000013)➞
			YYY:
				https://turingmachinesimulator.com/
			>named after Alen Mathison Turing, a queer faggot, from whom no one would have ever heard of
			  only if Konrad Zuse would have not been a le evil Nazi
			¤has all the mandatory components of an automaton, plus
				-input string:
					>extended on one or both ends to infinity, so the machine
					  may store any information its necessary
				>I/O head, which can operating on the input string at any position
				>inner state ("state register")
				-delta function:
					-can arbitrary modify the heads position by the combination of the following instructions:
						<	- move left
						>	- move right
						-	- stay in place
			>can analyze phase structured languages
			>a mathematical model of modern computers (but obviously, real computers dont and couldnt have infinite memory)
			>there are many other models, however a Turing machine can simulate all of them
			>the ĐĐChurch-Turing thesisĐĐ is the idea that every computation device {silicon based; DNA based; neuron based}
			  can be simulated by a Turing Machine
			>Turing machines can be represented as strings, meaning they could serve as input to Turing machines
			{ // Drawing of a Turing machine
				┏━━━━━━━━━━━━━━━┓
				┃ Central Unit  ┃
				┃     State:    ┃
				┃   (my_state)  ┃
				┗━━━━━━━┰━━━━━━━┛
				        │
				  ┌─────┘
				  │
				  V
				+---+---+---+---+---+---+---+---+---+---+---+
				| S | 0 | 1 | 1 | 0 | 1 | 0 | 0̶ | 0̶ | 0̶ | 0̶ | ...
				+---+---+---+---+---+---+---+---+---+---+---+

					...

				δ(…, …) := (…, …, …)		δ(…, …) := (…, …, …)
				δ(…, …) := (…, …, …)		δ(…, …) := (…, …, …)
				δ(…, …) := (…, …, …)		δ(…, …) := (…, …, …)
			}
			{ // determine whether the input has an even amount of '0's; zero is an even number
				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃      q0       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
				  ┌─────┘
				  │
				  V
				+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
				+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)
				δ(e, 1) := (e, 1, >)
				δ(e, _) := (n, _, -)
				δ(o, 0) := (e, 0, >)
				δ(o, 1) := (o, 1, >)
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)	<


				// ---


				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃       e       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
					  ┌─┘
					  │
					  V
				+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
				+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)	<
				δ(e, 1) := (e, 1, >)
				δ(e, _) := (n, _, -)
				δ(o, 0) := (e, 0, >)
				δ(o, 1) := (o, 1, >)
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)


				// ---


				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃       o       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
						└─┐
						  │
						  V
				+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
				+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)
				δ(e, 1) := (e, 1, >)
				δ(e, _) := (n, _, -)
				δ(o, 0) := (e, 0, >)
				δ(o, 1) := (o, 1, >)	<
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)


				// ---


				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃       o       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
						└─────┐
							  │
							  V
				+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
				+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)
				δ(e, 1) := (e, 1, >)
				δ(e, _) := (n, _, -)
				δ(o, 0) := (e, 0, >)	<
				δ(o, 1) := (o, 1, >)
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)


				// ---


				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃       e       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
						└─────────┐
								  │
								  V
				+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
				+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)
				δ(e, 1) := (e, 1, >)	<
				δ(e, _) := (n, _, -)
				δ(o, 0) := (e, 0, >)
				δ(o, 1) := (o, 1, >)
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)


				// ---


				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃       e       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
						└─────────────┐
									  │
									  V
				+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
				+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)	<
				δ(e, 1) := (e, 1, >)
				δ(e, _) := (n, _, -)
				δ(o, 0) := (e, 0, >)
				δ(o, 1) := (o, 1, >)
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)


				// ---


				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃       o       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
						└─────────────────┐
										  │
										  V
				+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
				+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)
				δ(e, 1) := (e, 1, >)
				δ(e, _) := (n, _, -)
				δ(o, 0) := (e, 0, >)	<
				δ(o, 1) := (o, 1, >)
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)


				// ---


				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃       e       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
						└─────────────────────┐
											  │
											  V
				+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
				+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)
				δ(e, 1) := (e, 1, >)	<
				δ(e, _) := (n, _, -)
				δ(o, 0) := (e, 0, >)
				δ(o, 1) := (o, 1, >)
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)


				// ---


				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃       e       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
						└─────────────────────────┐
												  │
												  V
				+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
				+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)
				δ(e, 1) := (e, 1, >)	<
				δ(e, _) := (n, _, -)
				δ(o, 0) := (e, 0, >)
				δ(o, 1) := (o, 1, >)
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)


				// ---


				┏━━━━━━━━━━━━━━━┓
				┃      TM       ┃
				┃       e       ┃
				┗━━━━━━━┰━━━━━━━┛
						│
						└─────────────────────────────┐
													  │
													  V
				+---+---+---+---+---+---+---+---+---+---+
				| s | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 | _ |
				+---+---+---+---+---+---+---+---+---+---+

				δ(e, 0) := (o, 0, >)
				δ(e, 1) := (e, 1, >)
				δ(e, _) := (n, _, -)	<
				δ(o, 0) := (e, 0, >)
				δ(o, 1) := (o, 1, >)
				δ(o, _) := (n, _, -)
				δ(q0, s) := (e, s, >)


				// ---

				> accepted
			}
			multitape: //(0x00000014)➞
				¤classical role of tapes
					first  -  input
					last   -  output; starts empty; unless there are only 2 tapes, in which case the second is memory
					others -  memory; starts empty  
					>these construction might come up while simulating a multi tape Turing Machine,
					  but are irrelevant in the broader context
				>with the number of tapes, the complexity of δ must increase too
				>can very well be faster, than single tape Turing Machines
				{ // Drawing of a Turing Machine
					┏━━━━━━━━━━━━━━━┓
					┃ Central Unit  ┃
				┌───┃     State:    ┃
				│   ┃   (my_state)  ┃
				│   ┗━━━━━━━┰━━━━━━━┛
				│   		│
				│     ┌─────┘
				│     │
				│     V
				│   +---+---+---+---+---+---+---+---+---+---+---+
				│   | S | 0 | 1 | 1 | 0 | 1 | 0 | 0̶ | 0̶ | 0̶ | 0̶ | ...	// Input Tape
				│   +---+---+---+---+---+---+---+---+---+---+---+
				│
				└─────┐
					  │
					  V
					+---+---+---+---+---+---+---+---+---+---+---+
					| S | 0̶ | 0̶ | 0̶ | 0̶ | 0̶ | 0̶ | 0̶ | 0̶ | 0̶ | 0̶ | ...	// Memory Tape 1
					+---+---+---+---+---+---+---+---+---+---+---+


					δ(…, …, …, …) := (…, …, …, …)		δ(…, …, …, …) := (…, …, …, …)
					δ(…, …, …, …) := (…, …, …, …)		δ(…, …, …, …) := (…, …, …, …)
					δ(…, …, …, …) := (…, …, …, …)		δ(…, …, …, …) := (…, …, …, …)
				}
				Conversation_to_single_tape: //(0x00000015)➞
					O(t(x)) ->  DTIME(t²(x))	// computation expense of conversion
					f(x)    ->  c*f(x)			// space expense of conversion
					>every multi tape turing machine can simulated with a single tape machine;
					  its computationally not all that expensive either
					-tape simulation
						>tapes are concatenated
						>start symbols must be included
						>the position of each head is virtual-ized with a special symbol;
						  this could be a stand alone one or a marked version for each symbol (dotted by convention)
						{ // Multitape 
							  V
							+---+---+---+---+---+---+---+---+---+---+---+
							| S | 0 | 1 | 1 | 0 | 1 | 0 | 0̶ | 0̶ | 0̶ | 0̶ | ...	// Tape I.
							+---+---+---+---+---+---+---+---+---+---+---+
							  V
							+---+---+---+---+---+---+---+---+---+---+---+
							| S | a | a | b | a | b | b | b | 0̶ | 0̶ | 0̶ | ...	// Tape II.
							+---+---+---+---+---+---+---+---+---+---+---+
						  // Single tape
						      V
							+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
							|:S | 0 | 1 | 1 | 0 | 1 | 0 |:S | a | a | b | a | b | b | b | ... // a single tape
							+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
						      I.                         II.
						}
						>the head has to scan the full tape to simulate a single step of its multi taped counter part
						>whenever a new symbol is required (for storage) at the end of a tape,
						  all the tapes to the right are shifted away (by copying)
					-cross product
						>new symbols, rules and states are created
						-a new symbol created for every combination of possible symbol combination pointed at
							{ // original symbols
								Tape 1 alphabet: {0, 1}
								Tape 2 alphabet: {0, 1}
							  // new symbols
							   0 && 0  -  a
							   1 && 0  -  b
							   0 && 1  -  c
							   1 && 1  -  d
							}
						>new rules must be created, requiring more states than in the original configuration
		Boolean_circut:
			>model of computation
			>turing complete
			>originally proposed as a "simpler" alternative to the turing machine
			¤has the following operations
				or
				and
				not
		Modifiers: //(0x00000016)➞
			non_deterministic:
				>has multiple δ()s (classically 2)
				>at each step, chooses arbitrary
				>the input is considered accepted if there are any sequence of steps which accept it
				¤either
						>the 2 explanations are equivalent
					>it explores all paths in parallel
					>it always gets "lucky" and finds the right path at the first run
				>only highly theoretical; as of now, anyways
				>does not have anything to do with quantum computers
			probabilistic:
				>has multiple δ()s (classically 2)
				>the machine has access to a true random number generator (a black box)
                >multiple passes are recorded
				>the input is accepted if it outputs the right answer with 2/3 probability
			oracle:
				>only highly theoretical; as of now, anyways
				>has an "oracle" (a black box), that always provides it with the right answer immediately
				>asking the "oracle" is called ĐĐqueringĐĐ
			non_uniform:
				>the machine uses different configurations to different length inputs
			

#define math\
#define mathematics: //(0x00000017)➞\
I-----------------------------------------------------------\
I-----------------------------------------------------------\
I-----------------------------------------------------------\
I         /$$      /$$             /$$     /$$              \
I        | $$$    /$$$            | $$    | $$              \
I        | $$$$  /$$$$  /$$$$$$  /$$$$$$  | $$$$$$$         \
I        | $$ $$/$$ $$ |____  $$|_  $$_/  | $$__  $$        \
I        | $$  $$$| $$  /$$$$$$$  | $$    | $$  \ $$        \
I        | $$\  $ | $$ /$$__  $$  | $$ /$$| $$  | $$        \
I        | $$ \/  | $$|  $$$$$$$  |  $$$$/| $$  | $$        \
I        |__/     |__/ \_______/   \___/  |__/  |__/        \
I-----------------------------------------------------------\
I-----------------------------------------------------------\
I-----------------------------------------------------------I

    TODO:
        >function differences ???
        >lu method
        >Choleski method

	MISC:
		¤
			e ∈ Q*
			      ∞   1           /     1 \^n
.			e := sum ─── ==  lim ( 1 + ─── )  ~= 2.71828
				 n=0  n!     n->∞ \     n /
			e^x >= x+1
			-Prove that f(x) is convergent:
				|f(x) - a| < e
		¤
			(1+x)^k >= 1 + kx
		¤
			lim  nˇa = 1
			x->∞
		¤
			sin(x+y) == sin(x)*cos(x)+sin(x)*cos(y)
			cos(x+y) == cos(x)*cos(y)-sin(x)*sin(y)
			sin(2x)  == 2sin(x)
			cos(2x)  == 2cos²(x) - 1  ==  cos²(x) - sin²(x)
			sin²(x) == 1-cos(2x) / 2
			cos²(x) == 1+cos(2x) / 2

#define logic:: //(0x00000018)➞\
	I-------------------------------\
	I   _                 _         \
	I  | |               (_)        \
	I  | |     ___   __ _ _  ___    \
	I  | |    / _ \ / _` | |/ __|   \
	I  | |___| (_) | (_| | | (__    \
	I  \_____/\___/ \__, |_|\___|   \
	I                __/ |          \
	I               |___/           \
	I-------------------------------I

	>see related AT "/Hardware/Logic_gates"
	>in this section all (single quoted) chars mark a ĐstatementĐ (see BELOW)

	ORDERS: //(0x00000019)➞
		NOTE: all concept-s list-ed are defined and or detailed BELOW
		Zeroth:
			>just statements
			>U := {true, false}
			¤components
				>bools
				-operator-s
					>negation
					>conjunction
					>disjunction
					>exclusive disjunction
					>implication
					>equivalation
		First:
			¤components
				>bools
				>objects
				>predicates
				-operator-s
					>negation
					>conjunction
					>disjunction
					>exclusive disjunction
					>implication
					>equivalation
					>quantifiers
			


	BOOLEANS: //(0x0000001a)➞
		>"bool"
        >after "George Boole"
		>a value with is either true or false
		>0 eval-s to false, every other int eval-s to true



	UNIVERSE: //(0x0000001b)➞
		U
		>a set of all entities to be considered
		>has to be assigned
			{ U := {1, 2, 3} }



	VARIABLE: //(0x0000001c)➞
		>a symbol which may mean any value of the universe
		>if the universe is not equal to {true, false} then
		  a variable taking up one of its values is called
		  an ĐĐobjectĐĐ
		>on all mentions it means the same value
		NOTE: variables from now on are written as follows:
				  '<char>'
				  { 'A' }



	LITERAL: //(0x0000001d)➞
		>a bool variable/value or the negation of it



	STATEMENT: //(0x0000001e)➞
		>a declarative sentence which is unambiguously eval-s to a bool
			{ 8 > 25
			  (You) can read. }
		-interpretation:
			>when all variables are decided to what value to hold
			{ // universe
.				U := {true, false}
			  // statement
				'A' and 'B'
			  // interpretations
			     0  and  0		->	false
			     0  and  1		->	false
			     1  and  0		->	false
			     1  and  1		->	true
			}
			>a statement is called ĐĐsatisfiableĐĐ or ĐĐSATĐĐ for short if it has a true interpretation
			>a statement is called ĐĐunsatisfiableĐĐ or ĐĐUNSATĐĐ for short if it has no true interpretations
			>a statement is called ĐĐtautologyĐĐ or ĐĐlogikai törvényĐĐ^HU if all of its interpretations are true
			>a statement is a ĐtautologyĐ if its negate is ĐunsatisfiableĐ



	OPERATIONS: //(0x0000001f)➞
		Negation: //(0x00000020)➞
			¬'A'
			>not
			>swaps logical value
			¤table
				------------------
				|  In   ||  Out  |
				------------------
				| false || true  |
				| true  || false |
				------------------
			¤operational properties
				¬(¬'A') == 'A'
		Conjuction: //(0x00000021)➞
			'A' ∧ 'B'
			>and
			>"logical multiplication"
			¤table                        
				--------------------------
				|  In1  |  In2  ||  Out  |
				--------------------------
				| false | false || false |
				| false | true  || false |
				| true  | false || false |
				| true  | true  || true  |
				--------------------------
			¤operational properties
				'A' ∧ 'A' == 'A'						// idempotency
				'A' ∧ 'B' == 'B' ∧ 'A'					// commutativity
				'A' ∧ ('B' ∧ 'C') == ('A' ∧ 'B') ∧ 'C'	// associativity
		Disjunction: //(0x00000022)➞
			'A' ∨ 'B'
			>or
			>"logical addition"
			¤table                        
				--------------------------
				|  In1  |  In2  ||  Out  |
				--------------------------
				| false | false || false |
				| false | true  || true  |
				| true  | false || true  |
				| true  | true  || true  |
				--------------------------
			¤operational properties
				'A' ∨ 'A' == 'A'						// idempotency
				'A' ∨ 'B' == 'B' ∨ 'A'					// commutativity
				'A' ∨ ('B' ∨ 'C') == ('A' ∨ 'B') ∨ 'C'	// associativity
				'A' ∨ 'B' == ¬(¬'A' ∧ ¬'B')
		Exclusive_disjunction: //(0x00000023)➞
			'A' ⊕ 'B'
			>xor
			¤table                        
				--------------------------
				|  In1  |  In2  ||  Out  |
				--------------------------
				| false | false || false |
				| false | true  || true  |
				| true  | false || true  |
				| true  | true  || false |
				--------------------------
			¤operational properties
				'A' ⊕ 'B'  ==  ('A' ∨ 'B') ∧ ¬('A' ∧ 'B')
				¬('A' ⊕ 'B')  ==  ¬'A' ⊕ 'B'  ==  'A' ⊕ ¬'B'
		Implication: //(0x00000024)➞
			'A'  =>  'B'
			if <'A'> then <'B'>
			>from a ĐstatementĐ another follows
			>asymmetrical, so it is its symbol
			-theres nothing stopping one from mirroring the symbol to switch the operands:
			    'A' => 'B'  ==  'B' <= 'A'
				>the former is what implication normally means,
				  but can be also referred to as ĐĐright way implicationĐĐ
				>the later is called a ĐĐleft way implicationĐĐ
			¤table                        
				--------------------------
				|  In1  |  In2  ||  Out  |
				--------------------------
				| false | false || true  |
				| false | true  || false |
				| true  | false || true  |
				| true  | true  || true  |
				--------------------------
			¤operational properties
				 'A' => 'B'  ==  ¬'A' ∨ 'B'
		Equalation: //(0x00000025)➞
			'A' <=> 'B'
			¤table                        
				--------------------------
				|  In1  |  In2  ||  Out  |
				--------------------------
				| false | false || true  |
				| false | true  || false |
				| true  | false || false |
				| true  | true  || true  |
				--------------------------
			¤operational properties
				('A' => 'B') ∧ ('B' => 'A')   ==   'A' <=> 'B'
		Quentifiers: //(0x00000026)➞
            >"Kvantor"^HU
			All: //(0x00000027)➞
				∀'x'
				>for all 'x'
				¤eval in programming
					{ ∀'x'(func('x'))			// we want to know whether this statement is true; ie. whether func() returns true to all 'x'-es
					  //----
					  result = true;			// we presuppose that its gonna be true and save that assumption in a variable
					  for i in x: 				// we loop through all x-es
					      if not func(x): 		// we branch if func() returns false
					          result = false;	// we correct the result
							  break;			// we end the testing as it has turned out that result cannot be true
							  					//   because there is atleast one 'x' to which func() returns false
			Any: //(0x00000028)➞
				∃'x'
				>or "existential" kvantor
				>for any 'x' || there exist an 'x' (for which the statement is true)
				¤eval in programming
					{ ∃'x'(func('x'))			// we want to know whether this statement is true; ie. whether func() returns true to any of the 'x'-es
					  //----
					  result = false;			// we presuppose that its gonna be false and save that assumption in a variable
					  for i in x: 				// we loop through all x-es
					      if func(x): 			// we branch if func() returns true
					          result = true;	// we correct the result
							  break;			// we end the testing as it has turned out that result must be true
							  					//   because there is in fact atleast one 'x' to which func() returns true
					}
			-skoleming:
				>the act of removing existential knantors from a formula
				>if an existential kvantor stands to the immediate right of a for all kvantor
				  it can be removed by replacing all instances of its variable with a function
				  taking the for all kvantors variables as arguments
				  { ∀'y'∀'z'∃'x'( P('x') ∧ 'y' => ¬('A' ∨ 'z') ) 
				    == ∀'y'∀'z'( P(Q('y', 'z')) ∧ 'y' => ¬('A' ∨ 'z') )
				  }
		¤Precedence
			1.	¬
			2.  ∧, ∨
			3.  ∀, ∃
			4.	=>
			5.	<=>
		¤Complex operational properties
			'A' ∧ ('B' ∨ 'C') == ('A' ∧ 'B') ∨ ('A' ∧ 'C')		// distributivity
			'A' ∨ ('B' ∧ 'C') == ('A' ∨ 'B') ∧ ('A' ∨ 'C')		// distributivity
			'A' ∧ ¬'A' == 0
			'A' ∨ ¬'A' == 1
			'A' ∨ 1 ==  1
			'A' ∨ 0 == 'A'
			'A' ∧ 0 ==  0
			'A' ∧ 1 == 'A'
			'A' ∨ ('A' ∧ 'B') == 'A'							// melting law ("beolvasztási törvény"^HU)
			'A' ∧ ('A' ∨ 'B') == 'A'							// melting law ("beolvasztási törvény"^HU)
			¬('A' ∧ 'B') == ¬'A' ∨ ¬'B'							// DeMorgan's law
			¬('A' ∨ 'B') == ¬'A' ∧ ¬'B'							// DeMorgan's law
			¬∀'x'( A('x') )  ==  ∃'x'( ¬A('X') )
			¬∃'x'( A('x') )  ==  ∀'x'( ¬A('X') )
			'A' ∧ ∀'x'( B('x') )  ==  ∀'x'( 'A' ∧ B('x') )
			'A' ∨ ∀'x'( B('x') )  ==  ∀'x'( 'A' ∨ B('x') )
			'A' ∧ ∃'x'( B('x') )  ==  ∃'x'( 'A' ∧ B('x') )
			'A' ∨ ∃'x'( B('x') )  ==  ∃'x'( 'A' ∨ B('x') )
			'A' => ∀'x'( B('x') )  ==  ∀'x'( 'A' => B('x')
			'A' => ∃'x'( B('x') )  ==  ∃'x'( 'A' => B('x')
			∀'x'( A('x') ) => 'B'  ==  ∃'x'( A('x') => 'B' )
			∃'x'( A('x') ) => 'B'  ==  ∀'x'( A('x') => 'B' )
			∀'x'(A('x')) ∧ ∀'x'(B('x'))  ==  ∀'x'(A('x') ∧ B('x'))
			∃'x'(A('x')) ∨ ∃'x'(B('x'))  ==  ∃'x'(A('x') ∨ B('x'))



	CLAUSE: //(0x00000029)➞
		>a finite number of literals either all ĐdisjunctedĐ or ĐconjunctedĐ
			{ 'A' ∨ 'B' ∨ 'C'
			  'D' ∧ 'E' ∧ 'F'
			}
		¤alternative writing
			<char>ˇ1 ∨...∨ <char>ˇ<int>
			{ lˇ1 ∨...∨ lˇ12
			}
		-empty clause:
			>when a clause has 0 literals its called an ĐĐempty clauseĐĐ and symbolized with '∅', '⊥' or '◻'
			>an empty conjunctive clause always eval-s to true (ie. tautology)
			>an empty disjunctive clause always eval-s to false (ie. unsatisfiable)
		-Horn clause:
			>a clause that contains 1 not negated literal at max



	PREDICATE: //(0x0000002a)➞
		<char>(<args>)
		>parametered ĐstatementĐ
		>describes a ĐrelationĐ
		>in C terms (see AT "/C++") it could be described as a function taking at least 1 argument and return-ing a bool (  bool (*)( <class> )  )
		{ M(x) := "\x is mortal."		// x is escaped ('\') for highlighting
		  M("Socrates") == true
		}



	NORMAL_FORMS: //(0x0000002b)➞
		DNF: //(0x0000002c)➞
			>"Disjunctive Normal Form"
			>disjunction of conjunctions of literals
			{ ('A' ∧ 'B') ∨ ('C' ∧ 'D' ∧ 'E') ∨ 'F' }
		CNF: //(0x0000002d)➞
			>"Conjunctive Normal Form"
			>conjunction of disjunctions of literals
			{ 'A' ∧ ('B' ∨ 'C' ∨ 'D' ∨ 'E') ∧ ('F' ∨ 'G') }
		¤algorithm for converting an arbitrary statement to DNF or CNF
			1. transform xor-s to and/or form
			2. transform equivalences to and/or form
			3. transform implications to and/or form
			4. de Morgen all negations
			5. transform and/or-s with assiciativity appropriately
		<int>-[D | C]NF:
			>a CNF or DNF whichs conjucted/disjuncted clauses are no long-er than <int>
			{ // 3-CNFs
			   'A' ∧ 'B'
			   ('A' ∨ 'B' ∨ 'C') ∧ ('D' ∨ 'E' ∧ 'F') ∧ ('G' ∨ 'H' ∧ 'J') ∧ ('K' ∨ 'L' ∧ 'M')
			   'A' ∧ ('B' ∨ 'C') ∧ ('D' ∨ 'E' ∧ 'F')
			}
		PNF: //(0x0000002e)➞
			(<kvantor>*)<CNF>
			>"Prenex Normal Form"
			>a way of organizing a complex statement
			>all quantors are present at the beginning of the statement, everything else is is written in ĐCNFĐ 
			{  ∀'x'∃'y'∀'z'( P('x') ∧ M('y') ∧ I('z'))  }



	SATISFIABILITY: //(0x0000002f)➞
		¤famous SAT solvers
			¤DPLL
				>MiniSat
				>CaDiCat
				>Glucose
			¤SMT
				>Z3
				>CVC4
				>Yices
		Tseitin_transformation: //(0x00000030)➞
			>a ĐĐsubformulaĐĐ is a subset of the formula which is surrounded by meaningful parentheses or a negated variable
			>every formula is a subformula of itself
			>to eval subformulas separately for satisfiability
			>linear with the number of subformulas
			>a variable equilated for every subformula then those and the variable representing the whole are conjucted/disjuncted 
			>creates an expression which has the same satisfiability as the original
			>for lengthy formulas its faster to test satisfy ability this was rather than first converting to DNF
			{ // original formula
			   (( 'A' ∨ 'B' ) ∧ 'C') => (¬'D')
			  // subformulas
			   {( 'A' ∨ 'B' ),
			     (( 'A' ∨ 'B' ) ∧ 'C'),
				 ( ¬ 'D' ),
				 (( 'A' ∨ 'B' ) ∧ 'C') => (¬'D')
			   }
			  // "creating" the variables
			   'x'-1  <=>  'A' ∨ 'B'
			   'x'-2  <=>  ('A' ∨ 'B') ∧ 'C'
			   'x'-3  <=>  ¬'D'
			   'x'-4  <=>  (( 'A' ∨ 'B' ) ∧ 'C') => (¬'D')
			  // Tseitin transformed form
			   'x'-4 ∧ ('x'-1 <=> 'A' ∨ 'B') ∧ ('x'-2 <=> ('A' ∨ 'B') ∧ 'C') ∧ ('x'-3 <=> ¬'D') ∧ ('x'-4 <=> (( 'A' ∨ 'B' ) ∧ 'C') => (¬'D')
			}
		Plaisted_Greenbaum_transformation: //(0x00000031)➞
			>usually used along side with the Tseitin transformation
			-given a formula, an equivalence can be converted to an implication without changing the satisfiability the following ways:
				>if the literal on the left side of the equivalence is only used without negation in the rest of the formula, then
				  the equivalence can be changed to a right way implication
				>if the literal on the left side of the equivalence is only used with negations in the rest of the formula, then
				  the equivalence can be changed to a left way implication
				>else its not possible
		Resolution: //(0x00000032)➞
			Rez(<clause-1>, <clause-2>)
			>operates on a CNF
			>used with 2 disjunctive clauses and contain exactly 1 opposing literal pair {'A', ¬'A'}
			>yields a formula which has the same satisfiability as the previous
			>if it can be used repeatedly to get an empty expression that proves that the original CNF is unsatisfiable
			>not efficient to check large clauses with
			-unit propagation
				>one of the resolvants is a single 
			{ NOTE: the line ABOVE the resolution is always a CNF
			  ('A' ∨ 'B') ∧ ¬'B'
			  Rez('A' ∨ 'B',		// this is a unit propagation
				 ¬'B')
					==
				'A'			//proves nothing of value
			 //--------
			  ('A' ∨ 'B') ∧ (¬'A' ∨ ¬'B')
			  Rez('A' ∨ 'B',
				 ¬'A' ∨ ¬'B')
				// ERROR; theres more than one opposing literal pairs, these causes cant be resolved
			 //--------
			  ('A' ∨ 'B' ∨ 'C') ∧ (¬'A' ∨ 'B' ∨ 'C')
			  Rez('A' ∨ 'B' ∨ 'C',
				 ¬'A' ∨ 'B' ∨ 'C')
					==
				'B' ∨ 'C'	//proves nothing of value
			 //--------
			  'A' ∧ ¬'A'
			  Rez('A',				// this is a unit propagation
				 ¬'A')
					==
				◻			//proves that ('A' ∧ ¬'A') is unsatisfiable
			 //--------
			  (¬'A' ∨ 'B') ∧ 'C' ∧ ¬'B' ∧ (¬'C' ∨ 'A')
			  C₁ := ¬'A' ∨ 'B'
			  C₂ :=  'C'
			  C₃ := ¬'B'
			  C₄ := ¬'C' ∨ 'A'
			  C₅ := Rez(C₁, C₃) == ¬'A'
			  C₆ := Rez(C₂, C₄) ==  'A'
			  C₆ := Rez(C₅, C₆) == ◻	//proves that ((¬'A' ∨ 'B') ∧ 'C' ∧ ¬'B' ∧ (¬'C' ∨ 'A')) is unsatisfiable
			 //--------
			  ('A' ∨ 'B') ∧ (¬'A' ∨ 'B') ∧ ('A' ∨ ¬'B') ∧ (¬'A' ∨ ¬'B')
			  C₁ :=  'A' ∨  'B'
			  C₂ := ¬'A' ∨  'B'
			  C₃ :=  'A' ∨ ¬'B'
			  C₄ := ¬'A' ∨ ¬'B'
			  C₅ := Rez(C₁, C₂) == 'B' ∨ 'B' == 'B'
			  C₆ := Rez(C₅, C₃) == 'A'
			  C₆ := Rez(C₆, C₄) == ¬'B'
			  C₇ := Rez(C₇, C₅) == ◻	//proves that (('A' ∨ 'B') ∧ (¬'A' ∨ 'B') ∧ ('A' ∨ ¬'B') ∧ (¬'A' ∨ ¬'B')) is unsatisfiable
			}
		Dimacs_format: //(0x00000033)➞
			>format to represent CNF for an easy to type and read both by humans and machines
			>goto for SAT solvers
			{ (<header>)
			  <clause>*
			}
			Header:
				p cnf <int-1> <int-2>
				>optional
				>specifies that this is a DIMACS file, using CNF
				>clarifies that there is going to be <int-1> distinct variables used
				>clarifies that the CNF consists of <int-2> clauses
			Clauses:
				<variable>*0
				>no sign is needed between variables as logical or is the only option
				>'0' terminates the clause
				>clauses are usually separated by new lines
				Variables:
				(-)<int><whitespace> 
				><int> is the variables name (must not be 0)
				>the '-' sign signals negation
				>trailing whitespace is necessary
				{ // Equivalent classical CNF:
				  //  ('A' ∨ 'B') ∧ (¬'A' ∨ 'C') ∧ ('C' ∨ ¬'B') ∧ (¬'D' ∨ ¬'B' ∨ 'C') ∧ 'D'
				  p cnf 4 5
				  1 2 0
				  -1 3 0
				  3 -2 0
				  -4 -2 3 0
				  -4 0
				}
		DPLL: //(0x00000034)➞
			>"Davis–Putnam–Logemann–Loveland"
			>algorithm testing for satisfiability
			>operates on CNF-s
			>recursive
			¤pseudo-prototype
				bool DPLL(const Clause &c, Interpretation i);
				>ĐcĐ is the whole, original clause, which is always passed unchanged
				>ĐiĐ is a set variables from ĐcĐ with a value assigned
			¤inner workings
				-pure literal elimination
					>when a literal occurs with only one polarity (always or never negated),
					  it doesnt affect satisfiability
					>safely removed
				>unit propagation
				>backtracking
				>creates a decision tree from assigning all literals a value; computes end result;
				  if false backtracks (reassigning a variable) and continue-s
				  if true the input CNF is proven to be satisfiable, searching can halt
				¤step-by-step	// ?!; pseudo code this
	Purple(
					do pure literal elimination;
	Yellow(			Build_tree:																																	
						if not all varibles are assigned do:
							assign a variable to a value to which it has not yet been;
	Yellow(			Check:																																		
						do unit propagation;	// if possible
						do compute ${end};
						if ${end}:
							return true;
						else:
							pop ĐiĐ
	)						
		SMT: //(0x00000035)➞
			>"Statisfiability Modulo Theories"
			>a formula in first order logic, but with NO kvantors
			>concerned with deciding whether a mathematical formula is satisfiable
			SMT_LIB:
				>format for SMT solvers
				>atomic operations are converted to Polish notation and parenthesized (see AT "/Theory/?!")
				>comments start with ';'-s
				-instructions:
					set-logic <logic>
					declare-const <name> <typename>		: declares variable
					assert <statement>					: specifies statement (for other, later instructions)
					check-sat							: check satisfiability of the preceding asserts (see ABOVE)
					get-model							: returns the found true interpretation after a check-sat
				-logics:
					QF_LIA
				-operator-s:
					+
					-
					*
					/
					div
					mod
					=
					distinct	// !=
					<
					>
					<=
					>=
					and
					or
					not
					=>
					abs
					ite			// if-then-else
				{ ; Basic Boolean example
				  (declare-const p Bool)
				  (assert (and p (not p))) 
				  (check-sat)
				  ; returns unsat
				}


#define sets:: //(0x00000036)➞\
    I------------------------\
    I   _____      _         \
    I  /  ___|    | |        \
    I  \ `--.  ___| |_ ___   \
    I   `--. \/ _ \ __/ __|  \
    I  /\__/ /  __/ |_\__ \  \
    I  \____/ \___|\__|___/  \
    I------------------------I

	>collection of ĐthingsĐ where everything can be judged to be or not to be a element
	>not ordered
	>marked with a single capital letter {'A'}
	>its elements are marked with a single lower case letter {'a'}



	NULL: //(0x00000037)➞
		∅ || {}
		>an/the empty set
		>0 elements
		>is a subset of every set



	Set_systems: //(0x00000038)➞
		>"family of sets" || "set-family"
		>a set composed of sets
		{   'A':={{0,1},{1,2},{6,8}}   }



	Operations: //(0x00000039)➞
		_____
		<set>				: "complementer"; ¬<set>; <set>ᶜ; includes everything that is not an element of <set>
		<set-1> \ <set-2>	: "difference"; elements of <set-1> which are not elements of <set-2>
		<set-1> U <set-2>	: "union"; elements which are elements of <set-1> or <set-2> 
		<set-1> ∩ <set-2>	: "intersection"; elements which are elements of <set-1> and <set-2>
		<set-1> ⊇ <set-2>	: "subset"; <set-1> contains <set-2>
		<set-1> ⊆ <set-2>	: "subset"; <set-2> contains <set-1>
		<set-1> ⊃ <set-2>	: "proper/strict subset"; <set-1> contains <set-2> amongst other elements
		<set-1> ⊂ <set-2>	: "proper/strict subset"; <set-2> contains <set-1> amongst other elements
		<set-1> ⊅ <set-2>	: not subset; <set-1> doesnt contains <set-2>
		<set-1> ⊄ <set-2>	: not subset; <set-2> doesnt contains <set-1>
		<char> ∈ <set>		: <char> is an element of <set>
		<char> ∉ <set>		: <char> is not an element of <set>
        {
            ┌─────────────────────┐
            │U                    │
            │    .`````.`````.    │
            │   :  A  : :  B  :   │
            │   :     : :     :   │
            │   :     : :     :   │
            │    '.....'.....'    │
            │                     │
            └─────────────────────┘

            ┌──────────A──────────┐
            │U                    │
            │    .#####.`````.    │
            │   :##A####:  B  :   │
            │   :#######:     :   │
            │   :#######:     :   │
            │    '#####'.....'    │
            │                     │
            └─────────────────────┘
                       _
            ┌──────────A──────────┐
            │U####################│
            │####.`````.#####.####│
            │###:  A  :####B##:###│
            │###:     :#######:###│
            │###:     :#######:###│
            │####'.....'#####'####│
            │#####################│
            └─────────────────────┘

            ┌────────Union────────┐
            │U                    │
            │    .#####.#####.    │
            │   :##A#######B##:   │
            │   :#############:   │
            │   :#############:   │
            │    '#####'#####'    │
            │                     │
            └─────────────────────┘

            ┌─────Intersection────┐
            │U                    │
            │    .`````.`````.    │
            │   :  A  :#:  B  :   │
            │   :     :#:     :   │
            │   :     :#:     :   │
            │    '.....'.....'    │
            │                     │
            └─────────────────────┘
        }
		Set_square:
			<set>^2 || P(<set>)
			>set of all subsets of <set>
			{ 'A':={2,3,6}
			  P('A') == {{∅},{2},{3},{6},{2,3},{2,6},{3,6},{2,3,6}}
			}
		Descartes_multiplication:
			<set-1> × <set-2> := {(a,b): a ∈ A and b ∈ B}
			<set> × <set> == <set>^2
			>"direct multiplication"
			>results in a set of ordered pairs where the Đfirst componentĐ is from <set-1>
			  and the Đsecond componentĐ is from <set-2>
			-not commutative:
				<set-1> × <set-2> != <set-2> × <set-1>
			{ 'A':={2,3,6}
			  'B':={4,5,8}
			  'A'×'B' == {(2,4),(2,5),(2,8),(3,4),(3,5),(3,8),(6,4),(6,5),(6,8)}
			}



	Set_Builder_Notation: //(0x0000003a)➞
		{ <superset> [':'|'|'] <equation> }
		>defines a set by giving a schematic to calculate every number which is an element
		¤<superset>
			-usually either a char (marking all numbers) or 
			  a char which is stated to be an element of a number set (see BELOW)
				{ 'x'
				  'x' ∈ R
				}
		{   {x|x>0}   }
	-Sets of numbers:
		+-+-----------------------------------------------------------------------+		
		|R|                                                                       |		R : real numbers
		+-+                                                                       |		Q : rational numbers
		|    +--+----------------------------+--+----------------------------+    |		Q*: irrational numbers
		|    |Q |                            |Q*|                            |    |		Z : ints
		|    +--+                            +--+                            |    |		N : natural numbers
		|    |      +-+---------------+      |                               |    |
		|    |      |Z|               |      |                               |    |		Q* == R \ Q
		|    |      +-+               |      |                               |    |
		|    |      |   +-+----+      |      |                               |    |
		|    |      |   |N| 0  |      |      |                               |    |
		|    |      |   +-+    |      |      |                               |    |
		|    |      |   |  2   |      |      |                               |    |
		|    |      |   +------+      |      |                               |    |
		|    |      | -3              |      |                               |    |
		|    | 3    +-----------------+      |                               |    |
		|    | -                             |                               |    |
		|    | 2                             | π                             |    |
		|    +-------------------------------+-------------------------------+    |
		|                                                                         |
		+-------------------------------------------------------------------------+
		Rˇ+ := { 'x' ∈ R | 'x' > 0 }
		Rˇ- := { 'x' ∈ R | 'x' < 0 }
		Rˇb := R U {-∞, +∞}



	Relations: //(0x0000003b)➞
		Đ_R_Đ	// any symbol
		>any subset of [set-1] × [set-2]
		¤element of Đ_R_Đ
			[element-1][Đ_R_Đ][element-2]
			where [element-1] ∈ [set-1]
			where [element-2] ∈ [set-2]
			>"[element-1] is in [Đ_R_Đ] relation with [element-2]"
		-commutativity:
			if [element-1] Đ_R_Đ [element-2]  ==  [element-2] Đ_R_Đ [element-1]
			{//addition of natural numbers
			  3 + 2 == 5 == 2 + 3
			}
		-transitiveness:
			where [element-1] Đ_R_Đ [element-2]
               && [element-2] Đ_R_Đ [element-3]
			if [element-1] Đ_R_Đ [element-3];
                then Đ_R_Đ is transitive
		-symmetry:
			if ([element-1] Đ_R_Đ [element-2])
            && ([element-2] Đ_R_Đ [element-1]);
                then Đ_R_Đ is symmetrical
		-equilance:
			if (Đ_R_Đ is transitive)
            && (Đ_R_Đ is symmetrical)
            && (Đ_R_Đ is reflexive)



	Cardinality: //(0x0000003c)➞
		|<set>|
		>if the number of elements in <set> can be expressed as an unsigned int then <set> is ĐĐfiniteĐĐ
		>if the number of elements in <set> is equal to the number of elements in the set of natural numbers (N) then <set> is ĐĐcountably infiniteĐĐ
		>if the number of elements in <set> is larger than the number of elements in the set of natural numbers (N) then <set> is ĐĐuncountableĐĐ
		{ 'A':={0,1,2,3}
		  |'A'| == 4
		  'A' is ĐfiniteĐ
		}



	Values_of_interest:	// ?! something about ordered sets
		>NOTE: in the bellow examples [*this] refers to the set depicted on the corresponding number line
		-inner values:
			<set>o
			>values whichs all arbitrary sized surroundings are subsets of <set>
.			  {       -3        -2        -1         0         1         2         3
.				-------|---------|---------|---------|-----#=============#---------|-----
					1 is an inner value as its surrounded by 0.9, 0.99, 1.1, 1.01, etc.
					2 is not an inner value as its surrounded by 2.1, 2.01, 2.001 etc.,
						which are not part of the set
					[*this]o == ![0.6,2!]
			  }
		-outer values
			<set>k
Purple(			<set>k == R \ H )
			>values whichs have an arbitrary sized surrounding which contain no values which are elements of <set>
			>inner values of <set>s complementer
.			  {       -3        -2        -1         0         1         2         3
.				-------|---------|---------|----#=================#----------------|-----
					[*this]k={![-∞,-0.5!] U ![1.3,∞!]}
			  }
		-border values:
			d<set>
			>values whichs all arbitrary sized surroundings contain both a value which is
			  a member of <set> and a value which is not
.			  {       -3        -2        -1         0         1         2         3
.				-------|--#======O------#=============#--------#---------#---------|-----
					0.1 is a border value as its surrounding includes
					    0.11, 0.101, 0.1001, etc. which are not elements of [*this] and
						0.999, 0.99, 0.9, etc. which are elements of [*this]
					2 is a border value as its surrounding includes
						1.1, 1.01, 1.001, etc. which are not elements of [*this] and
						2 which is an element of [*this]
					-2 is a border value as its surrounding includes
						-2, -1.9, -1.8, etc. which are not elements of [*this] and
						-2.1, -2.01, -2.001, etc. which are elements of [*this]
					d[*this] == {-2.7 U -2 U -1.3 U 0.1 U 1 U 2}
			  }
		-cluster values:
			<set>*
			>a value whichs all arbitrary sized surrounding contain a value which is
			  a member of <set> (and that value is not the same one as in question)
.			  {       -3        -2        -1         0         1         2         3                                   
.				-------#==O------|-#==================#--------#---------|---------|-----
					-3 is a cluster value as its surrounding includes -2.999, -2.99, -2.9, etc.
						which are members of [*this]
					 1 is not a cluster value as 0.999, 0.99, 0.99, etc. and 1.1, 1.01, 1.001
					 	 are not members members of [*this] even tho 1 is member
					[*this]* == {[-3,-2.7!] U [-1.8,0.1]}
			  }
		-isolated values:
			<set>i
			>a value which is a member of <set> and has an arbitrary sized surrounding
			  which contain no other other member of <set>
.			  {        -3        -2        -1         0        1         2         3                                   
.				---#--#===========#---------|---#===========O--#--#-#----|---------#-----
					[*this]i == {-3.5 U 1 U 1.3 U 1.5 U 3}
			  }
		-bound values:
			where [set-s] ⊂ [set-p]
			>every 'x' ∈ [set-p] value is a ĐĐlower bound valueĐĐ of [set-s] if ∀'y'('x' <= 'y') where 'y' ∈ [set-s]
			>ie. a Đlower bound valueĐ is a value that is lesser than every value of a set and belong to the same set
			  of switch the formerly mentioned set is a subset of
			>every 'x' ∈ [set-p] value is an ĐĐupper bound valueĐĐ of [set-s] if ∀'y'('x' >= 'y') where 'y' ∈ [set-s]
			>ie. a Đupper bound valueĐ is a value that is greater than every value of a set and belong to the same set
			  of switch the formerly mentioned set is a subset of
			>a set ĐĐlower boundedĐĐ if there exists a Đlower bount valueĐ to it
			>a set ĐĐupper boundedĐĐ if there exists a Đupper bount valueĐ to it
			>a set is ĐĐboundedĐĐ if it is Đlower boundedĐ ∧ Đupper boundedĐ
			-ĐĐ_Infimum_ĐĐ
				inf <set>
				>the greatest Đlower bount valueĐ of a set
				>also called the ĐĐexacpt lower boundĐĐ
				>if <set> is not Đlower boundedĐ then inf <set> := -∞
			-ĐĐ_Supremum_ĐĐ
				sup <set>
				>the least Đupper bount valueĐ of a set
				>also called the ĐĐexacpt upper boundĐĐ
				>if <set> is not Đupper boundedĐ then sup <set> := +∞





#define matrixes\
#define matrices:: //(0x0000003d)➞\
    I-----------------------------------------------\
    I    ___  ___      _        _                   \
    I    |  \/  |     | |      (_)                  \
    I    | .  . | __ _| |_ _ __ _  ___ ___  ___     \
    I    | |\/| |/ _` | __| '__| |/ __/ _ \/ __|    \
    I    | |  | | (_| | |_| |  | | (_|  __/\__ \    \
    I    \_|  |_/\__,_|\__|_|  |_|\___\___||___/    \
    I-----------------------------------------------I
	>a block of elements where elements are organized into columns and rows;
	  each row has the same length as the others; positions are not interchangeable
	¤syntax
		>enclosed in parentheses
		>elements are separated by whitespaces
	{// 3 by 3 matrix
		┌           ┐
		│  1  2  3  │
	    │           │
		│  4  5  6  │
	    │           │
		│  7  8  9  │
		└           ┘
	 // 2 by 2 matrix
		┌       ┐
		│ 42 33 │
	    │       │
		│ 16 89 │
		└       ┘
	}



	Operators: //(0x0000003e)➞
		operatorˇ and operator[]:
			[matrix]ˇ[list]
			>element access
			><list> is a list of coordinates
			>in most programming languages this is done by specifying these values inside brackets,
			  separated by colons and 0 representing the first position
			>NOTE: for the sake of readability this document always uses the bracket notation
			{// an arbitrary matrix for the example
				     ┌      ┐
				     │ 2  5 │
				A := │      │
				     │ 4 40 │
				     └      ┘
				
				A^1 1  ==  A[0, 0]  ==   2
				A^1 2  ==  A[0, 1]  ==   5
				A^2 1  ==  A[1, 0]  ==   4
				A^2 2  ==  A[1, 1]  ==  40
			}
		operator+:
			>only usable on matrices of the same size
			>each element of the corresponding coordinates are added separately
			{// addition of 2 by 2 matrix
				┌       ┐           ┌      ┐           ┌       ┐
				│  1  3 │     |     │ 5 10 │  _______  │  6 13 │ // (1 + 5); (10 + 3)
				│       │  ---+---  │      │           │       │ //
				│ 16  4 │     |     │ 7  4 │  ‾‾‾‾‾‾‾  │ 23  8 │ // (16 + 7); (4 + 4)
				└       ┘           └      ┘           └       ┘
			}
		operator^T:
			>"transponation"
			>swapping the columns lines and columns
			>the <int>th line becomes the <int>th column
			{// transposing a 2 by 3 matrix
				     ┌           ┐				//         ┌           ┐
				     │ 13  6  21 │				//         │ 13  6  21 │ -----+
        .    	A := │           │				//    A := │           │      |
				     │ 18  0  12 │				//         │ 18  0  12 │ --------+
				     └           ┘				//         └           ┘      |  |
												//                            V  V
				      ┌       ┐					//                         ┌       ┐
				      │ 13 18 │					//                         │ 13 18 │
				      │       │					//                         │       │
				A^T = │  6  0 │					//                   A^T = │  6  0 │
				      │       │					//                         │       │
				      │ 21 12 │					//                         │ 21 12 │
				      └       ┘					//                         └       ┘
			}
		operator*:
			>only usable on matrices where the number of columns match the number of lines of the other
			>the second operand gets transponated then for every combination of lines corresponding values are multiplied together and added;
			  values resulting from the same row of the first matrix are written in the same row
			{// 3x3 matrix multiplied by 2x3 matrix
				┌         ┐         ┌      ┐           ┌       ┐
				│ 1  0  5 │         │ 2  4 │           │ 17 34 │ // 1*2 + 0*1 + 5*3;  1*4 + 0*5 + 5*6
				│         │   \ /   │      │  _______  │       │ 
				│ 1  0  4 │    X    │ 1  5 │           │ 14 28 │ // 1*2 + 0*1 + 4*3;  1*4 + 0*5 + 4*5
				│         │   / \   │      │  ‾‾‾‾‾‾‾  │       │ 
				│ 2  1  1 │         │ 3  6 │           │  8 19 │ // 2*2 + 1*1 + 1*3;  2*4 + 1*5 + 1*6
				└         ┘         └      ┘           └       ┘
			}
			-there is an intuitive alternative writing mode for writing matrix multiplication called the ĐĐFalk schemeĐĐ
				>the two matrices are written in a table form along their matching long sides
				{// 1x3 matrix multiplied by 3x1 matrix
					                    ┌   ┐
					                    │ 2 │
					┌         ┐   \ /   │   │
					│ 3  2  6 │    X    │ 4 │
					└         ┘   / \   │   │
					                    │ 1 │
					                    └   ┘
				 // reformatted using the Falk schema
					           ┌   ┐
					           │ 2 │
					           │ - │
					           │ 4 │
					           │ - │
					           │ 1 │
					           └ - ┘
					┌         ┐+---+
					│ 3| 2| 6 │|   |
					└         ┘+---+
				}
				>to each resulting empty cell the multiple of the corresponding spots are added together
				{
					           ┌   ┐
					(3x2)------│ 2 │
					  | +      │ - │
					  |(2x4)---│ 4 │
					  |  | +   │ - │
					  |  |(6x1)│ 1 │
					  |  |  |  └ - ┘
					┌ |  |  | ┐+---+
					│ 3| 2| 6 │| 20|
					└         ┘+---+
				}
		operator||:
			|[matrix]|
			>"determinant"
			>[matrix]s ${LINES} must match its ${COLUMNS}
			¤tricks
				>NOTE: letters signals ints BELOW
				-2 by to matrices
					  | ┌      ┐ |
					  | │ a  b │ |
	                  | │      │ |
					  | │ c  d │ |
					  | └      ┘ |
					// connect diagonally one way
					  | ┌     ┐ |
					  | │ a b │ |
					  | │  \  │ |
					  | │ c d │ |
					  | └     ┘ |
					// repeat the other way
					  | ┌     ┐ |
					  | │ a b │ |
					  | │  X  │ |
					  | │ c d │ |
					  | └     ┘ |
					  >multiply the numbers connected
					  >subtract the product of the ones connected with '/' from the product of the ones connected with '\\'
					  (a * d) - (b * c)
				-3 by to matrices
					  | ┌         ┐ |
					  | │ a  b  c │ |
	                  | │         │ |
					  | │ d  e  f │ |
					  | │         │ |
					  | │ g  h  i │ |
					  | └         ┘ |
					//expand as:
						a b c a b
						         
						d e f d e
						         
						g h i g h
					// connect diagonally 3 times
						a b c a b
						 \ \ \   
						d e f d e
						   \ \ \ 
						g h i g h
					// repeat the other way
						a b c a b
						 \ X X / 
						d e f d e
						 / X X \ 
						g h i g h
					  >multiply the numbers connected
					  >subtract the product of the ones connected with '/' from the product of the ones connected with '\\'
					  (a * e * i) + (b * f * g) + (c * d * h) - ((g * e * c) + (h * f * a) + (i * d * b))

	Identity_matrix: //(0x0000003f)➞
		┌               ┐
		│ 1  0  0 ... 0 │
		│               │
		│ 0  1  0 ... 0 │
		│               │
		│ 0  0  1 ... 0 │
		│ .  .  .     . │
		│ :  :  :     : │
		│               │
		│ 0  0  0 ... 1 │
		└               ┘
		>a matrix with all 1s on its diagonal and all 0s else where
		{ // identity matrix of 2
			┌      ┐
			│ 1  0 │
			│      │
			│ 0  1 │
			└      ┘
		}
		>behaves similarly as 1 in arithmetics or 0 in logic
		>a matrix times an identity matrix is the original matrix itself
		{ // what pipe dream is meant by the ABOVE
			           ┌      ┐
			           │ 1  0 │
			    *      │      │
			           │ 0  1 │
			           └      ┘
			              ||   
			┌      ┐   ┌      ┐
			│ 9  7 │   │ 9  7 │
			│      │ = │      │
			│ 4  6 │   │ 4  6 │
			└      ┘   └      ┘
		}


	Inversion: //(0x00000040)➞
		let ${A} be a matrix
		let ${B} be the inverse of ${A}
		let ${I} be a identity matrix

		${A} * ${B} == I


    Gaussian_ellimination: //(0x00000041)➞
	    >application to equation systems:
		>translate an equation system to a matrix by writing down the coefficents as the values and the results as their extension
			{                             ┌              ┐
			  2x + 3y - z = 32            │ 2  3  1 | 32 │
			  x  + y  - 4z = 16    =>     │         |    │
			                              │ 1  1  4 | 16 │  
										  └              ┘
			}
		>lines become inter changeable
		>by swapping lines, multiplying lines by a const and dividing lines by other lines a solution will be present
		>ones tries to create a matrix where <int>th row has atleast <int> 0 values at its beginning
		-the end result decides how many solutions the equation system has
			{ I ### | # I
			  I 0## | # I   =>  no solutions
			  I 00# | # I
			  I 000 | x I

			  I ### | # I
			  I 0## | # I   =>  1 solution
			  I 00# | # I 

			  I #### | # I
			  I 0### | # I  =>  ∞ solutions
			  I 00## | # I
			}

//--------
	Linear_regression:
		{
			 x | 0 | 1 | 2 | 3 |
			---+----------------
			 y | 2 | 3 | 3 | 5 |
			// ---
			      ┌   ┐
			      │ 2 │
			      │   │
			      │ 3 │
			 y  = │   │
			      │ 3 │
			      │   │
			      │ 5 │
			      └   ┘
			// ---
					x₁ x₀
			       ┌     ┐
			       │ 0 1 │
			       │     │
			       │ 1 1 │
			 A   = │     │
			       │ 2 1 │
			       │     │
			       │ 3 1 │
			       └     ┘

			       ┌         ┐
			       │ 0 1 2 3 │
			 A^T = │         │
			       │ 1 1 1 1 │
			       └         ┘
			// ---
			// x^2
			              ┌     ┐
			              │ 0 1 │
			              │     │
			              │ 1 1 │
			     *        │     │
			              │ 2 1 │
			              │     │
			              │ 3 1 │
			              └     ┘
			                | |     
			┌         ┐   ┌     ┐
			│ 0 1 2 3 │   │ a b │
			│         │ = │     │
			│ 1 1 1 1 │   │ b c │
			└         ┘   └     ┘
				a = 14
				b = 6
				c = 4
			// ---
			              ┌   ┐
			              │ 2 │
			              │   │
			              │ 3 │
			     *        │   │
			              │ 3 │
			              │   │
			              │ 5 │
			              └   ┘
			               | |     
			┌         ┐   ┌   ┐
			│ 0 1 2 3 │   │ d │
			│         │ = │   │
			│ 1 1 1 1 │   │ e │
			└         ┘   └   ┘
				d = 24
				e = 13
			// ---
			┌       ┐   ┌    ┐   ┌    ┐
			│ 14  6 │   │ a₁ │   │ 24 │
			│       │ * │    │ = │    │
			│  6  4 │   │ a₀ │   │ 13 │
			└       ┘   └    ┘   └    ┘

			┌            ┐               ┌            ┐               ┌            ┐
			│ 14  6 | 24 │    I-II*2 \   │  2 -2 | -2 │    II-I*3 \   │  2 -2 | -2 │ 
			│       |    │  ==========>  │       |    │  ==========>  │       |    │ 
			│  6  4 | 13 │           /   │  6  4 | 13 │           /   │  0 10 | 19 │ 
			└            ┘               └            ┘               └            ┘
			// ---
			0*a₁ + 10*a₀ = 19
			a₀ = 1.9
				//
			2*a₁ - 2*a₀  = -2
			2*a₁ - 2*1.9  = -2
			2*a₁ - 3.8    = -2		// + 3.8
			2*a₁ = 1.8				// /2
			a₁   = 0.9

			f(x) = 0.9x + 1.9
		 }
	?!_regression
		{
			 x |-2 |-1 | 1 | 2 |
			---+----------------
			 y | 3 | 1 | 0 | 2 |
		}
			// ---
			      ┌   ┐
			      │ 3 │
			      │   │
			      │ 1 │
			 y  = │   │
			      │ 0 │
			      │   │
			      │ 2 │
			      └   ┘
			// ---
					 x₂ x₁ x₀
			       ┌         ┐
			       │ 4 -2  1 │
			       │         │
			       │ 1 -1  1 │
			 A   = │         │
			       │ 1  1  1 │
			       │         │
			       │ 4  2  1 │
			       └         ┘

				   ┌             ┐
			       │  4  1  1  4 │
			       │             │
			 A^T = │ -2 -1  1  2 │
			       │             │
			       │  1  1  1  1 │
			       └             ┘
	//------
			                  ┌         ┐
			                  │ 4 -2  1 │
			                  │         │
			                  │ 1 -1  1 │
			       *          │         │
			                  │ 1  1  1 │
			                  │         │
			                  │ 4  2  1 │
			                  └         ┘
			                      | |
			┌             ┐   ┌         ┐
			│  4  1  1  4 │   │ a  b  c │
			│             │   │         │
			│ -2 -1  1  2 │ = │ b  d  e │
			│             │   │         │
			│  1  1  1  1 │   │ c  e  f │
			└             ┘   └         ┘

			a = 34
			b = 0
			c = 10
			d = 10
			e = 0
			f = 4
	//------
			                  ┌   ┐
			                  │ 3 │
			                  │   │
			                  │ 1 │
			       *          │   │
			                  │ 0 │
			                  │   │
			                  │ 2 │
			                  └   ┘
			                   | |
			┌             ┐   ┌    ┐
			│  4  1  1  4 │   │ 21 │
			│             │   │    │
			│ -2 -1  1  2 │ = │ -3 │
			│             │   │    │
			│  1  1  1  1 │   │  6 │
			└             ┘   └    ┘
	//------
			┌           |    ┐
			│ 34  0 10  | 21 │
			│           |    │
			│  0 10  0  | -3 │
			│           |    │
			│ 10  0  4  |  6 │
			└           |    ┘

#define graphs:: //(0x00000042)➞\
	I-----------------------------------------\
	I     _____                 _             \
	I    |  __ \               | |            \
	I    | |  \/_ __ __ _ _ __ | |__  ___     \
	I    | | __| '__/ _` | '_ \| '_ \/ __|    \
	I    | |_\ \ | | (_| | |_) | | | \__ \    \
	I     \____/_|  \__,_| .__/|_| |_|___/    \
	I                    | |                  \
	I                    |_|                  \
	I-----------------------------------------I

	>a set of points and ĐedgesĐ
	>an ĐĐedgeĐĐ is line connecting 2 points
	{ // a graph
	            E X
		A X        \  X D
		   \        \ |\
		    \        \|/
			 \    .---X C
			  X--^
			 B
		// a graph represented in an orderly manner
		A X----------X B
		  |^.
		  |  ^.
		  |    ^.
		  |      ^.
		  |        ^.
		C X----------X D
	}

	>a ĐĐsimple graphĐĐ is a graph where each point is connected max once
	{ // a simple graph
		A X--------X B
		           |
				   |
				   |
				   |
				   X C
	}

	>a ĐĐloopĐĐ is when an edge connects a point to itself
	{ // 'A' has a loop
		A X------X B
		 / \
		|   |
		\___/
	}

	>the ĐĐdegreeĐĐ of a point is the number of times edges connect to it
	{ // some previous graphs with degrees displayed
	     (1)      (1)
		A X--------X B
		           |
				   |
				   |
				   |
				   X C
				  (1)
	  //------
	     (3)        (1)
		A X----------X B
		  |^.
		  |  ^.
		  |    ^.
		  |      ^.
		  |        ^.
		C X----------X D
		 (2)         (2)
	  //------
	     (3)    (2)		// NOTE: how a loop counts effectively "twice"
		A X------X B
		 / \
		|   |
		\___/
	}

	>a ĐĐcomplete graphĐĐ is a graph, whichs each point is connected to every other exactly once
	{
		A X----------X B
		  |^.      .^|
		  |  ^.  .^  |
		  |    ::    |
		  |  .^  ^.  |
		  |.^      ^.|
		C X----------X D
	  //----
		   A X----------X B
			/|^--.__.--^|\
		   / |.-^.  .^-.| \
		F X:^|----::----|^:X C
		   \^|-..^__^.--|^/
			\|.:--^^--:.|/
		   E X----------X D
	}

	Number_of_edges:
		2m = ∑ deg(v)
		>"handshake theorem"
		>the sum of edges for all points is twice the number of edges
		{ // say we have a room 6 people
		  // everyone would like to shake hands with everyone exactly once
		  // how many handshakes are needed?
		  	// attempt to draw it
			   A X----------X B
				/|^--.__.--^|\
			   / |.-^.  .^-.| \
			F X:^|----::----|^:X C
			   \^|-..^__^.--|^/
				\|.:--^^--:.|/
			   E X----------X D
		  	// count how many times A, B, etc., shook hands
		  	// get 30
		  	// realized you included each handshake twice
		  	// divide by 2
		  	// get 15
		  	// you have now arrived to the correct solution
		  // actually using the theorem:
		    // get the degrees
			    (5)        (5)
			   A X----------X B
				/|^--.__.--^|\
		   (5) / |.-^.  .^-.| \ (5)
			F X:^|----::----|^:X C
			   \^|-..^__^.--|^/
				\|.:--^^--:.|/
			   E X----------X D
			    (5)        (5)

			∑ deg(v) = 5 + 5 + 5 + 5 + 5 + 5 = 30
			2m = 30		/ :2
			 m = 15
		}



#define sequances:: //(0x00000043)➞\
	I------------------------------------------------------\
	I   _____                                              \
	I  /  ___|                                             \
	I  \ `--.  ___  __ _ _   _  ___  _ __   ___ ___  ___   \
	I   `--. \/ _ \/ _` | | | |/ _ \| '_ \ / __/ _ \/ __|  \
	I  /\__/ /  __/ (_| | |_| |  __/| | | | (_|  __/\__ \  \
	I  \____/ \___|\__, |\__,_|\___||_| |_|\___\___||___/  \
	I                 | |                                  \
	I                 |_|                                  \
	I------------------------------------------------------I

	Summary:
		<int-2>
		∑ i = <calc>
		i = <int-1>
		>addition of numbers matching (calculated by) a rule
		>i starts at <int-1> always increases by one until it reaches <int-2>
		>for every value of i <calc> (being an equation) is calculated
		>all <calc>s are added to get the result
		{ // summation of 2 powers from 1 to 4
			4
			∑   = 2^i    ==    2^1 + 2^2 + 2^3 + 2^4    ==    30
			i = 1
		}
		
	Product:
		<int-2>
		Π i = <calc>
		i = <int-1>
		>multiplication of numbers matching (calculated by) a rule
		>i starts at <int-1> always increases by one until it reaches <int-2>
		>NOTE: if [int-1] starts at 0, the result is always 0; spotting it in a formula is most likely human error
		>for every value of i <calc> (being a an equation) is calculated
		>all <calc>s are multiplied together to get the result
		{ // product of even nums from 2 to 20
			10
			Π i = 2 * i    ==    2*1 * 2*2 * 2*3 * 2*4 * 2*5 * 2*6 * 2*7 * 2*8 * 2*9 * 2*10    ==    3715891200
			i = 1
		}
		-factorial:
			             [int!]
			<int>!  ==   Π    = i
			             i = 1
			>the product of all numbers from <int> to 1
			{ 4! == 4*3*2*1 == 24 }
			{ // C++ function calculating factorial; only included because i had one on hand at the type of writing
				unsigned long long factorial(int num){
					int product = 1;
					for(int i = 1; i <= num; i++){
						product = product * i;
					}

					return product;
				}
			}

#define probability\
#define combinatorics:: //(0x00000044)➞\
	I------------------------------------------------------------------------\
	I   _____                 _     _             _             _            \
	I  /  __ \               | |   (_)           | |           (_)           \
	I  | /  \/ ___  _ __ ___ | |__  _ _ __   __ _| |_ ___  _ __ _  ___ ___   \
	I  | |    / _ \| '_ ` _ \| '_ \| | '_ \ / _` | __/ _ \| '__| |/ __/ __|  \
	I  | \__/\ (_) | | | | | | |_) | | | | | (_| | || (_) | |  | | (__\__ \  \
	I   \____/\___/|_| |_| |_|_.__/|_|_| |_|\__,_|\__\___/|_|  |_|\___|___/  \
	I------------------------------------------------------------------------I

    ### Decision tree for combinatorics ### //₩
        Is order important?
                        ├── yes ── Do I have to use up ever element?
                        │                                        ├── yes ── "Permutation"
                        │                                        └── no  ── "Variation"
                        └── no  ── "Combination"
    #
																	
	Permutation:
		Unique:
			len(${elems})!
			>number of possible orders for the set ${elems}
			{ // How many unique ways can 4 different books be ordered?
              Green(
                    _______    _______    _______    _______ 
                   /  A   /,  /  B   /,  /  C   /,  /  D   /,
                  /      //  /      //  /      //  /      // 
                 /______//  /______//  /______//  /______//  
                (______(/  (______(/  (______(/  (______(/   


                                                    
                └─────────┘ └─────────┘ └─────────┘ └─────────┘
                  Slot #1     Slot #2     Slot #3     Slot #4  
              )
				 4! == 4*3*2*1 
			}
		Repetitive:
			{
				    len(${elems})!
				────────────────────────────
				  Π(sum_by_group(${elems}))
			}
			>NOTE: Π is the mathematical notation for product
			{ // How many unique ways can 9 books be ordered, from which 3 are "1984"s and 2 are "FUTU.RE"s?
              Green(
                           _______           _______       _______  
                          / 1984 /,         / FUTU /,     /  A   /, 
                         /      //,        / .RE  //,    /      //| 
                   2 x  /______///   2 x  /______///    /______///| 
                       (______(//        (______(//    (______(///| x 7
                       (______(/         (______(/     (______(///| 
                                                       (______(///| 
                                                       (______(///, 
                └─────────┘ └─────────┘ └─────────┘    (______(///  
                  Slot #1     Slot #2     Slot #3      (______(//   
                                                       (______(/    

                └─────────┘ └─────────┘ └─────────┘
                  Slot #4     Slot #5     Slot #6  

                                                   
                └─────────┘ └─────────┘ └─────────┘
                  Slot #7     Slot #8     Slot #9  
              )
						      9!
				─────────────────────────────
				 1! * 1! * 1! * 1! * 2! * 3!
					// ==
				9! / (1! * 1! * 1! * 1! * 2! * 3!)
			   // since 1! is 1 and multiplying by one doesnt affect the result, they can always be omitted
				9! / (2! * 3!) == 30240
			}
	Variation:
		Unique:
			{
					  len(${elems})!
				─────────────────────────
				 (len(${elems}) - ${N})!
			}
			>num of possible orders of ${N} elements selected from ${elems}
			{ // How many ways can the podium look after a race with 10 participants?
				10! / (10 - 3)!  ==  (((10 * 9 * 8)))
			}
		Repetitive:
			len(${alpha})^${N}
			>num of possible order of len(${alpha}) elements on ${N} positions where one element can be used multiple types
			{ // How many numbers can a byte represent?
				2^8  ==  256	// a byte is 8 bits; a bit has 2 possible values (0 and 1)
			  // How many license places are possible with the old Hungarian system (3 lets from the English alphabet and 3 numbers)?
			   26^3 * 10^3  ==  17'576'000
			}
	Combination:
        -for the following:

                     ${a}!
           ────────────────────────
            ${b}! * (${a} - ${b})!

          there is a short hand notation:

            / ${a} \
            \ ${b} /

			NOTE: that's a elongated pair of parentheses outside of ascii;
			       its pronounced "${b} under ${a}" or "${a} choose ${b}"
		Unique:
            / len(${elems}) \
            \      ${N}     /
			>num of possible ways to select ${N} elements from the set of ${elems} with different elements
			>NOTE: selecting an ${N} elements and selecting len(${elems}) - ${N} elements yield the same results;
			        interpret this as selecting 1 book from 10 is mathematically the same as not selecting 9
            ${n}C${r} : alternative notation
            >NOTE: most calculators will have it denoted as "nCr" on a button
			{ // If 100 people sit in a room and 10 of them are infected with COVID, how many combinations are there?
				/ 100 \
				\  10 /
				// ==
				100!/(10! * 90!)  ==  17'310'309'456'440
			}
        Repetitive:
            / len(${elems}) + ${N} - 1 \
            \           ${N}           /
            >num of possible ways to select ${N} elements from the set of ${elems}
              where there is an unlimited supply of all elements
            { // How many different flavours of tea can you make if you have 6 full boxes of different types and you like it with 3 bags?
                / 6 + 3 - 1 \
                \     3     /
                // ==
                8! / ( 3! * (8 - 3)! ) == 56
            }
            

	Probability:
		{ // often represented simply by a function named 'P'
            alias Probability=P
			P(<event>)
		  //
			 <desired possibilities>
			─────────────────────────
			   <all possibilities>
		}
		>for calculating the num of possibilities combinatorics are used
		¤impossible event
            >something that can never happen
			>represented by '∅'
			>P(∅) == 0
		>if event-1 requires event-2 to happen then its possibility must be less then or equal to it; formally:
			if A ⊂ B then   P(A) <= P(B)
		>a set containing every possible out come is called ĐĐcomplete sample spaceĐĐ
          ("teljes esemény rendszer"^HU)
        joined_probability:
            P(A ∩ B) := P(A) * P(B)
            >"intersection"
            >the probability of multiple events yielding desired outcomes
            { // What is the probability, we roll double 6-es?
              Green(
                    ________         ________
                   / o o o /|       / o o o /|
                  / o o o /O|      / o o o /O|
                 /_______/  |     /_______/  |
                 | o     |  |     | o     |  |
                 |   o   |O/      |   o   |O/
                 |     o |/       |     o |/ 
                 '-------'        '-------'
             )
              let A := 6 on dice one
              let B := 6 on dice two
              A = 1/6
              B = 1/6

              P(A ∩ B) = 
                    1     1      1 
                   ─── * ─── = ────
                    6     6     36
            }
        union_probability:
            P(A U B) := P(A) + P(B) - P(A ∩ B)
            >the probability that A, B or both yield desired outcomes
            >we add the probabilities and subtract what we "double counted"
            { // What is the probability, we roll a 6 with 2 die?
              Green(
                    ________       ________ 
                   /       /|     /       /|             .-------.
                  /       / |    /       / |        \    |O  O  O|
                 /_______/  |   /_______/  |  ------->   |       |
                 |       |  |   |       |  |        /    |O  O  O|
                 |       | /    |       | /              '-------'
                 |       |/     |       |/  
                 '-------'      '-------'   
             )
              let A := 6 on dice one
              let B := 6 on dice two
              A = 1/6
              B = 1/6

              P(A U B) = 
                    1     1      1 
                   ─── + ─── - ──── = 
                    6     6     36

                    11 
                   ────
                    36

            }
            >NOTE: this is often skipped as P(!A ∩ !B) == 1 - P(A U B)
        conditional_probability:
            >the probability of A given B
		                P(A ∩ B)
			P(A|B) := ────────────
			              P(B)
            -"teljes valószínűség tétele"^HU
                        |B|
                P(A) :=  ∑ P(A|B₁)*P(B1)
                        i=1
            bayers_theorem:
                           P(A) * P(A|B)
                P(B|A) := ───────────────
                              P(B)
            {  /* cup 1 */     /* cup 2 */
                ┐       ┌       ┐       ┌
                │ @  &  │       │ &   @ │
                │     @ │       │   @  &│
                │   &   │       │ & &   │
                │ &     │       │ @  & @│
                └───────┘       └───────┘
              // 2 '@', 3 '&';  4 '&', 5 '@';  
              // ------
              // First we draw a char from cup 1,
              // then we draw a char from cup 2.
              // How likely is it that we will draw a '&'?
                       1st Draw           2nd Draw
                     .-----------.      .----------.
                    /             \    /            \
                ┐  /    ┌       ┐  V  / ┌            V
                │ @  &  │       │ &   @ │            __
                │     @ │       │   @  &│           (  )
                │   &   │       │ & &   │             /
                │ &     │       │ @  & @│            |
                └───────┘       └───────┘            o
              //
Yellow(    		B₁): the 1st is '&'
Yellow(    		B₁): the 1st is '@'
Yellow(    		A ): the 2nd is '&'
                
                           3
Green(      	B₁ ) ==   ───
                           5
            
                           2
Green(      	B₂ ) ==   ───
                           5
                                        5
Green(      		   .- B₁ )  ==    ────
Green(      	    .-'      )         10
Green(      	A <|         )
Green(      	    '-.      )          4
Green(      	       '- B₂ )  ==    ────
                                       10
              //
              P(A) = P(A|B₁)*P(B₁) + P(A|B₂)*P(B₂)

                       5     3          4     2 
                   = ──── * ───   +   ──── * ───  
                      10     5         10     5

                      23 
                   = ────
                      55 
            }
            {// --- Geometric Thinking ---
              // Mátyás & Bálint agree to meet up between 6 and 7 o'clock at Jolly's Pub.
              //  If one has to wait more than 20 mins then he will order a beer.
              //  What is the probability that the 2 men will drink their first beers together?
            Mátyás's arrival    6'40
              7 ▲  --  --  --  --  --  -+
                │             -^\  \  \.|
                │           -^\  \  \.'\
                │         -^\  \  \.'\  |
                │       -^\  \  \.'\  \ 
                │     -^\  \  \.'\  \  -|6'40
                │   -^\  \  \.'\  \  -^   
                │ -^\  \  \.'\  \  -^   |
            6'20┼^\  \  \.'\  \  -^       
                │  \  \.'\  \  -^       |
                │\  \.'\  \  -^         
                │ \.'\  \  -^           |
                │.'\  \  -^              
              6 └───────┼───────────────➤  Bálint's arrival
                 6    6'20              7
              // In this particular case its easier to calculate whats not its probability then subtract it from 1.
            Mátyás's arrival    6'40
              7 ▲  --  --  --  --  --  -+
                │\  \  \  \  \-^       .|
                │ \  \  \  \-^       .' 
                │  \  \  \-^       .'   |
                │\  \  \-^       .'     
                │ \  \-^       .'      -|6'40
                │  \-^       .'      -^\  
                │\-^       .'      -^\  |
            6'20┼^       .'      -^\  \   
                │      .'      -^\  \  \|
                │    .'      -^\  \  \  
                │  .'      -^\  \  \  \ |
                │.'      -^\  \  \  \  \ 
              6 └───────┼───────────────➤  Bálint's arrival
                 6    6'20              7

                P(!A) = ((2/3 * 2/3)/2)*2

                      =   2/3 * 2/3

                      =   4/9

                P(A)  =  1 - P(!A)

                      =  1 - 4/9

                      =  5/9
            }


    Random_variable:
        >a variable that denotes the random outcome of events
        >too abstract to be calculated
        >makes sense on the domain of asking what is its probability to be a specific value
        >NOTE: see also "../Statistics/Probability distribution"
        binominal:
            -obeys the following restrictions:
                >trial outcomes are binary
                >trials are independent
                >fixed number of trials
            {
                let A    := success
                let bvar := the binominal random variable that denotes the number successes
                let n    := the number of trials
                P(${bvar} == ${k}) :=
                    / ${n} \
                    \ ${k} / *  P(${A})^${k} * P(1-P(${A}))^(${n}-${k})
            }
            {
                // Out of 8 coin flips, what is the probability of getting exactly 3 heads?
                let A    := heads
                let bvar := the number of heads
                let n    := 8
                let k    := 3

                P(${A})   := 0.5 // fair coin toss
                1-P(${A}) := 0.5
                
                P(${bvar} == 3) =
                    / 8 \
                    \ 3 / * 0.5^3 * 0.5^5 =

                      7
                    ────
                     32
            }
        poisson:
            -obeys the following restrictions:
                >there are no fixed trials, only a time window
                >outcomes have a fixed probability to happen within a window
                >outcomes are independent
            {
                let A    := expected number of events per time unit
                let T    := number of time units in question
                let λ    := A * T
                let pvar := poisson random variable that denotes the number of events
                P(${pvar} == ${k}) :=
                     λᵏ
                    ─── * e^(-λ)
                     k!
            }
            {
                // If a pidgeon shits 0.8 times an hour on average,
                //  what is the probability that it will shit 2 times under 90 minutes?
                let A    := 0.8 / 60 = 0.0133
                let T    := 90
                let λ    := 1.197
                P(${pvar} == 2) =
                     1.197²
                    ──────── * e^(-1.197) = 0.216
                       2!
            }


#define statistics\
I---------------------------------------------\
I   _____ _        _   _     _   _            \
I  /  ___| |      | | (_)   | | (_)           \
I  \ `--.| |_ __ _| |_ _ ___| |_ _  ___ ___   \
I   `--. \ __/ _` | __| / __| __| |/ __/ __|  \
I  /\__/ / || (_| | |_| \__ \ |_| | (__\__ \  \
I  \____/ \__\__,_|\__|_|___/\__|_|\___|___/  \
I---------------------------------------------I

    >all statistical models are wrong, but some are useful

    List_estimation:
        ¤problem:
            >have a list of values
            >wish to express it as a single value to estimate values encountered in the future
        Mode:
            >the most common value in the list
            >all most common values are considered modes
            {
                [1, 2, 5, 6, 6, 6, 7, 7, 8] => 6
                [1, 1, 2, 3, 4, 4]          => [1, 4]
            }
        Median:
            >choose the value(s) in the middle
            {
                [1, 2, 3]
                   ^^^
                
                [1, 2, 10'000]
                   ^^^
                [1, 1, 2, 2, 3, 3, 4, 9]
                         ^^^^^^
            }
        Midpoint:
            >"mid-range"
            >assume future values fall between the minimum and maximum of previous values
            >choose the point at equal distance from the two
            {
                let midpoint :=

                     max(data) + min(data)
                    ───────────────────────
                               2
            }
            {
                          sum
                     max   |
                      |    |
                      |   -+- midpoint
                 min  |    |
                  |   |    |
            }
        Mean:
            >"average"
            -improvement over midpoint:
                >if the min or max is wildly different from the rest of the values,
                  the midpoint will be misleading
                >same logic applied to the whole list
            >the value that minimizes the combined distance from all values
            {
                let mean :=
                    μ     =
                sum(data) / len(data) =

                     1  
                    ─── * ∑ data
                     n  
            }
            {
                ▲
                │                x
                │                 
                │                 
                │        midpoint
                │- - - - - - - - - - - -
                │               avg
                │````x```````````````````
                │       x     x
                │          x
                │  x
                │
                ┼────────────────────────▶
            }
            Variance:
                >measure of how far values are spread out from their average
                >we want to express how telling the mean is
                >expresses entropy
                >NOTE: the higher the variance, the "riskier" your guess gets
                {
                    let variance :=
                        σ²        = // squared standard deviation; see BELOW

                         1   
                        ─── * ∑ (data - mean)²
                         n   
                }
                {
                    ▲     Matching averages
                    │
                    │             lower variance
                    │              /
                    │           ''/
                    │          '  '  higher variance
                    │         '    '    /
                    │       *'******'* /
                    │    ***'        '***
                    │  **  '          '  **                                
                    │**  .'            '.  **
                    │...'                '...
                    ┼────────────────────────▶
                }
                Bessels_correction:
                    >calculating the variance from a sample (and not a population),
                      the variance will come out under estimated
                    >over estimation is more useful than under estimation
                    >we intentianlly inflate with a modified formula
                    {
                        let bessels_variance :=

                             1   
                            ─── * ∑ (data - mean)²
                            n-1   
                    }
                Standard_deviation:
                    >the problem with variance is that because of the square operation,
                      the units are squared too
                    >no one knows what an IQ² or kg² looks like
                    {
                        let standard_deviation :=
                            σ                   =
                            √(variance)
                    }
            Confidence_interval:
                {
                        _
                    let X := sample mean
                    let z := magick number
                    _      σ
                    X ± z ───
                          √n
                }
                >an estimate of the over all mean, based on the mean of a sample
                >a confidence level (percentage) is given to express how likely
                  the target mean is to be within our estimate
                >"For example, suppose we want to estimate the mean weight  \
                   of a certain species of turtle in Florida.               \
                   Since there are thousands of turtles in Florida,         \
                   it would be extremely time-consuming                     \
                   and costly to go around and weigh each individual turtle."
                >NOTE: z is a magick number for our ends and purposes;
                        there are table look ups for it
                { // Example
                  //  Given the normal distribution: N(μ, 22)
                  //  And the samples: [14.8 12.2 16.8 11.1]
                  //      (where z₀.₉₇₅ = 1.96)

                  //  a) Provide the 95% confidence interval for μ!
                    n = len([14.8 12.2 16.8 11.1]) = 4
                    σ = 22 // given

                    sample_mean = sum([14.8 12.2 16.8 11.1]) / n
                                = 54.9 / 4
                                = 13.725

                    margin_of_error = z * (σ/√n)
                                    = 1.96 * (22/√4)
                                    = 21.56

                    confidence_interval = [sample_mean-margin_of_error, sample_mean+margin_of_error]
                                        = [13.725-21.56, 13.725+21.56]
                                        = [-7.835, 35.285] // final answer

                  // Wait, why the fuck are we given and calculating with z₀.₉₇₅,
                  //  when 95% was asked from us?
                  // Because (1 - ((1-0.95) / 2)) is 0.975

                  //  b) How large must the sample size be,
                  //      if we want the confidence interval to be
                  //      at most 1.6 units in length?

                  margin_of_error = distance(confidence_interval) / 2
                                  = 1.6 / 2
                                  = 0.8

                  margin_of_error = z * (σ/√n)
                              0.8 = 1.96 * (22/√n) 
                              0.8 = (1.96*22)/√n    // *√n
                           √n*0.8 = 1.96*22
                           √n*0.8 = 1.96*22
                           √n*0.8 = 43.12           // /0.8
                               √n = 53.9            // ^2
                                n = 2905.21

                                n ≥ 2906

                }

    Probability_distribution:
        >the set of probabilities for every value of a random variable
        >the sum of a probability distribution must always be exactly 1
        binominal:
            >if the variable is binominal, its called a binominal distribution
              and is something that is easy to calculate and plot as there
              are a fixed number of possible values for the random variable
            {
              // You just wrote your statistics test.
              // Lucky for you it was easy: 10 questions, each with 4 possible answers.
              // Unluckly for you: you did not understand a word, so you choose at random.
              // You would like to get some insight into your statistical chances
              //  of passing statistics.
              let n_questions  := 10
              let success_rate := 1/4
              // How does the probability split between getting a specific amount of points?
              let points := random variable of the amount of points gained
              let k[]    := 0..n_questions = 0..10
              // If you knew what were you doing, you would have not failed...
              // Lets start slow, what is the probability that you had 0 hits?
              P(points == k[0]) := ?
              // Well, it should be equal to getting it wrong 10 times.
              // The probability of being wrong once should be:
              P(1-success_rate) = 3/4
              // This applies to each k, but how do we even denote this?
              let is_success[n_questions] : bool := random variables denoting the succes
                                                     to each question accordingly
              // Ok, that works.
              // So:
              P(points == k[0]) := P(is_success[0] == false ∩ .. is_success[n_questions] == false)
                                 = (3/4)¹⁰
                                 = 0.056
              // Welp, thats calming, i guess?
              // What about having 1 point?
              P(points == k[1]) := P(is_success[0] == true)
                                 ∩ P(is_success[1] == false .. is_success[n_questions] == false)
                                 = (1/4) * (3/4)⁹
                                 = 0.019
              // Wait, that doesnt look right, its too small.
              // Yeah, thats the probability of getting the first answer right
              //  and the rest wrong.
              // The order does not matter to us.
              // Oh, Lord, we are going to do combinatorics on random variables.
              P(points == k[1]) := P(is_success[0] == true)
                                 ∩ P(is_success[1] == false .. is_success[n_questions] == false)
                                 * (10 choose 1)
                                 = (1/4) * (3/4)⁹ * 10
                                 = 0.188
              // Actually that wasnt too bad, but if i have to do it by hand for all values,
              //  im going to kill myself.
              // I wonder it I can represent it as a function on my casio calculator:
                     1 ˣ   3 ¹⁰⁻ˣ
              f(x)= ─── * ───    * 10Cx
                     4     4
              // Not the prettiest, but assuming the range is set correctly...
               x | y
              ---+---------
               0 | 0.056
               1 | 0.187
               2 | 0.282
               3 | 0.250
               4 | 0.146
               5 | 0.058
               6 | 0.016
               7 | 3.0*10⁻³
               8 | 3.8*10⁻⁴
               9 | 2.8*10⁻⁵
              10 | 9.5*10⁻⁷
              // Wow, cool!
              // No, wait, its not cool its terrible, I'm fucked.
              // Never the less, surely the most healthy thing now is to obsess over the data...
              // With a slight touch up, our formula becomes generic:
              P(x == k) = aᵏ * bⁿ⁻ᵏ * nCk
              // Also, Turns out that thing above is a calculated binominal distribution. Neat.
               0.3 +
                   |             O                                                      
                   |                                                                    
              0.25 |                   O                                                
                   |                                                                    
                   |                                                                    
                   |                                                                    
               0.2 |                                                                    
                   |      O                                                             
                   |                                                                    
              0.15 |                          O                                         
                   |                                                                    
                   |                                                                    
               0.1 |                                                                    
                   |                                                                    
                   |                                                                    
                   |                                 O                                  
              0.05 O                                                                    
                   |                                                                    
                   |                                        O      O     O      O      O
                 0 +-------------------------------------------------------------------+
                   0             2            4             6            8             10
              // That doesnt make me feel better either considering 50% is the passing cut-off.
              // Actually, what are the chances?
              P(points > 4) = P(points = 5) + .. P(points = 10)
                            = 0.078
              // Almost 8%!
            }
        -uniform:
            P₀(x) == ... == P(x)ₙ
            >each outcome is equally likely
            Probability_density_function:
                n := the number of possible outcomes
                Discrete:
                              1
                    f(x) :=  ───
                              n
                Continous:
                                1
                    f(x) :=  ───────
                              b - a'
        -normal:
            >"bell curve"/"Gaussian distribution"
            >continous by definition
            >symmetrical by definition
                        1        /   (x-mean)² \
            f(x) := ───────── e^( - ──────────  )
                     √(2πσ²)     \      2σ²    /
            -defined by a mean and a variance:
                N(mean, σ)
        -poisson:
            >right skewed
        expected_value:
            >"mean of the variable"
            >each outcome must be tokenized
            >the value to which the random variable will converge on a large enough scale
            >weighted sum of out comes
            {
                let n         := number of outcomes
                let o[${i}]'p := ${i}'th outcome probability
                let o[${i}]'w := ${i}'th outcome weight
                           ${n}
                E(${v}) :=  ∑   o[${i}]'w * o[${i}]'p
                           i=1
            }
            {
                // What is our expected return in the following dice game?
                //  on 1, 2, 3, 4 we lose our money
                //  on 5 we double our money
                //  on 6 we triple our money
                let L := loosing our money
                let D := doubling our money
                let T := tripling our money

                // The expected value will tell us what is the multiplier on
                //  our invested money. Now lets tokenize to weights
                L := -1
                D :=  2
                T :=  3

                P(L) := 4/6
                P(D) := 1/6
                P(T) := 1/6

                E(X) := 4/6*-1 + 1/6*2 + 1/6*3 ~ 0.166

                // 0.166 > 0 where 0 would be being exactly at our money.
                // We are turning a profit, we should play as much as possible.
                // ?!?!
            }
        variance:
            {
                let n      := number of outcomes
                let o[i]'p := i'th outcome probability
                let o[i]'w := i'th outcome weight
                let E      := expected value
                           ${n}
                V(${v}) :=  ∑   (o[${i}]-E)'w^2 * o[${i}]'p
                           i=1

                O = √V(x)
            }
        Continous:
            >is the x
             if f(x) exists
                              x
             such that F(x) = ∫ f(t) dt
                             -∞

    Hypothesis_testing:
        H₀ : θ ∈ Θ₀
        H₁ : θ ∈ Θ₁
        >a ĐĐhypothesisĐĐ is a statement we wish to accept or reject
        >the ĐĐnull hypothesisĐĐ is the claim that an effect does not exists,
          and its due to statistical noise;
          denoted by H₀
        >the ĐĐalternative hypothesisĐĐ is the claim that an effect does exists;
          denoted by H₁
        {@begin=python@
            def T(x, rejection_region):
                return x in rejection_region
        @end=python@}

                

#define geometry:: //(0x00000045)➞\
	I--------------------------------------------------------\
	I     _____                           _                  \
	I    |  __ \                         | |                 \
	I    | |  \/ ___  ___  _ __ ___   ___| |_ _ __ _   _     \
	I    | | __ / _ \/ _ \| '_ ` _ \ / _ \ __| '__| | | |    \
	I    | |_\ \  __/ (_) | | | | | |  __/ |_| |  | |_| |    \
	I     \____/\___|\___/|_| |_| |_|\___|\__|_|   \__, |    \
	I                                               __/ |    \
	I                                              |___/     \
	I--------------------------------------------------------I

	Vectors:
		>a struct which has a direction and a length
		>for its definition 2 points and specifying direction is required
		>an optimization of defining it is to have one of the points be the ĐoriginĐ and the direction is always away from it;
		  this way a single point given is sufficient
		{// 2 dimensional vector represented in a coordinate system
			v = (2;2)
						Y ▲                
						  |    (2;2)       
						  |   P            
						  |  /             
						1 + /              
						  |/               
			--------------+-+-------------➤
						  | 1             X
						  |                
						  |                
						  |                
						  |                
						  |                
		}
		operator+:
			>2 vectors can be added by adding their coordinates
			>graphically representing that means the second vector starts from the first and the end coordinate is the result
			{// 2 dimensional vectors added
				let v = (2;2)
				let w = (4;0)
				v + w:
							Y ▲                
							  |    (2;2)   (6;2)  
							  |   P-------D          
							  |  /             
							1 + /              
							  |/               
				--------------+-+-------------➤
							  | 1             X
							  |                
							  |                
							  |                
							  |                
							  |                
				w + v:
							Y ▲                
							  |            (6;2)  
							  |           P              
							  |          /         
							1 +         /          
							  |        /           
				--------------+-|-----D-------➤
							  | 1      (4;0)  X
							  |                
							  |                
							  |                
							  |                
							  |                
				visualization of commutativity:
							Y ▲                
							  |    (2;2)   (6;2)  
							  |   P-------B              
							  |  /       /         
							1 + /       /          
							  |/       /           
				--------------+-|-----D-------➤
							  | 1      (4;0)  X
							  |                
							  |                
							  |                
							  |                
							  |                
			}
			operator||:
				XXX:
					>start point
					>end point
					>Pythagoras theorem
				>"length"
				>a 1 dimensional vectors length is the distance between its start and end points
				>for calculating an <int> dimensional vectors length <int>-1 applications of the Pythagoras theorem is needed
				  { // length of a 2 dimensional vector
				  		// here is our vector:
									  P (16;8)
									 /
									/
								   /
								  /
								 /
								/
							   /
						(0;0) X
				  		// modified into a triangle
								b P (16;8)
								 /:
								/ :
						   C   /  :
							  /   :  A
							 /    :
							/    ,:
						   /    |.:
					(0;0) X- - - -+
						 a    B    c 
						// we get the length of A and B by calculating the distance between a and B on the x and y dimensions
						// NOTE: how A and B are both 1 dimensional vectors merely shifted in the second dimension
					sizeof(A) = | a["y"] - b["y"] | = 8
					sizeof(B) = | a["x"] - b["x"] | = 16
						// applying the theorem
					|C| = ˇ(sizeof(A)^2 + sizeof(B)^2) ~ 17.8
				 }
			operator x([vector-1], vector-2):
				>"scalar product" or "dot product"
				let γ := (angle enclosed by the 2 vectors)
				[vector-1] x [vector-2]  ==  |[vector-1]| * |[vector-2]| * cos(γ)
					or
				let n := (number of dimension in question)		// {when using 2D vectors its 2}
				[vector-1] x [vector-2]  ==  [x-1]*[x-2] + [y-1]*[y-2] + ... [?-1]*[?-2]
				{// example
					let |v| := 4
					let |w| := 5
				           P
						  /
						 /  v
					    / 
					   / '. 
					  /    .
					 / 60° ,           w
					+--------------------->
				   v x w  == 
				  |v| * |w| * cos(γ) ==
				   4  *  3  * cos(60°) == 6
				}

#define algebra:: //(0x00000046)➞\
	I----------------------------------------\
	I    ___  _            _                 \
	I   / _ \| |          | |                \
	I  / /_\ \ | __ _  ___| |__  _ __ __ _   \
	I  |  _  | |/ _` |/ _ \ '_ \| '__/ _` |  \
	I  | | | | | (_| |  __/ |_) | | | (_| |  \
	I  \_| |_/_|\__, |\___|_.__/|_|  \__,_|  \
	I            __/ |                       \
	I           |___/                        \
	I----------------------------------------I

	where A, B, C ∈ C	// NOTE: the 2nd C is the set of complex numbers

	(A + B)^2  =  A^2 + 2*AB + B^2
	(A - B)^2  =  A^2 - 2*AB + B^2
	(A + B)^3  =  A^3 + 3*A^2*B + 3*A*B^2 + B^3
	(A - B)^3  =  A^3 - 3*A^2*B + 3*A*B^2 + B^3
	(A + B)(A - B)  =  A^2 - B^2

	Squre_root:
		                     -B ± ˇ(B^2 - 4*AC)
		A*x^2 + B*x + C  =  ────────────────────
									 2*A


#define calculus:: //(0x00000047)➞\
	I------------------------------------------\
	I   _____       _            _			   \
	I  /  __ \     | |          | |			   \
	I  | /  \/ __ _| | ___ _   _| |_   _ __    \
	I  | |    / _` | |/ __| | | | | | | / __|  \
	I  | \__/\ (_| | | (__| |_| | | |_| \__ \  \
	I   \____/\__,_|_|\___|\__,_|_|\__,_|___/  \
	I------------------------------------------I

	NOTE:
		{   [   !]
				A
				| 
				these -> ![        ]
				-in this context- are equal to their closing counter parts, cause i dont want to forever fuck up my highlighting
		}
        >some subtopics are probably organized wrong


	ASSIGNMENT: //(0x00000048)➞
		[var] := [value]
		>makes a variable hold a value
		>since its asymmetrical (('A':='B') != ('B':='A') != ('A'=:'B')), it deserves an asymmetrical operator
		>ĐĐ_MOST_ĐĐ programming languages use '=' instead, always assigning to the left side;
		  there is a good reason for it: its much easier to type



	ORDERED_PAIR: //(0x00000049)➞
		([...1],[...2])
		([...1],[...2]) != ([...2],[...1])
		>fixed order
		>most commonly used when working with a matrix
		>[...1] is called the ĐĐfirst componentĐĐ
		>[...2] is called the ĐĐsecond componentĐĐ
		{   (2,4)   }



	SIGNUM: //(0x0000004a)➞
        >the naming refers to the sign
        >useful for determining direction
        {@begin=python@
            def sgn(x):
                if x >  0: return  1
                if x == 0: return  0
                if x <  0: return -1
        @end=python@}
        ¤formally
                      /  1  if 'x' > 0
            sgn('x') {   0  if 'x' == 0
                      \ -1  if 'x' < 0

                where 'x' ∈ R



	DISTANCE: //(0x0000004b)➞
        {@begin=python@
            def distance(x, y): return abs(x - y)
        @end=python@}
        ¤formally
		    d('x', 'y') := |'x' - 'y'|

		        where 'x', 'y' ∈ R



	SURROUNDING: //(0x0000004c)➞
		{ S₂(36) == ![34, 38!] }
        ¤formally
            Sˇ'r'('x') := { 'y' ∈ R | d('x', 'y') < 'r' }
            Sˇ'r'('x') == !['x' - 'r', 'x' + 'r'!]

                where 'x' ∈ R



	INFINITY: //(0x0000004d)➞
        >concept, not a number
        -defined operations:
          {
		    (-∞) < 'x' < (+∞)

		    'x' + (+∞) := +∞ + 'x' := +∞
		    'x' + (-∞) := -∞ + 'x' := -∞

		     'x'
		    ───── := 0
		     +∞

		     'x'
		    ───── := 0
.		     -∞

		    'x'ˇ+ (+∞) := (+∞)'x'ˇ+ := +∞
		    'x'ˇ+ (-∞) := (-∞)'x'ˇ+ := -∞
		    'x'ˇ- (+∞) := (+∞)'x'ˇ- := -∞
		    'x'ˇ- (-∞) := (-∞)'x'ˇ- := +∞

		    (+∞) + (+∞) := +∞
		    (-∞) + (-∞) := -∞

.		    -(+∞) := -∞
.		    -(-∞) := +∞

		    (+∞)(+∞) := (-∞)(-∞) := +∞
		    (+∞)(-∞) := (-∞)(+∞) := -∞

                    where 'x' ∈ R
                    where 'x'₊ ∈ R₊
                    where 'x'₋ ∈ R₋
          }
        -significant undefined operations:
          {
		    (+∞) + (-∞)
		    (-∞) + (+∞)
		    0(+∞)
		    0(-∞)
		    (+∞)0
		    (-∞)0
		    +∞/+∞
.		    -∞/-∞
 		    +∞/-∞
. 		    -∞/+∞
          }


	FUNCTIONS: //(0x0000004e)➞
		<name> : <set-1> -> <set-2>
		>any equation that associates any 'x' value with an 'y' value
		>can be defined as a set of ordered pairs (see AT "../Ordered Pairs")
		>can be defined as a relation (see AT "../Relations")
		>we associate all elements of 'A' set with a element of 'B' set
		>however, if we were to associate an element if 'A' with more than 1 element in 'B' that wouldn't be a function
		  (try to write a function without extern/static variables in any language that returns different values
		    when given the same parameters, to see why; good luck bro
		  )
		  {
            F := {(1,2),(2,3),(3,4)} 
            // for x > 0 && x < 4
		  	int F(int x) {
		  		return x+1;
		  	}
		    //------
		    G(x) := x+3
		    G := {(1,4),(2,5),(3,6)...}
		    ( int G(int x) {
		  		return x+3;
		      }
		    )
		    //------
		    H(x) := √x
		    // this is NOT a function as the association is not obvious
		    // H(4) could be 2 or -2 and there is no way to decide between them
.		    // however:
		  	  where x ∈ N
		  	  H(x) := √x
		    // is a function
		  }
		>can be visualized in a coordinate system
		  {
              F := {(1,2)}
                        Y ▲                
                          |                
                          |                
                          |                
                        2 +  o             
                          |                
            --------------+--+------------➤
                          |  1            X
                          |
                          |
                          |
                          |
                          |
		  }
		>a ĐĐreal functionĐĐ is a function whichs X and Y values are all real numbers
		-nesting:
			func1 o func2  :=  func1(func2())
			(func1 o func2)('x')  :=  func1(func2('x'))
			>the end result of the later becomes the starting value of the former
			{
              R := {(1,2),(2,3),(3,4)}
			  S := {(2,1),(3,2),(5,1)}
			  RoS == R(S(x)) == {(2,2),(3,3),(5,2)}
			  SoR == S(R(x)) == {(1,1),(2,2)}
			}
		Inversion: //(0x0000004f)➞
			func^-1
			(func^-1 o func)('x')  ==  (func o func^-1)('x')  ==  'x'
			>the inverse of a function is function which if passed the original with a value
			  it always returns the same value
			>the inverse of a function doesnt always exist { f('x') := x^2  has no inverse (cause g('x') := √x is not a funtion) }
			### Inversion ###
				{ F(x)=5+6x }
				1. Replace the function part with a variable { y = 5+6x }
				2. Swap that variable with 'x' { x = 5+6y }
				3. Reorder to <var> { y = (x-5)/6 }
				>now y == func^-1 { F(x)^-1 = (x-5)/6 }
			-invertablility:
				>function 'F' is invertible if 'F'^-1 is also a function
					### Checking_process ###
						1. Invert
						2. Visualize in a coordinate system { fuck no }
						3. if there're multiple 'y' values assigned to a single 'x' it is NOT a function and
						    the original is NOT invertible
		Monotony: //(0x00000050)➞
			>if element number <int> is always lesser than <int>-1 then the function is ĐĐstrictly monotone decreasingĐĐ
			>if element number <int> is always greater than <int>-1 then the function is ĐĐstrictly monotone increasingĐĐ
			>if element number <int> is always lesser than or equal to <int>-1 then the function is ĐĐmonotone decreasingĐĐ
			>if element number <int> is always greater than or equal to <int>-1 then the function is ĐĐmonotone increasingĐĐ
			>a function is ĐĐmonotoneĐĐ if its Đmonotone decreasingĐ or Đmonotone increasingĐ
			>a function is ĐĐstrictly monotoneĐĐ if its Đstrictly monotone decreasingĐ or Đstrictly monotone increasingĐ
		-Real sequences:
			f:N -> R
			<[char]ˇn>
			[char]ˇ<int> := f(<int>)
		Limit: //(0x00000051)➞ // this is a mess ?!
			Aproach:
				x->y
				>"x approaches y"
			{
               lim  f(x) = L		// left hand limit
			  x->[y]⁻

			   lim  f(x) = L		// right hand limit
			  x->[y]⁺

			   lim  f(x) = L	    // limit
			  x->[y]
			}
			>if Đleft hand limitĐ == Đright hand limitĐ then limit := Đleft hand limitĐ := Đright hand limitĐ
			  else limit := undefined

			lim f(x) = L
			x->y
			if 0 < |x - y| < δ; then |f(x) - L| < ε
			>the limit of a const function is always the const value it takes up
			  { f(x):=2; lim f(x) = 2}
			>the limit of a [function] at <int>; where [function](<int>) is valid is always [function](int)
			  { f(x) := 4 x + 2
			    lim f(x) == (8*4 + 2) == 34
				x->8
			  }
			-extract from billiant.org/wiki/epsilon-delta-definition-of-a-limit
				 "In other words, the definition states that we can make values returned by the function f(x)\
				  as close as we would like to the value L by using only the points in a small enough interval\
				  around xˇ0.\
				   One helpful interpretation of this definition is visualizing an exchange between two parties, Alice and Bob.\
				  First, Alice challenges Bob, \"I want to ensure that the values of f(x) will be no farther than ε from L!\"\
				  If the limit exists and is indeed L, then Bob will be able to respond by giving her a value of δ,\
				  \"If for all points x is within a δ-radius interval of xˇ0, then f(x) will always be within an ε-interval of L.\"\
				  If the limit exists, then Bob will be able to respond to Alice's challenge no matter how small she chooses ε.
Purple(		>when the tangent (the line that intersects a curve exactly once| of a function at a secific point
			  is in question, the limit is the second point of the tangent)
			{
              F(x) = x²

			  lim  x² = 1
			  x->1

					Y ▲   /   /        
					  |   |  /         
					  |   . /          
					  |  / /           
					1 +  |/            
					  |.-ˇ             
					--V-/+--+---------➤
					  |/ 1  2         X
			}
			¤limits at infinity
				>found by a series of algebraic operations
				¤algebraic operations with limits
                  {
					lim  x := ∞      and      lim  x := -∞
					x->∞                      x->-∞
					//----
					lim  [num]/x := 0      and      lim  -[num]/x := 0
					x->∞                            x->-∞
					>its easy to see that if we divide a number with increasingly larger numbers,
					  the result will always be increasingly smaller, but never 0
					//----
					lim  [num]/x := ∞      and      lim  [num]/x := -∞
					x->0^+                          x->0^-
					//----
					where |[num]| > 1
					lim  [num]^x = ∞      and      lim  [num]^x = 0
					x->∞                           x->-∞
					//----
					where |[num]| < 1
					lim  [num]^x = 0      and      lim  [num]^x = ∞
					x->∞                           x->-∞
                  }
				¤policeman thesis
					>if <aˇn>  ≤  <bˇn>  ≤  <cˇn> and lim <aˇn> == lim <cˇn>; then lim <bˇn> == lim <aˇn> ( and lim <bˇn> == lim <cˇn> )
			   								          x->∞         x->∞            x->∞         x->∞            x->∞         x->∞      
            ___
			lim <aₙ> := inf (<aₙ>*)
                                
			lim <aₙ> := sup (<aₙ>*)
			‾‾‾
			LHospitals_rule:
					  f(x)               f'(x)
				lim  ──────   ==   lim  ───────
				x->c  g(x)         x->c  g'(x)
				
		Derivative: //(0x00000052)➞
                             f(x + h) - f(x)
			  f'(x) := lim  ─────────────────
			     	   h->0        h
            >measurement of the rate of change "in an instant"
			>the process is called ĐĐdifferentationĐĐ
			>the result of ĐdifferentationĐ is the ĐĐderivativeĐĐ
			>if the limit doesnt exist then the derivative doesnt exist either
			¤easy mode
				>the derivative of const-s is always 0
					const   ->   none
				>the derivative of <var> raised to the power of <num> is always
				  <num> times <var> raised to the power of <num> minus 1
				  	xʸ      ->   y * xʸ⁻¹
				>the derivative of an exponential function <func> is
				  <func> times ln(<func>)
					aˣ      ->   aˣ * ln(a)
            {
              // It is trivial to determine the slope of a line.
              // Choose any two points.
                y ▲
                  │          X
                  │         / 
                  │        /  
                  │       /   
                  │      /    
                  │     /     
                  │    /      
                  │   /       
                  │  X        
                  │ /
                  │/
                  ┼────────────────────────▶ x
              // Determine the change in x and y.
                y ▲
                  │          /
                  │         /|
                  │        / |
                  │       /  |
                  │      /   | △y
                  │     /    |
                  │    /     |
                  │   /      |
                  │  /_______| 
                  │ /   △x
                  │/
                  ┼────────────────────────▶ x
              // The ratio of the two tells you the slope.
                △y := 8
                △x := 4 // NOTE: mono fonts are usually twice as high as wide

                 △y      8
                ──── == ─── == 2
                 △x      4

              // Any other two points could have been choosen,
              //  as they all yield the same slope in case of a line.

              // However, what about more complex functions?
                y ▲                    .
                  │                   .'
                  │                  .'
                  │                 .'
                  │                .'
                  │                '
                  │       f(x)    '
                  │              '
                  │    .---.   ,'
                  │  .'     ''`
                  │ .
                  │.
                  ┼────────────────────────▶ x
              // We could ĐattemptĐ the same trick
                y ▲                    .
                  │                   .'
                  │                  .'|
                  │                 .' | △y
                  │                .'  |
                  │                '___|
                  │       f(x)    ' △x
                  │              '
                  │    .---.   ,'
                  │  .'     ''`
                  │ .
                  │.
                  ┼────────────────────────▶ x
              // We get ĐaĐ slope, but clearly,
              //  it no longer applies to the rest of the function.
              //  Moving any of the points could drastically alter the result.
              //  With that, randomly choosing points to compare looses meaning.
              // What would make more sense is assigning a slope value to each point.
              // Theres a contradiction there tho: how could a point have change? 
                                           _.-^---....,-      
                                        _--             ^--_  
                                       <                    >.
                                       |                     |
                     △y      0          \._               _./ 
                    ──── == ─── ==         ``-. . , ; --''    
                     △x      0                 | |   |        
                                             .=||  | |-.      
                                             `=#$%&%$#-'      
                                               | ;  :|        
                                        ____.,#%&$@%#&~,.____ 
              // Ok, ok; but what if, we were to ĐapproximateĐ 0 change?
                f'(x) := the slope of the point corresponding to f(x)

                                              simply the distance of y values
                                               calculated as the result difference
                                               at x and x + <our approximation of 0>
                                               for our current function
                                                  /
                          △y      f(x + △x) - f(x)
                f'(x) := ──── == ──────────────────
                          △x             △x
              // Now lets swap out our delta notation and represent it
              //  in the context of our approximation ĐapproachingĐ 0.
                                 f(x + h) - f(x)
                  f'(x) := lim  ─────────────────
                           h->0        h
              // And we arived to the formal representation of the derivative.
              // What could also be of interest, is plotting the line
              //  which has the same slope as our point.
                // ?!; its really fucking hard hard to draw this in ascii
              // These are tangent lines.
            }
			{ /* ### HARD MODE ### */
			  f(x) := 2x² - 16x + 35
							2(x+h)² - 16(x+h) + 35 - (2x² - 16x + 35)
			  f'(x) = lim  ────────────────────────────────────────────── 
			  		  h->0                      h
							2x² + 4xh + 2h² - 16x - 16h + 35 - 2x² + 16x - 35
					= lim  ─────────────────────────────────────────────────────── 
					  h->0                      	 h                         			
							4xh + 2h² - 16h 
					= lim  ──────────────────
					  h->0         h
							h(4x + 2h - 16) 
					= lim  ─────────────────
					  h->0         h
					= lim  4x + 2h - 16
					  h->0
					= 4x - 16
			  //------------------
			  		    t
			  g(t) := ───────
			  		   t + 1
						    g(t + h) - g(h)
			  g'(t) = lim  ─────────────────
			          h->0         h

							   (t+h)           t
							───────────  -  ───────
						     (t+h) + 1       t + 1 
			        = lim  ─────────────────────────
			          h->0             h

							1   /    t + h         t    \
					= lim  ─── (  ─────────── - ───────  )
					  h->0  h   \  t + h + 1     t + 1  /

							1   /  (t + h)*(t + 1) - t(t + h + 1 )  \
					= lim  ─── (  ─────────────────────────────────  )
					  h->0  h   \       (t + h + 1)*(t + 1)         /

							1   /  t² + th + t + h - t² - h - t  \
					= lim  ─── (  ────────────────────────────────  )
					  h->0  h   \       (t + h + 1)*(t + 1)        /

							1   /           h           \
					= lim  ─── (  ─────────────────────  )
					  h->0  h   \  (t + h + 1)*(t + 1)  /

									 1          
					= lim  ─────────────────────
					  h->0  (t + h + 1)*(t + 1) 

								   1        
					= lim  ─────────────────
					  h->0  (t + 1)*(t + 1)

					              1
					=  lim   ───────────
					   h->0   (t + 1)²
			  /* ### EASY MODE ### */
			    h(z) := 4*x⁶ + 2*x² + 3*x + 31
				h'(z) = (4*6)*x⁽⁶⁻¹⁾ + (2*2)*x⁽²⁻¹⁾ + (3*1)*x⁽¹⁻¹⁾ + 0
					  = 24*x⁵ + 4*x¹ + 3*x⁰
					  = 24*x⁵ + 4*x + 3
			  //------------------
				j(x) := 3x³² - 54x¹² + 5x - 46
				j'(x) = 3(32)x³¹ - 54(12)x¹¹ + 5(1)x⁰ - 0
						== 96x³¹ - 648x¹¹ + 5
			  //------------------
				k(x) := 2t⁶ + 7t⁻⁶
				k'(x) = 2(6)t⁵ + 7(-6)t⁻⁷
				      = 12t⁵ + -42t⁻⁷
				      = 12t⁵ - 42t⁻⁷
			  //------------------
			  	l(x) := 2ˣ
				l'(x) = 2ˣ * ln(2)
 			}
			¤formulas
				+==================================+=====================================+
				|           Compound form          |            Deducted form            |
				+==================================+=====================================+
				|                ( f(x) + g(x) )'  |  f'(x) + g'(x)                      |
				|                                  |                                     |
				|                                  |                                     |
				|                ( f(x) - g(x) )'  |  f'(x) - g'(x)                      |
				|                                  |                                     |
				|                                  |                                     |
				|               ( <const>*f(x) )'  |  <const> * f'(x)                    |
				|                                  |                                     |
				|                                  |                                     |
				|                  ( f(x)*g(x) )'  |  f'(x)*g(x) + f(x)*g'(x)            |
				|                                  |                                     |
				|                                  |                                     |
				|                    /  f(x)  \ '  |  f'(x) * g(x)  -  f(x) * g'(x)      |
				|                   (  ──────  )   |  ───────────────────────────────    |
				|                    \  g(x)  /    |               g²(x)                 |
				|                                  |                                     |
				|                                  |                                     |
				|                      f( g(x) )'  |  f'( g(x) ) * g'(x)                 |	// so called "chain rule"
				+----------------------------------+-------------------------------------+
			¤trigonometric derivatives
				 +==========+===================+
				 | Function |    Derivative     |
				 +==========+===================+
				 |   sin(x) |            cos(x) |
				 |   cos(x) |           -sin(x) |
				 |   tan(x) |       1/(cos²(x)) |
				 | 1/cos(x) | tan(x) * 1/cos(x) |
				 +----------+-------------------+
				 >"derive sine to cosine\
				  there is no sign"
			Partial:
				>multi parameter functions
				>we only want the derivative for a single var
				                                                  ∂ <function>
				"partial derivative of <function> to <var>"  :=  ──────────────
				                                                  ∂   <var>
				>each, but the derived var is treated as a const
				{ // f(x,y) :=  4x² * 2y⁶
				   ∂f
				  ────  ==  2*4x * 2y⁶
				   ∂x
				     
				        ==  16xy⁶
				     
					// --- 
				   ∂f
				  ────  ==  4x² *  6*2y⁵
				   ∂y
				     
				        ==  48x²y⁵
				     
				}
				>as long as a <var> is still present, the derivation can be repeated
				{ // second partial derivatives for: f(x,y) :=  4x² * 2y⁶
				  ∂f   / ∂f \
				 ──── ( ──── ) ==  16y⁶
				  ∂x   \ ∂x /

					// --- 
				  ∂f   / ∂f \
				 ──── ( ──── ) ==  48x²5y⁴
				  ∂y   \ ∂y /
				            
				               ==  240x²y⁴
					// --- 
				  ∂f   / ∂f \
				 ──── ( ──── ) ==  96xy⁵
				  ∂y   \ ∂x /

					// --- 
				  ∂f   / ∂f \
				 ──── ( ──── ) ==  96xy⁵
				  ∂x   \ ∂y /
				}
			Extremum_of_multi_variable_function:	//?!; move
				{
					f(x, y) := 2x² + y²x + 2y + 6
					// ---

					f'x = 4x + y²

					f'y = 2x + 2

					// ---

					I.  4x + y² = 0
					II. 2x + 2  = 0


					II. 2x = -2		/ /2
					     x = -1

					I.  -4 + y² = 0
					         y² = 4
							 y  = ±2
					// ---
					f'x'x = 4
					f'y'y = 0
					f'x'y = 2

					// ---
					D(x, y)    = f'x'x * f'y'y - (f'x'y)²
					D₁(-1, ±2) = 4 * 0 - 2² = -4;  -4 < 0 // disregard
				}
	
	INTEGRAL: //(0x00000053)➞
		∫( f(x) * dx )				// integral of function f(x)
		>one would like to calculate the area under a slope
		>sum of slices whichs width approach 0 (see AT "/Theory/Function/Limit")
		>NOTE: "dx" stays "dx"; no expansion there
		>you think you can integrate? you cant; each exercise you are given is
		  artificially generated to fit within the "easily" solvable subset of
		  cases
        >"signed area"
        {
          // We have a function and two points we choose
          //  under which we would like to know the area.
            y ▲
              │
              │        .-`````-.
              │      .'\ \ \ \ \'.
              │    .'|\ \ \ \ \ \|'.
              │   :  | \ \ \ \ \ |  :
              │  :   |\ \ \ \ \ \|   :
              │ :    | \ \ \ \ \ |    :
              │:     |\ \ \ \ \ \|     :
              ┼─────────────────────────▶ x
          // We have no fucking clue what to do,
          //  however, we could pretend the top area does not exist.
            y ▲
              │
              │        .-`````-.
              │      .'_________'.
              │    .'|\ \ \ \ \ \|'.
              │   :  | \ \ \ \ \ |  :
              │  :   |\ \ \ \ \ \|   :
              │ :    | \ \ \ \ \ |    :
              │:     |\ \ \ \ \ \|     :
              ┼─────────────────────────▶ x
          // Now we have a rectangle, whichs area is trivial to calculate.
          // Its and ok-ish approximation.
          // Now atleast we know what value the full area must be larger than.
          // Tho we could have also choosen to go for the maximum.
            y ▲
              │       ___________
              │      |\.\`\`\`\.\|
              │      |'\ \ \ \ \'|
              │    .'|\ \ \ \ \ \|'.
              │   :  | \ \ \ \ \ |  :
              │  :   |\ \ \ \ \ \|   :
              │ :    | \ \ \ \ \ |    :
              │:     |\ \ \ \ \ \|     :
              ┼─────────────────────────▶ x
          // Anyways;
          // Clearly, our approximation is very crude,
          //  lets make it slightly more accurate.
            y ▲
              │
              │        .-`````-.
              │      .'_|\ | \|_'.
              │    .'|\ | \|\ | \|'.
              │   :  | \|\ | \|\ |  :
              │  :   |\ | \|\ | \|   :
              │ :    | \|\ | \|\ |    :
              │:     |\ | \|\ | \|     :
              ┼─────────────────────────▶ x
          // Hey, what if, what if, we were to approach it (pun intended)
          //  as derivates?
          // We make the estimator rectangles smaller and smaller
          //  and we observe how the sum of their areas change as
          //  their width appoaches 0?
          //
          // Yeah, thats what an integral is.
          // The notation such:
           to
            ∫ function
           from
          // e.g:
              A         A     
             1| ..     1| ..  
              |/  \     |/||\ 
              +---->    +-++->
                  π         π 

           2/π
            ∫ sin(x)
           1/π
          // alternative plaintext representation:
           2/π
            ⌠
            ⌡ sin(x)
           1/π
          // What if our function goes below 0?
            y ▲
              │
              │  .'''.  
              │ :     :
              │:       :
              ┼──────────────────▶ x
              │         :       :
              │          :     :
              │           '...'
              ▼
          // We do the same thing and accept
          //  the concept of "negative area"
            y ▲
              │
              │  .'''.  
              │ :     :
              │:       :
              ┼──────────────────▶ x
              │         :\ \ \ \:
              │          :\ \ \:
              │           '\.\'
              ▼
        }
        Eulers_number: 
                       /     1 \^n
            e :=  lim ( 1 + ─── )
                 n->∞  \     n /
               
               ~ 2.718
            >all numbers raised to an arbitrary power,
              will have a proportional integral
            >e is the only number which raised to an arbitrary power,
              will have itself as the integral

			∫eⁿ = eⁿ+c

		Definite:
		  [int-1]
		    ∫( f(x) * dx )
		  [int-2]
			>as oppose to indefinite, its range bounded
			∞
			∫[...]  ==  ∫[...]
			0
			¤
		  		[int-1]
		  		  ∫( f(x) * dx )  =  f([int-1]) - f([int-2])
		  		[int-2]
				{ // Task
.					  f:[0,3]->R;   f(x) := 3*ˇx
					  3
					  ∫( f(x) * dx )  =  ?
					  0
				  // Solution
					  3*ˇx == 3*x^(1/2)
					  3                         3
					  ∫( 3*x^(1/2) * dx )  =  3*∫( x^(1/2) * dx )
					  0                         0                 
						  ┌  x^(1/2) + 1  ┐3
					  = 3*│ ───────────── │
					      └   (1/2) + 1   ┘0

					         /  3^(1/2)       0^(1/2)  \
				      = 3 * (  ─────────  -  ─────────  )
					         \    1/2           1/2    /

					  = 3 * ((ˇ3 / (1/2)) - 0)
					  = 2 * 3 * ˇ3 = 6*ˇ3
				}
		¤formulas
			  /                  \                       /        \
			∫( [const] * f(x)  dx )   ==   [const]  *  ∫( f(x)  dx )
			  \                  /                       \        /

			  /               \         /        \        /        \
			∫( f(x) + g(x)  dx )  ==  ∫( f(x)  dx )  +  ∫( g(x)  dx )
			  \               /         \        /        \        /

			  /               \         /        \        /        \
			∫( f(x) - g(x)  dx )  ==  ∫( f(x)  dx )  -  ∫( g(x)  dx )
			  \               /         \        /        \        /

			  /                  \        f^(n+1)(x)
			∫( f^n(x) * f'(x)  dx )  ==  ──────────── + c
			  \                  /          n + 1

			  /  f'(x)     \
			∫(  ───────  dx )  ==  ln( |f(x)| ) + c
			  \   f(x)     /

			 
			∫ f(x) * g'(x) dx  ==  f(x)g(x) - ∫f'(x) * g(x) dx
			 
			¤base integrals 
				 +===========================================+
				 I  Function  I            Integral          I
				 +===========================================+
				 |            |          x^(n+1)             |
				 |     xⁿ     |         ───────── + c        |
				 |            |            n+1               |
				 +------------+------------------------------+
				 |     1      |                              |
				 |    ───     |           ln(|x|) + c        |
				 |     x      |                              |
				 +------------+------------------------------+
				 |     1      |                              |
				 |  ───────   |         arctg(x) + c         |
				 |    x²+1    |                              |
				 +------------+------------------------------+
				 |            |              aˣ              |
				 |     aˣ     |           ─────── + c        |
				 |            |            ln(a)             |
				 +------------+------------------------------+
				 |     eˣ     |             eˣ + c           |
				 +------------+------------------------------+
				 |   tan(x)   |      ln(|1/cos(x)|) + c      |
				 +------------+------------------------------+
				 |   ctg(x)   |       ln(|sin(x)|) + c       |
				 +------------+------------------------------+
				 |   sin(x)   |           -cos(x) + c        |
				 +------------+------------------------------+
				 |   cos(x)   |            sin(x) + c        |
				 +------------+------------------------------+
				 |     1      |                              |
				 | ────────── |  ln(sin(x/2)) - ln(cos(x/2)) |
				 |   sin(x)   |                              |
				 +------------+------------------------------+
				 |     1      |    / │        1         │ \  |
				 | ────────── | ln(  │ ──────────────── │  ) |
				 |   cos(x)   |    \ │  cos(x) + tg(x)  │ /  |
				 +------------+------------------------------+
				 |     1      |                              |
				 | ────────── |           -ctg(x) + c        |
				 |   sin²(x)  |                              |
				 +------------+------------------------------+
				 |     1      |                              |
				 | ────────── |           tg(x) + c          |
				 |   cos²(x)  |                              |
				 +------------+------------------------------+
		Solvability_types:
			Function_and_derivative:
				-one of the following formulas will have to be used:
					{
						  /                  \        f^(n+1)(x)
						∫( f^n(x) * f'(x)  dx )  ==  ──────────── + c
						  \                  /          n + 1

						  /  f'(x)     \
						∫(  ───────  dx )  ==  ln( |f(x)| ) + c
						  \   f(x)     /
					}
				>the key is spotting the function and its derivative
				{ // Trigonometric example
					∫ cos(x) * sin(x)  dx
					   A        A
					   |        |
					 f'(x)    f(x)

					  sin²(x)
					──────────── + c =  1/2 * sin²(x) + c
						 2
				  // 
				       4
					∫ ───   dx
					   x
					// we spot that:
					(x') = 1
					// so to apply the form we would require 1 at the numerator
					// thankfully 1 = 4*1 and 4 is a constant meaning we can easily move it outside of the integration
				           1
					∫ 4 * ───   dx
					       x
				        1	<- f'(x)
					4∫ ───   dx
					    x   <- f(x)

					4 * ln(|x|) + c
				}
			Root_as_power:
				>the key is knowing that √x = x^½
				{
					∫ √eˣ  dx

					∫ e^½x  dx

					2 * e^½x + c
				}
			Substitution:
				>the equation is suspected to correspond to a result of the chain rule
				>the most likely candidate for the inner function is picked to be substituted
				>'u' and 't' are the most common var names to substitute with
				{ // ### bold case
					∫ 2x * cos(x²)  dx

					∫ 2x * cos(x²)  dx
					  A     A  A
					  |     |  |
					  g'    f  g 

					u  = x²  dx
					du = (x²)'
					      2x  dx
					dx = 1/2x  du

					∫ 2x * cos(u) * 1/2x  du

					∫ 2x * 1/2x * cos(u)  du

					∫ 1 * cos(u)  du

					∫ cos(u)  du

					sin(u) + c

					sin(x²) + c
				  // ### less obvious
					∫ (3x + 4)³  dx

					u = 3x + 4
					du = (3x + 4)'
					   = 3  dx
					dx = ⅓  du

					∫ (u)³ * ⅓ du

					⅓∫ (u)³  du

					⅓ * u⁴ * ¼ + c

					(1/12)*u⁴ + c
				  // ### dont worry, x can cancel
					∫ x(x² + 1)¹⁰⁰  dx

					u  = x² + 1
					du = (x²)'
					      2x  dx
					dx = 1/2x du

								1
					∫ x(u)¹⁰⁰ ─────  du
					            2x

							   x
					∫ (u)¹⁰⁰ ─────  du
					           2x

							  1
					∫ (u)¹⁰⁰ ───  du
					          2
							 
					½ ∫ (u)¹⁰⁰  du
							 
					½ * 1/101 * (u)¹⁰¹  du
							 
					1/202 * (x² + 1)¹⁰¹ + c
					         
				  // ### sometimes it just werks
					     1
					∫ ────────  dx
					   x + √x
				  // transform the above out of sheer pain
					       1
					∫ ──────────  dx
					   √x(√x+1)
				  // substitute because you have no better ideas
				  	u  = √x+1
					du = (√x+1)'

					     (x^½+1)'

					      x^-½
					   = ──────  dx
					        2

					   = ½ * x^-½  dx

						  1      1
					   = ─── * ─────  dx
				          2     √x

						   1
					   = ─────  dx
				          2√x

					dx = 2√x du
				  // substitute
					      1
					∫ ─────────  2√x du
					   √x * u

					      1
					∫ ─────────  2 du
					      u

					    1
					2∫ ───  du
					    u

					2 ln(|u|) + c

					2 ln(|√x+1|) + c
				}
			By_parts:
				-the following is utilized:
					∫ f(x) * g'(x) dx  ==  f(x)g(x) - ∫f'(x) * g(x) dx
				{
					∫ x*sin(x) dx
					// f(x) and g'(x) is selected carefully
					//  'x' is easier to differentiate than to integrate
					//  sin(x) is equivalently easy either way
					∫ x*sin(x) dx
					  A    A
					  |    |
					 f(x) g'(x)

					 f(x) := x        g'(x) :=  sin(x)
					 f'(x) = 1        g(x)   = -cos(x)

					-x*cos(x) - ∫ -cos(x) dx

					-x*cos(x) + ∫ cos(x) dx

					-x*cos(x) + sin(x) + c
				}
			Rational_functions:
				?!:
					{
						    7x-6
						∫ ────────  dx
						   x²+x-6
						             -b±√(b² - 4ac)
						√(x²+x-6) = ────────────────
						                   2a

						             -1±√(1 - 4*1*-6)
						          = ──────────────────
						                   2

						             -1±√(25)
						          = ──────────
						                2
									  /   \
									 2    -3

						      7x-6
						∫ ────────────  dx
						   (x-2)(x+3)

						// ---

						     7x-6           A         B
						 ────────────  =  ─────  +  ─────
						  (x-2)(x+3)       x-2       x+3

						     7x-6           A(x+3) + B(x-2)
						 ────────────  =  ──────────────────
						  (x-2)(x+3)          (x-2)(x+3)

						     7x-6           Ax+3A + xB-2B
						 ────────────  =  ──────────────────
						  (x-2)(x+3)          (x-2)(x+3)

						     7x-6          x(A+B) + 3A - 2B
						 ────────────  =  ──────────────────
						  (x-2)(x+3)         (x-2)(x+3)

						 7x-6  =  x(A+B) + 3A - 2B

						 I.  7 = A+B
						 II. 6 = 3A - 2B

						 I.  B = 7-A
						     6 = 3A - 7A
						     6 = -4A
						     A = 8/5

							 B = 27/5

						     7x-6          8/5       27/5
						 ────────────  =  ─────  +  ──────
						  (x-2)(x+3)       x-2        x+3

						// ---
						    8/5       27/5
						∫  ─────  +  ──────  dx
						    x-2        x+3

						    8      1        27     1  
						∫  ─── * ─────  +  ─── * ─────  dx
						    5     x-2       5     x+3 

						    8      1            27     1  
						   ─── ∫ ─────  dx  +  ─── ∫ ─────  dx
						    5     x-2           5     x+3 

						    8      1            27     1  
						   ─── ∫ ─────  dx  +  ─── ∫ ─────  dx
						    5     x-2           5     x+3 

						  (8/5) ln(|x-2|)  +  (27/5) ln(|x+3|)  dx
					}



	Solid_of_revolution_volume:
		pass


#define complex_numbers:: //(0x00000054)➞\
    I---------------------------------------------\
    I   _____                       _             \
    I  /  __ \                     | |            \
    I  | /  \/ ___  _ __ ___  _ __ | | _____  __  \
    I  | |    / _ \| '_ ` _ \| '_ \| |/ _ \ \/ /  \
    I  | \__/\ (_) | | | | | | |_) | |  __/>  <   \
    I   \____/\___/|_| |_| |_| .__/|_|\___/_/\_\  \
    I                        | |                  \
    I                        |_|                  \
    I---------------------------------------------I

    {
        let i := √(-1)

        <num> + <num>*i // complex number
           ▲          ▲
           │          │
        real portion  │
              imaginary portion
    }
	>complex numbers is a super set of real numbers
	>all complex numbers have an imaginary portion of value 0 (5 == 5+0*i)


	Operators: //(0x00000055)➞
		Addition:
			(A + H*i) + (B + J*i)  =  (A+B) + (H+J)*i
			>the real portions and the imaginary portions are added together separately
			{ (10 + 4*i) + (2 + i)  =  12 + 5*i }
		Subtraction:
			(A + H*i) - (B + J*i)  =  (A-B) + (H-J)*i
			>the real portions and the imaginary portions are subtracted separately
			{ (32 + 5*i) - (13 + 7*i)  =  19 - 2*i }
		Multiplication:
			(A + H*i) * (B + J*i)  =  (A*B) + (A*J)+(B*H)*i + (H+J)*i²
			>as (i == √(-1)), multiplying 2 imaginary numbers will result in a real number (i^2 == (√(-1))^2 == -1)
			{ (6 + 8*i) * (4 + 2*i)
			  = (6*4) + 12*i + 32*i + 16*i²
			  = 24 + 44*i + 16*i²
			  = 24 + 44*i + 16*(-1)
			  = 24 + 44*i - 16
			  = 8 + 44*i
			}
		Division:
			(A + H*i) / (B + J*i)  =  ((A + H*i)*(B - J*i)) / ((B + J*i)*(B - J*i))
			>the idea is to multiply the expression with 1 such a way to get rid of the i-s from the denominator;
			  ie. we multiply by the denominators complex conjugate over itself, relying on (A+B)*(A-B) = A^2 - B^2
			{ (10 + 6i) ÷ (5 – 3i)
			     10 + 6*i
			  = ─────────
			      5 – 3*i

			     10 + 6*i    5 + 3*i         (10 + 6*i)*(5 + 3*i)
			  = ───────── * ─────────   =   ──────────────────────
			      5 – 3*i    5 + 3*i          (5 – 3*i)*(5 + 3*i)

			     50 + 30*i + 30*i + 18*i²
			  = ──────────────────────────
			            25 - 9*i²

			     50 + 60*i + 18*(-1)
			  = ─────────────────────
			         25 - (9*-1)

			     32 + 60*i
			  = ───────────
			        34

			     32     60*i
			  = ──── + ──────
			     34     34

			     16      /  30     \
			  = ────  + (  ──── * i )
			     17      \  17     /
			}
	Trigonometric_form: //(0x00000056)➞
		where Z, W ∈ C
		where 270° < d < 360°
		Z = |Z|*(cos(d) + sin(d)*i)
		|Z| = ˇ(A² + B²)
		d = tg^-1( A/B )
		Multiplication:
			Z*W = |Z|*|W|(cos(d1 + d2)  +  sin(d1 + d2)*i)
			{ Z = 2(cos(100°) + sin(100°)*i)
			  W = 4(cos(280°) + sin(280°)*i)
			  Z*W = 2*4(cos(100°+280°) + sin(100°+280°)*i)
			      = 8(cos(380°) + sin(380°)*i)
			      = 8(cos(20°) + sin(20°)*i)
			}
		Division:
			Z/W = |Z|/|W|(cos(d1 - d2)  +  sin(d1 - d2)*i)
			{ Z = 3(cos(75°) + sin(75°)*i)
			  W = 6(cos(300°) + sin(300°)*i)
			  Z/W = 3/6(cos(75°-300°) + sin(75°-300°)*i)
			      = 2(cos(-225°) + sin(-225°)*i)
			      = 2(cos(135°) + sin(135°)*i)
			}
		Power:
			Z^n = |Z|^n(cos(d*n) + sin(d*n)*i)
			{ Z = 4(cos(30°)+sin(30°)*i)
			  Z⁵ = 4⁵(cos(30°*5)+sin(30°*5)*i)
			      = 1024(cos(150°)+sin(150°)*i)
			}
		Root:
			where k ∈ [0 ... n-1]
			n ___     n ___  /     /  d     k  \        /  d     k  \  \
			\/ Z   =  \/|Z| {  cos(  ─── + ───  ) + sin(  ─── + ───  )  }
			                 \     \  n     n  /        \  n     n  /  /
			NOTE: there are 'n' answered, if ones looking for the roots of Z, each are desired

#define numeric_bases\
#define numerical_bases:: //(0x00000057)➞\
    I------------------------------------------------------------------------\
    I   _   _                           _       ______                       \
    I  | \ | |                         (_)      | ___ \                      \
    I  |  \| |_   _ _ __ ___   ___ _ __ _  ___  | |_/ / __ _ ___  ___  ___   \
    I  | . ` | | | | '_ ` _ \ / _ \ '__| |/ __| | ___ \/ _` / __|/ _ \/ __|  \
    I  | |\  | |_| | | | | | |  __/ |  | | (__  | |_/ / (_| \__ \  __/\__ \  \
    I  \_| \_/\__,_|_| |_| |_|\___|_|  |_|\___| \____/ \__,_|___/\___||___/  \
    I------------------------------------------------------------------------\

	Converting_base_10_integer_to_base_n:
		NOTE: it grows vertically
	     [starting_number] | :[base_n]
		-------------------+-----------
			 [quotient]    |  [remainder]  +
		>repeated divideations while keeping the remainders
		>the results are read out backwards
		{ 123ˇ10 = ?ˇ8
		   123 | :8
 		  -----+----
			15 |  3     A
			 1 |  7     I
			 0 |  1     I
			=> 173ˇ8
		}
	Converting_base_10_number_which_is_smaller_than_1_to_base_n:
		NOTE: it grows vertically
	                           0 | [starting_number]*[base_n]
		-------------------------+----------------------------
		 ([results_whole_part])+ | ([results_fraction_part])+
		>repeated multiplications
		>the results are read out backwards
		>the algorithm ends when there's 0 on the right side ([results_fraction_part]);
		  which may never come
		{ 0.6875₁₀ = ?₈
		     0 | 0.6875 * 8
		  -----+----
			 5 | 5	 /* * 8*/ A
			 4 | 0			  I
			 => 0.05
		}
	Converting_base_n_to_base_10_using_a_horner_table:
		       | <digit-1> | <digit-2> |     | <digit-n> |
		-------+-----------+-----------+     +-----------+
		<base> | / / / / / |  <prod-1> | ... |  <prod-n> |
		-------+-----------+-----------+     +-----------+
		       |  <sum-1>  |  <sum-2>  |     |  <sum-n>  |
		1. write up the digits
		2. write up base
		3. a <sum> is always the sum of the <digit> and the <prod> above it
		4. a product is always the last multiple of <base> and the <sum> left to it
		   |XXX|XXX|XXX|XXX:		// without the table in the way
		- - - - - - - - - - 		// 
		   : I :/I :/I :/I :		// I  /I  /I  /I
		- - -I-/-I-/-I-/-I- 		// I / I / I / I
		   : I/: I/: I/: I :		// I/  I/  I/  I
		// visualization of motions taken
		{
			75320041₈

		     |   7   |   5   |   3   |   2   |   0   |    0   |    4    |      1   |
		-----+-------+-------+-------+-------+-------+--------+---------+----------+
		  8  | / / / |  56   |  488  |  3928 | 31440 | 251520 | 2012160 | 16097312 |
		-----+-------+-------+-------+-------+-------+--------+---------+----------+
		     |   7   |  61   |  491  |  3930 | 31440 | 251520 | 2012164 | 16097313 |
		                                                                  ^^^^^^^^
		// list of steps taken:
			- write down 7 to the 1st sum
			- multiply 7 by 8 (56), write down result to 1st product
			- add 5 and 56 (61), write down result to 2st sum
			- multiply 61 by 8 (488), write down result to 2st product
			- add 488 and 3 (491), write down result to 3th sum
			- multiply 491 by 8 (3928), write down result to 3th product
			- add 3928 and 2 (3930), write down result to 4th sum
			- multiply 3930 by 8 (31440), write down result to 4th product
			- add 31440 and 0 (31440), write down result to 5th sum
			- multiply 31440 by 8 (251520), write down result to 5th product
			- add 25152 and 0 (31440), write down result to 6th sum
			- multiply 25152 by 8 (2012160), write down result to 6th product
			- add 2012160 and 4 (2012164), write down result to 7th sum
			- multiply 2012164 by 8 (16097312), write down result to 7th product
			- add 16097312 and 1 (16097313), write down result to 8th sum
			- under line 16097313 as it is our solution
		}
	Conversion_between_square_bases:
		>each digit is guaranteed to translate to a fixed number of digits
		>per digit (batch) translation will yield the right result
		{ // Binary to octal
		  0b01010110010
		  	// binary is 2^1
			// octal is 2^3
			// => every 3 binary digit is a single octal
		  | 01 | 010 | 110 | 010 |
		     1     2     6     2	// decimal
		     1     2     6     2    // octal
			// result
		  0b01010110010 == 01262
		}
	Polynominal:
		>sum of numbers and variables raised to non-negative integers
		{ f(x) = 2x² * 6x + 9
		  q(x, y) = 5x⁴ * y⁶ - 3x * y³ + 11y¹⁵ * x⁷
		}
		Horner_Ruffini_method:
			a₀ * x⁰  +  a₁ * x¹  +  a₂ * x²  +  ...  +  aₙ * xⁿ ==
			a₀ + x*( a₁ + x*( a₂ + ... + x*( aₙ₋₁ + x*aₙ) ) )
			>Horner and Ruffini were both mathematicians
			>can be used on single variable polynomials
			>optimizes the number of operations
			>repeated rearanging
			{ f(x) = x³ + 2x² - 3x + 2 == ((1*x + 2) * x - 3 ) * x + 2
			  f(3) = 
				1*3*3*3 + 2*3*3 - 3*3 + 2 ==	// 6 multiplications; 3 sums
				((1*3 + 2) * 3 - 3 ) * 3 + 2	// 3 multiplications; 3 sums
				== 38
			}
			-an equivalent, but easier to humanly write up form is getting all the x-s and than all the multipliers:
				a₀ * x⁰  +  a₁ * x¹  +  a₂ * x²  +  ...  +  aₙ * xⁿ ==
				"( x*( )"^n-1 + "x " + "a₀) [...] aˇn"
				{ g(x) = x³ - 4x² + x + 4
				  x*( x* (x - 4) + 1 ) + 4
				}
			Horner_table_form:
							| [int-1] ([int-n])*			   // row for multipliers
				x = [int-0] |          [int-0]   ([int-n])*    // row for partial multiplications
			   -------------+--------------------
							  [int-2] ([int-n])*               // row for partial sums and the result
				>the first 2 rows are summed together to get the last row
				>the last row is multiplied by x to get the values of the second row
				{ f(3) = 1*3*3*3 + 2*3*3 - 3*3 + 2
					// the table is roboted down
						  |  1  2 -3  2				
					x = 3 |     3
			       -------+------------------
					// the first summing is carried out ( 2 + 3 )
						  |  1  2 -3  2				
					x = 3 |     3
			       -------+------------------
								5
					// the first multiplication is carried out ( 3 * 5 )
						  |  1  2 -3  2				
					x = 3 |     3 15
			       -------+------------------
								5
					// more summing ( -3 + 15 )
						  |  1  2 -3  2				
					x = 3 |     3 15
			       -------+------------------
								5 12
					// more multiplying ( 3 * 12 )
						  |  1  2 -3  2				
					x = 3 |     3 15 36
			       -------+------------------
								5 12
					// last sum ( 2 + 36 )
						  |  1  2 -3  2				
					x = 3 |     3 15 36
			       -------+------------------
								5 12 38
					// 38 is our end result
				}
				>can be used for converting an arbitrary base number to base 10
				>the multipliers are the digits
				{ 11211220₃	// our starting, base 3 number
						|  1    1    2    1    1    2    2    0
				  x = 3 |       3   12   42  129  390 1176 3534
				 -------+----------------------------------------
						   1    4   14   43  130  392 1178 3534
				}

#define optimization:: //(0x00000058)➞\
    I--------------------------------------------------------------\
    I   _____       _   _           _          _   _               \
    I  |  _  |     | | (_)         (_)        | | (_)              \
    I  | | | |_ __ | |_ _ _ __ ___  _ ______ _| |_ _  ___  _ __    \
    I  | | | | '_ \| __| | '_ ` _ \| |_  / _` | __| |/ _ \| '_ \   \
    I  \ \_/ / |_) | |_| | | | | | | |/ / (_| | |_| | (_) | | | |  \
    I   \___/| .__/ \__|_|_| |_| |_|_/___\__,_|\__|_|\___/|_| |_|  \
    I        | |                                                   \
    I        |_|                                                   \
    I--------------------------------------------------------------I

	>regards finding optimal solutions

	Fishermans_problem:
		-a fisherman fishes in a lake with 3 types of fish
			>bass
			>cod
			>herring
		-each fish has a different enjoyment value for the fisherman
			> bass		- 2
			> cod		- 3
			> herring	- 4
		-the lake has 3 owners, each has a pointing system calculated
		  after the type of fish and by kilo,
		  and each pose a maximum point limit on a single days catch
			¤owner 1
				> max : 4
				> bass		- 1
				> cod		- 1
				> herring	- 2
			¤owner 2
				> max : 5
				> bass		- 2
				> cod		- free
				> herring	- 3
			¤owner 3
				> max : 7
				> bass		- 1
				> cod		- 2
				> herring	- 4
		>the fisherman wishes to have the most fun while obeying each owners rules
		¤formerly represented as:
			f(b, c, h):  2b + 3c + 4h -> max	// so called "goal function"

			1b + 1c + 2h <= 4
			2b + 0c + 3h <= 5
			1b + 2c + 4h <= 7

			b, c, h >= 0 	// since we cant catch negative kilos of fish

	Salesman_problem:
		¤a salesman sells on the spot measured tonics
			> 1l water	- 1 kg - 1 Shekel  profit
			> 1l orange	- 2 kg - 3 Shekels profit
		-a boy walks in and wishes to purchase considering the following:
			>he can only carry 5 kg-s
			>he must buy at least 3 ls
			>he must buy 1 l more water than orange
		>the salesman tries to make as much profit as he can
		¤formerly
			f(w, o): 1w + 3o -> max

			1w + 2o <= 5
			 w +  o >= 3
			 w -  o >= 1

			w, o >= 0

	Linear_programming:
		>looking for an extreme in an area defined by linear inequalities on a linear function
		>minimum/maximum
		>the minimum solution is otherwise called the ĐĐoptimalĐĐ solution
		Graphical_technique:
			>the number of dimensions is equal to the number of var-s involved
			1. draw a coordinate system
			2. draw a line for each constraint as if they were equalities
			3. determine the direction of each area constraining
			4. draw up the goal function
			5. based on the goal functions angle determine the solution
			6. if the solution is a single point on a cross section, determine its value
		Fourier_elimination:
			¤requirements
				>each equation must be an inequality
				>a equality can be converted by 2 inequalities
					{
						x = 4
						// ---
						x >= 4
						x <= 4
					}

	Standard_representation:
		>every linear programming problem has a standard representation
		¤rules
			>each variable has to have a >= 0 constraint
			>only equalities
			>has to be a max problem
		¤conversion
			>if a var has no constraints; then
			  swap it with (var' - var'')
			>if a var has a constraint, but not for 0; then
			  reorder to 0,
			  name the following expression var',
			  find how to express var as var',
			  substitute
			>if an equation is an inequality; then
			  case "(=)<": add sˇn
			  case "(=)>": subtract eˇn
			  and rewrite as an equality
			>if its not a min problem; then
			  multiply by -1 to get a max problem

	Assignment_problem:
		{ // Pseudo code; optimized for solving by hand
			function Matrix::prepare() {
				min : int

				min := 0
				foreach (c in this.columns()) {
					foreach (f in c) {
						f -= min(c)
					}
				}

				min := 0;
				foreach (r in this.rows()) {
					foreach (f in c) {
						f -= min(c)
					}
				}
			}

			function Matrix::assignment_solver() {
				this.prepare()

				foreach (c in column) {
					foreach (e in c) {
						if (e == 0 and not e.row.has_star) {
							star(e)
							break
						}
					}
				}

				while (this.n != this.starts.size()) {
					foreach (s in this.stars) {
						anchor(s.column)
					}

					foreach (r in this.rows) {
						free_null : elem
						free_null = r.find_free()
						if (free_null) {
							if (r.has_star) {
								tick(free_null)
								anchor(r)
								raise_anchor(r.star.column)
							} else {
								tick(free_null)
								chain : list<elem>
								chain := chain_from(free_null)
								foreach (s in m.stars) {
									if (not chain.is_elem(s)
									||  (chain.is_elem(s) && s.is_ticked())) {
										star(s)
									} else {
										clear(s)
									}
								}
								clear(m.anchors)
								break
							}
						}
					} else {
						free_elements : list<elem>
						free_elements = m.find_free()
						foreach (e in free_elements) {
							e -= min(free_elements)
						}

						double_anchored_elements : list<elem>
						double_anchored_elements = m.find_double_anchored()
						foreach (e in double_anchored_elements) {
							e += min(free_elements)
						}
					}
				}
			}
		}

#define numat\
#define nummat\
#define numerical_mathematics:: //(0x00000059)➞\
    I-------------------------------------\
    I   _   _                       _     \
    I  | \ | |                     | |    \
    I  |  \| |_   _ _ __ ___   __ _| |_   \
    I  | . ` | | | | '_ ` _ \ / _` | __|  \
    I  | |\  | |_| | | | | | | (_| | |_   \
    I  \_| \_/\__,_|_| |_| |_|\__,_|\__|  \
    I-------------------------------------I

    >"numerical mathematics"
    >ĐĐconvergenceĐĐ is when an error can be arbitrary small by increasing computational effort
    >a value ĐconvergesĐ to a number if the error decreases towards it,
      but its proven it could never succeed it
    -absolute error limit / estimated error
        let estimated_error & △ = | estimated_max - approximated_value |
        let upper_approximated_value = approximatated_value + △
        let lower_approximated_value = approximatated_value - △
        let absolute_error = δ = |f'(approximated_value)| * △

    Taylor_series:
        >approximates a functions just with polynomials
        >nice, because polynomials are easy to work with
        >the polynomial is composed such that incremental Nth derivatives of the functions
          know values are the Nth derivates of the polynominal too
        let const given c = x coordinate of the point of the function we approximate from
                        ∞    /                \
        Taylor(f(x)) =  ∑   ( f'ⁱ(c) * (x - c) ) / i!
                       i=0   \                /
        >to "Find a taylor series for f(x)", you start by plugging eval-ing the
          first few expressions, then try to generalize a simpler form of summation
        Maclauirin_series:
            >a special taylor series where c := 0

    Interpolation:
        >we have a partial function
        >we wish to estimate values somewhere between the lowest and
          the highest x-es we have
			 11 ├─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─       x | y
				│                                   |     ---+---
				│                     O                    1 | 6
				│                     |             │      4 | 3
				│                     |                    7 | 9
				│   O    ???          |        O    │     10 | 6
				│   |                 |        |     
				│   |     |           |        |    │     f(3) = ???
				│   |        O        |        |   
				│   |     |  |        |        |    │
				│   |        |        |        |    
			  0 ┼───X─────#──X────┼───x────────x────┴
			     0  1  2  3  4  5  6  7  8  9 10 11 12
        Linear:
            >we assume that every datapoint is connected with a straight line
			 11 ├─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ 
				│                                   |
				│                     O.             
				│                    /| `..         │
				│                   / |    ``.       
				│   O            ./`  |       `O    │
				│   |`..        /     |        |     
				│   |   `.#    /      |        |    │
				│   |      ``O        |        |   
				│   |     |  |        |        |    │
				│   |        |        |        |    
			  0 ┼───X─────#──X────┼───x────────x────┴
			     0  1  2  3  4  5  6  7  8  9 10 11 12

            We can calculate the total difference and how much of
             this total difference our point in between accounts for.

             xₘ₊₁ - xₘ₋₁       yₘ₊₁ - yₘ₋₁
            ─────────────  =  ─────────────
              xₘ - xₘ₋₁         yₘ - yₘ₋₁
                               ^^^^
                                └─ only unknown value
            {
                Our x is 3.

                f(3) is going to be between our know y-s f(1) & f(4),
                 we select them.

                Do a table look up, get 6 and 3.

                 4 - 1       3 - 6
                ───────  =  ───────
                 4 - 3       ? - 6

                 3        - 3
                ───  =  ───────
                 1       ? - 6

                                 1
                 3   =  - 3 * ───────     // /3
                               ? - 6

                                 1
                 1   =  - 1 * ───────    // *(? - 6)
                               ? - 6

                 ? - 6  =  -1            // + 6


                 ? = 5

                 Is 5 between 6 and 3? Yes. Looks good.
            }
            Cramers_rule:
                >used if there are more than 2 dimensions
                >the functions is represented as equations  
                    {
                        3x -  y +  z = -4
                         x +  y +  z =  2
                        2x + 3y + 4z =  8
                    }
                >the equations are represented as a matrix
                    {
                        ┌           ┐
                        │  3 -1  1  │
                        │           │
                        │  1  1  1  │
                        │           │
                        │  2  3  4  │
                        └           ┘
                    }
                >the matrix with respect to a variable is the equiation matrix
                  with a column replaced by the right hand side
                >the value of a variable can be calculated as:
                    let A  := the matrix
                    let k   ∈ { matrix variables }
                    let Aₖ := the matrix with respect to k
                    k = |Aₖ| / |A|          // NOTE: |x| is the operator for matrix determinants
                >NOTE: |A| must not be 0
                >NOTE: gaussian elimination is faster and easier

        Newton_Lagrange:
            >we attempt to construct a polynominal that fits on each point of the function
            >we construct a polynome for each data point which checks out,
              but results in 0 on every point, then we multiply them together
            let lₖ(x) := the polynome which matches point k
                         
                         n; i != k   ( x  - xᵢ )
                       =   Π        ────────────
                         i = 1       ( xₖ - xᵢ )
            let P(x) := lagrange polynomial for function f(x)
                         n
                      =  ∑   lₖ(x) * f(xₖ)
                        j=0
            {
                We have the following partial function:
                    +------+---+----+----+----+----+
                    |      | x | -2 | -1 |  0 |  4 |
                    | f(x) +---+----+----+----+----+
                    |      | y | -2 |  4 |  1 |  8 |
                    +------+---+----+----+----+----+
                // NOTE: drawing out ^this table horizontally helps while
                //        writting out the equation tremendiously
                We are looking for the value a 2.
                We will be using the Lagrange method to estimate it.
                                                                    /*  Divisor   */
                                                                    /* simplified */
                                 ( x - (-1)) ( x - 0) ( x - 4)
                P(x)  =  -2  *  ───────────────────────────────
                                 (-2 - (-1)) (-2 - 0) (-2 - 4)      // -12

                                 ( x - (-2)) ( x - 0) ( x - 4)
                      +   4  *  ───────────────────────────────
                                 (-1 - (-2)) (-1 - 0) (-1 - 4)      // 5

                                 (x - (-2)) (x - (-1)) (x - 4)
                      +   1  *  ───────────────────────────────
                                 (0 - (-2)) (0 - (-1)) (0 - 4)      // 8

                                 (x - (-2)) (x - (-1)) (x - 0)
                      +   8  *  ───────────────────────────────
                                 (4 - (-2)) (4 - (-1)) (4 - 0)      // 120


                             3 * 2 * -2
                P(2)  = -2  ────────────
                                -12

                             4 * 2 * -2
                      +  4  ────────────
                                 5

                             4 * 3 * -2
                      +  1  ────────────
                                 6

                             4 * 3 * 2
                      +  8  ───────────
                                120
                                
                          24       -64       -24       192     // This is the appropriate time
                      =  ────  +  ─────  +  ─────  +  ─────    //  to pull out your calculator
                         -12        5        -8        120     //  and plug this in.

                      =  - 10.2
                        ^^^^^^^^
            }

        Least_squre_method:
            >"linear regression"
            >we are looking for a single line that can describe our data
            -works best on the following type of distribution (total shit otherwise):
			    ├─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ 
			    │                        x    x     |
			    │                     x   x  x   x   
			    │                x   x      x       │
			    │                       x            
			    │            x  x   x               │
			    │         x        x                 
			    │     x     x   x                   │
			    │                                  
			    │ x   x  x   x                      │
			    │   x                               
			    ┼───────────────────────────────────┴
            >we choose our line so that it has the least squared errors fitting to
              all data points combined
            {
                          n ∑xy - ∑x ∑y
                let m := ───────────────
                          n ∑x² - (∑x)²

                          ∑y - m ∑x
                let b := ───────────
                              n

                y = mx + b
            }
            {
                // Create a table and calculate intermediate values
                  x |   y  |   xy  |  x²
                ----+------+-------+-----
                  1 |  1.5 |   1.5 |   1
                  2 |  3.8 |   7.6 |   4
                  3 |  6.7 |  20.1 |   9
                  4 |  9.0 |  36.0 |  16
                  5 | 11.2 |  56.0 |  25
                  6 | 13.6 |  81.6 |  36
                  7 | 16.0 | 112.0 |  49
                ----+------+-------+-----.
                 28 | 61.8 | 314.8 | 140 | ∑


                       7 * 314.8 - 28 * 61.8       473.2
                m  =  ───────────────────────  =  ───────  =  2.414
                         7 * 140 - 28 * 28          196


                       61.8 - 2,414 * 28
                b  =  ───────────────────  =  - 0.827
                               7

                // Check how accuratly our line fits with the 3th y value
                y₃  ≈  2.414 * 3 + ( - 0.827 )  = 6.415
            }

    Extrapolation:
        >we have a partial, 2D function
        >we wish to estimate values somewhere outsite the bounds of the lowest and
          the highest x-es we have

    Root_estimation:
        Fixed_point_iteration:
            >we iterate guesses to get more and more accurate results
            -the function must be brought to the following form:
                x = g(x)
                let x₀ := initial guess
                let n  := number of iterations
                for (i = 0; i < n; i++):
                    xᵢ₊₁ := solve(xᵢ = g())

    Newton_Raphson_method:
        >we are searching for an x value to feed into f(x) where it equals our
          desired value {0}
        >we bruteforce search for 2 output values which hug our desired value,
          then start iterating until we find out desired value or an acceptable
          approximation
        xᵢ₊₁ = xᵢ - ( f(xᵢ) / f'(xᵢ) )

    Secant_method:
        >requires 2 values to start with
        >used instead of the Newton method when the derivative is really ugly
        xᵢ₊₁ = xᵢ - ( f(xᵢ) / ( (f(xᵢ) - f(xᵢ-1) ) / ( xᵢ - xᵢ-1) )



#define encoding: //(0x0000005a)➞\
I----------------------------------------------\
I----------------------------------------------\
I----------------------------------------------\
I   _____                    _ _               \
I  |  ___|                  | (_)              \
I  | |__ _ __   ___ ___   __| |_ _ __   __ _   \
I  |  __| '_ \ / __/ _ \ / _` | | '_ \ / _` |  \
I  | |__| | | | (_| (_) | (_| | | | | | (_| |  \
I  \____/_| |_|\___\___/ \__,_|_|_| |_|\__, |  \
I                                       __/ |  \
I                                      |___/   \
I----------------------------------------------\
I----------------------------------------------\
I----------------------------------------------I
	
	BINARY: //(0x0000005b)➞
		>while technically every computer encoding is binary, in this context it means that numbers are represented as is, in base 2

	FLOATS: //(0x0000005c)➞
		>basically scientific notation in a base of 2
		-3 fields
			¤sign (-/+)
				+  -  0
				-  -  1
			¤exponent
				>we subtract 127 from the exponent so it can represent negative numbers; therefor 127 = 0, <127 -> -, >127 -> +;
				>all 0s and 1s are reserved -> ranges between -126 and 127
			¤fraction/mantissa
				>the fractions is calculated as numbers less then two in a base of two
				>each position mark 1/2^N with an ongrowing N as we get further from 0
			-1^<sign>  *  (1 + <mantissa>)  *  (2^<exponent> - 127)

					sign  exponent			   mantissa
					 |       |					  |
				   +---+----------+-------------------------+
			float  | 1 |        8 |                      23 |
				   +---+----------+--+----------------------+-------------------------------+
			double | 1 |          11 |                                                   52 |
				   +---+-------------+------------------------------------------------------+
		{ // float to binary (by hand)
			11000010111110000011001100110011
			// separate the fields (optionally insert dots to make it easier on the eye)
			1 1000.0101 1111.0000.0110.0110.0110.011
			|     |                 |
		  sign    |             fraction
		      exponent
			// determine the sign
			1 => minus
			// read the exponent
				1000.0101
				// interpret as base 10
				133
				// subtract the magical 127 shift
				133 - 127 = 6
			// read the mantissa
			1111.0000.0110.0110.0110.011
			// separate after the <exponent>th  digit
			11.11.00   00.01.10.01.10.01.10.011
			// add the (otherwise) implicit 1 to start of the first group
			11.11.10.0   00.01.10.01.10.01.10.011
				|                |
			  whole part         |
			 			  fractional part
			// convert the whole part from binary
			 64  32  16  8  4  2  1
			  1   1   1  1  1  0  0

			  64 + 32 + 16 + 8 + 4   =   124
			// convert the fractional part from binary
			  0   0   0   1    1    0    0     1     1     0      0      1      1      0       0       1        1
			 1/2 1/4 1/8 1/16 1/32 1/64 1/128 1/256 1/512 1/1024 1/2048 1/4096 1/8192 1/16384 1/32768 1/65536 1/129072

			 1/16 + 1/32 + 1/256 + 1/512 + 1/4096 + 1/8192 + 1/65536 + 1/129072   =   0.09999847412109375
			// put it all together
			-1 * 124.09999847412109375
				= -124.09999847412109375
				  ^^^^^^^^^^^^^^^^^^^^^^
		}

	DECIMALS: //(0x0000005d)➞
		>representing base 10 digits with binary
		>4 bits is the minimum amount of memory that can store a digit
		>there's gonna be ĐĐinvalid/illegal valuesĐĐ; ie. value which cannot be represented in base 10 on a single digit
			{ 1011 /*11; obviously doesnt fit to a single digit*/ }
		>to avoid Đinvalid valuesĐ, whenever one would come up in an operation 2^sizeof(digit) - 10 is added to the digit and 1 is carried to the next
			{         II.  I.			
			         0101 0011		//    53
			  +      1001 0111		// +  97
			  ──────────────────	// ──────
			    0001 0101 0000		//   150

				 I.
				0011
			  + 0111
			  ───────
			    1010
			  // the result is larger than 10 there for we add 6
			    0110
			  + 1010
			  ───────
			    0000
			  // 1 will have to be carried

				II.
			    0001	// *this is the 1 we carried as the last operation had to be rolled over
			    0101
			  + 1001
			  ───────
			    1111
			   // the result is larger than 10 therefor we add 6
			    0110
			  + 1111
			  ───────
			    0101
			  // 1 will have to be carried

			    III.
			    0001	// *this is the 1 we carried as the last operation had to be rolled over
			    0000
			  + 0000
			  ───────
			    0001
			}

	ASCII: //(0x0000005e)➞
		#define ascii_table		// ascii table
		--------------------------------------------------------------------------------------------------------------------
		|									ASCII - Windows Codepage 1252 (probably)	/*0xfffffff2*/					   |
		--------------------------------------------------------------------------------------------------------------------
		| DEC  | OCT  | HEX  |   BIN    | Symbol  | HTML Number  | HTML Name  |                Description                 |
		--------------------------------------------------------------------------------------------------------------------
		|    0 |  000 | 00   | 00000000 | NUL     | &#000;       | n/a        | Null char                                  |
		|    1 |  001 | 01   | 00000001 | SOH     | &#001;       | n/a        | Start of Heading                           |
		|    2 |  002 | 02   | 00000010 | STX     | &#002;       | n/a        | Start of Text                              |
		|    3 |  003 | 03   | 00000011 | ETX     | &#003;       | n/a        | End of Text                                |
		|    4 |  004 | 04   | 00000100 | EOT     | &#004;       | n/a        | End of Transmission                        |
		|    5 |  005 | 05   | 00000101 | ENQ     | &#005;       | n/a        | Enquiry                                    |
		|    6 |  006 | 06   | 00000110 | ACK     | &#006;       | n/a        | Acknowledgment                             |
		|    7 |  007 | 07   | 00000111 | BEL     | &#007;       | n/a        | Bell                                       |
		|    8 |  010 | 08   | 00001000 | BS      | &#008;       | n/a        | Back Space                                 |
		|    9 |  011 | 09   | 00001001 | HT      | &#009;       | n/a        | Horizontal Tab                             |
		|   10 |  012 | 0A   | 00001010 | LF      | &#010;       | n/a        | Line Feed                                  |
		|   11 |  013 | 0B   | 00001011 | VT      | &#011;       | n/a        | Vertical Tab                               |
		|   12 |  014 | 0C   | 00001100 | FF      | &#012;       | n/a        | Form Feed                                  |
		|   13 |  015 | 0D   | 00001101 | CR      | &#013;       | n/a        | Carriage Return                            |
		|   14 |  016 | 0E   | 00001110 | SO      | &#014;       | n/a        | Shift Out / X-On                           |
		|   15 |  017 | 0F   | 00001111 | SI      | &#015;       | n/a        | Shift In / X-Off                           |
		|   16 |  020 | 10   | 00010000 | DLE     | &#016;       | n/a        | Data Line Escape                           |
		|   17 |  021 | 11   | 00010001 | DC1     | &#017;       | n/a        | Device Control 1 (oft. XON)                |
		|   18 |  022 | 12   | 00010010 | DC2     | &#018;       | n/a        | Device Control 2                           |
		|   19 |  023 | 13   | 00010011 | DC3     | &#019;       | n/a        | Device Control 3 (oft. XOFF)               |
		|   20 |  024 | 14   | 00010100 | DC4     | &#020;       | n/a        | Device Control 4                           |
		|   21 |  025 | 15   | 00010101 | NAK     | &#021;       | n/a        | Negative Acknowledgement                   |
		|   22 |  026 | 16   | 00010110 | SYN     | &#022;       | n/a        | Synchronous Idle                           |
		|   23 |  027 | 17   | 00010111 | ETB     | &#023;       | n/a        | End of Transmit Block                      |
		|   24 |  030 | 18   | 00011000 | CAN     | &#024;       | n/a        | Cancel                                     |
		|   25 |  031 | 19   | 00011001 | EM      | &#025;       | n/a        | End of Medium                              |
		|   26 |  032 | 1A   | 00011010 | SUB     | &#026;       | n/a        | Substitute                                 |
		|   27 |  033 | 1B   | 00011011 | ESC     | &#027;       | n/a        | Escape                                     |
		|   28 |  034 | 1C   | 00011100 | FS      | &#028;       | n/a        | File Separator                             |
		|   29 |  035 | 1D   | 00011101 | GS      | &#029;       | n/a        | Group Separator                            |
		|   30 |  036 | 1E   | 00011110 | RS      | &#030;       | n/a        | Record Separator                           |
		|   31 |  037 | 1F   | 00011111 | US      | &#031;       | n/a        | Unit Separator                             |
		|   32 |  040 | 20   | 00100000 |         | &#32;        | n/a        | Space                                      |
		|   33 |  041 | 21   | 00100001 | !       | &#33;        | n/a        | Exclamation mark                           |
		|   34 |  042 | 22   | 00100010 | "       | &#34;        | &quot;     | Double quotes (or speech marks)            |
		|   35 |  043 | 23   | 00100011 | #       | &#35;        | n/a        | Number                                     |
		|   36 |  044 | 24   | 00100100 | $       | &#36;        | n/a        | Dollar                                     |
		|   37 |  045 | 25   | 00100101 | %       | &#37;        | n/a        | Per cent sign                              |
		|   38 |  046 | 26   | 00100110 | &       | &#38;        | &amp;      | Ampersand                                  |
		|   39 |  047 | 27   | 00100111 | '       | &#39;        | n/a        | Single quote                               |
		|   40 |  050 | 28   | 00101000 | (       | &#40;        | n/a        | Open parenthesis (or open bracket)         |
		|   41 |  051 | 29   | 00101001 | )       | &#41;        | n/a        | Close parenthesis (or close bracket)       |
		|   42 |  052 | 2A   | 00101010 | *       | &#42;        | n/a        | Asterisk                                   |
		|   43 |  053 | 2B   | 00101011 | +       | &#43;        | n/a        | Plus                                       |
		|   44 |  054 | 2C   | 00101100 | ,       | &#44;        | n/a        | Comma                                      |
		|   45 |  055 | 2D   | 00101101 | -       | &#45;        | n/a        | Hyphen                                     |
		|   46 |  056 | 2E   | 00101110 | .       | &#46;        | n/a        | Period, dot or full stop                   |
		|   47 |  057 | 2F   | 00101111 | /       | &#47;        | n/a        | Slash or divide                            |
		|   48 |  060 | 30   | 00110000 | 0       | &#48;        | n/a        | Zero                                       |
		|   49 |  061 | 31   | 00110001 | 1       | &#49;        | n/a        | One                                        |
		|   50 |  062 | 32   | 00110010 | 2       | &#50;        | n/a        | Two                                        |
		|   51 |  063 | 33   | 00110011 | 3       | &#51;        | n/a        | Three                                      |
		|   52 |  064 | 34   | 00110100 | 4       | &#52;        | n/a        | Four                                       |
		|   53 |  065 | 35   | 00110101 | 5       | &#53;        | n/a        | Five                                       |
		|   54 |  066 | 36   | 00110110 | 6       | &#54;        | n/a        | Six                                        |
		|   55 |  067 | 37   | 00110111 | 7       | &#55;        | n/a        | Seven                                      |
		|   56 |  070 | 38   | 00111000 | 8       | &#56;        | n/a        | Eight                                      |
		|   57 |  071 | 39   | 00111001 | 9       | &#57;        | n/a        | Nine                                       |
		|   58 |  072 | 3A   | 00111010 | :       | &#58;        | n/a        | Colon                                      |
		|   59 |  073 | 3B   | 00111011 | ;       | &#59;        | n/a        | Semicolon                                  |
		|   60 |  074 | 3C   | 00111100 | <       | &#60;        | &lt;       | Less than (or open angled bracket)         |
		|   61 |  075 | 3D   | 00111101 | =       | &#61;        | n/a        | Equals                                     |
		|   62 |  076 | 3E   | 00111110 | >       | &#62;        | &gt;       | Greater than (or close angled bracket)     |
		|   63 |  077 | 3F   | 00111111 | ?       | &#63;        | n/a        | Question mark                              |
		|   64 |  100 | 40   | 01000000 | @       | &#64;        | n/a        | At symbol                                  |
		|   65 |  101 | 41   | 01000001 | A       | &#65;        | n/a        | Uppercase A                                |
		|   66 |  102 | 42   | 01000010 | B       | &#66;        | n/a        | Uppercase B                                |
		|   67 |  103 | 43   | 01000011 | C       | &#67;        | n/a        | Uppercase C                                |
		|   68 |  104 | 44   | 01000100 | D       | &#68;        | n/a        | Uppercase D                                |
		|   69 |  105 | 45   | 01000101 | E       | &#69;        | n/a        | Uppercase E                                |
		|   70 |  106 | 46   | 01000110 | F       | &#70;        | n/a        | Uppercase F                                |
		|   71 |  107 | 47   | 01000111 | G       | &#71;        | n/a        | Uppercase G                                |
		|   72 |  110 | 48   | 01001000 | H       | &#72;        | n/a        | Uppercase H                                |
		|   73 |  111 | 49   | 01001001 | I       | &#73;        | n/a        | Uppercase I                                |
		|   74 |  112 | 4A   | 01001010 | J       | &#74;        | n/a        | Uppercase J                                |
		|   75 |  113 | 4B   | 01001011 | K       | &#75;        | n/a        | Uppercase K                                |
		|   76 |  114 | 4C   | 01001100 | L       | &#76;        | n/a        | Uppercase L                                |
		|   77 |  115 | 4D   | 01001101 | M       | &#77;        | n/a        | Uppercase M                                |
		|   78 |  116 | 4E   | 01001110 | N       | &#78;        | n/a        | Uppercase N                                |
		|   79 |  117 | 4F   | 01001111 | O       | &#79;        | n/a        | Uppercase O                                |
		|   80 |  120 | 50   | 01010000 | P       | &#80;        | n/a        | Uppercase P                                |
		|   81 |  121 | 51   | 01010001 | Q       | &#81;        | n/a        | Uppercase Q                                |
		|   82 |  122 | 52   | 01010010 | R       | &#82;        | n/a        | Uppercase R                                |
		|   83 |  123 | 53   | 01010011 | S       | &#83;        | n/a        | Uppercase S                                |
		|   84 |  124 | 54   | 01010100 | T       | &#84;        | n/a        | Uppercase T                                |
		|   85 |  125 | 55   | 01010101 | U       | &#85;        | n/a        | Uppercase U                                |
		|   86 |  126 | 56   | 01010110 | V       | &#86;        | n/a        | Uppercase V                                |
		|   87 |  127 | 57   | 01010111 | W       | &#87;        | n/a        | Uppercase W                                |
		|   88 |  130 | 58   | 01011000 | X       | &#88;        | n/a        | Uppercase X                                |
		|   89 |  131 | 59   | 01011001 | Y       | &#89;        | n/a        | Uppercase Y                                |
		|   90 |  132 | 5A   | 01011010 | Z       | &#90;        | n/a        | Uppercase Z                                |
		|   91 |  133 | 5B   | 01011011 | [       | &#91;        | n/a        | Opening bracket                            |
		|   92 |  134 | 5C   | 01011100 | \       | &#92;        | n/a        | Backslash                                  |
		|   93 |  135 | 5D   | 01011101 | ]       | &#93;        | n/a        | Closing bracket                            |
		|   94 |  136 | 5E   | 01011110 | ^       | &#94;        | n/a        | Caret - circumflex                         |
		|   95 |  137 | 5F   | 01011111 | _       | &#95;        | n/a        | Underscore                                 |
		|   96 |  140 | 60   | 01100000 | `       | &#96;        | n/a        | Grave accent                               |
		|   97 |  141 | 61   | 01100001 | a       | &#97;        | n/a        | Lowercase a                                |
		|   98 |  142 | 62   | 01100010 | b       | &#98;        | n/a        | Lowercase b                                |
		|   99 |  143 | 63   | 01100011 | c       | &#99;        | n/a        | Lowercase c                                |
		|  100 |  144 | 64   | 01100100 | d       | &#100;       | n/a        | Lowercase d                                |
		|  101 |  145 | 65   | 01100101 | e       | &#101;       | n/a        | Lowercase e                                |
		|  102 |  146 | 66   | 01100110 | f       | &#102;       | n/a        | Lowercase f                                |
		|  103 |  147 | 67   | 01100111 | g       | &#103;       | n/a        | Lowercase g                                |
		|  104 |  150 | 68   | 01101000 | h       | &#104;       | n/a        | Lowercase h                                |
		|  105 |  151 | 69   | 01101001 | i       | &#105;       | n/a        | Lowercase i                                |
		|  106 |  152 | 6A   | 01101010 | j       | &#106;       | n/a        | Lowercase j                                |
		|  107 |  153 | 6B   | 01101011 | k       | &#107;       | n/a        | Lowercase k                                |
		|  108 |  154 | 6C   | 01101100 | l       | &#108;       | n/a        | Lowercase l                                |
		|  109 |  155 | 6D   | 01101101 | m       | &#109;       | n/a        | Lowercase m                                |
		|  110 |  156 | 6E   | 01101110 | n       | &#110;       | n/a        | Lowercase n                                |
		|  111 |  157 | 6F   | 01101111 | o       | &#111;       | n/a        | Lowercase o                                |
		|  112 |  160 | 70   | 01110000 | p       | &#112;       | n/a        | Lowercase p                                |
		|  113 |  161 | 71   | 01110001 | q       | &#113;       | n/a        | Lowercase q                                |
		|  114 |  162 | 72   | 01110010 | r       | &#114;       | n/a        | Lowercase r                                |
		|  115 |  163 | 73   | 01110011 | s       | &#115;       | n/a        | Lowercase s                                |
		|  116 |  164 | 74   | 01110100 | t       | &#116;       | n/a        | Lowercase t                                |
		|  117 |  165 | 75   | 01110101 | u       | &#117;       | n/a        | Lowercase u                                |
		|  118 |  166 | 76   | 01110110 | v       | &#118;       | n/a        | Lowercase v                                |
		|  119 |  167 | 77   | 01110111 | w       | &#119;       | n/a        | Lowercase w                                |
		|  120 |  170 | 78   | 01111000 | x       | &#120;       | n/a        | Lowercase x                                |
		|  121 |  171 | 79   | 01111001 | y       | &#121;       | n/a        | Lowercase y                                |
		|  122 |  172 | 7A   | 01111010 | z       | &#122;       | n/a        | Lowercase z                                |
		|  123 |  173 | 7B   | 01111011 | {       | &#123;       | n/a        | Opening brace                              |
		|  124 |  174 | 7C   | 01111100 | |       | &#124;       | n/a        | Vertical bar                               |
		|  125 |  175 | 7D   | 01111101 | }       | &#125;       | n/a        | Closing brace                              |
		|  126 |  176 | 7E   | 01111110 | ~       | &#126;       | n/a        | Equivalency sign - tilde                   |
		|  127 |  177 | 7F   | 01111111 | n/a     | &#127;       | n/a        | Delete                                     |
		|  128 |  200 | 80   | 10000000 | €       | &#128;       | &euro;     | Euro sign                                  |
		|  129 |  201 | 81   | 10000001 | n/a     | n/a          | n/a        | n/a                                        |
		|  130 |  202 | 82   | 10000010 | ‚       | &#130;       | &sbquo;    | Single low-9 quotation mark                |
		|  131 |  203 | 83   | 10000011 | ƒ       | &#131;       | &fnof;     | Latin small letter f with hook             |
		|  132 |  204 | 84   | 10000100 | „       | &#132;       | &bdquo;    | Double low-9 quotation mark                |
		|  133 |  205 | 85   | 10000101 | …       | &#133;       | &hellip;   | Horizontal ellipsis                        |
		|  134 |  206 | 86   | 10000110 | †       | &#134;       | &dagger;   | Dagger                                     |
		|  135 |  207 | 87   | 10000111 | ‡       | &#135;       | &Dagger;   | Double dagger                              |
		|  136 |  210 | 88   | 10001000 | ˆ       | &#136;       | &circ;     | Modifier letter circumflex accent          |
		|  137 |  211 | 89   | 10001001 | ‰       | &#137;       | &permil;   | Per mille sign                             |
		|  138 |  212 | 8A   | 10001010 | Š       | &#138;       | &Scaron;   | Latin capital letter S with carrot         |
		|  139 |  213 | 8B   | 10001011 | ‹       | &#139;       | &lsaquo;   | Single left-pointing angle quotation       |
		|  140 |  214 | 8C   | 10001100 | Œ       | &#140;       | &OElig;    | Latin capital ligature OE                  |
		|  141 |  215 | 8D   | 10001101 | n/a     | n/a          | n/a        | n/a                                        |
		|  142 |  216 | 8E   | 10001110 | Ž       | &#142;       | ­n/a        | Latin capital letter Z with carrot        |
		|  143 |  217 | 8F   | 10001111 | n/a     | n/a          | n/a        | n/a                                        |
		|  144 |  220 | 90   | 10010000 | n/a     | n/a          | n/a        | n/a                                        |
		|  145 |  221 | 91   | 10010001 | ‘       | &#145;       | &lsquo;    | Left single quotation mark                 |
		|  146 |  222 | 92   | 10010010 | ’       | &#146;       | &rsquo;    | Right single quotation mark                |
		|  147 |  223 | 93   | 10010011 | “       | &#147;       | &ldquo;    | Left double quotation mark                 |
		|  148 |  224 | 94   | 10010100 | ”       | &#148;       | &rdquo;    | Right double quotation mark                |
		|  149 |  225 | 95   | 10010101 | •       | &#149;       | &bull;     | Bullet                                     |
		|  150 |  226 | 96   | 10010110 | –       | &#150;       | &ndash;    | En dash                                    |
		|  151 |  227 | 97   | 10010111 | —       | &#151;       | &mdash;    | Em dash                                    |
		|  152 |  230 | 98   | 10011000 | ˜       | &#152;       | &tilde;    | Small tilde                                |
		|  153 |  231 | 99   | 10011001 | ™       | &#153;       | &trade;    | Trade mark sign                            |
		|  154 |  232 | 9A   | 10011010 | š       | &#154;       | &scaron;   | Latin small letter S with carrot           |
		|  155 |  233 | 9B   | 10011011 | ›       | &#155;       | &rsaquo;   | Single right-pointing angle quotation mark |
		|  156 |  234 | 9C   | 10011100 | œ       | &#156;       | &oelig;    | Latin small ligature oe                    |
		|  157 |  235 | 9D   | 10011101 | n/a     | n/a          | n/a        | n/a                                        |
		|  158 |  236 | 9E   | 10011110 | ž       | &#158;       |            | Latin small letter z with carrot           |
		|  159 |  237 | 9F   | 10011111 | Ÿ       | &#159;       | &Yuml;     | Latin capital letter Y with diaeresis      |
		|  160 |  240 | A0   | 10100000 | n/a     | &#160;       | &nbsp;     | Non-breaking space                         |
		|  161 |  241 | A1   | 10100001 | ¡       | &#161;       | &iexcl;    | Inverted exclamation mark                  |
		|  162 |  242 | A2   | 10100010 | ¢       | &#162;       | &cent;     | Cent sign                                  |
		|  163 |  243 | A3   | 10100011 | £       | &#163;       | &pound;    | Pound sign                                 |
		|  164 |  244 | A4   | 10100100 | ¤       | &#164;       | &curren;   | Currency sign                              |
		|  165 |  245 | A5   | 10100101 | ¥       | &#165;       | &yen;      | Yen sign                                   |
		|  166 |  246 | A6   | 10100110 | ¦       | &#166;       | &brvbar;   | Pipe, Broken vertical bar                  |
		|  167 |  247 | A7   | 10100111 | §       | &#167;       | &sect;     | Section sign                               |
		|  168 |  250 | A8   | 10101000 | ¨       | &#168;       | &uml;      | Spacing diaeresis - umlaut                 |
		|  169 |  251 | A9   | 10101001 | ©       | &#169;       | &copy;     | Copyright sign                             |
		|  170 |  252 | AA   | 10101010 | ª       | &#170;       | &ordf;     | Feminine ordinal indicator                 |
		|  171 |  253 | AB   | 10101011 | «       | &#171;       | &laquo;    | Left double angle quotes                   |
		|  172 |  254 | AC   | 10101100 | ¬       | &#172;       | &not;      | Not sign                                   |
		|  173 |  255 | AD   | 10101101 | n/a     | &#173;       | &shy;      | Soft hyphen                                |
		|  174 |  256 | AE   | 10101110 | ®       | &#174;       | &reg;      | Registered trade mark sign                 |
		|  175 |  257 | AF   | 10101111 | ¯       | &#175;       | &macr;     | Spacing macron - overline                  |
		|  176 |  260 | B0   | 10110000 | °       | &#176;       | &deg;      | Degree sign                                |
		|  177 |  261 | B1   | 10110001 | ±       | &#177;       | &plusmn;   | Plus-or-minus sign                         |
		|  178 |  262 | B2   | 10110010 | ²       | &#178;       | &sup2;     | Superscript two - squared                  |
		|  179 |  263 | B3   | 10110011 | ³       | &#179;       | &sup3;     | Superscript three - cubed                  |
		|  180 |  264 | B4   | 10110100 | ´       | &#180;       | &acute;    | Acute accent - spacing acute               |
		|  181 |  265 | B5   | 10110101 | µ       | &#181;       | &micro;    | Micro sign                                 |
		|  182 |  266 | B6   | 10110110 | ¶       | &#182;       | &para;     | Pilcrow sign - paragraph sign              |
		|  183 |  267 | B7   | 10110111 | ·       | &#183;       | &middot;   | Middle dot - Georgian comma                |
		|  184 |  270 | B8   | 10111000 | ¸       | &#184;       | &cedil;    | Spacing cedilla                            |
		|  185 |  271 | B9   | 10111001 | ¹       | &#185;       | &sup1;     | Superscript one                            |
		|  186 |  272 | BA   | 10111010 | º       | &#186;       | &ordm;     | Masculine ordinal indicator                |
		|  187 |  273 | BB   | 10111011 | »       | &#187;       | &raquo;    | Right double angle quotes                  |
		|  188 |  274 | BC   | 10111100 | ¼       | &#188;       | &frac14;   | Fraction one quarter                       |
		|  189 |  275 | BD   | 10111101 | ½       | &#189;       | &frac12;   | Fraction one half                          |
		|  190 |  276 | BE   | 10111110 | ¾       | &#190;       | &frac34;   | Fraction three quarters                    |
		|  191 |  277 | BF   | 10111111 | ¿       | &#191;       | &iquest;   | Inverted question mark                     |
		|  192 |  300 | C0   | 11000000 | À       | &#192;       | &Agrave;   | Latin capital letter A with grave          |
		|  193 |  301 | C1   | 11000001 | Á       | &#193;       | &Aacute;   | Latin capital letter A with acute          |
		|  194 |  302 | C2   | 11000010 | Â       | &#194;       | &Acirc;    | Latin capital letter A with circumflex     |
		|  195 |  303 | C3   | 11000011 | Ã       | &#195;       | &Atilde;   | Latin capital letter A with tilde          |
		|  196 |  304 | C4   | 11000100 | Ä       | &#196;       | &Auml;     | Latin capital letter A with diaeresis      |
		|  197 |  305 | C5   | 11000101 | Å       | &#197;       | &Aring;    | Latin capital letter A with ring above     |
		|  198 |  306 | C6   | 11000110 | Æ       | &#198;       | &AElig;    | Latin capital letter AE                    |
		|  199 |  307 | C7   | 11000111 | Ç       | &#199;       | &Ccedil;   | Latin capital letter C with cedilla        |
		|  200 |  310 | C8   | 11001000 | È       | &#200;       | &Egrave;   | Latin capital letter E with grave          |
		|  201 |  311 | C9   | 11001001 | É       | &#201;       | &Eacute;   | Latin capital letter E with acute          |
		|  202 |  312 | CA   | 11001010 | Ê       | &#202;       | &Ecirc;    | Latin capital letter E with circumflex     |
		|  203 |  313 | CB   | 11001011 | Ë       | &#203;       | &Euml;     | Latin capital letter E with diaeresis      |
		|  204 |  314 | CC   | 11001100 | Ì       | &#204;       | &Igrave;   | Latin capital letter I with grave          |
		|  205 |  315 | CD   | 11001101 | Í       | &#205;       | &Iacute;   | Latin capital letter I with acute          |
		|  206 |  316 | CE   | 11001110 | Î       | &#206;       | &Icirc;    | Latin capital letter I with circumflex     |
		|  207 |  317 | CF   | 11001111 | Ï       | &#207;       | &Iuml;     | Latin capital letter I with diaeresis      |
		|  208 |  320 | D0   | 11010000 | Ð       | &#208;       | &ETH;      | Latin capital letter ETH                   |
		|  209 |  321 | D1   | 11010001 | Ñ       | &#209;       | &Ntilde;   | Latin capital letter N with tilde          |
		|  210 |  322 | D2   | 11010010 | Ò       | &#210;       | &Ograve;   | Latin capital letter O with grave          |
		|  211 |  323 | D3   | 11010011 | Ó       | &#211;       | &Oacute;   | Latin capital letter O with acute          |
		|  212 |  324 | D4   | 11010100 | Ô       | &#212;       | &Ocirc;    | Latin capital letter O with circumflex     |
		|  213 |  325 | D5   | 11010101 | Õ       | &#213;       | &Otilde;   | Latin capital letter O with tilde          |
		|  214 |  326 | D6   | 11010110 | Ö       | &#214;       | &Ouml;     | Latin capital letter O with diaeresis      |
		|  215 |  327 | D7   | 11010111 | ×       | &#215;       | &times;    | Multiplication sign                        |
		|  216 |  330 | D8   | 11011000 | Ø       | &#216;       | &Oslash;   | Latin capital letter O with slash          |
		|  217 |  331 | D9   | 11011001 | Ù       | &#217;       | &Ugrave;   | Latin capital letter U with grave          |
		|  218 |  332 | DA   | 11011010 | Ú       | &#218;       | &Uacute;   | Latin capital letter U with acute          |
		|  219 |  333 | DB   | 11011011 | Û       | &#219;       | &Ucirc;    | Latin capital letter U with circumflex     |
		|  220 |  334 | DC   | 11011100 | Ü       | &#220;       | &Uuml;     | Latin capital letter U with diaeresis      |
		|  221 |  335 | DD   | 11011101 | Ý       | &#221;       | &Yacute;   | Latin capital letter Y with acute          |
		|  222 |  336 | DE   | 11011110 | Þ       | &#222;       | &THORN;    | Latin capital letter THORN                 |
		|  223 |  337 | DF   | 11011111 | ß       | &#223;       | &szlig;    | Latin small letter sharp s - ess-zed       |
		|  224 |  340 | E0   | 11100000 | à       | &#224;       | &agrave;   | Latin small letter a with grave            |
		|  225 |  341 | E1   | 11100001 | á       | &#225;       | &aacute;   | Latin small letter a with acute            |
		|  226 |  342 | E2   | 11100010 | â       | &#226;       | &acirc;    | Latin small letter a with circumflex       |
		|  227 |  343 | E3   | 11100011 | ã       | &#227;       | &atilde;   | Latin small letter a with tilde            |
		|  228 |  344 | E4   | 11100100 | ä       | &#228;       | &auml;     | Latin small letter a with diaeresis        |
		|  229 |  345 | E5   | 11100101 | å       | &#229;       | &aring;    | Latin small letter a with ring above       |
		|  230 |  346 | E6   | 11100110 | æ       | &#230;       | &aelig;    | Latin small letter ae                      |
		|  231 |  347 | E7   | 11100111 | ç       | &#231;       | &ccedil;   | Latin small letter c with cedilla          |
		|  232 |  350 | E8   | 11101000 | è       | &#232;       | &egrave;   | Latin small letter e with grave            |
		|  233 |  351 | E9   | 11101001 | é       | &#233;       | &eacute;   | Latin small letter e with acute            |
		|  234 |  352 | EA   | 11101010 | ê       | &#234;       | &ecirc;    | Latin small letter e with circumflex       |
		|  235 |  353 | EB   | 11101011 | ë       | &#235;       | &euml;     | Latin small letter e with diaeresis        |
		|  236 |  354 | EC   | 11101100 | ì       | &#236;       | &igrave;   | Latin small letter i with grave            |
		|  237 |  355 | ED   | 11101101 | í       | &#237;       | &iacute;   | Latin small letter i with acute            |
		|  238 |  356 | EE   | 11101110 | î       | &#238;       | &icirc;    | Latin small letter i with circumflex       |
		|  239 |  357 | EF   | 11101111 | ï       | &#239;       | &iuml;     | Latin small letter i with diaeresis        |
		|  240 |  360 | F0   | 11110000 | ð       | &#240;       | &eth;      | Latin small letter eth                     |
		|  241 |  361 | F1   | 11110001 | ñ       | &#241;       | &ntilde;   | Latin small letter n with tilde            |
		|  242 |  362 | F2   | 11110010 | ò       | &#242;       | &ograve;   | Latin small letter o with grave            |
		|  243 |  363 | F3   | 11110011 | ó       | &#243;       | &oacute;   | Latin small letter o with acute            |
		|  244 |  364 | F4   | 11110100 | ô       | &#244;       | &ocirc;    | Latin small letter o with circumflex       |
		|  245 |  365 | F5   | 11110101 | õ       | &#245;       | &otilde;   | Latin small letter o with tilde            |
		|  246 |  366 | F6   | 11110110 | ö       | &#246;       | &ouml;     | Latin small letter o with diaeresis        |
		|  247 |  367 | F7   | 11110111 | ÷       | &#247;       | &divide;   | Division sign                              |
		|  248 |  370 | F8   | 11111000 | ø       | &#248;       | &oslash;   | Latin small letter o with slash            |
		|  249 |  371 | F9   | 11111001 | ù       | &#249;       | &ugrave;   | Latin small letter u with grave            |
		|  250 |  372 | FA   | 11111010 | ú       | &#250;       | &uacute;   | Latin small letter u with acute            |
		|  251 |  373 | FB   | 11111011 | û       | &#251;       | &ucirc;    | Latin small letter u with circumflex       |
		|  252 |  374 | FC   | 11111100 | ü       | &#252;       | &uuml;     | Latin small letter u with diaeresis        |
		|  253 |  375 | FD   | 11111101 | ý       | &#253;       | &yacute;   | Latin small letter y with acute            |
		|  254 |  376 | FE   | 11111110 | þ       | &#254;       | &thorn;    | Latin small letter thorn                   |
		|  255 |  377 | FF   | 11111111 | ÿ       | &#255;       | &yuml;     | Latin small letter y with diaeresis        |
		--------------------------------------------------------------------------------------------------------------------

	   ========================================================================================================================
	   ========================================================================================================================
	   ========================================================================================================================

		-----------------------------------------------------------------------------------------------------------------------
		|									ASCII - IMB PC Code page 437	/*0xfffffff1*/									  |
		-----------------------------------------------------------------------------------------------------------------------
		| DEC  | OCT  | HEX  |   BIN    | Symbol  | HTML Number  | HTML Name  |                   Description                 | 
		-----------------------------------------------------------------------------------------------------------------------
		|    0 |  000 | 00   | 00000000 | NUL     | n/a          | n/a        | Null char                                     |
		|    1 |  001 | 01   | 00000001 | ☺       | n/a          | n/a        | Smiley                                        |
		|    2 |  002 | 02   | 00000010 | ☻       | n/a          | n/a        | Black Smiley                                  |
		|    3 |  003 | 03   | 00000011 | ♥       | n/a          | n/a        | Heart                                         |
		|    4 |  004 | 04   | 00000100 | ♦       | n/a          | n/a        | Diamond                                       |
		|    5 |  005 | 05   | 00000101 | ♣       | n/a          | n/a        | Club                                          |
		|    6 |  006 | 06   | 00000110 | ♠       | n/a          | n/a        | Spade                                         |
		|    7 |  007 | 07   | 00000111 | •       | n/a          | n/a        | Bullet Point                                  |
		|    8 |  010 | 08   | 00001000 | ◘       | n/a          | n/a        | Reverse Bullet Point                          |
		|    9 |  011 | 09   | 00001001 | ○       | n/a          | n/a        | Circle                                        |
		|   10 |  012 | 0A   | 00001010 | ◙       | n/a          | n/a        | Black Circle                                  |
		|   11 |  013 | 0B   | 00001011 | ♂       | n/a          | n/a        | Male                                          | 
		|   12 |  014 | 0C   | 00001100 | ♀       | n/a          | n/a        | Female                                        |
		|   13 |  015 | 0D   | 00001101 | ♪       | n/a          | n/a        | Ti                                            |
		|   14 |  016 | 0E   | 00001110 | ♫       | n/a          | n/a        | Titi                                          |
		|   15 |  017 | 0F   | 00001111 | ☼       | n/a          | n/a        | Solar Symbol                                  |
		|   16 |  020 | 10   | 00010000 | ►       | n/a          | n/a        | Right Pointing Triangle                       |
		|   17 |  021 | 11   | 00010001 | ◄       | n/a          | n/a        | Left Pointing Triangle                        |
		|   18 |  022 | 12   | 00010010 | ↕       | n/a          | n/a        | Up-Down Arrow                                 |
		|   19 |  023 | 13   | 00010011 | ‼       | n/a          | n/a        | Double Exclamation Mark                       |
		|   20 |  024 | 14   | 00010100 | ¶       | n/a          | n/a        | Pilcrow sign - paragraph sign                 |
		|   21 |  025 | 15   | 00010101 | §       | n/a          | n/a        | Section Sign                                  |
		|   22 |  026 | 16   | 00010110 | ▬       | n/a          | n/a        | Black Rectangle                               |
		|   23 |  027 | 17   | 00010111 | ↨       | n/a          | n/a        | Up-Down Arrow with Foundation                 |
		|   24 |  030 | 18   | 00011000 | ↑       | n/a          | n/a        | Up Arrow                                      |
		|   25 |  031 | 19   | 00011001 | ↓       | n/a          | n/a        | Down Arrow                                    |
		|   26 |  032 | 1A   | 00011010 | →       | n/a          | n/a        | Right Arrow                                   |
		|   27 |  033 | 1B   | 00011011 | ←       | n/a          | n/a        | Left Arrow                                    |
		|   28 |  034 | 1C   | 00011100 | ∟       | n/a          | n/a        | 90 Degree Angle                               |
		|   29 |  035 | 1D   | 00011101 | ↔       | n/a          | n/a        | Left-right Pointing Arrow                     |
		|   30 |  036 | 1E   | 00011110 | ▲       | n/a          | n/a        | Up Pointing Arrow                             |
		|   31 |  037 | 1F   | 00011111 | ▼       | n/a          | n/a        | Down Pointing Arrow                           |
		|   32 |  040 | 20   | 00100000 | n/a     | &#32;        | n/a        | Space                                         |
		|   33 |  041 | 21   | 00100001 | !       | &#33;        | n/a        | Exclamation mark                              |  
		|   34 |  042 | 22   | 00100010 | "       | &#34;        | n/a        | Double quotes (or speech marks)               |  
		|   35 |  043 | 23   | 00100011 | #       | &#35;        | &quot;     | Number                                        |  
		|   36 |  044 | 24   | 00100100 | $       | &#36;        | n/a        | Dollar                                        |  
		|   37 |  045 | 25   | 00100101 | %       | &#37;        | n/a        | Per cent sign                                 |  
		|   38 |  046 | 26   | 00100110 | &       | &#38;        | n/a        | Ampersand                                     |  
		|   39 |  047 | 27   | 00100111 | '       | &#39;        | &amp;      | Single quote                                  |  
		|   40 |  050 | 28   | 00101000 | (       | &#40;        | n/a        | Open parenthesis (or open bracket)            |  
		|   41 |  051 | 29   | 00101001 | )       | &#41;        | n/a        | Close parenthesis (or close bracket)          |  
		|   42 |  052 | 2A   | 00101010 | *       | &#42;        | n/a        | Asterisk                                      |  
		|   43 |  053 | 2B   | 00101011 | +       | &#43;        | n/a        | Plus                                          |  
		|   44 |  054 | 2C   | 00101100 | ,       | &#44;        | n/a        | Comma                                         |  
		|   45 |  055 | 2D   | 00101101 | -       | &#45;        | n/a        | Hyphen                                        |  
		|   46 |  056 | 2E   | 00101110 | .       | &#46;        | n/a        | Period, dot or full stop                      |  
		|   47 |  057 | 2F   | 00101111 | /       | &#47;        | n/a        | Slash or divide                               |  
		|   48 |  060 | 30   | 00110000 | 0       | &#48;        | n/a        | Zero                                          |  
		|   49 |  061 | 31   | 00110001 | 1       | &#49;        | n/a        | One                                           |  
		|   50 |  062 | 32   | 00110010 | 2       | &#50;        | n/a        | Two                                           |  
		|   51 |  063 | 33   | 00110011 | 3       | &#51;        | n/a        | Three                                         |  
		|   52 |  064 | 34   | 00110100 | 4       | &#52;        | n/a        | Four                                          |  
		|   53 |  065 | 35   | 00110101 | 5       | &#53;        | n/a        | Five                                          |  
		|   54 |  066 | 36   | 00110110 | 6       | &#54;        | n/a        | Six                                           |  
		|   55 |  067 | 37   | 00110111 | 7       | &#55;        | n/a        | Seven                                         |  
		|   56 |  070 | 38   | 00111000 | 8       | &#56;        | n/a        | Eight                                         |  
		|   57 |  071 | 39   | 00111001 | 9       | &#57;        | n/a        | Nine                                          |  
		|   58 |  072 | 3A   | 00111010 | :       | &#58;        | n/a        | Colon                                         |  
		|   59 |  073 | 3B   | 00111011 | ;       | &#59;        | n/a        | Semicolon                                     |  
		|   60 |  074 | 3C   | 00111100 | <       | &#60;        | n/a        | Less than (or open angled bracket)            |  
		|   61 |  075 | 3D   | 00111101 | =       | &#61;        | &lt;       | Equals                                        |  
		|   62 |  076 | 3E   | 00111110 | >       | &#62;        | n/a        | Greater than (or close angled bracket)        |  
		|   63 |  077 | 3F   | 00111111 | ?       | &#63;        | &gt;       | Question mark                                 |  
		|   64 |  100 | 40   | 01000000 | @       | &#64;        | n/a        | At symbol                                     |  
		|   65 |  101 | 41   | 01000001 | A       | &#65;        | n/a        | Uppercase A                                   |  
		|   66 |  102 | 42   | 01000010 | B       | &#66;        | n/a        | Uppercase B                                   |  
		|   67 |  103 | 43   | 01000011 | C       | &#67;        | n/a        | Uppercase C                                   |  
		|   68 |  104 | 44   | 01000100 | D       | &#68;        | n/a        | Uppercase D                                   |  
		|   69 |  105 | 45   | 01000101 | E       | &#69;        | n/a        | Uppercase E                                   |  
		|   70 |  106 | 46   | 01000110 | F       | &#70;        | n/a        | Uppercase F                                   |  
		|   71 |  107 | 47   | 01000111 | G       | &#71;        | n/a        | Uppercase G                                   |  
		|   72 |  110 | 48   | 01001000 | H       | &#72;        | n/a        | Uppercase H                                   |  
		|   73 |  111 | 49   | 01001001 | I       | &#73;        | n/a        | Uppercase I                                   |  
		|   74 |  112 | 4A   | 01001010 | J       | &#74;        | n/a        | Uppercase J                                   |  
		|   75 |  113 | 4B   | 01001011 | K       | &#75;        | n/a        | Uppercase K                                   |  
		|   76 |  114 | 4C   | 01001100 | L       | &#76;        | n/a        | Uppercase L                                   |  
		|   77 |  115 | 4D   | 01001101 | M       | &#77;        | n/a        | Uppercase M                                   |  
		|   78 |  116 | 4E   | 01001110 | N       | &#78;        | n/a        | Uppercase N                                   |  
		|   79 |  117 | 4F   | 01001111 | O       | &#79;        | n/a        | Uppercase O                                   |  
		|   80 |  120 | 50   | 01010000 | P       | &#80;        | n/a        | Uppercase P                                   |  
		|   81 |  121 | 51   | 01010001 | Q       | &#81;        | n/a        | Uppercase Q                                   |  
		|   82 |  122 | 52   | 01010010 | R       | &#82;        | n/a        | Uppercase R                                   |  
		|   83 |  123 | 53   | 01010011 | S       | &#83;        | n/a        | Uppercase S                                   |  
		|   84 |  124 | 54   | 01010100 | T       | &#84;        | n/a        | Uppercase T                                   |  
		|   85 |  125 | 55   | 01010101 | U       | &#85;        | n/a        | Uppercase U                                   |  
		|   86 |  126 | 56   | 01010110 | V       | &#86;        | n/a        | Uppercase V                                   |  
		|   87 |  127 | 57   | 01010111 | W       | &#87;        | n/a        | Uppercase W                                   |  
		|   88 |  130 | 58   | 01011000 | X       | &#88;        | n/a        | Uppercase X                                   |  
		|   89 |  131 | 59   | 01011001 | Y       | &#89;        | n/a        | Uppercase Y                                   |  
		|   90 |  132 | 5A   | 01011010 | Z       | &#90;        | n/a        | Uppercase Z                                   |  
		|   91 |  133 | 5B   | 01011011 | [       | &#91;        | n/a        | Opening bracket                               |  
		|   92 |  134 | 5C   | 01011100 | \       | &#92;        | n/a        | Backslash                                     |  
		|   93 |  135 | 5D   | 01011101 | ]       | &#93;        | n/a        | Closing bracket                               |  
		|   94 |  136 | 5E   | 01011110 | ^       | &#94;        | n/a        | Caret - circumflex                            |  
		|   95 |  137 | 5F   | 01011111 | _       | &#95;        | n/a        | Underscore                                    |  
		|   96 |  140 | 60   | 01100000 | `       | &#96;        | n/a        | Grave accent                                  |  
		|   97 |  141 | 61   | 01100001 | a       | &#97;        | n/a        | Lowercase a                                   |  
		|   98 |  142 | 62   | 01100010 | b       | &#98;        | n/a        | Lowercase b                                   |  
		|   99 |  143 | 63   | 01100011 | c       | &#99;        | n/a        | Lowercase c                                   |  
		|  100 |  144 | 64   | 01100100 | d       | &#100;       | n/a        | Lowercase d                                   |  
		|  101 |  145 | 65   | 01100101 | e       | &#101;       | n/a        | Lowercase e                                   |  
		|  102 |  146 | 66   | 01100110 | f       | &#102;       | n/a        | Lowercase f                                   |  
		|  103 |  147 | 67   | 01100111 | g       | &#103;       | n/a        | Lowercase g                                   |  
		|  104 |  150 | 68   | 01101000 | h       | &#104;       | n/a        | Lowercase h                                   |  
		|  105 |  151 | 69   | 01101001 | i       | &#105;       | n/a        | Lowercase i                                   |  
		|  106 |  152 | 6A   | 01101010 | j       | &#106;       | n/a        | Lowercase j                                   |  
		|  107 |  153 | 6B   | 01101011 | k       | &#107;       | n/a        | Lowercase k                                   |  
		|  108 |  154 | 6C   | 01101100 | l       | &#108;       | n/a        | Lowercase l                                   |  
		|  109 |  155 | 6D   | 01101101 | m       | &#109;       | n/a        | Lowercase m                                   |  
		|  110 |  156 | 6E   | 01101110 | n       | &#110;       | n/a        | Lowercase n                                   |  
		|  111 |  157 | 6F   | 01101111 | o       | &#111;       | n/a        | Lowercase o                                   |  
		|  112 |  160 | 70   | 01110000 | p       | &#112;       | n/a        | Lowercase p                                   |  
		|  113 |  161 | 71   | 01110001 | q       | &#113;       | n/a        | Lowercase q                                   |  
		|  114 |  162 | 72   | 01110010 | r       | &#114;       | n/a        | Lowercase r                                   |  
		|  115 |  163 | 73   | 01110011 | s       | &#115;       | n/a        | Lowercase s                                   |  
		|  116 |  164 | 74   | 01110100 | t       | &#116;       | n/a        | Lowercase t                                   |  
		|  117 |  165 | 75   | 01110101 | u       | &#117;       | n/a        | Lowercase u                                   |  
		|  118 |  166 | 76   | 01110110 | v       | &#118;       | n/a        | Lowercase v                                   |  
		|  119 |  167 | 77   | 01110111 | w       | &#119;       | n/a        | Lowercase w                                   |  
		|  120 |  170 | 78   | 01111000 | x       | &#120;       | n/a        | Lowercase x                                   |  
		|  121 |  171 | 79   | 01111001 | y       | &#121;       | n/a        | Lowercase y                                   |  
		|  122 |  172 | 7A   | 01111010 | z       | &#122;       | n/a        | Lowercase z                                   |  
		|  123 |  173 | 7B   | 01111011 | {       | &#123;       | n/a        | Opening brace                                 |  
		|  124 |  174 | 7C   | 01111100 | |       | &#124;       | n/a        | Vertical bar                                  |  
		|  125 |  175 | 7D   | 01111101 | }       | &#125;       | n/a        | Closing brace                                 |  
		|  126 |  176 | 7E   | 01111110 | ~       | &#126;       | n/a        | Equivalency sign - tilde                      |  
		|  127 |  177 | 7F   | 01111111 | ⌂       | &#127;       | n/a        | Miscellaneous Technical                       |
		|  128 |  200 | 80   | 10000000 | Ç       | &#128;       | n/a        |	Latin capital letter c with cedilla		      |
		|  129 |  201 | 81   | 10000001 | ü       | n/a          | n/a        | Latin small letter u with diaeresis           |
		|  130 |  202 | 82   | 10000010 | é       | &#130;       | n/a        | Latin small letter e with acute               |
		|  131 |  203 | 83   | 10000011 | â       | &#131;       | n/a        | Latin small letter a with circumflex          |
		|  132 |  204 | 84   | 10000100 | ä       | &#132;       | n/a        | Latin small letter a with diaeresis           |
		|  133 |  205 | 85   | 10000101 | à       | &#133;       | n/a        | Latin small letter a with grave               |
		|  134 |  206 | 86   | 10000110 | å       | &#134;       | n/a        | Latin small letter a with ring above          |
		|  135 |  207 | 87   | 10000111 | ç       | &#135;       | n/a        | Latin small letter c with cedilla             |
		|  136 |  210 | 88   | 10001000 | ê       | &#136;       | n/a        | Latin small letter e with circumflex          |
		|  137 |  211 | 89   | 10001001 | ë       | &#137;       | n/a        | Latin small letter e with diaeresis           |
		|  138 |  212 | 8A   | 10001010 | è       | &#138;       | n/a        | Latin small letter e with grave               |
		|  139 |  213 | 8B   | 10001011 | ï       | &#139;       | n/a        | Latin small letter i with diaeresis           |
		|  140 |  214 | 8C   | 10001100 | î       | &#140;       | n/a        | Latin small letter i with circumflex          |
		|  141 |  215 | 8D   | 10001101 | ì       | n/a          | n/a        | Latin small letter i with grave               |
		|  142 |  216 | 8E   | 10001110 | Ä       | &#142;       | n/a        | Latin capital letter a with diaeresiS         |
		|  143 |  217 | 8F   | 10001111 | Å       | n/a          | n/a        | Latin capital letter a with ring above        |
		|  144 |  220 | 90   | 10010000 | É       | n/a          | n/a        | Latin capital letter e with acute             |
		|  145 |  221 | 91   | 10010001 | æ       | &#145;       | n/a        | Latin small letter ae                         |
		|  146 |  222 | 92   | 10010010 | Æ       | &#146;       | n/a        | Latin capital letter ae                       |
		|  147 |  223 | 93   | 10010011 | ô       | &#147;       | n/a        | Latin small letter o with circumflex          |
		|  148 |  224 | 94   | 10010100 | ö       | &#148;       | n/a        | Latin small letter o with diaeresis           |
		|  149 |  225 | 95   | 10010101 | ò       | &#149;       | n/a        | Latin small letter o with grave               |
		|  150 |  226 | 96   | 10010110 | û       | &#150;       | n/a        | Latin small letter u with circumflex          |
		|  151 |  227 | 97   | 10010111 | ù       | &#151;       | n/a        | Latin small letter u with grave               |
		|  152 |  230 | 98   | 10011000 | ÿ       | &#152;       | n/a        | Latin small letter y with diaeresis           |
		|  153 |  231 | 99   | 10011001 | Ö       | &#153;       | n/a        | Latin capital letter o with diaeresiS         |
		|  154 |  232 | 9A   | 10011010 | Ü       | &#154;       | n/a        | Latin capital letter u with diaeresiS         |
		|  155 |  233 | 9B   | 10011011 | ¢       | &#155;       | n/a        | Cent sign                                     |
		|  156 |  234 | 9C   | 10011100 | £       | &#156;       | n/a        | Pound sign                                    |
		|  157 |  235 | 9D   | 10011101 | ¥       | n/a          | n/a        | Yen sign                                      |
		|  158 |  236 | 9E   | 10011110 | ₧       | &#158;       | n/a        | PEseta sign                                   |     
		|  159 |  237 | 9F   | 10011111 | ƒ       | &#159;       | n/a        | Latin small letter f with hook                |
		|  160 |  240 | A0   | 10100000 | á       | &#160;       | n/a        | Latin small letter a with acute               | 
		|  161 |  241 | A1   | 10100001 | í       | &#161;       | n/a        | Latin small letter i with acute               |
		|  162 |  242 | A2   | 10100010 | ó       | &#162;       | n/a        | Latin small letter o with acute               |
		|  163 |  243 | A3   | 10100011 | ú       | &#163;       | n/a        | Latin small letter u with acute               |
		|  164 |  244 | A4   | 10100100 | ñ       | &#164;       | n/a        | Latin small letter n with tilde               |
		|  165 |  245 | A5   | 10100101 | Ñ       | &#165;       | n/a        | Latin capital letter n with tilde             |
		|  166 |  246 | A6   | 10100110 | ª       | &#166;       | n/a        | Feminine ordinal indicator                    |
		|  167 |  247 | A7   | 10100111 | º       | &#167;       | n/a        | Masculine ordinal indicator                   |
		|  168 |  250 | A8   | 10101000 | ¿       | &#168;       | n/a        | Inverted question mark                        |
		|  169 |  251 | A9   | 10101001 | ⌐       | &#169;       | n/a        | Reversed not sign                             |
		|  170 |  252 | AA   | 10101010 | ¬       | &#170;       | n/a        | Not sign                                      |
		|  171 |  253 | AB   | 10101011 | ½       | &#171;       | n/a        | Vulgar fraction one half                      |
		|  172 |  254 | AC   | 10101100 | ¼       | &#172;       | n/a        | Vulgar fraction one quarter                   |
		|  173 |  255 | AD   | 10101101 | ¡       | &#173;       | n/a        | Inverted exclamation mark                     |
		|  174 |  256 | AE   | 10101110 | «       | &#174;       | n/a        | Left-pointing double angle quotation mark     |
		|  175 |  257 | AF   | 10101111 | »       | &#175;       | n/a        | Right-pointing double angle quotation mark    |
		|  176 |  260 | B0   | 10110000 | ░       | &#176;       | n/a        | Light shade                                   |
		|  177 |  261 | B1   | 10110001 | ▒       | &#177;       | n/a        | Medium shade                                  |
		|  178 |  262 | B2   | 10110010 | ▓       | &#178;       | n/a        | Dark shade                                    |
		|  179 |  263 | B3   | 10110011 | │       | &#179;       | n/a        | Box drawings light vertical                   |
		|  180 |  264 | B4   | 10110100 | ┤       | &#180;       | n/a        | Box drawings light vertical and left          |
		|  181 |  265 | B5   | 10110101 | ╡       | &#181;       | n/a        | Box drawings vertical single and left double  |
		|  182 |  266 | B6   | 10110110 | ╢       | &#182;       | n/a        | Box drawings vertical double and left single  |
		|  183 |  267 | B7   | 10110111 | ╖       | &#183;       | n/a        | Box drawings down double and left single      |
		|  184 |  270 | B8   | 10111000 | ╕       | &#184;       | n/a        | Box drawings down single and left double      |
		|  185 |  271 | B9   | 10111001 | ╣       | &#185;       | n/a        | Box drawings double vertical and left         |
		|  186 |  272 | BA   | 10111010 | ║       | &#186;       | n/a        | Box drawings double vertical                  |
		|  187 |  273 | BB   | 10111011 | ╗       | &#187;       | n/a        | Box drawings double down and left             |
		|  188 |  274 | BC   | 10111100 | ╝       | &#188;       | n/a        | Box drawings double up and left               |
		|  189 |  275 | BD   | 10111101 | ╜       | &#189;       | n/a        | Box drawings up double and left single        |
		|  190 |  276 | BE   | 10111110 | ╛       | &#190;       | n/a        | Box drawings up single and left double        |
		|  191 |  277 | BF   | 10111111 | ┐       | &#191;       | n/a        | Box drawings light down and left              |
		|  192 |  300 | C0   | 11000000 | └       | &#192;       | n/a        | Box drawings light up and right               |
		|  193 |  301 | C1   | 11000001 | ┴       | &#193;       | n/a        | Box drawings light up and horizontal          |
		|  194 |  302 | C2   | 11000010 | ┬       | &#194;       | n/a        | Box drawings light down and horizontal        |
		|  195 |  303 | C3   | 11000011 | ├       | &#195;       | n/a        | Box drawings light vertical and right         |
		|  196 |  304 | C4   | 11000100 | ─       | &#196;       | n/a        | Box drawings light horizontal                 |
		|  197 |  305 | C5   | 11000101 | ┼       | &#197;       | n/a        | Box drawings light vertical and horizontal    |
		|  198 |  306 | C6   | 11000110 | ╞       | &#198;       | n/a        | Box drawings vertical single and right double |
		|  199 |  307 | C7   | 11000111 | ╟       | &#199;       | n/a        | Box drawings vertical double and right single |
		|  200 |  310 | C8   | 11001000 | ╚       | &#200;       | n/a        | Box drawings double up and right              |
		|  201 |  311 | C9   | 11001001 | ╔       | &#201;       | n/a        | Box drawings double down and right            |
		|  202 |  312 | CA   | 11001010 | ╩       | &#202;       | n/a        | Box drawings double up and horizontal         |
		|  203 |  313 | CB   | 11001011 | ╦       | &#203;       | n/a        | Box drawings double down and horizontal       |
		|  204 |  314 | CC   | 11001100 | ╠       | &#204;       | n/a        | Box drawings double vertical and right        |
		|  205 |  315 | CD   | 11001101 | ═       | &#205;       | n/a        | Box drawings double horizontal                |
		|  206 |  316 | CE   | 11001110 | ╬       | &#206;       | n/a        | Box drawings double vertical and horizontal   |
		|  207 |  317 | CF   | 11001111 | ╧       | &#207;       | n/a        | Box drawings up single and horizontal double  |
		|  208 |  320 | D0   | 11010000 | ╨       | &#208;       | n/a        | Box drawings up double and horizontal single  |
		|  209 |  321 | D1   | 11010001 | ╤       | &#209;       | n/a        | Box drawings down single and horizontal double|
		|  210 |  322 | D2   | 11010010 | ╥       | &#210;       | n/a        | Box drawings down double and horizontal single|
		|  211 |  323 | D3   | 11010011 | ╙       | &#211;       | n/a        | Box drawings up double and right single       |
		|  212 |  324 | D4   | 11010100 | ╘       | &#212;       | n/a        | Box drawings up single and right double       |
		|  213 |  325 | D5   | 11010101 | ╒       | &#213;       | n/a        | Box drawings down single and right double     |
		|  214 |  326 | D6   | 11010110 | ╓       | &#214;       | n/a        | Box drawings down double and right single     |
		|  215 |  327 | D7   | 11010111 | ╫       | &#215;       | n/a        | Box drawings vertical and horizontal          |
		|  216 |  330 | D8   | 11011000 | ╪       | &#216;       | n/a        | Box drawings vertical and horizontal          |
		|  217 |  331 | D9   | 11011001 | ┘       | &#217;       | n/a        | Box drawings light up and left                |
		|  218 |  332 | DA   | 11011010 | ┌       | &#218;       | n/a        | Box drawings light down and right             |
		|  219 |  333 | DB   | 11011011 | █       | &#219;       | n/a        | Full block                                    |
		|  220 |  334 | DC   | 11011100 | ▄       | &#220;       | n/a        | Lower half block                              |
		|  221 |  335 | DD   | 11011101 | ▌       | &#221;       | n/a        | Left half block                               |
		|  222 |  336 | DE   | 11011110 | ▐       | &#222;       | n/a        | Right half block                              |
		|  223 |  337 | DF   | 11011111 | ▀       | &#223;       | n/a        | Upper half block                              |
		|  224 |  340 | E0   | 11100000 | α       | &#224;       | n/a        | Greek small letter alpha                      |
		|  225 |  341 | E1   | 11100001 | ß       | &#225;       | n/a        | Latin small letter sharp                      |
		|  226 |  342 | E2   | 11100010 | Γ       | &#226;       | n/a        | Greek capital letter gamma                    |
		|  227 |  343 | E3   | 11100011 | π       | &#227;       | n/a        | Greek small letter pi                         |
		|  228 |  344 | E4   | 11100100 | Σ       | &#228;       | n/a        | Greek capital letter sigma                    |
		|  229 |  345 | E5   | 11100101 | σ       | &#229;       | n/a        | Greek small letter sigma                      |
		|  230 |  346 | E6   | 11100110 | µ       | &#230;       | n/a        | Micro sign                                    |
		|  231 |  347 | E7   | 11100111 | τ       | &#231;       | n/a        | Greek small letter tau                        |
		|  232 |  350 | E8   | 11101000 | Φ       | &#232;       | n/a        | Greek capital letter phi                      |
		|  233 |  351 | E9   | 11101001 | Θ       | &#233;       | n/a        | Greek capital letter theta                    |
		|  234 |  352 | EA   | 11101010 | Ω       | &#234;       | n/a        | Greek capital letter omega                    |
		|  235 |  353 | EB   | 11101011 | δ       | &#235;       | n/a        | Greek small letter delta                      |
		|  236 |  354 | EC   | 11101100 | ∞       | &#236;       | n/a        | Infinity                                      |
		|  237 |  355 | ED   | 11101101 | φ       | &#237;       | n/a        | Greek small letter phi                        |
		|  238 |  356 | EE   | 11101110 | ε       | &#238;       | n/a        | Greek small letter epsilon                    |
		|  239 |  357 | EF   | 11101111 | ∩       | &#239;       | n/a        | Intersection                                  |
		|  240 |  360 | F0   | 11110000 | ≡       | &#240;       | n/a        | Identical to                                  |
		|  241 |  361 | F1   | 11110001 | ±       | &#241;       | n/a        | Plus-minus sign                               |
		|  242 |  362 | F2   | 11110010 | ≥       | &#242;       | n/a        | Greater-than or equal to                      |
		|  243 |  363 | F3   | 11110011 | ≤       | &#243;       | n/a        | Less-than or equal to                         |
		|  244 |  364 | F4   | 11110100 | ⌠       | &#244;       | n/a        | Top half integral                             |
		|  245 |  365 | F5   | 11110101 | ⌡       | &#245;       | n/a        | Bottom half integral                          |
		|  246 |  366 | F6   | 11110110 | ÷       | &#246;       | n/a        | Division sign                                 |
		|  247 |  367 | F7   | 11110111 | ≈       | &#247;       | n/a        | Almost equal to                               |
		|  248 |  370 | F8   | 11111000 | °       | &#248;       | n/a        | Degree sign                                   |
		|  249 |  371 | F9   | 11111001 | ∙       | &#249;       | n/a        | Bullet operator                               |
		|  250 |  372 | FA   | 11111010 | ·       | &#250;       | n/a        | Middle dot                                    |
		|  251 |  373 | FB   | 11111011 | √       | &#251;       | n/a        | Square root                                   |
		|  252 |  374 | FC   | 11111100 | ⁿ       | &#252;       | n/a        | Superscript Latin small letter n              |
		|  253 |  375 | FD   | 11111101 | ²       | &#253;       | n/a        | Superscript two                               |
		|  254 |  376 | FE   | 11111110 | ■       | &#254;       | n/a        | Black square                                  |
		|  255 |  377 | FF   | 11111111 | n/a     | &#255;       | n/a        | No-break space                                |
		-----------------------------------------------------------------------------------------------------------------------



	UNCODE: //(0x0000005f)➞
		>"Universal Coded Character Set"
		>completely ASCII compatible on systems that align to bytes (ie. all)
		Standards:
			>UTF == "Unicode Transformation Format"
			>the number represents the code unit length in bits
			>all are capable of representing all unicode chars
			utf_8:
				>variable length
				>a single char is 1-4 bytes long
				>a symbol can technically be longer than 4 bytes, if its created from multiple unicode chars (usually 2)
				¤formal notation
					U+[hex-1][hex-2][hex-3][hex-4]
				+------------------------------------------------------------------------------------+
				|                          Code point <-> UTF-8 conversion                           |
				+------------------+------------------+-----------+-----------+-----------+----------+
				| First code point | Last code point  |  Byte 1   |  Byte 2   |  Byte 3   |  Byte 4  |
				+------------------+------------------+-----------+-----------+-----------+----------+
				| U+0000           | U+007F           | 0xxxxxxx  |           |           |          |
				| U+0080           | U+07FF           | 110xxxxx  | 10xxxxxx  |           |          |
				| U+0800           | U+FFFF           | 1110xxxx  | 10xxxxxx  | 10xxxxxx  |          |
				| U+10000          | U+10FFFF         | 11110xxx  | 10xxxxxx  | 10xxxxxx  | 10xxxxxx |
				+------------------+------------------+-----------+-----------+-----------+----------+
			utf_16: pass
			utf_32: pass


#define organizing\
#define organization: //(0x00000060)➞\
I------------------------------------------------------------------\
I------------------------------------------------------------------\
I     _____                       _          _   _                 \
I    |  _  |                     (_)        | | (_)                \
I    | | | |_ __ __ _  __ _ _ __  _ ______ _| |_ _  ___  _ __      \
I    | | | | '__/ _` |/ _` | '_ \| |_  / _` | __| |/ _ \| '_ \     \
I    \ \_/ / | | (_| | (_| | | | | |/ / (_| | |_| | (_) | | | |    \
I     \___/|_|  \__, |\__,_|_| |_|_/___\__,_|\__|_|\___/|_| |_|    \
I                __/ |                                             \
I               |___/                                              \
I------------------------------------------------------------------\
I------------------------------------------------------------------I

	>this chapter contains information on how to optimize readability
      and reusability in the context of programming
	>nothing here is hard science or carved into stone
	>the most important rules of thumb to dodge spaghetti code are forward planning and self consistency
	>ĐĐspaghetti codeĐĐ is whats hard to read and maintain code is called;
      its creation is due to negligence and lack of skill
	>ĐĐravioli codeĐĐ is whats incredibly fractured code is called;
      very small functions and senseless class creation for
	  setting up a non-practical hierarchy are common symptoms
	>ĐĐlasagna codeĐĐ is what code with intertwined layers is called
    >ĐĐhairball codeĐĐ is a chunk of big, monolithic code that could go berserk anytime
    >ĐĐcode smellĐĐ is a symptom or indicator of bad code; exlusivly used by insufferable pricks

    Design_smells:
        Rigidity    : hard to change or extend
        Fragility   : footguns which cause problems in illogical places
        Immobility  : lack of reusability
        Viscosity   : filled with footguns
        Complexity  : useless abstraction or infrastructure
        Repetition  : an abstraction is missing
        Opacity     : hard to read and understand; does not express its intent well

	Uncle_Bob: //(0x00000061)➞
		>(((Robert C. Martin)))
		>author
		>public speaker
		>NOTE: this individual is highly deceptive and dangerious,
		        keep away if possible

	Formatting: //(0x00000062)➞
		Auto_formatters:
			>a program that formats code for you
			>they tend to be horribly specific to both style and language
			YYY:
				clang-format
				prettier
		>the most problematic arguments over formatting arise from many,
		  especially C style languages being whitespace agnostic
		>people used to one style of formatting have trouble reading
		  other styles; while this divide is not too large and can be bridged
		  in a reasonable amount of time, shit tends to hit the fan first
		>some methods of utilizing whitespaces is objectively more readable than others
		>ĐĐindentatinĐĐ is the act of separating codeblocks with different amounts of leading whitespace
		Width:
			>reading/editing code offscreen to the side is very painful
			>at the age of CRTs, about 80 chars could fit comfortably on the screen
			>nu-gurus suggest the current average should decide the maximum width { 150 in 2009 }
			>80 is still preferable, because its clearly enough, does not make assumptions about
			  the readers set up and allows for split, side by side views
		-there are a number of well established and defined formatting styles
			>NOTE: in this context "while" marks a generic block head { for, if, etc.}
			¤Allman
				while
				{
					[...]
					[...]
				}
			¤K&R
				while {
					[...]
					[...]
				}
			¤GNU
				while
				  {
					[...]
					[...]
				  }
				-from "GNU Coding Standards":
					"\
					   It is important to put the open-brace that starts the body of a C    \
					function in column one, so that they will start a defun.  Several tools \
					look for open-braces in column one to find the beginnings of C          \
					functions.  These tools will not work on code not formatted that way.   \
																							\
					   Avoid putting open-brace, open-parenthesis or open-bracket in column \
					one when they are inside a function, so that they won't start a defun.  \
					The open-brace that starts a 'struct' body can go in column one if you  \
					find it useful to treat that definition as a defun.                     \
																							\
					   It is also important for function definitions to start the name of   \
					the function in column one.  This helps people to search for function   \
					definitions, and may also help certain tools recognize them.            \
					"
				-from "Linux kernel coding style":
					"\
					   First off, I'd suggest printing out a copy of the GNU coding         \
					standards, and NOT read it. Burn them, it's a great symbolic gesture.   \
					"
			¤Whitesmiths
				while
					{
					[...]
					[...]
					}
			¤Horstmann
				while
				{	[...]
					[...]
				}
			¤Haskell
				while
				  { [...]	// doesnt include terminating semicolon
				  ; [...]	// neither does this one
				  ;
				  }
			¤Pico
				while
				{	[...]
					[...] }
			¤Ratliff
				while {
					[...]
					[...]
					}
			¤Lisp
				while
				  {	[...]
					[...] }
			
	
	Naming: //(0x00000063)➞
		>names are important, in fact, developers then to get autistic regarding them
		>the longer the variables life time and greater the scope,
		  the more descriptive the name should get { global hexagon_grid_sprite; for i in myList }
		>try not to use names that are confusable with conventions
		>make bool vars a question, prefer "is" over "are" { is_banned }
		>prefer humanly pronounciable names
		>use one word per abstraction
		>please stop using .length() and .count(); .size() is much easier to type,
		  but regardless, PLEASE PLEASE AT LEAST STOP MIXING THEM BY CONTAINER
		Cases: //(0x00000064)➞
			kebab-case:
				>if [...] is going to have multiple words in its name, separate the words with '-'s
				>many languages doesnt support it
				>even when its supported, the '-' might get interpreted as a minus sign leading to an unwanted subtraction and a hard to find bug
				{ this-is-a-kebab-case-example }
				-when all letters are capitalized also, its called "screaming kebab case"
					{ THIS-IS-A-SCREAMING-KEBAB-CASE-EXAMPLE }
			snake_case:
				>if [...] is going to have multiple words in its name, separate the words with '_'s
				{ this_is_a_snake_case_example }
				-when all letters are capitalized also, its called "screaming snake case"
					{ THIS_IS_A_SCREAMING_SNAKE_CASE_EXAMPLE }
			camelCase:
				>if [...] is going to have multiple words in its name, make every word start with a capital except the first one
				{ thisIsACamelCaseExample }
			PascalCase:
				>if [...] is going to have multiple words in its name, make every word start with a capital
				{ ThisIsAPascalCaseExample }
			Ugly_Case:
				>make every word start with a capital
				>if [...] is going to have multiple words in its name, separate the words with '_'s
				{ This_Is_Ugly_Case_Example }
		Getter_setter: //(0x00000065)➞
			Common:
				function get<member>()
				function set<member>()
				>NOTE: with mixing in any Case known to man
			Qt:
				function <member>()
				function set<member>()
				>functions named directly after members are considered getters
				>the "get" is omitted as redundancy
		Hungarian_notation: //(0x00000066)➞
			>standard for {variable} naming
			>applies mainly to static-ally typed languages and especially to C like languages
			-the main counter argument against it:
				"The compiler/interpreter already knows the type,\
                  specifying it without guarantees is redundant and meaningless."
				the counter is:
				"While the compiler/interpreter may know the type, i do not necessarily.\
                  The name also specifies what the type is meant to be,\
                  therefor a miss-match signals a bug."
                the counter-counter is:
                "pronounYou verbShould adverbNever verbUse adjectiveHungarian nounNotation,\
                  prepositionIt verbMakes collectivenounEverything adverbSo\
                  comparativeBloody adjectiveHard infinitiveTo verbRead."
			>widely considered bad practice; taken to its extreme, i do agree,
			  but applying it with care (MACRO_NAMING, global type prefixing) can be neat
			Variables:
				[prefix]([qualifier])[identifier]		: Hungarian notation variable name
				¤[prefix]
					>a bunch of ĐtypeĐ-s pasted together
					>pasting is done in the order as they apply
					¤[type]
						+-----------+------------------------------------------------------------+---------------------+
						|   type    |                          Meaning                           |       Example       |
						+-----------+------------------------------------------------------------+---------------------+
						| p         | Pointer                                                    | Finger* pfinRude    |
						| s || str  | String                                                     | String sName        |
						| sz || psz | Null terminated string                                     | char* szName        |
						| h         | Handle                                                     | HWND hWindow        |
						| c         | Char                                                       | char cLetter        |
						| y         | Byte or Unsigned Char                                      | byte byMouthFull    |
						| n         | Integer                                                    | int nSizeOfArray    |
						| f         | Float                                                      | float fRootBeer     |
						| d         | Double                                                     | double dDecker      |
						| b         | Bool                                                       | boolean bIsTrue     |
						| u         | Unsigned...                                                |                     |
						| w         | Word or Unsigned Integer                                   | unsigned int wValue |
						| l         | Long                                                       | long lIdentifier    |
						| dw        | Double Word or Unsigned Long Integer                       |                     |
						| C         | class                                                      | Class CObject       |
						| I         | Interface (class with only virtual methods and no members) |                     |
						| X         | Nested class                                               |                     |
						| x         | Instantiation of a nested class                            |                     |
						| m_        | Class Member Identifiers                                   |                     |
						| g_        | Global                                                     | String* g_psBuffer  |
						| v         | Void (no type)                                             |                     |
						+-----------+------------------------------------------------------------+---------------------+
						Nonstandard_types:
							>ĐtypeĐ shall always be lower case
							>shall not conflict with other ĐtypeĐs
							>the first few letters of ĐtypeĐs full name is recommended
				¤[qualifier]
					>describes the job of the variable
					+-----------+----------------------------------------------------------------------+
					| Qualifier |                             Explanation                              |
					+-----------+----------------------------------------------------------------------+
					| Sav       | A temporary from which the value will be restored                    |
					| Prev      | A value that follows one behind a current value                      |
					|           |     in an iteration (eg. linked list node pointer)                   |
					| Cur       | Current value in some iteration                                      |
					| Next      | Next value in some iteration                                         |
					| Nil       | A special illegal value that is distinguished from all legal values. |
					|           |     Typically denotes a certain absence of a legal value.            |
					| Min       | Smallest legal index in an array or list. Typically zero.            |
					| Max       | A strict upper limit for legal indexes in an array or list.          |
					+-----------+----------------------------------------------------------------------+
				¤[identifier]
					>what the variable would normally be called
					>adjectives succeeds the word it describes
					>Pascal case
			Functions:
				>camel or Pascal case
			Macros:
				>SCREAMING_SNAKE case


	Structuring: //(0x00000067)➞
		>a one-size-fits-all technique for struct-ing is a pipe dream
		>both too many things in a single folder and too many folders will become a hellscape to maneuver
		Flat_structure: //(0x00000068)➞
			>when all files of a project are contained in the same root directory
			>only use with projects consisting of only a few files
		Modularized_structure: //(0x00000069)➞
			>there are directories located in the root, which contain source files ordered by theme/purpose
			>used when projects are too large to use Đflat structureĐ, but still very small
			>by having every resource to work on a single, specific page, access becomes trivial, with no overhead
			>best optimized for per-feature splitting of work
			{	rest-api/
				 ├── main.go
				 ├── user/
				 │    ├── user.go
				 │    ├── login.go
				 │    └── registration.go
				 ├── articles/
				 │    └── articles.go
				 └── utils/
					  └── common_utils.go
			}
			-commonly used for medium sized webdev projects; when there are not many pages,
			  however each is complex and share relatively few resources
			  	>module-s most often that correspond to the page they make up
				{
					Poker/
					 ├── Prephase/
					 │   ├── prephase.php
					 │   ├── prephase.css
					 │   ├── startgame.js
					 │   └── addUser.js
					 ├── Login/
					 │   ├── login.php
					 │   ├── signin.php
					 │   ├── logn.css
					 │   └── validate.js
					 ├── Game/
					 │   ├── game.php
					 │   ├── game.css
					 │   ├── call.js
					 │   ├── fold.js
					 │   ├── raise.js
					 │   └── check.js
					 ├── global.css
					 └── global.js
				}
		Kenneth_Reitz_structure: //(0x0000006a)➞
			>as it was created for python it best applies for languages
			  where all source files are equals {python, bash; NOT C++, HTML}
			-Directory:
				>"Repetitive paths are confusing for both your tools and your developers.\
				  Unnecessary nesting doesn't help anybody (unless they’re nostalgic for monolithic SVN repos)."
				[Name]/
				 ├── docs/			: directory containing all references and documentations
				 ├── tests/			: directory hosting debug tests and dummy examples;
				 │					   preferably make tests files independent of ĐSETUPĐ (ie, use relative paths)
				 ├── MAIN(/)		: directory for all of your code, or if it fits in a single file, that, located directly in [Name]
				 ├── Makefile		: GNU make file for automating generic tasks
				 ├── LICENSE		: plain text document that shall contain the fill license text and copyright claims
				 ├── SETUP			: executable or plain text instructions to ease setting up your project on any machine
				 └── REQUIREMENTS	: plain text list of requirements, preferably language standard compatible {python => pip}
        OGS:
            >the only known reference to it is inside the legacy source code of cscope
            >NOTE: may or may not be related to the Quike II engine
            >folders ending with .ss are considered ĐĐsubsystemsĐĐ
            >folders inside subsystems are considered ĐĐbooksĐĐ
		Core_java: //(0x0000006b)➞
			[Name]/
			 ├── docs       : documentation
			 ├── bin        : the compiler and other tools
			 ├── demo       : demonstrations
			 ├── include    : include files
			 ├── lib        : library files
			 ├── src        : source files
			 └── jre        : Java runtime environment files
		Canonical_Project_Structure: //(0x0000006c)➞
			>"The canonical structure is primarily meant for a package – a single library or program\
			   (or, sometimes, a collection of related programs) with a specific and well-defined function. "
			>if a project consists of a library and an executable, then they should be split into separate projects
			-Directory:
				[Name]/
				 ├── [Name]/		: contains all source files, not further separated into subfolders
				 └── tests/			: contains all debug tests and dummy examples, optionally further separated into subfolders
				{ // ---
                    libhello/
					 ├── libhello/
					 │    ├── hello.hpp
					 │    ├── hello.cpp
					 │    └── hello.test.cpp
					 └── tests/
						  └── basics/
							   └── driver.cpp
				}
		By_file_type: //(0x0000006d)➞
			>source only
			>used for small, but not trivially small webdev projects
			-file types are sorted into subdirectories based on purpose (not strict mime)
				{	[...]/
					 ├── js/
					 │   ├── myAnimation.js
					 │   └── validate.js
					 ├── css/
					 │   └── global.css
					 ├── img/
					 │   ├── background.png
					 │   └── cat.gif
					 └── pages/
						 ├── home.html
						 └── article.php
				}
			-if there is a clear core file type in the spotlight, then it should not be nested, rather silently placed next to the folders
				{ // the core of a website is the idea of displayable pages,
				  //  therefor its the focus which can be elevated
					[...]/
					 ├── js/
					 │   ├── myAnimation.js
					 │   └── validate.js
					 ├── css/
					 │   └── global.css
					 ├── img/
					 │   ├── background.png
					 │   └── cat.gif
					 ├── home.html
					 └── article.php
				}
				>this avoids all kinds of overhead {typing}
			>if you feel the need to subdivide folders {js/homepage/}: stop; navigation will soon become very painful
		Feature_Sliced_Design: //(0x0000006e)➞
			YYY:
				https://feature-sliced.design
			>or FSD
			>used for large front-end projects
			-the top components of an FSD project are called layers
				>there are 7 layers, named the same across all projects
				+--------------+
				| 1. shared    |
				+--------------+
				| 2. entities  |
				+--------------+
				| 3. features  |
				+--------------+
				| 4. widgets   |
				+--------------+
				| 5. pages     |
				+--------------+
				| 6. processes |
				+--------------+
				| 7. app       |
				+--------------+
			>NOTE: look it up, its a good example of insanity / complexity hell

    ?!:
        "Aside: Make a util directory and keep different utilities in different files.\
         A single util file will always grow until it is too big and yet too hard to split apart.\
         Using a single util file is unhygienic."
                                                    - YYY: https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to


    Code_discovery: //(0x0000006f)➞
        >the process of getting to know undocumented code
        Indexing:
            ctags [option]+ <file>+     : classical source indexing program
                >creates CSV like "tags" files
                >fast
                >supports many languages
                >only indexes declarations
Purple(     cscope <options>+ <files>+  : classical C/C++ indexer and browser )
            csope <options>+ <files>+   : maintained fork of cscope
                >improved TUi
                >improved code quality
                >rolled by (Me)
            scourcetrail    : visual source code browser
                >node based
                >slow as fuck
                >due to the way nodes are displayed, not too useful in production
        Code_query_languages:
            YYY:
                Keynote Address: .QL for Source Code Analysis
                srcQL: A Syntax-Aware Query Language for Source Code
            >poorly researched topic
            ¤what people has come up with
            {@begin=sql@
                from RefType c1, RefType c2,
                    RefType node, RefType adviceDecl
                where
                    node.hasQualifiedName (" polyglot . ast","Node") and
                    adviceDecl . hasQualifiedName
                    ("abc. aspectj . ast","AdviceDecl c") and
                    between(adviceDecl,c1,node) and
                    between(adviceDecl,c2,node) and
                    c2.hasSupertype(c1)
                select c1,c2
            @end=sql@}
            {@begin=sql@
                $U = $I + $T;
                FIND src:function WITHIN src:class;
            @end=sql@}
        Visualization:
            >NOTE: be happy if you can get colored code;
                    we are forever stuck in the never ending endtimes of the 80s
            YYY:
                https://www.youtube.com/watch?v=C8--cXwuuFQ
            Dom_inspector:
                pass
            Topology_graph:
                >network
                >object
                >database
            Flame_chart:
                >the type of chart that is used for execution stack visualization
                >the 'x' axis means time
                { // 🔥🔥🔥it looks like a fire 🔥🔥🔥
                                                                  [#]
                                                               [#][#]    [##]
                                          [#][#]               [task]  [action]
                    [### init ###] [### opts ###]  [#] [##] [##### thing #####] [quit]
                    [############################### main ###########################]
                }
            gource <options> <path>     : git history visualization tool;
                                           displays the source as a graph
                                           and continously constructs it
                                           according to the commits
                -o <file>   : save as video



#define documentation: //(0x00000070)➞ \
I-------------------------------------------------------------------------\
I ______                                      _        _   _              \
I |  _  \                                    | |      | | (_)             \
I | | | |___   ___ _   _ _ __ ___   ___ _ __ | |_ __ _| |_ _  ___  _ __   \
I | | | / _ \ / __| | | | '_ ` _ \ / _ \ '_ \| __/ _` | __| |/ _ \| '_ \  \
I | |/ / (_) | (__| |_| | | | | | |  __/ | | | || (_| | |_| | (_) | | | | \
I |___/ \___/ \___|\__,_|_| |_| |_|\___|_| |_|\__\__,_|\__|_|\___/|_| |_| \
I-------------------------------------------------------------------------I

	¤types //₩
		>most projects either only write one type and call it a day
		  or worse, mix them into a borderline useless gray glob
		developer - explains how to implement
		guide     - explains how to read/navigate
		teaching  - explains how to use
		reference - lists dry facts for quick look ups of details



    Specifications: //(0x00000071)➞
        Script:
            >NOTE: not related to executable scripts
            >branching flow chart of usage
            >meant to simulate the end product in action
        PRD:
            >"Product Requirements Documentation"
            -attempt to answer the following questions regarding the software:
                >what will the software be used for?
                >what is currently in place?
                >how would the ideal usage look like?
                >what features are necessary?
                >what are the related legal requirements/restrictions?
                >what alien concepts will the programmers have to get familiar with?
        Functional_specification:
            >a ĐPRDĐ which defines an interface {commandline args; gui map} for each function
            >often there is a separate PRD and a functional specification building on it
            >includes schematics for all required databases
            >often has Đscreen designĐs attached
        System_specification:
            >analyses feasibility
            >analyses risk
            >mentions concrete technologies and work methods to be used
            >a system specification which ignores physical constraints {bandwidth; processing power} is called a ĐĐlogical system specificationĐĐ
            >a system specification explicit-ly distanced from a Đlogical system specificationĐ is referred to as a ĐĐphysical system specificationĐĐ
            >commonly contains figures {UML}
        Decision_table:
            YYY:
                https://www.hillelwayne.com/post/decision-table-patterns/
            >"Parnas table"
            >maps enum inputs to a finite set of arbitrary outputs
            >rows should be ordered by the left most column values
            >its ĐĐcompleteĐĐ if every input combination is added as a row
            >a catch all value can be represented with '-' or '_' as long as it doesnt introduce row precedence
            >'/' can be used to signal a nonsensical value (state)
            { //
                --------------------------
                |  In1  |  In2  ||  Out  |
                --------------------------
                | false | false || false |
                | false | true  || true  |
                | true  | false || true  |
                | true  | true  || false |
                --------------------------
            }



	Inline: //(0x00000072)➞
		>in most cases it means "fancy comments with special importance"
		Traditional:
			>typically seen in legacy C and similarly old code
			/* NOTREACHED */	: placed after non-returning calls inside blocks
			/* NOTE ... */		: leaves an explicitly important comment on a piece code
			/* TODO ... */		: signals that something regarding a specific piece of should be done
			/* XXX  ... */		: signals that something regarding a specific piece of should be done
            /* CONSTCOND */     : really verbose while(true)
		C#:
			>Microsoft's invention/convention
			>documentation is embedded into the code via comments using XML (see "/XML")
			>some editors (Visual Studio) parse them to provide live tool-tips
			>valid after 3 '/'s
			Tags:
				Main:
					>field to store meaningful information
					{@begin=html@
					<summary>
					<remarks>
					<param name="<parameter_name>">
					<returns>
					<example>
					@end=html@}
				Cosmetic:
					>used for structuring/highlighting/etc. main tags
					{@begin=html@
					<paramref name="<parameter_name>">
					<para>					: <p>
					<code>
					<returns>
					@end=html@}
			{
				/// <summary>
				/// Adds two numbers together.
				/// </summary>
				/// <param name="a">The first number.</param>
				/// <param name="b">The second number.</param>
				/// <returns>The sum of the two numbers.</returns>
				public int Add(int a, int b){
					return a + b;
				}
			}
		Doxygen:
			>used by the Doxygen documentation generation tool
			>for mainstream imperative languages
			Tags:
				@brief
				@param
				@return
				@see
				@warning
				@note



    UML: //(0x00000073)➞
        YYY:
            https://plantuml.com/class-diagram#4b62dd14f1d33739
        >"Unified Modelling Language"
        >markup language describing objects and relations
        Programs:
            plantuml [options] [file]	: used for creating images from uml code
        Extensions:
            .uml
            .puml
        Comments:
            >retarded C/C++
            ' single line comment
            /' multiline comment '/
        Body:
            @startuml
                <...>
            @enduml
        Containers:
            <typename> <name> { [object]* }
            typename:
                package
                folder
                cloud
                database
                node
                frame
                rectangle
        Objects:
            <typename> <name> { [body] }
            typename:
                object
                class
                struct
                interface
                abstract
                // --
                entity
                enum
                metaclass
                protocol
                stereotype
                // ---
                annotation
                exception
                // ---
                circle
                diamond
            body:
                member:
                    [access]<string>
                    >types are usually represented as pleudo-code syntax in <string>
                    >NOTE: if <string> has a '(' it will be considered a member function,
                            which affects rendering
                            { separation from fields; different access symbols }
                    access:
                        +   public
                        -   private
                        #   protected
                        ~   module private
                separator:
                    <line>
                    <line> string <line>
                    line:
                        --
                        ==
                        ..
                        __
        Relations:
            <object-1> <relation-type> <object-2> (: ([-])<comment-string>)
            relations-type:
                [arrow-head]<line>[arrow-head]
                line:
                    --  : continous
                    ..  : dotted
                arrow-head:
                    >   : simple
                    |>  : extension
                    *   : composition
                    o   : aggregation
                    }   : to many
                    #
                    x
                    +
                    >NOTE: the '>' and "|>" heads must face the "correct" way
            >NOTE: if the objects are not declared, they will default to empty class-es
        Notes:
            note <left|right|top|bottom> of <object> : <string>
            >adds an arbitrary comment to an object
            >NOTE: '\n' can be used inside <string> to break into a new line
        Markup:
            <b>
            <u>
            <i>
            <s>
            <del>
            <strike>
            <font color="#AAAAAA">
            <font color="colorName">
            <color:#AAAAAA>
            <color:colorName>
            <size:int> to change font size
            <img src="file">
            <img:file>
        Skins:
            skin <name>
            >controls the style of the elements
        Dot:
            @startdot
                <dot>
            @enddot
            >(graphviz) dot notation can be embeded



    Conventional_commits: //(0x00000074)➞
        >recommended way of writting commit messages
        >very pleasent to read
        >could allow for automation
        {
            <typename>[(scope)][!]: <description>
            [body]
        }
        {
            feat(cli)!: remade from scratch
            you must understand, i was very bored
        }
        typename:
            feat     -  new feature
            refactor -  code change that does (should) not affect behaviour
            fix      -  bug fix
            docs     -  hand written documentation
            test     -  new or modified tests
            perf     -  performace increase
            chore    -  meta task {build system; project struct}
            // BELOW are typenames widely recognized that i would not recommend
            ci       -  continous integration task
            build    -  build system task
            style    -  coding style fix
        scope:
            >signals what part(s) of the code are affected
        !:
            >signals a breaking change
        -can be used for auto versioning
            fix  - PATCH
            feat - MINOR
            !    - MAJOR

    Md2man:
        XXX:
            markdown
            man
        >markdown is significantly nicer to write and read as plain text than roff,
          but we live in the dark ages so the man system cannot automatically render md
        go-md2man       : most trusty implementation
        kramdown-man    : slightly sloppy implementation;
                           supports auto launching man on non-saved outputs
        ts-md2man       : tree-sitter based, unstable implementation

    w2m:
        >"word to man"
        >attempts to convert microsoft word documents to markdown

#define man:: //(0x00000075)➞ \
 __  __            \
|  \/  |__ _ _ _   \
| |\/| / _` | ' \  \
|_|  |_\__,_|_||_| I

    >"manual"
    >an ecosystem of documentation, tools and conventions

	Files:
		/usr/share/man	: man file location

    Pages:
        >manuals are organized into so called pages
        >each page represents a general category
        >used for mitigating name collisions in a generalized way
		1 - Executable programs or shell commands
		2 - System calls (functions provided by the kernel)
		3 - Library calls (functions within program libraries)
		4 - Special files (usually found in /dev)
		5 - File formats and conventions, e.g. /etc/passwd
		6 - Games
		7 - Miscellaneous {macro packages; conventions}
		8 - System administration commands (usually only for root)
		9 - Kernel routines [Non standard]
		<...> - not standard;
                the author couldn't organize it better and said "fuck it";
                your best guess is its name
        n - like ABOVE, but the author didnt even try

    Programs:
        whatis [program]			: display one-line manual page descriptions;
                                       NOTE: totally fucking useless in practice

        man [page] <name>			: outputs manual (ie. man page) for <name>
            Links:
                <name>(<int>)
                >points to another man page
                >man pages have them scattered all around as tips for further reading
                >conventionally there is a large "See Also" dump at the end
                { // Following a normal link
                    // Link
                        "capabilities(7)"
                    // Command to follow it
                        $ man 7 capabilities
                  // Following an out of the ordinary, but perfectly valid link
                    // Link
                        "stat(3type)"
                    // Command to follow it
                        $ man 3type stat
                }

        mandb						: creates or updates man page index caches

#define markdown:: //(0x00000076)➞ \
 __  __          _      _                  \
|  \/  |__ _ _ _| |____| |_____ __ ___ _   \
| |\/| / _` | '_| / / _` / _ \ V  V / ' \  \
|_|  |_\__,_|_| |_\_\__,_\___/\_/\_/|_||_| I
	>markup language which is aimed to be legable both in plaintext an rendered
	>by processing and converting can represend almost whatever kind of document
	>graphical git repository servers often display a repositories "README.md" by default;
	  has become an industry standard

	Features:
		>chars with special meaning can be escaped (with a '\\' char)
		# [Heading name] ([ID])			: creates the largest possible heading
		## [Heading name] ([ID]) 		: creates a smaller heading			  
		### [Heading name] ([ID]) 		: creates a smaller heading			  
		#### [Heading name] ([ID]) 		: creates a smaller heading			  
		##### [Heading name] ([ID]) 	: creates a smaller heading			  
		###### [Heading name] ([ID])	: creates a smallest possible heading 
		{#[name]}						: creates ID with [name]
		*<string>* || _<string>_		: makes <string> italic				  
		**<string>** || __<string>__	: makes <string> bold				  
		***<string>*** || ___<string>___: makes <string> bold and italic	  
		~~<string>~~					: makes <string> strikethrough
.		--- || ___ || ***				: horizontal line
		> <string>						: creates block qoute; can be nested  
		Links:
			[<string>](#[ID])								: creates link to header with [ID]
			[<string>]([link])								: creates link to [link] with <string> as its visible text
			[<string>][[label]] [...] [[label]]: <[link]>	: creates link to [link] with <string> as its visible text; defined at [label]
			![<string>]([path])								: soft links to media at [path]
		Lists:
			>can be nested
			Ordered:
				>the processed numbers will always be in acendig order
				>must start with one; the numbers following it DOESNT effect the order
				1. [first element]
				[num]. [second element]
				[...]
				[num]. [n-th element]
			Unordered:
				>prefix the line with any of the following chars and a space:
					*
					+
					-
				>mixing is allowed
			Definition:
				[term]
				: [definition]
			Tasks:
				- [[X|' ']] <string>		: creates tast; X marks its comleated ' ' marks its not compleated
		Tables:
			>use 3 '-'-s or more to create a column header
			>use '|'-s to separate column
			>align to left, right or center by adding a ':' to the left, right or on both sides of the '-'-s of the header row
			{
				| color | symbolism |
				| :---: | :---:		|
				| blue  | water		|
				| red	| blood		|
			}
		Footnotes:
			[...][^[identifier]] [...] [^[identifier]]: [...]
				>clickable
				>identifiers can contain numbers and letters, but not white spaces

    Notes:
        [//]: # (This may be the most platform independent comment hack)
                                                                                                        /**/]

	Extensions:
		pass

#define testing: //(0x00000077)➞\
I-------------------------------------\
I   _____         _   _               \
I  |_   _|       | | (_)              \
I    | | ___  ___| |_ _ _ __   __ _   \
I    | |/ _ \/ __| __| | '_ \ / _` |  \
I    | |  __/\__ \ |_| | | | | (_| |  \
I    \_/\___||___/\__|_|_| |_|\__, |  \
I                              __/ |  \
I                             |___/   \
I-------------------------------------I
	>the act of searching for bugs
	>the absence of evidence is not the evidence of absence
	>there are known knowns, there are known unknowns, but there are also unknown unknowns:
      things that we dont know that we dont know
	>untested non-trivial software WILL have bugs
	>a test regarding individual components {branches; functions; objects; module-s} is called a ĐĐcomponent testĐĐ
	>a Đcomponent testĐ regarding a method is called a ĐĐunit testĐĐ (see BELOW)
	>a test performed on the whole software is called a ĐĐsystem testĐĐ
	>a test regarding the relation between 2 or more components or systems is called a ĐĐintegration testĐĐ
	>an ĐĐalpha testĐĐ is a test performed by internal people {managers; stake holders}, but not the developers
	>a ĐĐbeta testĐĐ is a test performed by a small subset of the end users
	>a ĐĐdeployment testĐĐ is a test performed by the end users out side of production
	>a ĐĐfaultĐĐ is a static defect in the code
	>an ĐĐerrorĐĐ is a in incorrect internal state caused by a ĐfaultĐ
	>a ĐĐfailureĐĐ is an incorrect, observed behaviour with regards to the expected behavior
	>ĐĐFIRSTĐĐ - "First, Independent, Repeatable, Self-validating, Timely"
      (catch-phrase to be applied to tests)
	Black_box:
		>specification based
		>emulates real world usage
		>usually performed by a second party
	White_box:
		>"structured testing"
		>source code based
	Gray_box:
		>transition between white and blackbox testing
		>the source code is partially known


    Tests_as_code: //(0x00000078)➞
        >each test shares a common interface, this is usually defined
          by the tool, library or even framework the project uses
        -common interface paradigms:
            >each test is a method inside a class inheriting from a special ancestor
            >each test is a function withing a special file
            >each test has a special annotation
            >each test must throw on error
            >each test must return 0 to signal success (C convention)
            >each test must return 1 to signal success (Ada bool function convention)
        >a common problem is that OOP basically prohibits component testing:
          since class-es encapsulate, nothing should be able to access its private internals;
          not even tests; this is usually resolved with various hacks and workarounds
        Unit_test:
            >the most loved kid of the test-type family
            >quite often people only write unit tests because thats the only thing
              they can remember from their worthless education
            >NOTE: there are various unit testing frameworks; each is language specific,
                    because we live in a dark age where no one has heard about code generation
.           ### Unit test example in Javascript ###
                >javasript, because thats the most unsafe language i can think of
                >NOTE: unit tests are technically defined as tests around methods,
                        because they originate from the radically OOP lands of java;
                        if anyone asks, mention the ambient class and call it a day
                {
                    // Function to be tested
                    function add(a, b) { return a + b; }

                    // Test basic assumptions regarding the result
                    function add_test1() {
                        let i = add(1, 1);
                        return typeof i === 'number';
                    }
                    function add_test2() {
                        let a = 1;
                        let b = 1;
                        let i = add(a, b);
                        /* pretend the tested function is more complicated,
                         *  so that such mathematical condition would make
                         *  practical sense
                         */
                        return (i > a && i > b);
                    }
                    // Throw shit at the fan using known outputs
                    /* NOTE: on a conceptual level, this is also how
                     *        (most forms of) AIs are validated
                     */
                    function add_test3() {
                        return (add(     1,  1) == 2
                            &&  add(     3,  2) == 5
                            &&  add(100000,  1) == 100001
                            &&  add(    -1, -1) == -2
                            &&  add(    -1,  1) == 0
                        );
                    }
                    // Call to all tests so you may insert this to a browser console
                    console.log(add_test1());
                    console.log(add_test2());
                    console.log(add_test3());
                }
            #
            { // Horrid unit tests:
              // the following example is "Martin R.
              // 'Agile Software Development, Principles, Patterns and Practices'
              // Listing 4-2"
                public void testPayroll()
                {
                  MockEmployeeDatabase db = new MockEmployeeDatabase();
                  MockCheckWriter w = new MockCheckWriter();
                  Payroll p = new Payroll(db, w);
                  p.payEmployees();
                  assert(w.checksWereWrittenCorrectly());
                  assert(db.paymentsWerePostedCorrectly());
                }
              // Not if sure you catched it: but that tests jackshit.
              // Any compiler will catch if a -mind you trivial-
              //  object cannot be initialized or its functions have
              //  invalid returns.
              // I would like to stress that theres no immediate context missing,
              //  this is painfully obvious when you consider that
              //  we are using a mock implementation.
              // The larger context however is TDD.
              // This sentiment that whe would have not been able to come up
              //  with this genious interface if not for creating this test.
            }


	TDD: //(0x00000079)➞
		>"Test Driven Development"
		>tests are written before the code which shall pass them
		>makes sense on a basic level, but then manages to become radical crazy-speak
        >unless you are a drooling retard, it cripples development speed
		¤laws
			1. You may not write production code until you have written a
			    failing unit test.
				Also refered to as "red-green-red", due to the iterative process of:
					I.   Writting a failing test
					II.  Making the test pass
					III. goto I
			2. You may not write a unit test with more code than what sufficient for it to fail,
			    and not compiling is considered failing.
			3. You may not write more production code than what is sufficient to
			    pass the currently failing test.


	Prototype: //(0x0000007a)➞
		Throw_away:
			>single purpose
			>will not be reused
			>code can be extremely low quality {slow; unreadable; hard to expand; unsecure},
			  because it will not influence the end result
			>cheap to make
			>used for demonstration and proof of concept purposes
			>a throw away prototype of how the end product will look like is called a ĐĐscreen designsĐĐ
			>there are so called ĐĐmockupĐĐ and ĐĐwireframeĐĐ tools allowing for
              very quick creation of semi-functional GUIs (clickable and navigable,
              but there's no backend providing meaningful functionalities)
		Evolutionary:
			>will be reused
			>code must comply with the end quality
			>trashing is expensive
			>not uncommon that overcommitment to it, holds development back


	Risks_mitigation: //(0x0000007b)➞
		>the seriousness of risk is the product of its ĐaspectsĐ
		¤ĐĐaspectĐĐs of risk
			>probability
			>potential damage
		¤steps
			>identification
			>eval
			>reduction
			>communication
		-TOE:
			>"Target of Evaluation"
			>the software
		-PP:
			>"Protection Profile"
            >special type of documentation
			>paper specifying privilege groups
		-ST:
			>"Security Target"
			>list of security requirements
			>ĐPPĐs included
		-SFR:
			>"Security Functional Requirements"
            >special type of documentation
		-SAR
			>"Security Assurence Requirements"
            >special type of documentation
		¤guides
			-COBIT:
				>"Control Objectives for Information and related Technologies"
				>created by ISACA
                >NOTE: nobody knows what it actually does, but it sure as hell is
                        important to mention in classes (for whatever reason)
			-ITB: pass
			-IBK:
				>"Informatikai Biztonsági Koncepció"^HU
			-CCITSE
				>"Common Criteria for Information Technology Security Evaluation"
				-EAL
					>"Evaluation Assurance Level"
					>num val to grade the ĐSTĐ
					>higher grades include the ones smaller than itself
					1. Functionally tested
					2. Structurally tested
					3. Methodically tested
					4. Methodically designed and revisited
					5. Semi-formally designed and tested
					6. Semi-formally revisited
					7. Formally verified


	Test_design:
		1. Do math or analysis to obtain test requirements
		2. Find input values that satisfy the test requirements
		3. Automate the tests
		4. Run the tests
		5. Evaluate the tests


----------------
    cmdtest: //(0x0000007c)➞
----------------
    >"cli unit testing utility"
    >written in, and uses ruby
    >NOTE: pretty satisfactory
    >NOTE: since you are given a whole-ass language, you could pass in hacky stuff through ENV

    YYY:
        https://holmberg556.bitbucket.io/cmdtest/doc/cmdtest.html

    cmdtest [options] [testfile]

    Files:
        Defaults_search_paths:
            >similar to Make's Makefile
            >in order
            1. t/CMDTEST_*.rb
            2. test/CMDTEST_*.rb
            3. CMDTEST_*.rb
        
    Tests:
        >a test file is a ruby script
        >all test files inherit from Cmdtest::Testcase 
        >testing is defined as methods
        >the environment is not modified
        >each test executes in its own, sterile directory
        Methods:
            setup       : called before each test; can set up the environment for tests
            teardown    : called after each test; can free resources; NOTE: temp files are deleted by default
            test_*      : test to run
        Functions:
            >these functions are provided by Cmdtest to ease testing
            cmd "<command>" <function>
            skip_test
            environment:
                import_file(src, desc)
                import_directory(src, dest)
            assertive:
                exit_zero
                exit_nonzero
                exit_status
                created_files
                changed_files
                removed_files
                written_files
                affected_files
                file_equal
                file_encoding
                stdout_equal
                stderr_equal

    { // test/CMDTEST_myproject.rb
        class CMDTEST_example < Cmdtest::Testcase
          def test_1
            cmd "program.out" do
              exit_status 17
            end
          end
        end
    }

---------------
    postman: //(0x0000007d)➞
---------------
    >industry standard REST API testing tool
    >CURL, but with buttons
    >NOTE: perfect example of over-engineering
    >NOTE: i wish it was good; for the time being httpie seems ones best bet

---------------
    Cypress: //(0x0000007e)➞
---------------
    >browser testing framework in node.js
    >NOTE: comperable to selenium

    Programs:
        cypress <verb>
            open    : run gui

    Files:
        cypress/    : root directory of a cypress project;
         │             usually sits integrated inside another project
		 └── e2e/       : "end-to-end"; legacy name; user test container
			  └── *.cy.js     : user test

    Test_files:
        object cy:
            visit(<url>)
            ElementList get(<selector>)
            request(<string-method>, <string-path>, <object-body>)
            contains(<string>)
        class Element
            type(<string>)
        class ElementList
            eq(<int>)   : returns the <int>th element

#define debugging // ?!

// move this under the Testing chapter perhaps?
// or if this is its own chapter why isnt benchmarking?
// "code grooming" chapter?

DWARF:
    >embedded debugging metadata format
    >used in most languages which compile to machine code
    >parsed by debuggers
    >describes how the source code corresponds to the machine code
      {source files; function barriers; individual lines}
    Sections:
        .debug_abbrev     : abbreviations used in the .debug_info section
        .debug_aranges    : a mapping between memory address and compilation
        .debug_frame      : call Frame Information
        .debug_info       : the core DWARF data containing DWARF Information Entries (DIEs)
        .debug_line       : line Number Program
        .debug_loc        : location descriptions
        .debug_macinfo    : macro descriptions
        .debug_pubnames   : a lookup table for global objects and functions
        .debug_pubtypes   : a lookup table for global types
        .debug_ranges     : address ranges referenced by DIEs
        .debug_str        : string table used by .debug_info
        .debug_types      : type descriptions

-------------
    gprof: //(0x0000007f)➞
-------------
	>execution profiling tool
	>requires the "-pg" gcc flag
	>executables compiled with "-pg" will generate a gmon.out during their execution
	¤for
		C
		Pascal
		Fortran

	gprof <options> <executable>
		-a		: silence private (static in C)
		-b		: do not add verbose legend comments

	Programs:
		gprof2dot	: python helper program to convert gprof call graph format to graphviz format
					   { gprof2dot gprof.txt > mygraph; dot -Tpng -o callgraph.png mygraph }

------------
    perf: //(0x00000080)➞
------------
    >"PERFormance analisys tool"

    perf <verb> <executable>
        stat

----------------
    valgrind: //(0x00000081)➞
----------------
    YYY:
        https://valgrind.org/           // the documentation is pretty good
    >standard utility to find any and all memory errors
    >executes programs in a virtualized envirnment so that
      their behaviour may be analized in detail
    >NOTE: often used interchangably in conversation to refer to its memcheck tool,
            which is the default and most used, primarily by C/C++ devs

    valgrind [options] <executable>
        --tool=<tool>

#define gdb:: //(0x00000082)➞\
I-------------------\
I    ___ ___  ___   \
I   / __|   \| _ )  \
I  | (_ | |) | _ \  \
I   \___|___/|___/  \
I-------------------I
	>"Gnu DeBugger"
	Supports: Ada, Assembly, C, C++, D, Fortran, Go, Objective-C, OpenCL, Modula-2, Pascal, Rust

    Programs:
        gdb ([executable])
            --args [filename] [args...]			: run program with arguments
            -p [PID]							: attaches gdb to already running process;
                                                   NOTE: use this option when working with Ncurses ffs!
            --tui								: use pseudo graphical interface; NOTE: its great, use it ffs

	Execution_flow:
		>a ĐĐ_breakpoint_ĐĐ	is an instruction at which, when executed, the program stops //move; ?!
		>a ĐĐ_watchpoint_ĐĐ or ĐĐ_data_watchpoint_ĐĐ is an expression which, when changed, the program stops //move; ?!
		Break_points:
			>on creation every break point is assigned a number
			b [location] ([condition])			: sets break-point
			tb [location] ([condition])			: sets temporary break-point
			rb [regex] ([condition])			: sets break-point on all functions matching [regex]
			[location]:
				([file])<int>					: at <int>th line of source file [file]; defaults to the file that execution is currently at
				[+ || -]<int>					: at [+ || -]<int>th line from the current one
				*[address]						: at (assembly) instruction
				[func]							: at function named [func]
			[condition]:
				if [logic]					: breaks only if [logic] evaluates to true { b 12 if my_var == 2 }
			ignore [int1] [int2]			: disables breaking at break-point [int1] for the first [int2] times encountering it
			disable <int>					: disables breaking at break-point <int>
			enable [specifier] <int>		: re-enables breaking at break-point <int>
				once							: disable break-point after hit
				count <int>						: disables break-point after it has been hit <int> times
				delete							: delete break-point after hit
			del <int>						: deletes breakpoint number <int>; dont supply an <int> to delete all breakpoints
			clear <int>						: deletes breakpoint at line <int>
			save b [file]					: saves breakpoints to file for future sourcing //probably move; ?!
		Watch_points:
			¤[watchpoint_set]
				wa [var]					: sets watchpoint to [var]
				wa [cast][address]			: sets watchpoint to [address] casted to [cast]
											   { (gdb) wa *(long*)[0x0n123456]
												 // will watch an 8 byte region at [0x0n123456] as if it were an actual variable
											   }
				wa [condition]				: sets watchpoint to [condition]; where it can be any expression native to the current language
			r[watchpoint_set]				: sets a temporary watchpoint
		Moving_around:
				r [options]						: run
					< [file]						: 
					< <([shell command])			: 
				start							: starts program then breaks at main
				c								: continues (after reaching breakpoint)
				s <int>							: steps; run program until reaching <int> different source lines; (deffault is 1)
				next							: executes until function returns
		Practical_example_to_stopping_anywhere:
			┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━┳━━━┳━━━┳━━━┳━━━┓
			┃                                                         ┃                      ┃ S ┃ N ┃ U ┃ F ┃
			┃                                                         ┃                      ┃ t ┃ e ┃ n ┃ i ┃
			┃                   Program Source                        ┃     Break target     ┃ e ┃ x ┃ t ┃ n ┃
			┃                                                         ┃                      ┃ p ┃ t ┃ i ┃ i ┃
			┃                                                         ┃                      ┃   ┃   ┃ l ┃ s ┃
			┃                                                         ┃                      ┃   ┃   ┃   ┃ h ┃
			┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━┯━━━━━━━╋━━━╋━━━╋━━━╋━━━┫
			┃┌─gdb_graph.c───────────────────────────────────────────┐┠──────────────┼───────╂───╂───╂───┨   ┃
			┃│        1  /* @COMPILECMD gcc $@ -o graph.out -ggdb */ │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃ C ┃
			┃│        2  #include "header.h"                         │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃ a ┃
			┃│        3                                              │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃ n ┃
			┃│        4  signed main(){                              │┃            4 │  main ┃   ┃   ┃   ┃ n ┃
			┃│  >     5          int r = fun();                      │┃            5 │       ┃   ┃   ┃   ┃ o ┃
			┃│        6          return r;                           │┃            6 │       ┃   ┃ < ┃ < ┃ t ┃
			┃│        7  }                                           │┃            7 │       ┃   ┃   ┃   ┃   ┃
			┃└───────────────────────────────────────────────────────┘┠──────────────┼───────╂───╂───╂───┨ b ┃
			┃┌─header.h──────────────────────────────────────────────┐┠──────────────┼───────╂───╂───╂───┨ e ┃
			┃│        1  #define FUNSIZE 32                          │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃   ┃
			┃│        2  int fun(){                                  │┃   header.h:2 │   fun ┃ < ┃   ┃   ┃ u ┃
			┃│        3          int a[FUNSIZE];                     │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃ s ┃
			┃│        4          int r = 0;                          │┃   header.h:4 │       ┃   ┃   ┃   ┃ e ┃
			┃│        5          for(int i = 0; i < FUNSIZE; i++){   │┃   header.h:5 │       ┃   ┃   ┃   ┃ d ┃
			┃│        6                  r += a[i];                  │┃   header.h:6 │       ┃   ┃   ┃   ┃   ┃
			┃│        7          }                                   │┃   header.h:7 │       ┃   ┃   ┃   ┃   ┃
			┃│        8          return r;                           │┃   header.h:8 │       ┃   ┃   ┃   ┃   ┃
			┃│        9  }                                           │┃   header.h:9 │       ┃   ┃   ┃   ┃   ┃
			┃└───────────────────────────────────────────────────────┘┠──────────────┼───────╂───╂───╂───┨   ┃
			┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━┷━━━━━━━┻━━━┻━━━┻━━━┻━━━┫
			┃                                        /* Execution moved */                                   ┃
			┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┯━━━━━━━┳━━━┳━━━┳━━━┳━━━┫
			┃┌─gdb_graph.c───────────────────────────────────────────┐┠──────────────┼───────╂───╂───╂───╂───┨
			┃│        1  /* @COMPILECMD gcc $@ -o graph.out -ggdb */ │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃   ┃
			┃│        2  #include "header.h"                         │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃   ┃
			┃│        3                                              │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃   ┃
			┃│        4  signed main(){                              │┃  FALLTHROUGH │  main ┃   ┃   ┃   ┃   ┃
			┃│        5          int r = fun();                      │┃     main.c:5 │       ┃   ┃   ┃   ┃ < ┃
			┃│        6          return r;                           │┃     main.c:6 │       ┃   ┃   ┃   ┃   ┃
			┃│        7  }                                           │┃     main.c:7 │       ┃   ┃   ┃   ┃   ┃
			┃└───────────────────────────────────────────────────────┘┠──────────────┼───────╂───╂───╂───╂───┨
			┃┌─header.h──────────────────────────────────────────────┐┠──────────────┼───────╂───╂───╂───╂───┨
			┃│        1  #define FUNSIZE 32                          │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃   ┃
			┃│        2  int fun(){                                  │┃            2 │   fun ┃ < ┃   ┃   ┃   ┃
			┃│        3          int a[FUNSIZE];                     │┃  FALLTHROUGH │       ┃   ┃   ┃   ┃   ┃
			┃│        4          int r = 0;                          │┃            4 │       ┃   ┃   ┃   ┃   ┃
			┃│        5          for(int i = 0; i < FUNSIZE; i++){   │┃            5 │       ┃   ┃ < ┃ < ┃   ┃
			┃│  >     6                  r += a[i];                  │┃            6 │       ┃   ┃   ┃   ┃   ┃
			┃│        7          }                                   │┃            7 │       ┃   ┃   ┃   ┃   ┃
			┃│        8          return r;                           │┃            8 │       ┃   ┃   ┃   ┃   ┃
			┃│        9  }                                           │┃            9 │       ┃   ┃   ┃   ┃   ┃
			┃└───────────────────────────────────────────────────────┘┠──────────────┼───────╂───╂───╂───╂───┨
			┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━┷━━━━━━━┻━━━┻━━━┻━━━┻━━━┛


	Signals:
		>signal naming follows the C std (see AT "C++/C std/signal.h");
		  numbers also work
		signal <signal>					: sends [signal] to the debugged program
		handle <signal> <action>
			stop
			nostop
			print
			noprint
			pass
			nopass
			ignore
			noignore
		


	COMMANDS:	// ?!; deprecate
		Runtime_management:
			kill							: kills the program being debugged
			file [name]						: loads [name] as the executable to debug
			l								: lists; display source code; only works if debugging symbols were supplied at compilation; 
											  displays 10 lines by default
				<int>							: displays with <int>th line as the center
				[function]						: displays from [function]
				[int1],[int2]					: displays from line [int1] till line [int2]
		Information:
			layout 							: changes the layout of windows
			   src   							: displays source and command windows; you must list it first
			   asm   							: displays disassembly and command windows
			   split 							: displays source, disassembly and command windows
			   regs  							: displays register window
			show [...]						: show [...] (?!)
			   	args							: show arguments
			print (/[format]) [exp]			: prints the value of a given expression in a given format
				[exp]:
					[var]							: print [var]
			x (/<int>[format][u]) [addr]	: examine <int>*[u] memory at [addr]
				[u]								: unit size
					b - bytes
					h - two bytes (half word)
					w - four bytes (word)
					g - eight bytes (giant word)
			[format]:	
				o - octal
				x - hexadecimal
				u - unsigned decimal
				t - binary
				f - floating point
				a - address
				c - char
				s - string
			i [subject]						: info; prints info on [subject]; it has nothing to do with help
				args							: arguments of current function
				func							: list of functions
				locals							: list of local variables
				threads							: current thread
				wat								: list of watchpoints
				b								: list of breakpoints
				f								: frame information
				r								: registers
			disas [func]					: disassemble; displays assembly for [func]
		Call_stack:
			where			: prints call stack
			up				: goes up a frame to display
			down			: goes down a frame to display
			frame <uint>	: jumps to frame number <uint> to display
		Misc:
			shell [...]						: run (non gdb) commands from inside gdb
			python [...]					: run python commands inside gdb; the executed code has access to the gdb API
			help							: surprisingly it DOES help a lot
			signal [signal]					: sends [signal] to the debugged program; signal naming follows the C std (see AT "C++/C std/signal.h")
			q								: quit

	Configuration:
		set print element <int>		: sets how many elements of an array should be outputed at once;
		                               200 by default; 0 signals limitless output
		set follow-fork-mode [mode]
				child
				parent
	
	Api:	// ?!
		pretty_printing:
			gdb.pretty_printers.append(<fun>)	: adds a new call back to execute when printing
				<fun>(gdb.Value) -> <obj>			: must either return an object with a to_string() or None
			gdb.Value		: python API representation of a variable
				Members:
					type		: string; name of the type;
								   NOTE: keywords such as const might be stored within its value
				Member_functions:
					cast(<type>)
			gdb.type_lookup(string <name>) -> <type>
			<type>	//?!
				Member_functions:
					pointer()
					dereference()
		### Simple example to gdb pretty printer ###    //(0x0000028b)➞
			1. Assume the following type in C
				{
					typedef struct {
						int i;
					} hello_world_t;
					// and an exampolary instance
					hello_world_t my_hw;
				}
				>NOTE: compiling with debugging information is required (-ggdb under gcc)
			2. We create a pretty printer in python
				{@begin=python@
					# myPrettyPrinter.py
					class mybsPrinter:
						def to_string:
							return "Hello World"

					def mylookup(val):
						if str(val.type) == "hello_world_t":
							return mybsPrinter(val)
						return None

					gdb.pretty_printers.append(mylookup)
				@end=python@}
			3. Source the pretty printer code from inside gdb like so:
					$ python execfile('myPrettyPrinter.py')				# python 2
					$ python exec(open(('myPrettyPrinter.py').read())	# python 3
				or copy paste the whole thing into your .gdbinit after the keyword "python"
					python
					<...>
			4. Invoke our pretty printer by printing an appropriate instance
				$ p my_hw
		#
		


	SHORTCUTS:
		[ctrl] + [x] & [a]			: switch between windowed and normal layout mode
		[ctrl] + [x] & [1]			: switch to one windowed layout mode	\____(switching between these two will cycle the contents of the windows)
		[ctrl] + [x] & [2]			: switch to two windowed layout mode	/

    -XXX things which are terrible about it and should be fixed:
        >in tui mode, theres no way to buffer the command window
        >https://stackoverflow.com/questions/16031100/how-can-i-make-gdb-print-unprintable-characters-of-a-string-in-hex-instead-of-oc

#define linters
// same problem as with "#define debugging"
    >a program that provides static code analysis mostly aimed at best practaces
    >NOTE: in my experience they tend to be too strict and poorly configurable

--------
 splint
--------
    >super strict C linter
    >used by The Only Serbian Developer


#define management: //(0x00000083)➞\
I------------------------------------------------------------------\
I  ___  ___                                                  _     \
I  |  \/  |                                                 | |    \
I  | .  . | __ _ _ __   __ _  __ _  ___ _ __ ___   ___ _ __ | |_   \
I  | |\/| |/ _` | '_ \ / _` |/ _` |/ _ \ '_ ` _ \ / _ \ '_ \| __|  \
I  | |  | | (_| | | | | (_| | (_| |  __/ | | | | |  __/ | | | |_   \
I  \_|  |_/\__,_|_| |_|\__,_|\__, |\___|_| |_| |_|\___|_| |_|\__|  \
I                             __/ |                                \
I                            |___/                                 \
I------------------------------------------------------------------I

    "\
    There's no such thing as the FOSS community, only open standards pushed by          \
    corporations used by millions of freeloaders. The so called community               \
    rarely achieve a sustainable development, most succesful community driven projects  \
    are made by a corpo backed group or a single talented individual that makes         \
    daily commits.                                                                      \
    " - Anon

	>The Boy Scout Rule - "Leave the campground cleaner than you found it."

	Implementation: //(0x00000084)➞
		>if a software complies with a documentation its called an implementation
		>might as well be interpreted as an instance of a software class defined by a specification
		>many large software projects {languages} have more than 1, concurrently developed implementations

	Framework: //(0x00000085)➞
		>a stand alone program that is centered around user override-n behaviour
		>highly reusable blank stale
		>dictates the control flow
		>collection of developer tools
		>predefined project structure
        >NOTE: not to be confused with a library

	Most_common_code_quality_errors: //(0x00000086)➞
        >"software crisis"
		>orphaned/redundant/poorly written comment
		>commented out code
		>project wide operations {building, testing} require more than 1 command
		>too many function arguments
		>dead functions
		>obvious behaviour is unimplemented
		>duplication
		>inconsistency
		>clutter
		>obscured intent

	Imaginary_software: //(0x00000087)➞
        >"vaporware"
		¤software that is described by one of the following
			>has no user potential
			>has no users
			>is never finished
			>exists only on paper {spec}

	Owned_code: //(0x00000088)➞
		>the phenomenon when one develops an emotional ownership to code
		-the syndrome is characterized by:
			>unwillingness to accept help
			>denial of contribution merging
			>unreasonable attachment to arbitrary conventions
		>it easily halts meaningful development of a piece of software
		>highly relevant in the field of coding due to the unproportional percentage
		  of autistic workers
		>NOTE: for examples, read GNU discussions

    Fountain_dilemma: //(0x00000089)➞
        >metaphor: fountains are pretty and everyone wants one,
                    but are painful and expensive to maintain
        >feature requests are often fountain like;
          their complexity is high, but the return is low
        >its important to recognize such features and eval them responsibly
        >always document their nature

	Project: //(0x0000008a)➞
		YYY:
			https://miro.com/
		-to almost all software projects at least on of the following applies:
			>goes over budget
			>goes over time
			>does not comply with expectations
			>bad quality
			>causes damage {monetary; health}
			>never finishes
		+---------------------------------------------++---------------------------------------------+
		|               Unique Software               ||               Boxed Software                |
		+---------------------------------------------++---------------------------------------------+
		| The customer is personally known and        || There is no preconceived customer,          |
		|    can be communicated with.                ||    only potential customers.                |
		| More expensive for the customer.            || Cheaper for the customer.                   |
		| For the customer it takes longer to         || The customer gets a working system fast.    |
		|    acquire a working system.                ||                                             |
		| Stable pay for the developers.              || Get-rich-quick wetdream of start ups.       |
		| Updates must be contracted. No unexpected   || (Usually) updates come frequency and free.  |
		|    updates can cause trouble.               ||    Some updates might cause obstruction.    |
		| Not bloated. Fits exactly with the          || Might already contains functionalities      |
		|    requirements.                            ||    which are not yet, but will be desired   |
		|                                             ||    (by individual customers).               |
		+---------------------------------------------++---------------------------------------------+
		¤components of commercial software
			>source code
			>installer
			>documentation
		¤aspects of software quality
			>reliability
			>maintainability
			>serviceability
			>security
			>testability
        SaaS:
            >"Software As A Service"
            >for access to the software connection to a server is required
            >a continuous subscription fee must be payed for access
            >all your rights are stripped away, you are our toy-slave, goy
            >usually the server will host the entire backend
            >usually the software is browser based
        Free_trials:
            >common advertising spyop
            >helps to draw in new users
            >during the trial period {7, 30 days} the user gains access to all or most features
              of the software
            >a common scam is to ask for credit card information up front and
              start withdrawing after the trial has ended,
              playing on the chance that the user might have forgotten about
              cancelling

	Tasks: //(0x0000008b)➞
        >"story"
		Story_points:
			>semi-arbitrary metric to measure performance
			>could correspond to work hours or work days, the team may choose
			>every task must be supplied with a story point cost estimate
			-the number of story points available in a sprint is:
				let <worker-availability> : int - be story points an individual worker
                                                  is worth with his ideal performance
				let <focus> : const float - be a fraction to express the probable work
						{ estimated from previous sprint; 70% as a sensible default}
				( ∑ <worker-availability> ) * <focus>
        Planning_poker:
            >used for democratically estimating task durations or story point values
            ¤the process
                1. each participant is handed an identical deck of cards with various
                    values which may represent any unit to be estimated
                2. a task is proposed and described
                3. each participant chooses a card privately
                4. participants flip over their cards
                5. if total agreement then
                    goto 2
                   if disagreement then
                    discussion
                    goto 3
                   except deadlock then
                    postpone current task
                    goto 2
		RUP:
			>"Rational Unified Process"
			-the idea that every task can be split into 4 so called phases:
				>inception
				>elaboration
				>construction
				>transition
		Task_controll_system:
			>maintains a list of all tasks and tracks progress
			Gantt_graph:
                // ?! draw
                >displays development tasks, their planned completion order
                  and implementation dependencies
			Burndown_chart:
				Story points remaining
					X ▲
					  │'--
					  │   '. .
					  │     ' `,
					  │         \
					0 ┼──────────┼▶ Time
						 Deadline
				>descending into the goal tends to be a more motivating representation
				>with very short sprints it tends to be useless overhead
			Kanban_tables:
				YYY:
					https://trello.com/
					https://docs.gitea.com/			// projects
				¤has the following columns
					>todo
					>in progress
					>under review (*optional)
					>done
				>its common to set a limit on how many tasks can be presented in column simultaneously
				>cells are also called cards each expressing a task or "story"
				>physical boards have been found to be the best in practice
				│          TODO          │      IN PROGRESS       │      UNDER REVIEW      │          DONE          │
				├────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┤
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │
				│                        │                        │                        │                        │


	Ideal_planning_space: //(0x0000008c)➞
			┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
			┃     ##########################             ┃
			┃          Design whiteboard             __  ┃
			┃┌──┐                                 ::|  \ ┃
			┃│  │                                 ::|   |┃
			┃└──┘                                 ::|__/ ┃
			┃┌──┐                             Public PC  ┃
			┃│  │                                        ┃
			┃└──┘                                       @┃
			┃┌──┐                                   K B @┃
			┃│  │         Open Space                a o @┃
			┃└──┘                                   n a @┃
			┃Chairs                                 b r @┃
			┃                                       a d @┃
			┃                                       n   @┃
			┃                                           @┃
			┃                                           @┃
			┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


    SOLID: //(0x0000008d)➞
        |S|ingle Responsibility Principle
        |O|pen-Closed Principle
        |L|iskov Substitution Principle
        |I|nterface Segregation Principle
        |D|ependency Inversion Principle
        SRP: //(0x0000008e)➞
            >every * should have 1 responsibility
            Cons:
                >stolen from the Unix Philosophy
                >applied to class-es, it leads to new new new new new
        OCP: //(0x0000008f)➞
            >open for extension, closed for modification
            >the primary mechanism behind it is polymorphism
            Cons:
                >the performance impacts can be severe
                >introduces complexity to the code
        LSP: //(0x00000090)➞
            >subtypes must be substitutable for their base types
            >"for the love of God, stop checking the types at runtime"
            >assumptions about basetypes should apply to derived types
        ISP: //(0x00000091)➞
            >dont bloat your interfaces
        DIP: //(0x00000092)➞
            >high-level modules should not depend on low-level modules,
              both should depend on abstractions
            >abstractions should not depend on details;
              details should depend on abstractions
            cons:
                >introduces a bunch of abstract layers to prepare for errors,
                  that the compiler would catch anyways
                >the performance impact is severe
                >all interfaces depend on details;
                  pretending otherwise is futile;
                  its deluding ourselves with interfaces that correspond to no reality


	Software_Development_Life_Cycle: //(0x00000093)➞
		>"SDLC"
		>if a model has a clear start and end, its called ĐĐlinearĐĐ
		>if a model has steps which will have to be repeated const to keep the software viable (alive),
		  its called ĐĐiterationalĐĐ or ĐĐincrementalĐĐ
		Waterfall: //(0x00000094)➞
			>linear
			>struct-ured
			>well documented
			>no backtracking or partial transitions between stages
			/* 		     ._,_.-'`-.  */
			/* 			_.-'      .` */   1. Requirement Analysis
			/* 		  /    /     _'  */
			/* 		 | / /    .-'    */
			/* 		|| ||  / /|-/    */
			/* 		   | |    /      */   2. System design
			/* 		|   | | ||       */
			/* 			|    _-      */
			/* 		|    |  |_.      */
			/* 		|   |  ||        */
			/* 		 | | |  . '      */   3. Implementation
			/* 		|   |  ||        */
			/* 		||    || '       */
			/* 		   | |  |        */
			/* 		|  ||  _.        */
			/* 		| |  '  | `      */   4. Testing
			/* 		||  |  |         */
			/* 	 .-'     |  |_.      */
			/* .-'         .-,       */   5. Delivery
	        /*'.       .-,'          */
			/*  '-...-'              */  (6. Maintenance)
		SSADM: //(0x00000095)➞
			>"Structured System Analysis and Design Method"
			>government standard
			>data flow diagram oriented
		V: //(0x00000096)➞
			>named after the shape of its graph
			-splits the development into 2 virtual phases:
				>implementation
				>testing
			>both phases consist of steps
			>the Đimplementation phaseĐ closely resembles the waterfall model
			>if an error is encountered in a step of the testing phase,
			  backtracking must be done to the mirroring step of the
			  implementation phase
			>linear
			>struct-ured
			>well documented
			/* Implementation phase*/   ┃            "Testing phase"
		  	      (Start)               ┃                (End)
			+-----------------+                   +-----------------+
			 \        PRD      \        │        /   Deployment    /
			  \                 \               /      test       /
			   +-----------------+      │      +-----------------+
			    \   Functional    \           /   System test   /
			     \  specification  \    │    /                 /
			      +-----------------+       +-----------------+
			       \     System      \  │  /   Integration   /
			        \   specification \   /      test       /
			         +-----------------+-+-----------------+
			          \  Implementation │    Component    /
			           \                │      test      /
			            +--------------+-+--------------+
		RAD: //(0x00000097)➞
			>"Rapid Application Development"
			>many prototypes 
			>continuous deployment tests
			>non-formal team communication
			>fast
            >NOTE: pretty name for anarchy (which is the default state of software development)
			Yellow(
									  PROTOTYPE CYCLES
										 ..------..       
									   .'          '.  
		                 +---+       .' Demonstration'.                 +---+                           
						 |    \    .:.--.              :.               |    \    .------------------.                      
			+------------+     \   |/  B \ /````\       |  +------------+     \   |                  |  
			| Requirement       \  |   u  :      :      |  |    Testing        \  |   <Deployment>   |  
			| analisys          /  |   i  :      :\    /|  |                   /  |                  |  
			+------------+     /   |   l   \,,,,/  \__/ |  +------------+     /   |                  |  
			             |    /    ':  d +'`           :'               |    /    '------------------'                      
			             +---+       '. /  Refineing .'                 +---+                           
									   '.          .'
										 ''------''
			)

	Development: //(0x00000098)➞
		Agile_development: //(0x00000099)➞
            YYY:
                https://agilemanifesto.org/
			>when the stress is on getting the software to work
			>documentation is second class at best
			>with time, will result in monolithic stacks of blackboxes creating a hell hole to work with(/around)
			>practically an ideology to justify shitting out software as fast as possible for incomemaxxing
			>communication with the customer is done parallel with programming
			>new practices, experiments and optimization attempts are encouraged
		Extreme_programming: //(0x0000009a)➞
			>"XP"
            >clusterfuck of techniques
			>agile
			>fuck the documentation; just talk it out; what is a bus factor?
			>TDD
			>pair programming
			>code review
			>continuous integration
			>refactoring
			¤pillars
				>planning
				>coding
				>testing
				>attention      // topkek; "just like um, stop being bad, bro"
			¤values
				>communication
				>simplicity
				>feedback
				>bravery
				>respect
		SCRUM: //(0x0000009b)➞
            YYY:
                https://www.scrum.org/assessments/professional-scrum-master-i-certification
			>not an actual acronym, comes from a rugby formation
			>agile
			>"behavioural framework"
			>everyone involved has a curious last name and they sell certifications, go figure
			>uses RAD
			>sprints are used
			>each sprint results in a prototype
			>commonly used together with extreme development
			>big teams are divided into small ones
			-kanban tables:
				>each sprint resets the table
				>the backlog is sorted by priority
			Sprint:
				>a period of development lasting a predefined spawn of time,
                  under which a set of tasks must be completed
				>when sprints are used, the entire development process is split into them
				>outlined during a planning meeting, where the goal is set and tasks are distributed
			Teams:
				>employees are sorted into smaller SCRUM teams
				>each team has their own sprints and meetings
				>teams dont communicate with each other directly
				>teams dont specialize, so they dont have to wait for each other during sprints
                >some recommend mixing up the team members between sprints, either to find the
                  most optimal compositions or to resolve internal conflicts
				Roles:
					Pigs:
						>SCRUM master
						>developers (optimally 3-8 people)
					Chickens:
						>managers (product owners) (may mix between SCRUM teams)
			Meetings:
				Daily:
					>15 minutes max
					>only ĐpigĐs are present
					>only standing is allowed ("stand-up meeting")
					-each person must answer the following questions:
						>what have you done since the last meeting?
						>what will you do until the next meeting?
						>what impediments have you encountered?
					>this is when the kanban board gets updated (if physical)
				Sprint_planning:
					>held before sprints
					>manages the backlog
					>chickens are invited
					>few hours max
				Sprint_review:
					>held when a sprint is finished
					>chickens are invited
			Green(
			               +---+                   +---+                   +---+                   +---+                   +---+   
			               |    \                  |    \                  |    \                  |    \                  |    \  
			  +------------+     \    +------------+     \    +------------+     \    +------------+     \    +------------+     \    +----------+
			  |   Product         \   |   Sprint planning \   |     Sprint        \   |     Sprint        \   |     Sprint        \   |          |
			  |   backlog         /   |      meeting      /   |   {2-4 weeks}     /   |     review        /   |  retrospective    /   |          |
			  +------------+     /    +------------+     /    +------------+     /    +------------+     /    +------------+     /    +----+     |
			               |    /       .--.       |    /                  |    /                  |    /                  |    /          |     |
			               +---+      .'    '.     +---+                   +---+                   +---+                   +---+           |     |
			                        .'        '.                                                                                           |     |
			                        |          |                                                                                           |     |
			                        +--+    +--+                                                                                           |     |
									   |    |                                                                                              |     |
									   |    |                                                                                              |     |
									   |    +----------------------------------------------------------------------------------------------+     |
									   |                                                                                                         |
									   |                                                                                                         |
									   +---------------------------------------------------------------------------------------------------------+
			)


	Pair_programming: //(0x0000009c)➞
		>when 2 people program together in such manner that only one codes
		>the man coding is referred to as the ĐĐnavigatorĐĐ
		>the man observing and assisting {with information} is referred to as the ĐĐdriverĐĐ
		>dont lie to ourselves, it reduces the productivity of 2 people to that of less than 1
        Purple(
        >the one situation where code ouput could go up is in documentation browsing heavy contexts
        ) // LLMs exist now, nuking this line of argument
		>if both participants are known to write shitty code,
		  their combined output is expected to go up in quality
		>some are simply not fit for it
		>frequent pair shifting is encouraged
        >used to manage developer stress levels with (forced) socialization


	PERT: //(0x0000009d)➞
		>"Program Evaluation & Review Technique"
		>US army™
		>statistical strategy used for approximating project durations
		-a chain of tasks where every task has the following qualities
			>Optimistic    estimate & weight (recommended: 1)
			>Most probable estimate & weight (recommended: 4)
			>Pessimistic   estimate & weight (recommended: 1)
		>by averaging together the 3 weighted estimates of a task,
		  we get a more optimal estimate
		>calculating a standard deviation and treating the tasks estimate in such context
		  is highly recommended


    Refactoring: //(0x0000009e)➞
        >"the process of changing a software system in such a way that\
           it does not alter the external behavior of the code yet improves its internal structure"


	Backlog_grooming: //(0x0000009f)➞
		>"backlog refinement"
		>fancy way of saying "cleaning tickets"
		>remove old, irrelevant stuff
		>reevaluate whats left
		>split and create new tickets based on old ones if appropriate


	Licenses: //(0x000000a0)➞
        -trademarks:
            ® - registered trademark
            ™ - unregistered trademark
            ℠ - unregistered service mark
        >ĐĐfreewareĐĐ is software that can be freely copied and shared
        >ĐĐsharewareĐĐ is ĐfreewareĐ on a license period
        >ĐĐproprietary softwareĐĐ is software with a proprietary license
        >ĐĐpostcard-wareĐĐ is software where the copyright owner asks for optional positive feedback,
          under the condition that the user liked the software
        >ĐĐadwareĐĐ may refer to ĐfreewareĐ where the profit model is based on ads or
          computer viruses with the intent of showing ads
        >ĐĐabandonwareĐĐ is software where the identity of the copyright holder is unclear
          to the point that its reasonable to assume that no one can present a realistic
          legal case for it {company that no longer exists}, ĐabandonwareĐ is usually
          threated as ĐfreewareĐ
        Licensing: //(0x000000a1)➞
            >each source file must include the copyright notice or a clear indication of
              what license is being used
            >at least one legal name must be used in the license { "Emil & Anon" wont work }
            >you ĐshouldĐ attach both electronic and analog contacts
            >"You should also get your employer (if you work as a programmer)\
              or your school, if any, to sign a \"copyright disclaimer\" for\
              the program, if necessary."
            -NOTE:
                >anyone who includes a gigantic, full license notice at the top of each source file,
                  nicely formatted to 80 chars so it takes up atleast 20 lines,
                  is mentally handicapped
        Copyright: //(0x000000a2)➞
            >anglo abomonation spiced by the US
            >owned by a person, multiple people in share or a company
            >until death + 70 years
            >the owner can decide who may copy, modify and or copy it
            >"infringement" is a perceeved violation of copyright,
              the owner is entitled to seek legal action
            >turns out i could be jail for up to 2 years for torrenting, oh well
            -auto applies to:
                >creative works
                >logos
                >trademarks
                -except:
                    >"unappropriate creations" {porn; which is happily exploited by certain webservices}
                    >inventions and innovations (NOTE: these can still be explicitly patented)
            ¤examples in software
                >binaries
                >source files
                >APIs (yes, seriously)
        Proprietary: //(0x000000a3)➞
            >the right for usage is sold by the copyright holder
            >specifies the number of computers it can be used on (implicit 1) // i wonder about the legally of using it on something similar to a Plan 9 network
            EULA:
                >"End User License Agreement"
                >records the conditions of usage
                >companies keep getting away changing it on the fly with updates
                  and without providing access to prier versions
                >obviously too long and technical to except anyone to read them
            BSA:
                >"Business Software Alliance"/"\"software police\""
                >coperation between big corpo to enforce copyright laws
                >not a proper enforcement firm, but work very closely with
                  various legitimate law enforcement entities
                >known to organize raids against suspected infringers
                >their tactic is to convince employees to become rats
                >often sends out letters ordering to prove software ownership
        Public_domain: //(0x000000a4)➞
            >no copyright applied to begin with
            >no owner at all
            >do whatever
            Anon_license:
                /* --- LICENSE
                 * This software is in the Public Domain;
                 *  and if (You) dare to say this notice is not legally valid,
                 *  I will sue you.
                 */
        Permissive: //(0x000000a5)➞
            >TLDR: it cucks the developer, but gives absolute freedom to the user
            >throws away copyright with very few conditions protecting the owner,
              without restricting the user
            >proprietary licenses can be added on top
            BSD: //(0x000000a6)➞
                ¤text
                    Green(
                    Copyright {c} <year>, <copyright holder> All rights reserved.

                    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

                    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
                    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
                    3. All advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by the <copyright holder>.
                    4. Neither the name of the <copyright holder> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

                    THIS SOFTWARE IS PROVIDED BY <COPYRIGHT HOLDER> AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES {INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION} HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT {INCLUDING NEGLIGENCE OR OTHERWISE} ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                    )
                -4-clause
                    >original
                -3-clause
                    >"Revised BSD License"
                -2-clause
                    >"Simplified BSD License"
                    >used by FreeBDS
                -0-clause
                    >only mitigates responsibility
                         +--------------------------------+
                                BSD LICENSE COMPARISON
                         +----------+----------+----------+----------+
                         | 4-clause | 3-clause | 2-clause | 0-clause |
               ----------+----------+----------+----------+----------+
                Clause-1 |     o    |     o    |     o    |          |
                clause-2 |     o    |     o    |     o    |          |
                clause-3 |     o    |          |          |          |
                clause-4 |     o    |     o    |          |          |
               ----------+----------+----------+----------+----------+
            MIT: //(0x000000a7)➞
                ¤text
                    Green(
                    Copyright <YEAR> <COPYRIGHT HOLDER>

                    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files {the “Software”}, to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

                    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

                    THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                    )
            Apache2: //(0x000000a8)➞
                >relatively long
                >preserve the copyright notice
                >state changes in modified distributions
                >the current copyright holders give up any future claims
                >do whatever otherwise
        Copyleft: //(0x000000a9)➞
            >works inside the constructs of copyright
            >the copyright owner grants freedoms to everyone
            GPL: //(0x000000aa)➞
                >TLDR: it ensures free software stays free software, but in the process cucks the users freedom
                >"gnu General Public License"
                >requires Đsource aviablilityĐ meaning distributors
                  have to provide a way to obtain the source code;
                  this can be as minimal as providing instructions,
                  meaning this clause is open-ended, up for legal interpretation bullshitery
                >theoretically prevents GPL software to become proprietary or to be used as a component of proprietary software
                >"Linux is a cancer that attaches itself in an intellectual property sense to everything it touches," - Steve Ballmer
                >NOTE: way too long to copy paste here
                GPLv2: //(0x000000ab)➞
                    >the copyright owner does not sign away his future rights
                    ¤TLDR
                        1. keep and redistribute the notice;
                            you may sell copies or offer warranties
                        2. follow the following rules:
                               >add a notice about your changes and their date
                               >you may not sell licenses
                               >if the program in question prints the copyright on
                                 interactive use, that must be retained in modified versions
                            programs using GPL code that can be considered independent work,
                            can apply their own license to said portions and GPL does not apply
                        3. do at least one of the following when distributing binaries:
                               >distribute Đmachine readableĐ source code
                               >attach a written offer that you will distribute
                                 the source code uppon request to any 3th party
                               >pass down source code distribution offers
                        4. violating the license strips you from all rights
                        5. by modifying, copying or distributing the program you accept the license
                        6. ownership persists
                        7. no condition cancels the terms of this license
                        8. one may exclude countries from distribution if he explicitly
                            copyrights them there
                        9. we may create newer licenses "similar in spirit", trust us goy,
                            we wont pull a communist bait-and-switch,
                            specify "GPLv2 or later" in your license
                        10. if you wish to use partial source code in other programs
                             which are not licensed under GPL you must request permission
                        11. no warranty
                        12. we are not liable
                        -key points:
                            >"You may charge a fee for the physical act of transferring a copy,\
                                and you may at your option offer warranty protection\
                                in exchange for a fee."
                            >"The act of running the Program is not restricted,\
                                and the output from the Program is covered only if\
                                its contents constitute a work based on the Program\
                                (independent of having been made by running the Program)"
                            >"You may not impose any further restrictions on the recipients'\
                                exercise of the rights granted herein."
                            >"It is safest to attach them to the start of each source file to\
                                most effectively convey the exclusion of warranty;\
                                and each file should have at least the \"copyright\"\
                                line and a pointer to where the full notice is found."
                            >recommendations on the act of licensing
                GPLv3: //(0x000000ac)➞
                    >communist bait-and-switch
                    >the copyright owner signs away his future rights
                    >the language is noticablely much more lawyer-talk like
                    ¤TLDR
                        1. definitions
                        2. no takesies-backsies
                        3. seriously, no takesies-backsies
                        4. you may distribute the source code intact for any fee
                        5. follow the following rules:
                               >add a notice about your changes and their date
                               >"keep intact all notices"
                               >derived works inherit this license
                        6. convey the source with binaries
                        7. added terms to this license may be removed when redistributing
                        8. violating the license strips you from all rights
                        9. by distributing you accept the license, but not by receiving or
                            making a copy or running one
                        10. ownership persists
                        11. every contributor gives up any future claims for copyright
                        12. no condition cancels the terms of this license
                        13. you may combine this license with the GNU Affero General Public License
                        14. we may create newer licenses "similar in spirit", trust us goy,
                            we wont pull a communist bait-and-switch,
                            specify "GPLv3 or later" in your license
                        15. no warranty
                        16. we are not liable
                    -key points:
                        >"All rights granted under this License are granted for the term of\
                           copyright on the Program, and are irrevocable provided\
                           the stated conditions are met."
                        >"You may convey covered works to others for the sole purpose of having\
                            them make modifications exclusively for you, or provide you\
                            with facilities for running those works"
                        >"A compilation of a covered work with other separate and independent\
                            works, which are not by their nature extensions of the covered work,\
                            and which are not combined with it such as to form a larger program,\
                            in or on a volume of a storage or distribution medium, is called an\
                            \"aggregate\" if the compilation and its resulting copyright are not\
                            used to limit the access or legal rights of the compilation's users\
                            beyond what the individual works permit.  Inclusion of a covered work\
                            in an aggregate does not cause this License to apply to the other\
                            parts of the aggregate."
            AGPLv3: //(0x000000ad)➞
                >GPLv3 then some
                >modified versions of AGPL software must also be source available
        Modifiers: //(0x000000ae)➞
            >must be combined with other licenses
            GCC_Runtime_Library_Exception:
                >GPLv3 would make all your compiled binaries GPLv3;
                  yeah, no, forget about that, do whatever with your binaries
            +NIGGER:
                -"By including the word \"NIGGER\" in a LICENSE file that must be distributed with the software you will ensure:"
                    >"The software will not be used or hosted by western corporations that promote censorship"
                    >"The software will not be used or hosted by compromised individuals that promote censorship"
                    >"Users of the software will be immune to attacks that would result in censorship of others"


	Version_controll: //(0x000000af)➞
		YYY:
			git
			svl
		>NOTE: literally everything currently on the market but Git, is garbage;
		        whatever google uses is much praised, but its internal use only
		>tracks changes in source
		>allows for inspecting previous iterations
		¤important concepts
			Repository      : a project with a version control system initialized inside it
			Fork            : a version controll created copy of source code
			Commit          : the unit of versioning;
                               some changes made and added (commited) by someone;
                               each commit except the initial has a parent
			Branch          : a "path" of commits;
                               one commit might be the parent of multiple commits,
                               these divergent paths are refered to as different branches
			Trunk/Master    : the main branch of a project
			Head            : a marker of the Đcurrent commitĐ;
                               which is usually used for determining what version of
                               the project to show and operate on
			Checkout        : the act of viewing a specific version (marked by a commit);
                               usually "refreshes" the project directory
			Merge           : the act of uniting 2 branches;
                               may result in a merge commit
			Conflict        : could happen during merging; when 2 branches have edits
                               to the same file / file region; these must be resolved by hand,
                               to not break the project
			Tag/label       : arbitrary text assigned to a commit; usually marks a version
                               (not as defined by the version control system { v1.4.6 })
			Update/Pull     : the process of patching a local fork with extern-al commits,
                               usually from the Trunk

#define languages: //(0x000000b0)➞\
I----------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------\
I                                                                                              \
I   /$$                                                                                        \
I  | $$                                                                                        \
I  | $$        /$$$$$$  /$$$$$$$   /$$$$$$  /$$   /$$  /$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$$  \
I  | $$       |____  $$| $$__  $$ /$$__  $$| $$  | $$ |____  $$ /$$__  $$ /$$__  $$ /$$_____/  \
I  | $$        /$$$$$$$| $$  \ $$| $$  \ $$| $$  | $$  /$$$$$$$| $$  \ $$| $$$$$$$$|  $$$$$$   \
I  | $$       /$$__  $$| $$  | $$| $$  | $$| $$  | $$ /$$__  $$| $$  | $$| $$_____/ \____  $$  \
I  | $$$$$$$$|  $$$$$$$| $$  | $$|  $$$$$$$|  $$$$$$/|  $$$$$$$|  $$$$$$$|  $$$$$$$ /$$$$$$$/  \
I  |________/ \_______/|__/  |__/ \____  $$ \______/  \_______/ \____  $$ \_______/|_______/   \
I                                 /$$  \ $$                     /$$  \ $$                      \
I                                |  $$$$$$/                    |  $$$$$$/                      \
I                                 \______/                      \______/                       \
I----------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------I

	Turing_tarpit: //(0x000000b1)➞
		>a Turing complete programming language which is impractical to use for common tasks,
		  due to a lack of features

    Typing: //(0x000000b2)➞
		-weak/strong:
			>the difficulty of converting between types in a programming language is a spectrum ranging from ĐĐstrong typingĐĐ to ĐĐweak typingĐĐ
			>ĐweakĐ is the less difficult end
		-dynamic/static:
			>conversion safety checking/error handling done at runtime is called ĐĐdynamicĐĐ,
			  while performing it at compile time is called ĐĐstaticĐĐ
			>the extend of how much ĐdynamicĐ and ĐstaticĐ typing a language uses also fits on a spectrum
		-gradual:
			>pioneered by facebook
			>type hints are allowed, but not required
			>{ python }
		>since arranging languages in such a spectrum without strict quantities only makes sense in edge cases and in terms of relations,
		  its highly subjective
		{ // Reasonably accurate placing of languages in a matrix representing the typing spectrum
			                    Strong
			                       ▲            Ada 
			                       │                
			                       │     C#         
			                       │       Java     
			        Python         │                
			                SQL    │  Typescript    
			                       │        Haskell 
			Dynamic <──────────────┼───────────────> static
			        PHP            │                
			                 Lua   │         C      
			                       │    C++         
			                       │                
			        Javascript     │                
			                       │                
			        Bash           ▼                
			                     Weak
		}
    

    Paradigms: //(0x000000b3)➞
        >OOP
        >event-driven
        >functional
        OOP: //(0x000000b4)➞
            >"Object Oriented Programming"
            -The 3 pillars of OOP:
                1. Encapsulation
                2. Inheritance
                3. Polymorfism
                >i once knew a man who cla0 // ?!; corrpution, revert from history
            -(un)holy commandments
                >Favour composition over inheritance.
                >Identify the aspects of your application that vary
                  and separate them from what stays the same.
                >Encapsulate what varies.
                >Strive for loose coupling between objects that interact.
                >Program for an interface and not a implementation.
                >Depend on abstractions. Do not depend on concrete classes.
                >Classes should be open for extension, but closed for modification.
                >A class should have only one reason to change.
            horror: // move & categorize ?!
                "The solution was simple and elegant: thanks to polymorphism,\
                  you weren’t coupling the code which called the export method\
                  to concrete classes of nodes.\
                 Unfortunately, the system architect refused to allow you\
                  to alter existing node classes. He said that the code was\
                  already in production and he didn’t want to risk breaking it\
                  because of a potential bug in your changes."


    Whitespace: //(0x000000b5)➞
        -whitespace usually means an arbitrary long combination of the following charcaters:
            ' '
            '\n'    // new line
            '\t'    // tab
            '\v'    // vertical tab
        >NOTE: in some contexts when talking about significant whitespace,
                newlines are not considered
        Insensitive:
            { C language famility; Ada }
            >"does not have significant whitespace"
            >a language is said to be whitespace insensitive
             if whitespace between tokens is arbitrary
            Pros:
                >new and creative ways to make code readable
                >easy to auto generate with tools
            Cons:
                >new and creative ways to make code completelly unreadable
                >easy to create inconsistency, which will be unreadable
                >can result in surprisingly heated arguments
        Sensitive:
            { Python; Yaml; Make; old Fortran }
            >"has significant whitespace"
            >whitespace could be used to denote blocks
            >char columns have special significance
            Pros:
                >project independent familiarity to the eye
            Cons:
                >horrid nightmare to auto generate with tools


	Healthy_stack_of_development_tools: //(0x000000b6)➞
		>build system
		>preprocessor
		>language
		>editor
		>debugger

	Core_functionalities:
		>not all functions are created equal
		>some features are more import-ant for beginners than others
		>with these functionalities stranger languages can be maneuvered without much hassle
		¤template
			-blocks:
				>if
				>while
				>function
			-eval
				>bool conversion
				>arithmetics
			-debugging:
				>stack trace
				>value dumping
			-strings:
				>concatenation
				>find substring
				>replace at location
				>replace all occurrences
				>split by delimiter
			-lists:
				>append
				>remove
				>query size
				>min/max
				>find element
			-I/O:
				>console input
				>console output
				>file into string
			-miscellaneous
				>random number

    Esolang: //(0x000000b7)➞
        >"esoteric programming language"
        >a strange, obscure and unconventional language that is the product creativity
        >not designed with the intent of appealing to the masses
        >tend to be smart turingtarpits

    Memelang: //(0x000000b8)➞
        >a general purpose language which was not intended as a joke, but effectively is one
        >all autists dream of their own language,
          some come out as esolangs,
          many end up as memelangs
        >being referred to as a "C killer" is a strong indicator of a memelang

    What_experiments_in_languages_have_tought_us_so_far:
        Verbosity:
            >too little verbosity is unreadable and unwritable { APL }
            >too much verbosity is unreadbale and unwritable { Java }
        Self_documentation:
            >languages which are good for large projects self document
            -C/C++ headers:
                >lucky accident
                >while header files came to exist because of compiler limitations,
                  they turned out very valuable
                >the header is an explicit specification of a public API of a module
                >reading a header is as convinient as it gets, especially if its commented
                >NOTE: many dislike them, because of the development over head,
                        ignoring the fact how it pays back in documentation;
                        very small projects probabily dont need then in the form
                        they are conventional, there are numerous solutions
                        { https://bis64wqhh3louusbd45iyj76kmn4rzw5ysawyan5bkxwyzihj67c5lid.onion/emil/cexport }
            >operator overloading should strictly be done in a "redirect to function" manner,
              because otherwise it robs us from self-documentation;
              operator-s dont have (universal) names after all,
              and abstract types will have abstract operator-s


    Languages_i_care_little_about: // ?!; presumably move
        GO:
            >"Golang"
            >compiled
            >C inspired
            >reasonably good performace
            >intended for quick development
            >built-in concurrency support
            >NOTE: unused variables result in compile errors,
                    this "feature" alone makes the language borderline unusable,
                    even if the rest is nice
        Brainfuck:
            >famous esoteric turning-tarpit language
            Comments:
                >any non-instruction character
            Buffers:
                >a buffer pointer marks a specific position inside the buffer
                >pointers are initialized to position 0
                >brainfuck requires 2 buffers with pointers running around inside them,
                  similar to regular Turing Machines
                instruction:
                    >code segment
                    >instructions are read from here
                data:
                    >storage segment
                    >all positions are initialized to 0
            Instructions:
                >   : increment the data pointer
                <   : decrement the data pointer
                +   : increment data
                -   : decrement data
                .   : output data
                ,   : input data
                [   : if data == 0 then increment instruction pointer until ']' + 1
                ]   : if data != 0 then decrement instruction pointer until '['
        Lisp:
            >kebab-case by convention
            Comments:
                ; <...>		: single line comment
            (<statement>)
            Statement:
                <function>( <arg>+)
            Dialects:
                Scheme:
                    pass
                Script_fu:
                    >scripting language for GIMP
                    >NOTE: terribly documented; i dont think anyone maintains or anyone alive knows it
                Elisp:
                    >"Emacs LISP"
                    >scripting language for the emacs operating system
        Rust:
            >le C killer
            >shilled endlessly
            -why i dont feel like rust is a good idea:
                ¤compiler
                    >the compile times are horrific
                    >dynamic linking seems to be fucked?
                    >no standard, one compiler
                    -"Any program uses multiple copies of the same\
                      library because the build script does not de-duplicate."
                        >this cant be true, right?
                ¤safety
                    >its not actually safe (https://github.com/Speykious/cve-rs)
                    >safety does not mean no leaks
                    >safety sure as hell does not mean cybersec,
                      because the cargo infrastructure is begging for
                      supply chain attacks
                    >runtime double borrows might as well be a segv-s or double free-s
                ¤development concerns
                    >encoding lifetimes is a large development time overhead
                    -supposedly small edits seems to result in cascading compile errors
                        https://loglog.games/blog/leaving-rust-gamedev/
                        https://yieldcode.blog/post/one-year-of-rust-in-production/
                    >fuck agile, but in most cases a buggy yet working program is better,
                      than one we will be able to compile within the next 2 months
                    >hot reloading seems to be a mess?
                    >the syntax was designed for the compiler and not for humans
                    >the learning curve seems steap (and for what benefit?)



#define patterns: //(0x000000b9)➞\
I-------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------\
I                                                                                     \
I     /$$$$$$$             /$$     /$$                                                \
I    | $$__  $$           | $$    | $$                                                \
I    | $$  \ $$ /$$$$$$  /$$$$$$ /$$$$$$    /$$$$$$   /$$$$$$  /$$$$$$$   /$$$$$$$    \
I    | $$$$$$$/|____  $$|_  $$_/|_  $$_/   /$$__  $$ /$$__  $$| $$__  $$ /$$_____/    \
I    | $$____/  /$$$$$$$  | $$    | $$    | $$$$$$$$| $$  \__/| $$  \ $$|  $$$$$$     \
I    | $$      /$$__  $$  | $$ /$$| $$ /$$| $$_____/| $$      | $$  | $$ \____  $$    \
I    | $$     |  $$$$$$$  |  $$$$/|  $$$$/|  $$$$$$$| $$      | $$  | $$ /$$$$$$$/    \
I    |__/      \_______/   \___/   \___/   \_______/|__/      |__/  |__/|_______/     \
I-------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------I

	YYY:
		"Data structures/Object"

    GIGO: //(0x000000ba)➞
        >"Garbage In Garbage Out"/"RIRO"/"Rubish In Rubish Out"
        >derived from LIFO/FIFO
        >the concept that incorrect input produces incorrect output
        >in practice used to describe behaviour that accepts fauilty input and produces some output without throwing and/or an error



/* control:: //(0x000000bb)➞
  ___         _           _
 / __|___ _ _| |_ _ _ ___| |
| (__/ _ \ ' \  _| '_/ _ \ |
 \___\___/_||_\__|_| \___/_|
 */

    For_loop: //(0x000000bc)➞
        >introduced in B, but no one cares about B, so its attributed to C
        >older laguages only had logical subsets for integers, not arbitrary statements
        >common even outside of the C language family
        >a loop with initialization code, a condition and post loop code
		¤flow chart
		        for(A; B; C){ D } [...]:
		            Yellow( A )
		            Red(    B )
		            Blue(   C )
		            Green(  D )
Yellow(	            +-------------+
		            |      A      |
		            +-------------+ )
		                   |
		                   |
		                   |
		                   |
		                   V
Red(	                   A
		                  / \
		                 /   \
		                /     \)  False
		 +------------>Red(B   )----------+
		 |   Red(       \     /)          |
		 |   Red(        \   / )          |
		 |   Red(         \ /  )          |
		 |   Red(          V   )          |
		 |                 |              |
		 |                 |              |
		 |                 | True         |
		 |                 |              |
		 |                 V              |
		 |  Green(  +-------------+  )    |
		 |  Green(  |      D      |  )    |
		 |  Green(  +-------------+  )    |
		 |                 |              |
		 |                 |              |
		 |                 |              |
		 |                 |              |
		 |                 V              |
		 |  Blue(   +-------------+ )     |
		 +----------Blue(  C      | )     |
		    Blue(   +-------------+ )     |
		                                  |
		                                  |
		                                  |
		                                  |
		                                  |
		            +-------------+       |
		            |    [...]    |<------+
		            +-------------+

	Zahns_construct: //(0x000000bd)➞
		>orignates from a paper of Zahn
		>mainstream languages do not implement it as of 2024
		>abstraction over quiting blocks to avoid goto-s and extra state variables
		>blocks can be exited with in situations, each situation is added as a case at the end of the block
		{ // Zahn's construct in pseudo code
			loop
				until found or missing;
			do
				for i in 1..100 do
					for h in 1..100 do
						if myTable[i, h] = target then
							found;
				missing;
			endloop;
			then
				found:		print "Item was found.";
				missing:	print "Item was not found.";
			end;
		}

    Lambdas: //(0x000000be)➞
        >anonymous function
        >can be passed around, usually by reference
        >the lambda expression "<...-1> -> <...-2>" is pronounced
          "<...-1> becomes <...-2>" or
          "<...-1> for which <...-2>"

	Error_handling: //(0x000000bf)➞
		Return_value_based:
			>if a function encountered an error, it gives back a special value
			Null:
				NULL nullptr None Nill
				>a concrete value reserved for signalling "no value at all"
				>naming originates from the common practice of returning
				  a pointer to the address 0x0 where a heap address is
				  expected, but the operation failed
				>the null value can be easily tested and ideally passed
				  on to functions that except a real value { free(NULL); }
				Object:
					>a null object is a real object instance with its
					  inner state set to some default and all methods
					  performing a no-operations
					>can be passed to any function or otherwise
					  operated on safely without having to check
					  for errors
					>helps readability
					>redundant functions calls will be issued left and right
					>makes sense if error handing would be messy and
					  errors are expected to occur very rarely
		Side_effects:
			>on error, some value is set; usually a global or an extra parameter
			>NOTE: common in C with errno or <mylib>errno
		Exceptions:
			>an ĐĐexceptionĐĐ is an event unwinding the stack until a handler is found
			>the trigerring of an exception is commonly called "throwing" or "raising"
			>the handling of an exception is commonly called "catching"
			>cannot be ignored; while a NULL value returned could go unnoticed until a cryptic crash,
			  an unhandled exeption will crash right at the spot
			>slow
			>best used when errors are unlikely, but important
			{ // Typical exception abstraction
				// the try block marks the scope of a subsequently define handler
				try {
					// This is where the code goes which could possibly throw
					int i = f();	// assume f() should return an int >0
					if (i == 0) {
						// oh no, an error occured, how unexpected
						throw Exception();	// we raise an exception, stack unwiding starts here;
											//  its quite common that languages only allow specific
											//  types to be thrown, which usually has to derive
											//  from a vendor provided Exception class
						print("message");	// execution could never reach this point,
											//  similarly how could after a `return` would
											//  be jumped over too
					}
					print("this only executes if f() suceeded")
				} catch (...) {	// after we threw, excution will continue from here
					;	// we do whatever error handling, e.g. issuing a warning to the user
				} finally {	// additional abstaction over the conventional exception pattern
					;	// this code will execute even if some other segment of the exception
						// block tries to jump in execution (return included)
				}
				; // whatever has happened inside the exception block, execution will continue
				  //  from here (assumining our process is still running)
			}

    Monad: //(0x000000c0)➞
        >"A monad is a monoid in the category of endofunctors." - easy
        >"programmable semicolons"
        >"compile-time variation of the decorator pattern"
        -a ĐĐmonadĐĐ is:
            >a null value
            >logic wrapping the null value
        ¤examples
            >builders are monads
            >decorators can be monads if they have error checking logic
            >C's NULL and "if (myvalue != NULL) { return; }" form a monad
              (truth be told, a very crude version)
            >(modern) haskell is built on the idea of monads and has pure nomadic types
        >the ideal monad is lazily evaluated with no redundant function calls



/* design:: //(0x000000c1)➞
 ___         _
|   \ ___ __(_)__ _ _ _
| |) / -_|_-< / _` | ' \
|___/\___/__/_\__, |_||_|
              |___/
*/

	Regex: //(0x000000c2)➞
        XXX:
            "Grammar/Regular Expressions"
		Compiling:
			>regex strings are compiled into an intermediate form
			  (e.g. non-deterministic finate state machines)
			  which is a computationally expensive operation,
			  however it greatly reduces searching/matching time,
			  paying back after repeated usage
			>compiling is not only a performance decision,
			  it allows the programmer to arbitrary abstract the problem,
			  allowing for much more comprehensible debugging and
			  promoting extendableness
		Macthing:
			>match objects are not bloat
			>even the most minimalistic implementation will require signalling both
			  the position of the match and its width, even if groups and whatnot are to be ignored
Yellow( |      Intermediate       |          Transformation          |        Practical
		|         State           |                                  |         Result
)		  
		                                 I`````````````````````I                     
		       ┌────────┐                I     ĐĐCompileĐĐ     I
		       │"1[01]+"│ -------------> I~~~~~~~~~~~~~~~~~~~~~I
		       └────────┘                I regcomp()           I
		                                 I std::regex::regex() I
		                                 I re.compile()        I
		                                 I.....................I
		                                            |
		           +--------------------------------+
		           |
		           V              
		   ┌────────────────┐            I````````````````````I
		   │ ĐĐRegex TypeĐĐ │ ---------> I    ĐĐMatchingĐĐ    I
		   │────────────────│            I~~~~~~~~~~~~~~~~~~~~I
		   │ regex_t        │            I regexec()          I
		   │ std::regex     │            I std::regex_match() I
		   │ re.Pattern     │            I <regex>.match()    I
		   └────────────────┘            I....................I
		                                            |                     N^^^^^^^^^^^^^^^^N
		                                            +-------------------> N ĐĐMatch TypeĐĐ N
		                                                                  N================N
		                                                                  N regmatch_t     N
		                                                                  N std::smatch    N
		                                                                  N re.Match       N
		                                                                  N::::::::::::::::N
		                                                                           |
		                                                                           +-----------------+-- - - - - - --+
		                                                                           |                 |               |
		                                                                           V                 V               V
		                                                                        .^^^^^^^^^.     .^^^^^^^^^.     .^^^^^^^^^. 
		                                                                       |  Group 0  |   |  Group 1  |   |  Group N  |
		                                                                        '.........'     '.........'     '.........' 






	Singleton: //(0x000000c3)➞
		Image: /*
                 +
					.~~~~~~~~~~~~~.      X
				  .'   ,  .'   :`.''. 
		   +	 .' ; : :  -`.'  :  '.  
				.'   .;-'   ...-`    '.
				|    ._---''          |    +
		X    	|   _)                |
				| .'   .-.,.'.,       |
				| '..-'  . :.  '.     |    
				'.  .      .`'   :   .'
				 '.`` '`--_      :  .'
				  '.      '__     \.'  +
					'~~~~~~~~~~~~~'           X
               X                                   */
			"The Earth in the emptiness of space."
		>"egyke"^HU
		>an object that can have only 1 instance
		>usually accomplished by making the constructor private and
		  adding a special function wrapping construction,
		  checking for other instances
		>unlike a set of globals, it could practice polymorphism
		>unlike a set of globals, it could be lazily eval-ed,
		  freeing a potentially considerable amount of memory when not in use
		>commonly overused / abused in radically OO languages
		>if your singleton keeps returning the same instance, genious job,
		  you manged to recreate a procedural global in OOP
		>if your reasoning for making a singleton is "ugh my application will only need one",
		  consider choosing a new career
        >as a comperasion to how idiotic it is to create a "MainApplication" singleton or
          a "MyMainComponentThatINeedFromBeginingToEndAndCouplingCloselyAnyways",
          if you read the source code of AlbertLauncher you will see that they set a static
          flag whenever main is called so they can conditionally crash if main() were to be
          called recursively; the logic is the same, so might as well go ahead and do that
          from now to forever on; in fact, lets apply that to every function that we assume
          should not be called recursively
		{ // simple singleton example in C++ ; thread safety should considered in the real world; do not replicate at home
			class A{
				static obj_count = 0;
				int i;
				A() {
					this->i = 42;
				}
				~A() {
					--obj_count;
				}
				public:
					A* init(){
						if(obj_count == 0){
							++obj_count;
							return new A;
						}else{
							return nullptr;	// or alternatively, the already created instance
						}
					}
			}
		}




	Access: //(0x000000c4)➞ // Move; ?!
		>when code is protected from being executed or data is protected from being read/written
		  from some code segments
		>usually implemented at compiletime, but runtime checks qualify too
		¤common access levels
			public    - accessible from anywhere {C++, C#}
			private   - accessible only from inside the current class {C++, C#}
			protected - accessible only from inside the current class and its children {C++, C#}
			internal  - accessible from only the current compilation unit / assembly {static in C/C++, C#}
        Opaque:
            >an object whichs every field is private
            >working with opaque types is only possible through member functions
        Getter_setter_situation:
            -getter:
                >a ĐĐgetterĐĐ is a method which takes only the object as a parameter and
                  returns some value which is representitive of the objects inner state
                >may or may not directly correspond to an internal variable
            -setter:
                >a ĐĐsetterĐĐ is a method whichs only purpose is to modifies the inner state of an object
                  based on the passed values
            -language support:
                >the real problem why everyone complains about them is that they are fucking annoying;
                  from quick prototyping you are thrown into a den where you have to implement
                  5 getters and setters or else!
                C#-like:
                    >auto generate trivial setters/getters with quick keywords
                Java-like:
                    >auto generate trivial getters for special record class fields
                Kotlin-like:
                    >allow getter setter functions to pretend to be raw fields;
                      meaning you can change the implementation anytime;
                      most of the time, the api client really doesnt care whether its a function or a value,
                      however theoretically it could lead to footgun situations where values
                      end up all fucked up and hunting down the error is a nightmare
                    >NOTE: best
            { // One morning you decided to write a simple rectangle class:
                class Rect {
                public:
                    int w, h;
                    int area() {
                        return w * h;
                    }
                };
              // After 1 (one) minute of hardword, you decided to publish
              //  rect.hpp as a header only library and go to sleep.
              // Uppon awakening you are greeted with hundreds of angry emails.
              // Here is one of them:
              "Dear (You),"
              "We, at UltraSonicBearTrap Inc., have been using your open source project\
                rect.hpp. Much of our critical infrastructure is dependent on it in fact.\
               However, our new product UltraSonicBearTrap-4670™ runs on our in house\
                architecture: Arch YIKES. On Arch YIKES calculating a product takes\
                approximetly 20 mins. For this reason, we are left no choice, but to\
                store the area and only update it when the sides are updated.\
               Which is something that our code dependent uppon your library is unable to allow.\
               So, with a heavy heart we must let rect.hpp go."
              "P.S. FUCK YOU WE WILL HAVE TO EDIT OVER 1'000'000'000 LINES"
              // Reflecting on your life in a moment of silence you think about what you could
              //  have done differently:
                class Rect {
                    int _w, _h, _area;
                public:
                    void set_w(int w) {
                        _w = w;
                        area = _w * _h;
                    }
                    void set_h(int h) {
                        _h = h;
                        area = _w * _h;
                    }
                    int area() {
                        return _area;
                    }
                };
              // With a setup like this, Rect could have been redefined by the
              //  beartrap crew without having to change any code else where.
              ---
              // From the above tale we can conclude that every class ever
              //  for any reason in any language MUST be opaque.
              // Oh, whats that? Look! Over there! Its a new framework!
              //  Go on now, you better rewrite your frontends in it!
              ---
              // Alright, now that the grifters have left,
              //  lets discuss the anecdote for real.
              // The textbook take-away is:
              //  >accessing fields over getters/setters allow for greater flexibility
              // True. But flexibility is only one aspect of software.
              // It nowhere implies
              //  >private access is king! hail to him!
              // Examine the situation more closely:
              //  >we were making a library
              //  >the library promised to be universal
              //  >the library was used as a founding stone
              // It screams "I HAVE TO BE AS FLEXIBLE AS POSSIBLE".
              // In contrast, at academia or in online education, on day one
              //  you are asked to write a Dog class, with 3 fields and
              //  6 functions, as a sacrifice to Ganesha.
              // Opaqueing types is considered "best practice" (otherwise know as "dogma"),
              //  and questioning how writing 3 times the amount of boiler plate as substance
              //  could possibly be a "best practice".
              // I wont go into details (here), but this pattern seems to apply to the
              //  rest of OOP too.
              // No wonder "OOP is junk" seems to be a new trendy opinion.
              // Notice something else about the short story: its UTTERLY insane.
              // Flexibility is about the number of assumptions taken.
              // Operator* not taking 20 minutes is a considerable safe assumption.
              // The change UltraSonicBearTrap Inc. proposes is gigantic,
              //  yet minimal change is expected from some random piece of code.
              // You should write them an email back right now, saying:
              //  "No, fuck YOU. You should have known to write your own."
              // Like many patterns getters/setters arise from the need to hide complexity.
              // If there is no complexity, they are wastes of bytes.
              // E.g.:
              unique_ptr<map<int, vector<time_t>>> a;
              // Yeah, the next dev in the room does not care about unique_ptr,
              //  he wishes to deal with raws for the life time of the object;
              //  we may also wish to swap out std::vector later on;
              //  it may also turn out that we can get away with unordered_map
              //  or might wanna roll our own implementation.
              // Better hide it!
              int x;
              // Are you fucking high?
              ---
              // Border line is: try not to think about what the best practice is,
              //  but rather imagine the simplest solution then ask
              //  "what problems could come up?".
              // However, in something fundamental (e.g. standard library type
              //  in a low level language boot strapped with asm, used for kernels)
              //  the answer is "everything".
            }




	AGGREGATION: //(0x000000c5)➞
		>when an object contains another object
		Composition: //(0x000000c6)➞
			>when the containing object manages the lifetime of the contained object
			>NOTE: the two lifetimes being tied by any mechanism {stack popping, GC}
			        qualifies as "management"
			>NOTE: in the trenches "composition" could be used to refer to ĐaggregationĐ;
					its considered a minor unclarity outside of documentation
			Inheritance: //(0x000000c7)➞
				>a special case of composition when the parent can access
				  non-public members of the child
				>NOTE: unless polymorphism is explicitly required, composition is
						preferred for lighter encapsulation
        Dependency_injection: //(0x000000c8)➞
            >"DI"
            >when the containing object recieves the contained object from the outside {constructor}
            >often preffered as it decouples the containing and contained classes
            >NOTE: inherently requires pointers (even if implicit)
            >some retards refer to functions in general recieving objects as DI,
              usually in radically OO languages, which, is quite dumb,
              ie. its just "explicit member functions" for them,
              except they will never recognize its a member function
              because there is not syntax support




	Strategy: //(0x000000c9)➞
		Image:
			// ?!; draw
			"The tactitian promoting his pawn to a queen."
		>behaviour is defined as a variable
		>allows for runtime chaning of behaviour
		>can prevent messy and seemingly endless branching
		>can prevent messy inheritance
		>"The Strategy Pattern defines a family of algorithms, encapsulates each one,\
		   and makes them interchangeable.\
		   Strategy lets the algorithm vary independently from clients that use it."
		-usually acheved by:
			>function variables { C/C++: function pointer, Python: class 'function'}
			>composing a polymorphic behaviour class {C++, C#, Java}
		{ @begin=python@
			# Function strategy diagramm in pseudo-python
			def fn(...):     ''  fn =  ─ ┬ ─ ─ > def fn_a(...):                      
				if a:        ''                      ...             
					...      ''          │           return          
					return   ''                                    
				if b:        ''          ├ ─ ─ > def fn_b(...):                                                 
					...      ''                      ...                                       
					return   ''          │           return                                    
                if c:        ''
					...      ''          └ ─ ─ > def fn_c(...): 
					return   ''                      ...        
                             ''                      return     
		@end=python@ }
		{ // Strategy pattern in C with function pointers
			/* @BAKE gcc $@ -o $*.out $(pkg-config --cflags --libs ncurses) && ./$*.out
			 */
			/*  Assume Tyler sends a message to us every 0.5 seconds.
			 *   Depending on our inbox settings we can either take it or block it.
			 *   The logical model of our application is something like this:
			 *
			 *       # User input (Optional)    # Message in
			 *                                        |
			 *                                        V
			 *                                  # Recieving strategy
			 *
			 *   In the mids of simplicity one could associtate to:
			 *
			 *       # User input
			 *            |
			 *            V
			 *       # Action
			 *
			 *   But please try to refrain from it.
			 */
			#include <stdio.h>
			#include <ncurses.h>	// its rather annoying that there is not standard function for *simple* non-blocking input

			signed main() {
				/* Irrelevant */
				initscr();
				cbreak();
				curs_set(0);
				noecho();
				nodelay(stdscr, true);
				scrollok(stdscr, true);
				/* ---------- */
				/* We declare our behaviours, nice and encapsulated.
				 */
				void recieve() {
					addstr("Recieved a message.\n");
				}
				void block() {
					addstr("A message was blocked.\n");
				}

				/* This is where we store the currently selected behaviour
				 */
				void (*strategizing_function)(void) = recieve;

				while (1) {
					/* Whatever our current behaviour is, we just execute it.
						Notice how our user input BELOw is separate from the execution.
						Triggering the correct action requires no extra logic.
						In the wild they would not even be in the same function.
					*/
					strategizing_function();

					/* Allow the user change behaviour at runtime.
					    Here, for any input will just flip it.
					*/
					char c = wgetch(stdscr);
					if (c != EOF) {
						strategizing_function = (strategizing_function == recieve ? block : recieve);
					}

					napms(500);	// Message delay
				}
			}
		}
		{ // Strategy examle in C# with polymorphism;
		  //  NOTE: try running it before reading it
		  //  TODO: ?! somewhere write about how this example highlights the difficulties of not having free functions
			// @BAKE mcs -out:$*.exe $@ && mono $*.exe
			using System;
			using System.Collections.Generic;

			// --- Stratigized behaviour ---
			public interface Operation {
				string description { get; set; }
				ConsoleColor color { get; set; }
				void action();
			}

			public class ToDown : Operation {
				public string description { get; set; }
				public ConsoleColor color { get; set; }
				public void action() {
					int n = Menu.items.FindIndex(o => o.operation == this);
					if (n != Menu.items.Count-1) {
						Menu.swap(n, n+1);
					} else {
						Menu.swap(0, n);
					}
				}
			}
			public class ToUp : Operation {
				public string description { get; set; }
				public ConsoleColor color { get; set; }
				public void action() {
					int n = Menu.items.FindIndex(o => o.operation == this);
					if (n != 0) {
						Menu.swap(n-1, n);
					} else {
						Menu.swap(n, Menu.items.Count-1);
					}
				}
			}
			public class ToTop : Operation {
				public string description { get; set; }
				public ConsoleColor color { get; set; }
				public void action() {
					int n = Menu.items.FindIndex(o => o.operation == this);
					Menu.swap(0, n);
				}
			}

			// --- Root object ---
			public class Item {
				public string name { get; set; }
				public ConsoleColor color { get; set; }
				public Operation operation { get; set; }
			}
			// --- Demo ---
			public class Menu {
				public static List<Item> items = new List<Item>();

				public static void swap(int a, int b) {
					Operation swap = items[a].operation;
					Menu.items[a].operation = Menu.items[b].operation;
					Menu.items[b].operation = swap;
				}

				public static void print() {
					foreach (var item in items) {
						Console.ForegroundColor = item.color;
						Console.WriteLine($"{item.name}:");
						Console.ForegroundColor = item.operation.color;
						Console.WriteLine($"  { item.operation.description}\n");
						Console.ResetColor();
					}
				}

				public static void Main(string[] args) {
					items.Add(new Item { name = "Item 1", color = ConsoleColor.Yellow,
						operation = new ToUp { description = "Move up", color = ConsoleColor.Yellow }
					});
					items.Add(new Item { name = "Item 2", color = ConsoleColor.Green,
						operation = new ToDown { description = "Move down", color = ConsoleColor.Green }
					});
					items.Add(new Item { name = "Item 3", color = ConsoleColor.Blue,
						operation = new ToTop { description = "Move to top", color = ConsoleColor.Blue }
					});

					while (true) {
						print();
						Console.Write("$ ");
						string input = Console.ReadLine();
						if (string.IsNullOrEmpty(input)) continue;
						if (int.TryParse(input, out int number)) {
							if (number > 0 && number <= items.Count) {
								items[number - 1].operation.action();
							}
						}
					}
				}
			}
		}
.		### The strategy pattern is really bad ###
		 For clarity, I would first like to state that I'm specifically refering to what OOP
		depicts as THE strategy pattern. If we restrict our selves to the definition of
		"behaviour as data", procedural function pointers and much of functional programming
		becomes examples to the strategy pattern. Those work pretty well, I take no offense
		to thier existence.
		 On the other hand, if we take a look at the OOP side, its not all so rosy suddenly.
		There seems to be multiple reasons to apply the strategy pattern:
	
			.=======================.
			I Reasons to strategize I
			`=======================`
			   │
			   │  .------------------.    
			   ├──| Trivially needed |    
			   │  |   a new class    |    
			   │  `------------------`    
			   │
			   │  .------------------.
			   └──| Cope for lack of |
		          |  free functions  |
		          `------------------`

		 So, as I was attempting to come up with a simpler example than HFDP's duck hierarchy,
		I kept comming up with concepts that screem "I AM MY OWN CLASS". For example ĐMagicwandĐs
		with engraved behaviour, but then there was no way to gas light the reader that the
		concept we are arriving to is not a ĐSpellĐ. Then as I applied complexity, I realized
		the whole dilemma of this design arrised from being unable to pinpoint the problem
		and not it being inherently harder than say prototyping a function.
		 For the second part I wish you to refer to the previously mentioned duck example.
		However, assuming you are unable to reference the original or dont care enough,
        here is the quick rundown:
			> Your current design contains the following hierarchy
					      ┏━━━━━━━━━━━━━━━━━┓
					      ┃   class Duck    ┃
					      ┣━━━━━━━━━━━━━━━━━┫
					      │ var duckyness;  │
					      │ void quack();   │
					      └─────────────────┘
					       /                \
					      /                  \
					     /                    \
					    /                      \
					   /                        \
					  /                          \
			┏━━━━━━━━━━━━━━━━━━━━┓    ┏━━━━━━━━━━━━━━━━━━━━┓
			┃ class MallardDuck  ┃    ┃ class ReadHeadDuck ┃
			┣━━━━━━━━━━━━━━━━━━━━┫    ┣━━━━━━━━━━━━━━━━━━━━┫
			│ var duckyness;     │    │ var duckyness;     │
			│ void quack();      │    │ void quack();      │
			└────────────────────┘    └────────────────────┘
			> You are asked to add a RubberDuck
			> Oh no! rubber ducks cant quack! they squek
			> After jugling terrible ideas such as a quackable interface implemented by the children,
			   Strategies save the day
	
					                    ┏━━━━━━━━━━━━━━━━━┓                                            ┏━━━━━━━━━━━━━━━━━┓
					                    ┃   class Duck    ┃                                            ┃ interface Quack ┃
					                    ┣━━━━━━━━━━━━━━━━━┫                                            ┣━━━━━━━━━━━━━━━━━┫
					                    │ var duckyness;  │                                            │ void quack();   │
					                    │ var quack;      │                                            └─────────────────┘ 
					                    └─────────────────┘                                            |                 |
					                   /         |         \                                           |                 |
					                  /          |          \                                          |                 |
					                 /           |           \                                         |                 |
					                /            |            \                                        |                 |
					               /             |             \                                       |                 |
					              /              |              \                                      |                 |
			┏━━━━━━━━━━━━━━━━━━━━┓    ┏━━━━━━━━━━━━━━━━━━━━┓     ┏━━━━━━━━━━━━━━━━━━━━┓                |                 |
			┃ class MallardDuck  ┃    ┃ class ReadHeadDuck ┃     ┃ class RubberDuck   ┃          .-----------.     .-----------.
			┣━━━━━━━━━━━━━━━━━━━━┫    ┣━━━━━━━━━━━━━━━━━━━━┫     ┣━━━━━━━━━━━━━━━━━━━━┫         | class Quack |   | class Squek |
			│ var duckyness;     │    │ var duckyness;     │     │ var duckyness;     │          `---,-------`     `-----------`
			│ var quack;         │    │ var quack;         │     │ var quack;         │-  -  -  -  -  -  -  -  -  -  -  -'
			└────────────────────┘    └────────────────────┘     └────────────────────┘              : 
	                   :                         :                                                    
	                   '-  -  -  -  -  -  -  -  -'-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  '
		 Ok, now lets think about this critically. The quack interface describes a single behaviour
		that does not require internal state.
		 We used to have those things actually, they were called functions.
		 Seriously, 2 new classes and 1 additional interface is introduced to describe 2 behaviours.
		Our source got more complex, bloated, dependant -as there are new couplings, never mind how
		close they are-, and more verbose to extend. If thats not a work around I dont know what is.
		 Digging a little further, does Quack look encapsulated to you? Because to me she seems like a
		free use whore prettending to be better than her ancestors under the banner of self-expression,
		but I digress.
		 As a minor note, I would like to poke fun, how without optimizations the ABOVE will be
		oh-so-slightly slower than the procedural equivalent because now we have to instantiate
		quacks amongst other things.
	                       
		 "But Anon, you ignored rockets being strapped to ducks during the simulation,\
		which modifies their fly behaviour" - I hear you say. You are correct.
		This does mean that we will have to change behaviour at runtime.
		Which, again, leaves us with senario 1. Procedurally speaking, having a strategy
		would be a pattern avoiding stragely placed and convoluted logical blocks, but
		to replicate the problem in OOP, you would need a hierarchy of stragely placed
		and convoluted logical blocks, at which point it should be obvious to anyone
		something ĐĐveryĐĐ wrong is going on.
		#



    Mock: //(0x000000ca)➞
        Image: /*
                       ,,
                     !////,
                    !!!////,
                    .|X<////,
                    :\XX<<//
                    :.-'''
                   :.'
                  :.'
                 :.'
                :.'
               :.'
              :.'
             :.'
            :.'         */
            "The broom might not be the best dance partner,\
              but is always available for practice."
        >implementation of an interface
        >simulates desired behaviour
        >used for testing and prototyping
        >can be used to allow for compialation and therefor continue-d work
          while waiting for a proper implementation
        >can be used to simulate unlikely and hard to invoke errors



	Facade: //(0x000000cb)➞
		Image:
			// ?!; draw
			"The funnel that concentrates the input,\
			 for higher throughput."
        >a higher level interface combining one or more lower level interfaces
        >allows for less verbose expression of complex, but common problems
          while not poluting the original low-level code
        {
            >curl Easy interface (https://curl.se/libcurl/c/curl_easy_init.html)
        }




	Proxy: //(0x000000cc)➞
		Image: /*
			+--------------+
			|~  ~_----_    |
			| ~ :_   ##\_  |
			|  ~ o\___   \ |
			|        o'==' |
			|  Yes, Jim!   |
			+--------------+	*/
			"The commentators talking over the race."
		>is a block that takes in an input block and returns a compatible block
		  with an existing functionality extended
		>the interface is not modified
		>for it to make sense, behaviour must be added
		>code relying on the input remains unchanged
		¤useful examples
			>stopper
			>caching
			>restricting access (like a firewall)
		Decorator: //(0x000000cd)➞
			>a proxy which aggregates, but does not compose the proxied class
			>commonly used when multiple layers of proxying is desirable
			-consider the following demented statement from "Head First Design Patterns, 2nd Edition":
				"Q: Can decorators know about the other decorations in the chain? Say I wanted\
				 my getDescription() method to print “Whip, Double Mocha” instead of “Mocha,\
				 Whip, Mocha.” That would require that my outermost decorator know all the\
				 decorators it is wrapping.\
				 A: Decorators are meant to add behavior to the object they wrap. When you need to\
				 peek at multiple layers into the decorator chain, you are starting to push the decorator\
				 beyond its true intent. Nevertheless, such things are possible. Imagine a\
				 CondimentPrettyPrint decorator that parses the final decription and can print “Mocha,"  /* KEY LINE */ "\
				 Whip, Mocha” as “Whip, Double Mocha.” Note that getDescription() could return an\
				 ArrayList of descriptions to make this easier."
				 >while that technically works, parsers are not very nice to maintain,
				   the parser has to assume a lot about the output and
				   performace just got executed with a butter knife
			{ @begin=python@
				#!/bin/python3
				# From scratch example in python for decorators
				# Do NOTE that python also has builtin syntax sugar
				def print_canary():
					print('''   .-.    \n'''
						+ '''  /'v'\   \n'''
						+ ''' (/   \)  \n'''
						+ '''='="="===<\n'''
						+ '''mrf|_|    \n''',
						end=''
						)

				def print_with_yellow(func):
					def wrapper(*args, **kwargs):
						print("\033[33m")
						r = func()
						print("\033[0m")
						return r
					return wrapper

				myBirdFunction = print_canary
				myBirdFunction()
				myBirdFunction = print_with_yellow(print_canary)
				myBirdFunction()
			@end=python@ }
			{
				// @BAKE javac $@ && java $*
				// Java example to the decorator pattern
				class Decorator {
					static
					class Canary {
						private
						String ascii = "   .-.    \n"
									 + "  /'v'\\   \n"
									 + " (/   \\)  \n"
									 + "='=\"=\"===<\n"
									 + "mrf|_|    \n"
									 ;
						public
						void print() {
							System.out.print(ascii);
						}
					}

					static
					class YellowCanary extends Canary {
						public
						void print () {
							System.out.println("\033[33m");
							super.print();
							System.out.println("\033[0m");
						}
					}

					public static
					void main(String[] args) {
						Canary sunny = null;
						sunny = new Canary();
						sunny.print();
						sunny = new YellowCanary();
						sunny.print();
					}
				}
			}



    Template: //(0x000000ce)➞
        Image: /*
                           /\
                          /  \
                         /    \
            .------------------------------.
            |\/--''--''--''--''--''--''--\/|
            |/ .~~~~~~~~~~~~~~~~~~~~~~~~.\ |
            | \|                        | /|
            |/ |                        |\ |
            | \|                        | /|
            |/ |                        |\ |
            | \|                        | /|
            |/ |                        |\ |
            | \'~~~~~~~~~~~~~~~~~~~~~~~~' /|
            |/\''--''--''--''--''--''--''/\|
            '------------------------------'             */
            "The empty frame hanging on the wall;\
              the nail is already there,\
              you just have to find something that fits"
        >an algorithm is written without knowing implementation details
        >the meaning of the operation is know, but the side-effects are not
        { //  Very unhinged C++ template method
            Disaster dead_end(Entity &e) {
                Lung l;
                do {
                    l = e.scream();
                } while (not l);

                return e.next();
            }
        }
        Generics:
            >compile time template-s
            { // C++ min search
                template <typename C>
                auto min(const C &iterable) {
                    auto r = std::begin(iterable);
                    for (auto it = std::begin(iterable); it != std::end(iterable); it++) {
                        if (*it < *r) {
                            r = it;
                        }
                    }
                    return *r;
                }
              // The type of C is irrelevant as long as it can be
              //  iterated (implements the interface) and whatever
              //  it stores implements the '<' operator.
            }




    Adapter: //(0x000000cf)➞
        Image:
            /* _____       +--------------+        ____
             .'     '.    /              /|   ____|    \
            |    U    |  *--------------* |  (____|     `._____
            |         |  |              | |   ____|       _|___
            |  |   |  |  |    Magic     | +  (____|     .'
             '._____.'   |              |/        |____/ 
                         *--------------*   */
            "The magic box that sits between two incompatible interfaces."
        >when an interface is wrapped to be compatible with another
        >NOTE: the adapter pattern is could be a sign of technical dept;
                ask this: are we using an adapter because it makes sense
                           or because we are making cuts?
        ¤use case examples
            -good
                >programming to the abstractions of a library and not the implementation
                >you have a RATIONAL fear of not touching the internal cryptography class
                  of your organization 
                >3th party libraries are being wired together
            -bad
                >Rajeshwar copy pasted his implementation from another project
                >"oh wow, so many LOC, i better not touch anything"
                >writting an adapter-adapter, because the more patterns it has,
                  the better the project gets, right?
        abstract:
            >not adapting to new change or preparing for future change, but embracing on demand change
            >allowing multiple backends
            // NOTE: this graph assumes we define language syntaxes as interfaces;
            //        nothing about the internals of Bison is assumed
                                                   .--------.
                                             ┌───  |  C     |
                                             │     `--------`
                                             │     .--------.
                                             ├───  |  C++   |
                                             │     `--------`
                                             │     .--------.
            +============+     ┏━━━━━━━━━━━┓ ├───  |  D     |
            I Programmer I ─── ┃ DSL Bison ┃ │     `--------`
            *============*     ┣━ ━━ ━━ ━━ ┫ │     .--------.
                               │ internals ├─┴───  |  Java  |
                               └───────────┘       `--------`



	Observer: //(0x000000d0)➞
		Image:
            /*  __________________________ 
               |┌───────────┬────────────┐|
               |│           │  ______    │|
               |│           │ (((((())   │|
               |│  _____    │ /o o |)))  │|
               |│ (.---.)-. │ |/_  |)))  │|
               |│  /:::\ _| │  \,  )'    │|
               |│ '-----' ' │   /00\     │|
               |└───────────┴────────────┘|
                ``````````````````````````  */
		"The meddling crazy old woman accross the street\
		  who keeps calling the authorities."
		  ┏━━━━━━━┓
		 ┏┛       ┗┓               ┌──────────────┐
		┏┛         ┗.------------->│ Subscriber 1 │
		┃ Publisher/┃              └──────────────┘
		┃        *` ┃              ┌──────────────┐
		┃        *---------------->│ Subscriber 2 │
		┃        *. ┃              └──────────────┘
		┗┓         \┛              ┌──────────────┐
		 ┗┓       ┏┛'------------->│ Subscriber 3 │
		  ┗━━━━━━━┛                └──────────────┘
		>hierarchical
		>the ĐĐpublisherĐĐ is an object that has knowledge of some event,
		  a list of subscribers and the responsibility to notify said subscribers
		  if said event occurs
		>the ĐĐsubscriberĐĐ is an arbitrary object or function that should
		  gain execution control if some event has occurred;
          they obviously must share an interface
        >a way to subscribe and unsubscribe must exist; classically using methods
        >subscribers can be added and removed at runtime
		{
			/* The switch            - publisher
			 *  upon being flipped   - event
			 *  will deliver through
			 *  the wire             - subscription
			 *  the info of its      - message
			 *  changed state
			 *  to the lightbulbs    - subscribers
			 *
			 *  NOTE: neither the switch knows what its wired to,
			 *         nor the bulbs;
			 *        they don't have to because they all "know"
			 *        how to interface with the wire
			 */
			Publisher                Subscriber 1                  Subscriber 2
										______                        ______    
			  __   /O                 .'      '.                    .'      '.  
			 b  b / /                |          |                  |          | 
			 'b ^/ /                 |   .--.   |                  |   .--.   | 
			 ' I/ /                  |  {    }  |                  |  {    }  | 
			 ' C_/I                   '. `..` .'                    '. `..` .'  
			 ' I  I                     |_ii_|                        |_ii_|    
			 'P  P                      ;====;                        ;====;    
			 P__P                       ;====;                        ;====;    
			  │                           │                             │
			  └───────────────────────────┴─────────────────────────────┘
			/* An implementation my look something like this:
			*/
			interface ElectronicInput {
				void input(bool state);
			}

			class Bulb : ElectronicInput {
				bool state;
				void input(bool state) { this.state = state; }
			}

			class Switch {
				list<ElectronicInput> subscribers;
				void on(void) {
					for (i : subscribers) {
						i.input(true);
					}
				}
				void off(void) {
					for (i : subscribers) {
						i.input(false);
					}
				}
			}
			/**/
		}
		Signals_and_slots:	// ?!
			>specific implementation of the observer pattern
			>the naming and concept originates from QT



    Command: //(0x000000d1)➞
        >the idea is encapsulating arbitrary code and state to be executed
        >behaviour can be changed at run time
        >somewhat analogious to function pointers
        >suffers the same "duh" problem as the strategy; ?!
        >can act as the poormans RPC
        >can be used to rapidly implement scripting or undo functionality,
          since objects are easy to record and an Command::execute_reverse()
          could accompany any Command::reverse()
        {
            /* We design are designing a
             *  universal remote class.    - invoker
             * We want each button to be
             *  rebindable, keeping that
             *  in mind we create a
             *  generic interface.
             *  This will encapsulate
             *  arbitrary state
             *  required to perform
             *  its purpose.               - command
             * Then something controlable 
             *  comes up with an alien
             *  interface.                 - reciever
             * We can make new classes
             *  to interact with it.       - concrete commands
             * Finally we wrapp it in a
             *  main function that
             *  creates all our objects
             *  and assigns/reassigns
             *  our buttons.               - client
             */
            interface Command {
                void execute(void);
            }

            class UniversalRemote {
                Command button_one;
                Command button_two;
            }
            // ---

            class PartyLights {
                void turn(bool state);
            }

            // NOTE: we dont have state, but we could
            class TurnPartyLightsOn : Command {
                PartyLights light;
                void execute { light.turn(true); }
            }

            class TurnPartyLightsOff : Command {
                PartyLights light;
                void execute { light.turn(false); }
            }
        }
        Active_object:
            >multitasking technique
            >a command queue is maintained
            >commands are added to the queue and executed whenever its their turn
            >protects from hanging



	Migration: //(0x000000d2)➞
        Image:
            // ?!; draw
            "The line of vagoons keeping eachother safe\
              as they move across the desert."
		>an abstraction based on relational databases
		>agile technique
		>basically "how to fix a fucked database"
		>ĐĐa migrationĐĐ is code, which describes how an existing database should be modified
		¤goals
			>painless schema changes
			>preserved data integrity
			>reproducability on other deployments
		>one may "bring up", "apply" or "perform" a migration (to the same effect)
		{@begin=sql@
			-- -- Typical minimalistic migration, slightly modifying the status quo
		    -- new requirements specify that each user can be warned once being banned for good
			ALTER TABLE user ADD COLUMN is_warned BOOLEAN DEFAULT FALSE;
		@end=sql@}
		>NOTE: the migration could be in any language {raw SQL, PHP with factory syntax sugar, Python class hierarchy}
		>since migrations only specify change, they must be run sequentially to get an up-to-date version
		{@begin=sql@
			-- -- Migration demonstrating dependence, this migration would fail without the previous example also being run
		    -- on new years eve reset all warn statuses
			ALTER TABLE user SET is_warned FALSE;
		@end=sql@}
		>they often contain the definition for the opposite action { CREATE table -> DROP table}
		-migrations tend to be stored as individual files with clear sequencing
			{ migrations/
			   ├── 0001_init
			   ├── 0002_add_is_warned_column
			   └── 0003_reset_is_warned_column
			}
		>the current state of migrations is always recorded
			{ // `$ php artisan migrate:status` output from a dummy project
				Migration name ............................................................. Batch / Status
				2014_10_12_000000_create_users_table .............................................. [1] Ran
				2014_10_12_100000_create_password_reset_tokens_table .............................. [1] Ran
				2019_08_19_000000_create_failed_jobs_table ........................................ [1] Ran
				2019_12_14_000001_create_personal_access_tokens_table ............................. [1] Ran
				2023_12_09_145206_init ............................................................ Pending
			}
		>NOTE: (2023) they tend to be abstracted in awfully framework specific ways and be buggy as fuck,
		  with broken drops, corrupted fields and state stalemates; my advice is to only ever touch them
		  lightly and never try looking under the hood; with errors encountered, you are better of 
		  restarting with a clean state
		seeder:
			>a special migration which only deals with adding data




    Factory: //(0x000000d3)➞
        Image: /*
                          __  . .* ,
                        ~#@#%(" .,$ @
                        ."^ ';"
                       ..
                      ;. :             
                      ;==:             
                      ;. :             
                      ;==:_______.                  
                     _;. :   ####:__.               
                   _/o;==:   ####:  :     _____ 
               ___/o/';. ;       :  :__  |     |b.
              (o o/__.'  ;.AA....:..:..   o'''o'''   */
            "The factory, parts go in on a conveyor belt and items come out,\
              but their internals and the assembly is hidden."
        >a central point of logic controlling polymorphic construction
        >the appropriate subclass is deducted from the parameters passed
        >encapsulates subclasses, decoupling it from the code using them
        >a back-swing of the encapsulation inheritence has violated
        Factory_class:
            >dedicated class that is used as a factory
            >in the context OOP this is what "just" factory referes to
            >usually the class name will contain the word Factory
            >NOTE: the concepts of factory function && factory method
                    follow exactly the same logic
        Abstract_factory:
            >"kit"
            >polymorphism applied to factories
            { // Assume we have a platformer game with a tile based map
              // There are solid tiles, jump through tiles and tiles which
              //  get destroyed after a brief period of the player standing on them.
              // Their creation is done by a factory, however, based on the
              //  type of map biome we are on they must act slightly differently.
              //  E.g. different textures, sounds effects, particles and self-destruction times.
                                 ┏━━━━━━━━━━━━━━━━━━━━┓                            
                                 ┃ interface          ┃
                                 ┃ GameTileFactory    ┃                            
                                 ┣━━━━━━━━━━━━━━━━━━━━┫                            
                                 │ tile CreateCube(); │                            
                                 └────────────────────┘                            
                                /                      \                           
                               /                        \                          
                              /                          \                         
                ┏━━━━━━━━━━━━━━━━━━━━━━━━┓   ┏━━━━━━━━━━━━━━━━━━━━━━━━┓  
                ┃ class                  ┃   ┃ class                  ┃
                ┃ ForestLevelTileFactory ┃   ┃ DesertLevelTileFactory ┃
                ┣━━━━━━━━━━━━━━━━━━━━━━━━┫   ┣━━━━━━━━━━━━━━━━━━━━━━━━┫  
                │ tile CreateCube();     │   │ tile CreateCube();     │                            
                └────────────────────────┘   └────────────────────────┘                            
            }




    Visitor: //(0x000000d4)➞
        Image:
            TODO ?!
        {
            class AA : public A {
                void accept(Visitor v) {
                    v.AA();
                }
            };
        }
        >polimorphism/overloading, but weirder
        >we wish to use polymorphism, with methods that can only access public fields;
          this problem has no language support what so ever
        >a Visintor class/interface is created, which has the desired outsider methods
          for our subclasses and a function which calls an accept method which allows
          instances to "chose" which is the correct method
        {
                                    Red(
            foreach e : el {
          x     v.visit(e)          Red(
          │ }                          )
          │
          │                    <-- "Double dispatch"
          │                              | |
          │                              V V
          │    /*==================*/
          │    /*      Visitor     */
          │    /*==================*/               
          └────▶| visit(e){        |              /*============*/
                |   e.accept(this) |x ─ ─ ─ ┐     /*      a     */
                | }                |              /*============*/
                |                  |        ├ ─ ─ ▶| accept(v){ |
                | on_a(e){         |◀─────────────x|   v.on_a() |
                |  (a)e;           |        │      | }          |
                | }                |               +------------+
                |                  |        │                      
                | on_b(e){         |◀────┐        /*============*/
                |  (b)e;           |     │  │     /*      b     */
                | }                |     │        /*============*/
                +------------------+     │  └ ─ ─ ▶| accept(v){ |
                                         └────────x|   v.on_b() |
                                                   | }          |
                                                   +------------+
        }
        >we add 2 redundant function calls to each 1 we actually wanted,
          we add a new interface on which our hierarchy depends on,
          on the process the original hierarchy is modified and
          the new class closely couples with our hierarchy
        >i get the problem, i really do, but this is insanity;
          one of those "self proposed problems"
        -other ways this could be solved:
            >have language support for methods which can only access
              private fields
            >use reflections in some (any) way to figure out the overloading
            >do not employ morons who fuck up everything they touch
        >the cool thing about this is encapsulation, right? we may have
          an {Exporter} visitor which is clearly cut from the base,
          preventing it from getting helplessly bloated,
          however the double dispatch model is the ugliest fucking thing ive seen;
          its clearly a work around over a new sort of problem



    Builder: //(0x000000d5)➞
        Image: /*

                  _______           .````````.
                 |`.     `.        |'. _______`.
                 |˙.|`````|        |'.|        |
         ________|__| [#] |________|__|    op] |___________
        ( \    \    |     |   \    \  |  [oOO] |  \    \   \
         \ \____\___| } : |____\____\_|    \/  |___\____\___\
          \(O   O   |     | O   O   O | ~=     |O   O   O   O)
            ‾‾‾‾‾‾‾‾|#####|‾‾‾‾‾‾‾‾‾‾‾|        |‾‾‾‾‾‾‾‾‾‾‾‾‾      */
        "The production line, you set up your machines then\
          whatever you place onto the belt, it comes out on the other side.\
          Processing is guaranteed, you only need to judge the quality of the end product."
        >a class whichs purpose is to aid contruct object of another class
        >construction is broken up into multiple steps represented as methods
        >the function which finally returns the actual instance is usually called ĐĐ.build()ĐĐ
        >every member which is used for construction returns the builder instance,
          to allow method call chaining
        >construction values not provided by the developer are usually (hopefully)
          set to sensible defaults
        >can be regarded as very primitive DSLs
        >a monad concerned with construction
        >useful when not all construction options are available immidiately,
          as the builder can be used for storing partial options temporaliy
        >may or may not perform extra operations other than calling the constructor
        {
            // The implementation is very boring and obvious,
            //  you can do it youself without further help.
            // Call to a builder:
            Human enemy_wizard = HumanBuilder
                                    // actual constructor call,
                                    //  everything below modifies the object,
                                    //  but the caller doesnt have to know this
                                    // if the values were faulty {negative range {5,1}}
                                    //  the rest would be skipped over by checking
                                    //  for a stored error state
                                    //  and a null value would be returned by build()
                                    .random_level_between(3, 10)
                                    .add_random_n_items(10)
                                    .add_random_armour(ARMOUR_RARE)
                                    .add_random_potion_effect()
                                    // stop returning a reference
                                    // to the builder object
                                    .build()
            ;
            // NOTE: look at how nice and clean it looks;
            //        peak readability, peak editability,
            //        no footguns
        }



    Inversion_of_control: //(0x000000d6)➞
        Image: /* Ruth Ginsberg
                     __
                    /  \
                   / ..|\
                  (_\  |_)
                  /  \@'
                 /     \
            _   /  `   |
            \\/  \  | _\
             \   /_ || \\_
              \____)|_) \_)      
        */
        "The guide dog. He is under your command,\
          yet he is the one leading the way"
        >"IoC"
        >giving 3th party code {framework, DSL, library} control over our application
        -hollywood princaple:
            >"Don't call us, we will call you."
            >catchy reminder to "IoC exists, and if you are using it,\
              dont fuck it up by closely coupling your handlers"
        traditional_sense:
            >the control flow is inverted
            >event or state driven
            { // Flex is inverts the control
                %%
                        /* Subscription to the event of reading 'a';
                         *  we gain control briefly, but then its returned back;
                         */
                a       { ECHO; }
                        /* Whats important to realize is that we have barely any
                         *  fucking clue what lex does between our handlers,
                         *  or, the very least, we dont have to.
                         */
                .|\n    { ; }
                %%
                signed main(void) {
                    /* Actual inversion below.
                     * In this case we explicitly ask for it
                     *  and could do whatever before hand,
                     *  (while untipical in C)
                     *  it would be possible that the framework
                     *  inverts the control by default.
                     */
                    yylex();
                }
                /* Everything relevant to what our program
                 *  ĐĐactuallyĐĐ does is present ABOVE.
                 * Prentend for a second that Lex is an internal tool,
                 *  it still saved us from reading through a bunch of
                 *  insignificant implementation details.
                 */
                 /* Other examples:
                  *     >tbsp
                  *     >libirc
                  *     >browser javascript
                  */
            }
        java_sense:
            >NOTE: alternative meaning that was concieved by OOP and Java
            >the responsibility of creating ancestors is delegated away
            >leverages dependency injection
            >saves you from creating a bunch of objects by hand
            >only comes up when a framework is a cluster-fuck anyways,
              so its safe to call it shit



    Inhonourable_mentions: //(0x000000d7)➞
        >the following are too obvious and or stupid to have their own sections
        Bridge: //(0x000000d8)➞
            +---+                                             +---+
            | a |-.                                         .-| а |
            +---+  '.                                     .'  +---+
                     '.                                 .'
            +---+      '.+-----------+   +-----------+.'      +---+
            | b |--------| interface |---| interface |--------| б |
            +---+      .'+-----------+   +-----------+'.      +---+
                     .'                                 '.
            +---+  .'                                     '.  +---+
            | c |-'                                         '-| в |
            +---+                                             +---+
            >abstraction depends on abstraction
        Monostate: //(0x000000d9)➞
            >two code segments sharing state using references
            -so generic that its meaningless:
                >virtual tables are monostate
                >class static is monostate
                >shared pointer is monostate
                >variable reference is monostate
            >when combined with singleton,
              it is the text-book example of reinventing global state
        State: //(0x000000da)➞
            XXX:
                Automaton
            YYY:
                Flex
            >state automaton applies practically
            >easy to debug
            >easy to visualize
            >easy to understand
            >great for parsing (might be only a component)
            >great for drawing conclusions from many conditionals
        Composite: //(0x000000db)➞
            >NOTE: not to be confused compounds
            >a container that redefines operator-s to apply to all elements
            { @begin=python@
                # Composite in Python/numpy
                import numpy as np
                array = np.array([1.5, 2.7, 3.9, 4.4, 5.8])
                array = array / 2
                print(array) # [0.75 1.35 1.95 2.2  2.9]
                # NOTE: dividing a matrix by a number is formally defined
                #        as dividing each element
            @end=python@ }


/* performance:: //(0x000000dc)➞
 ___          __
| _ \___ _ _ / _|___ _ _ _ __  __ _ _ _  __ ___
|  _/ -_) '_|  _/ _ \ '_| '  \/ _` | ' \/ _/ -_)
|_| \___|_| |_| \___/_| |_|_|_\__,_|_||_\__\___|
*/

    Caching:
        Memoization:
            >argument based caching for pure functions
	

	Multi_processing:
		>strictly outsourced to the kernel
		Thread:
			>abstraction over a physical core
			>can be software emulated by time sharing
			>the number of threads do not depend on the number of cores
			>every thread can access the resources of the main thread
			>each thread has its own stack
		Spinlock:
			{ /* Waiting thread,  |  Waited thread
			   * with spinlock    |
			   */                 |
				while(i) { ; }    |  i = false;
			}

/* compounds:: //(0x000000dd)➞
     _____                                             _
    /  __ \                                           | |
    | /  \/ ___  _ __ ___  _ __   ___  _   _ _ __   __| |___
    | |    / _ \| '_ ` _ \| '_ \ / _ \| | | | '_ \ / _` / __|
    | \__/\ (_) | | | | | | |_) | (_) | |_| | | | | (_| \__ \
     \____/\___/|_| |_| |_| .__/ \___/ \__,_|_| |_|\__,_|___/
                          | |
                          |_|
*/

    >a pattern of patterns

	MVC: //(0x000000de)➞
		>"Model-View-Controller"
		>used for UIs
		{
			Controller (UserInput) {
				switch (UserInput.Type) {
					case A: return ModelA(UserInput.Data);
					case b: return ModelA(UserInput.Data);
					// ...
				}
			}

			ModelA (UserData) {
				ProcessedData = process(UserData);
				return ViewX(ProcessedData);
			}

			ViewX (ProcessedData) {
				return f"I: {ProcessedData.i}, "
				       f"H: {ProcessedData.h};"
			}
		}
				   ┌───────┐
				 .-│ Model │-
			   .'  └───────┘ '.
			   |              |
			   |              |
		   ┌──────┐       ┌────────────┐
		   │ View │       │ Controller │
		   └──────┘       └────────────┘
				 \          /
				  \        /
				   \      /
					\    /
				   +------+
				   | user |
				   +------+


#define structures\
#define data_structures: //(0x000000df)➞\
I--------------------------------------------------------------------------------------------------------------------------\
I--------------------------------------------------------------------------------------------------------------------------\
I--------------------------------------------------------------------------------------------------------------------------\
I     /$$$$$$$              /$$                      /$$$$$$   /$$                                     /$$                 \
I    | $$__  $$            | $$                     /$$__  $$ | $$                                    | $$                 \
I    | $$  \ $$  /$$$$$$  /$$$$$$    /$$$$$$       | $$  \__//$$$$$$    /$$$$$$  /$$   /$$  /$$$$$$$ /$$$$$$   /$$$$$$$    \
I    | $$  | $$ |____  $$|_  $$_/   |____  $$      |  $$$$$$|_  $$_/   /$$__  $$| $$  | $$ /$$_____/|_  $$_/  /$$_____/    \
I    | $$  | $$  /$$$$$$$  | $$      /$$$$$$$       \____  $$ | $$    | $$  \__/| $$  | $$| $$        | $$   |  $$$$$$     \
I    | $$  | $$ /$$__  $$  | $$ /$$ /$$__  $$       /$$  \ $$ | $$ /$$| $$      | $$  | $$| $$        | $$ /$$\____  $$    \
I    | $$$$$$$/|  $$$$$$$  |  $$$$/|  $$$$$$$      |  $$$$$$/ |  $$$$/| $$      |  $$$$$$/|  $$$$$$$  |  $$$$//$$$$$$$/    \
I    |_______/  \_______/   \___/   \_______/       \______/   \___/  |__/       \______/  \_______/   \___/ |_______/     \
I--------------------------------------------------------------------------------------------------------------------------\
I--------------------------------------------------------------------------------------------------------------------------\
I--------------------------------------------------------------------------------------------------------------------------I
	
	>or "containers"
	-from the perspective of size a container can be static or dynamic:
		>awfully loosely used with the generic idea that static means fixed sized and dynamic means resizable
		>while this distinction makes sense from an implementation standpoint (ie. as is, can this structure be
		  resized?) it starts bleeding when looked at as generic attribute
		XXX:
			"../Array"
			"../Vector"
		>it is generally agreed that an array is static-ly sized;
		  a vector is a special type of array which can reallocate itself;
		  therefor some arrays are dynamically sized which contradicts the first statement
		>the reallocatable subcategory array/vector trick can be played with anything

	Array: //(0x000000e0)➞
		>a continuous block of memory holding homogeneous data
		>doesnt know its own size
		>by knowing the address of the first element all other elements become accessible by adding <int> * elem_size to it;
		  NOTE: therefor the first element equals: array head + 0*sizeof(element); this is the main reason for 0 indexing in computer science
		>the address of the first element is sometimes referred to as the ĐĐarray headĐĐ
		¤components
			>array head
			>allocated memory
			>element size
		Pros:
			>const element access time
		Cons:
			>fixed size
			>can be wasteful on space {name field allocated to 128 bytes, while most users will use less then 10}
			>easy to segfault
		>NOTE: while many languages call their versions of lists "arrays", they often implement
				features defying the ABOVE description (bound checking; dynamic resizing),
				there by trashing the mentioned pros and cons
		{ // example in C
			// @COMPILECMD gcc $@ -O0 -nostartfiles -o $*
			int my_array[4] = {0xd, 0xe, 0xa, 0xd};	// notice how i am deliberatly spelling "dead", so you can regocnize the pattern in the object dump

			_start(){
				return my_array[2];
			}
		  // disassembly
			$ objdump -s -j .data -d -j .text e

			e:     file format elf64-x86-64

			Contents of section .text:
			 1000 f30f1efa 554889e5 8b05fa2f 00005dc3  ....UH...../..].
			Contents of section .data:
			 4000 0d000000 0e000000 0a000000 0d000000  ................

			Disassembly of section .text:

			0000000000001000 <_start>:
				1000:       f3 0f 1e fa             endbr64
				1004:       55                      push   %rbp
				1005:       48 89 e5                mov    %rsp,%rbp
				1008:       8b 05 fa 2f 00 00       mov    0x2ffa(%rip),%eax        # 4008 <my_array+0x8>	// +8, which is 2*sizeof(int)
				100e:       5d                      pop    %rbp
				100f:       c3                      ret

			Disassembly of section .data:

			0000000000004000 <my_array>:
				4000:       0d 00 00 00 0e 00 00 00 0a 00 00 00 0d 00 00 00     ................
		}
		+-----------------------------------------------------------------------------------------------------------------------------------------------+
		|                                                                  ĐĐ_MEMORY_ĐĐ                                                                 |
		+-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
		|        Yellow( 0xnnnn0000 )       |        Yellow( 0xnnnn0004 )       |        Yellow( 0xnnnn0008 )       |        Yellow( 0xnnnn000c )       |
		|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|
		| Byte-0 | Byte-1 | Byte-2 | Byte-3 | Byte-0 | Byte-1 | Byte-2 | Byte-3 | Byte-0 | Byte-1 | Byte-2 | Byte-3 | Byte-0 | Byte-1 | Byte-2 | Byte-3 |
		|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|
		| /*         my_array[0]         */ | /*         my_array[1]         */ | /*         my_array[2]         */ | /*         my_array[3]         */ |
		|                13                 |                13                 |                10                 |                13                 |
		+-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
		                  Λ              _                                   __                                 ___                                  __ 
		                  |        ┃    / \                            ┃    /  |                           ┃   /_  |                           ┃    |  \ 
		                  │      ━━╋━━ | \ |                         ━━╋━━  ^| |                         ━━╋━━  / /.                         ━━╋━━  .> | 
		             Array head    ┃    \_/                            ┃     |_|                           ┃   |___|                           ┃    |__/  



	Terminated_array: //(0x000000e1)➞
		>an array where the end of data is marked with a special value
		>the terminating value is most often NULL ('\00')
		>the length doesnt have to be stored, it can always be calculated by reading sequentially and counting the distance to the termination
		>the termination may lay before the last last element allocated for, there by signaling the rest of the elements are not assigned, ie. invalid
		>the most famous example is the C string
		{ // C string example
			// implicitly NULL terminated string
			char my_c_string[4] = "gnu";
			// explicitly NULL terminated string
			char my_c_string[4];
			my_c_string[0] =   'g';
			my_c_string[1] =   'n';
			my_c_string[2] =   'u';
			my_c_string[3] = '\00';
		}
		¤components:
			>array head
			>allocated memory
			>element size
			>terminator
		Pros:
			>saving updating and passing around a length is not required for traversals
		Cons:
			>botching the termination will cause overruns
            >not knowing the lenght without traversal can range from annoying
              to being a performace concern
		+-------------------------------------------------------------------------------------------+
		|                                        ĐĐ_MEMORY_ĐĐ                                       |
		+----------------------+----------------------+----------------------+----------------------+
		| Yellow( 0xnnnn0000 ) | Yellow( 0xnnnn0001 ) | Yellow( 0xnnnn0002 ) | Yellow( 0xnnnn0003 ) |
		|:--------------------:|:--------------------:|:--------------------:|:--------------------:|
		|         Byte-0       |         Byte-1       |         Byte-2       |         Byte-3       |
		|:--------------------:|:--------------------:|:--------------------:|:--------------------:|
		| /* my_c_string[0] */ | /* my_c_string[1] */ | /* my_c_string[2] */ | /* my_c_string[3] */ |
		|          'g'         |          'n'         |          'u'         |        '\00'         |
		+----------------------+----------------------+----------------------+----------------------+
		     Λ              _                      __                    ___ 1 Purple( TERM )    __ 1
		     |        ┃    / \               ┃    /  |              ┃   /_  |1             ┃    |  \1
		     │      ━━╋━━ | \ |            ━━╋━━  ^| |            ━━╋━━  / /.1           ━━╋━━  .> |1
		Array head    ┃    \_/               ┃     |_|              ┃   |___|1             ┃    |__/1
											NOTE: this diagramm dissmisses that on a hardware level
												   the bytes might actually be reversed


	Parallel_Arrays: //(0x000000e2)➞
		>"SoA" (Struct of Arrays)
		>when 2 or more arrays store related data at the same index
		>most often objects are used for tasks parallel arrays could be
		>strangely, not a single language has explicit support for them
		                              +-----------------+-----------------+-----------------+-----------------+
		string array Animal_name      |         "Quoka" |         "Okapi" | "Glyphoglossus" |    "Tsuchinoko" |
		                              +-----------------+-----------------+-----------------+-----------------+
		int array Strangeness_score   |               1 |               1 |               3 |              10 |
		                              +-----------------+-----------------+-----------------+-----------------+
											  + 0                + 1              + 2               + 3
		Pros:
			>ideal data alignment
			>iterating over only one "field" is better for catching
		Cons:
			>without language support, its error prone


	Vector: //(0x000000e3)➞
		>NOTE: not very well defined as a general struct; the given definition is C++ based
		>"dynamic array"
		>an array capable of reallocating itself with a different size
		>stores how much memory is allocated and how many elements are assigned
		-when a new element should be stored but there is insufficient memory allocated:
			1. the vector allocates a new, larger array
			2. copies its data
			3. appends the new element  \_ swapable or can be done concurrently
			3. frees its old array		/
		>the growth on each reallocation is arbitrary
		>for performance its wise to grow with multiple element slots on each reallocation
		>the growth size might not even be const
		¤components
			>array head
			>allocated memory
			>element size
			>size
			>allocator



	Stack: //(0x000000e4)➞
		YYY:
			"Forth" // a stack oriented programming language; https://skilldrick.github.io/easyforth/ | move ?!
		>"verem"^HU
		>FILO (first in last out) container
		>dynamic sized
		>the most recently inserted element of the stack is called the ĐĐtopĐĐ
		>only the ĐtopĐ of the stack can be accessed
		>some stack implementations allow for all elements to be read however this is not required
		>removing the ĐtopĐ is called ĐĐpopĐĐ-ing
		>adding an element and there by making it the new ĐtopĐ is called ĐĐpushĐĐ-ing
		Visualization:
			// Empty stack
			   ┐       ┌	// We have a hole drawn from the side
			   │       │	
			   │       │
			   │       │
			   │       │
			   │       │
			   │       │
			   │       │
			   └───────┘
			// Insertion
						+-----+
				   +--- |  3  |
				   |    +-----+
				   |
				   V
			   ┐       ┌         ┐       ┌  // Now the element with the value of 3 is on top
			   │       │         │       │	// One can read it or take it out
			   │       │         │       │
			   │       │         │       │
			   │       │         │       │
			   │       │   ...   │       │
			   │       │         │+-----+│
			   │       │         │|  3  |│
			   │       │         │+-----+│
			   └───────┘         └───────┘

				// -------

						+-----+
				   +--- |  5  |
				   |    +-----+
				   |
				   V
			   ┐       ┌         ┐       ┌  // Now the element with the value of 5 is on top
			   │       │         │       │	// One can read it or pop it (take it out),
			   │       │         │       │  //   but not cannot remove 3 unless 5 is
			   │       │         │+-----+│	//   removed too beforehand
			   │       │         │|  5  |│
			   │       │   ...   │+-----+│
			   │+-----+│         │+-----+│
			   │|  3  |│         │|  3  |│
			   │+-----+│         │+-----+│
			   └───────┘         └───────┘

				// -------

						+-----+
				   +--- |  1  |
				   |    +-----+
				   |
				   V
			   ┐       ┌         ┐+-----+┌  // The element with the value of 1 is the new top.
			   │       │         │|  1  |│
			   │       │         │+-----+│
			   │+-----+│         │+-----+│
			   │|  5  |│         │|  5  |│
			   │+-----+│   ...   │+-----+│
			   │+-----+│         │+-----+│
			   │|  3  |│         │|  3  |│
			   │+-----+│         │+-----+│
			   └───────┘         └───────┘

			// Removal

					
				   A
				   |
				   |
				   |
			   ┐+-----+┌         ┐       ┌  // The element with the value of 1 is popped. 
			   │|  1  |│         │       │  // 5 becomes the top again
			   │+-----+│         │       │  // NOTE: no other element could have been possibly removed.
			   │+-----+│         │+-----+│
			   │|  5  |│         │|  5  |│
			   │+-----+│   ...   │+-----+│
			   │+-----+│         │+-----+│
			   │|  3  |│         │|  3  |│
			   │+-----+│         │+-----+│
			   └───────┘         └───────┘

			// ------

					
				   A
				   |
				   |
				   |
			   ┐   |   ┌         ┐       ┌  // The element with the value of 5 is popped. 
			   │   |   │         │       │  // 3 becomes the top again
			   │   |   │         │       │  // NOTE: no other element could have been possibly removed.
			   │+-----+│         │       │
			   │|  5  |│         │       │
			   │+-----+│   ...   │       │
			   │+-----+│         │+-----+│
			   │|  3  |│         │|  3  |│
			   │+-----+│         │+-----+│
			   └───────┘         └───────┘

			// Reordering
				// Swap

				1. The top value {1} is copied out and popped

			 Variable-1            Variable-2                    Variable-1            Variable-2
			┏━━━━━━━━━┓           ┏━━━━━━━━━┓                   ┏━━━━━━━━━┓           ┏━━━━━━━━━┓
			┃         ┃           ┃         ┃                   ┃ +-----+ ┃           ┃         ┃
			┃         ┃<----+     ┃         ┃                   ┃ |  1  | ┃           ┃         ┃
			┃         ┃     |     ┃         ┃                   ┃ +-----+ ┃           ┃         ┃
			┗━━━━━━━━━┛     |     ┗━━━━━━━━━┛                   ┗━━━━━━━━━┛           ┗━━━━━━━━━┛
							|                                                                   
						┐+-----+┌                                           ┐       ┌             
						│|  1  |│                                           │       │             
						│+-----+│                                           │       │             
						│+-----+│                                           │+-----+│             
						│|  5  |│                                           │|  5  |│             
						│+-----+│                    ...                    │+-----+│             
						│+-----+│                                           │+-----+│             
						│|  3  |│                                           │|  3  |│             
						│+-----+│                                           │+-----+│             
						└───────┘                                           └───────┘             

				2. The top value {5} (the previous second) is copied out and popped

			 Variable-1            Variable-2                    Variable-1            Variable-2
			┏━━━━━━━━━┓           ┏━━━━━━━━━┓                   ┏━━━━━━━━━┓           ┏━━━━━━━━━┓
			┃ +-----+ ┃           ┃ +-----+ ┃                   ┃ +-----+ ┃           ┃ +-----+ ┃
			┃ |  1  | ┃     +---->┃ |  5  | ┃                   ┃ |  1  | ┃           ┃ |  5  | ┃
			┃ +-----+ ┃     |     ┃ +-----+ ┃                   ┃ +-----+ ┃           ┃ +-----+ ┃
			┗━━━━━━━━━┛     |     ┗━━━━━━━━━┛                   ┗━━━━━━━━━┛           ┗━━━━━━━━━┛
							|                                                                    
						┐   |   ┌                                           ┐       ┌             
						│   |   │                                           │       │             
						│   |   │                                           │       │             
						│+-----+│                                           │       │             
						│|  5  |│                                           │       │             
						│+-----+│                    ...                    │       │             
						│+-----+│                                           │+-----+│             
						│|  3  |│                                           │|  3  |│             
						│+-----+│                                           │+-----+│             
						└───────┘                                           └───────┘             

				3. The old top {1} is inserted back.

			 Variable-1            Variable-2                    Variable-1            Variable-2
			┏━━━━━━━━━┓           ┏━━━━━━━━━┓                   ┏━━━━━━━━━┓           ┏━━━━━━━━━┓
			┃ +-----+ ┃           ┃ +-----+ ┃                   ┃         ┃           ┃ +-----+ ┃
			┃ |  1  | ┃-----+     ┃ |  5  | ┃                   ┃         ┃           ┃ |  5  | ┃
			┃ +-----+ ┃     |     ┃ +-----+ ┃                   ┃         ┃           ┃ +-----+ ┃
			┗━━━━━━━━━┛     |     ┗━━━━━━━━━┛                   ┗━━━━━━━━━┛           ┗━━━━━━━━━┛
							V                                                                    
						┐       ┌                                           ┐       ┌             
						│       │                                           │       │             
						│       │                                           │       │             
						│       │                                           │+-----+│             
						│       │                                           │|  1  |│             
						│       │                    ...                    │+-----+│             
						│+-----+│                                           │+-----+│             
						│|  3  |│                                           │|  3  |│             
						│+-----+│                                           │+-----+│             
						└───────┘                                           └───────┘             

				4. The desired top {5} is inserted back.

			 Variable-1            Variable-2                    Variable-1            Variable-2
			┏━━━━━━━━━┓           ┏━━━━━━━━━┓                   ┏━━━━━━━━━┓           ┏━━━━━━━━━┓
			┃         ┃           ┃ +-----+ ┃                   ┃         ┃           ┃         ┃
			┃         ┃     +-----┃ |  5  | ┃                   ┃         ┃           ┃         ┃
			┃         ┃     |     ┃ +-----+ ┃                   ┃         ┃           ┃         ┃
			┗━━━━━━━━━┛     |     ┗━━━━━━━━━┛                   ┗━━━━━━━━━┛           ┗━━━━━━━━━┛
							V                                                                    
						┐       ┌                                           ┐+-----+┌             
						│       │                                           │|  5  |│             
						│       │                                           │+-----+│             
						│+-----+│                                           │+-----+│             
						│|  1  |│                                           │|  1  |│             
						│+-----+│                    ...                    │+-----+│             
						│+-----+│                                           │+-----+│             
						│|  3  |│                                           │|  3  |│             
						│+-----+│                                           │+-----+│             
						└───────┘                                           └───────┘

				// The process of swapping <int> elements is similar
				NOTE: if you think these drawings look phallic you are both childish and correct

				// Towers of Hanoi
				>ancient puzzle
				Rules:
					>there are 3 rods
					>the first contains <int> amount of disks
					>each disk is smaller in diameter than the one bellow it
					-Goal:
						>moving all disks to the last rod in the same order as they initially are
					-moving:
						>only 1, the top disk of any rod may be lifted and placed to another rod
						>a disk can only be placed (even temporarily) to a larger disk
					>solvable with arbitrary num of disks
					// Initial state of Towers of Hanoi with 4 disks
							  ┌┐                 ┌┐                 ┌┐        
							  ││                 ││                 ││        
							 XXXX                ││                 ││        
							888888               ││                 ││        
						   @@@@@@@@              ││                 ││        
						  ##########             ││                 ││        
						━━━━━━┷┷━━━━━━     ━━━━━━┷┷━━━━━━     ━━━━━━┷┷━━━━━━
				>the rods can be interpreted as stacks
				>each stack must be ordered at all times
				>no outer (swap) memory
				// ?!; solution

	Object: //(0x000000e5)➞
		>soydev faggots have the irritating tendency to call every language having syntax support for
		  objects and inheritance "object oriented" between 2 dilations;
		  which could be an acceptable definition if only they would bother to ever apply any other
		  similar bump sticker {"parallelization oriented"; "event oriented"}
		>a collection of data treated as a single entity
		>the definition of an object (or its blueprint if you will) is called a ĐĐgroupĐĐ
		>a ĐclassĐ is a subtype of a ĐgroupĐ, but is often used interchangeably or in place of "group" out of convenience
		>data complying to the definition of a specific type of object is refered to as an ĐĐinstanceĐĐ
		>a function creating an ĐinstanceĐ of a ĐstructĐ is called a ĐĐconstructorĐĐ
		>a function deleting an ĐinstanceĐ of a ĐstructĐ is called a ĐĐdestructorĐĐ
		{ // Defining an object type which can
		  //  be used to describe quokas
		  //  (which is the worlds cutest animal,
		  //   just so you know)
		  // Using C++.
			struct Quoka {	// specifying that im creating a ĐgroupĐ which is named Qouka
				string name;		// Textual data
				unsigned int age;	// Positive whole number
				bool is_male;		// Binary value describing its sex
			};
		  // Now i have defined how a quoka instance must look like,
		  //  however, nothing has been brought to existence.
		  // I must call a constructor to create a quoka.
		  	Quoka my_quoka();	// creating a quoka named my_quoka;
								//  just C++ syntax stuff get over it
		  // From the machines point of view, this is (roughly) equivalent to
		  //  creating the variables by hand, ie:
		  	string my_quoka_name;
			unsigned int my_quoka_age;
			bool my_quoka_is_male;
		  // In practice, class Quoka specifies how much space to allocate
		  //  for something called a quoka and what (variable) name means what offset
		  // A bit more visually:
		  	Quoka() {
				sub $20, %rsp	// ((assuming)) sizeof(Quoka) == 20
			}
			main() {
				-- %rbp
				Quoka ()
				# {
					string
					  ~ padding
					unsigned
					  ~ padding
					bool
					  ~ padding
				# }
				-- %rsp
			}
		  // It's important to note that usually all variables are allocated
		  //  with the appropriate padding (see processor addressing) to maximize 
		  //  performance, however explicit grouping of variables allow for
		  //  convenient ways to selectively optimize storage
		}
		-a named piece of data of an object is called a ĐĐmember variableĐĐ
			-member variables can (usually be) referred to by the following syntax:
				<object><delimiter><variable>
				{
					Quoka.name		// Examples of this syntax:
										// C
										// C++
										// C#
										// Java
										// Javascript
					Quoka->name		// Examples of this syntax:
										// C pointers
										// C++ pointers
										// PHP
					Quoka["name"]	// Examples of this syntax:
										// Bash
										// Javascript
				}
		>a function which cannot be defined without a ĐgroupĐ is called a ĐĐmember functionĐĐ;
		  the naming comes from the fact that most languages recommend or force such functions
		  to be declared along with the contents of the group;
		  NOTE: this definition could be controversial, but the only one which is free from the
		         limitations of any single syntax
			{ // This is valid and universally accepted member function in C++
				struct Quoka {
					/* code repetition */
					string name;
					unsigned int age;
					bool is_male;
					/**/
					void pet(){}	// dummy function that doesn't actually do anything
				};
			  // C does not allow for functions to be defined inside struct definitions,
			  //  but the following is logically equivalent:
				/* code repetition */
				struct Quoka {
					string name;
					unsigned int age;
					bool is_male;
				};
				/**/
				void pet(Quoka *q){}
			  // NOTE: you must have noticed that we are passing a Quoka explicitly in this version,
			  //        however languages (including C++) tend allow implicit passing of
			  //		the object being referred to to member functions;
			  //		so while the syntax has changed they are perfectly equivalent in practice
			  // Therefore, even tho no C programmer would ever call pet() a member function,
			  //  looking at from the greater scheme of things: it is a member function.
			}
		>the ĐconstructorĐ and the ĐdestructorĐ are Đmember functionsĐ
		>functions which take an object as their first argument (implicitly or explicit-ly) are called ĐĐmethodsĐĐ
		>the ĐdestructorĐ is a ĐmethodĐ
		>Đmember variablesĐ and Đmember functionsĐ are collectively referred to as ĐĐmembersĐĐ
		+-----------------------------------------------+
		|                  MEMBERS                      |
		|                                {is_male}      |
		|   {name}                                      |
		|                          {age}                |
		|    +-------------------------------------+    |
		|    |             FUNCTIONS               |    |
		|    |       {constructor}                 |    |
		|    |    +---------------------------+    |    |
		|    |    |        METHODS            |    |    |
		|    |    |            {destructor}   |    |    |
		|    |    +---------------------------+    |    |
		|    |                                     |    |
		|    +-------------------------------------+    |
		|                                               |
		+-----------------------------------------------+



	Linked_list: //(0x000000e6)➞
		>a web of homogeneous elements where each element holds information regarding the location of other elements
		>elements are called ĐĐnodesĐĐ
		>nodes can be arbitrary scattered in memory
		>the location of the first node is called the ĐĐlist headĐĐ
		>whether the ĐheadĐ is stored implicitly or explicit-ly, doesnt make a difference
		>the location of the last node is called the ĐĐlist tailĐĐ
		>the list tail is rarely stored explicit-ly
		-to signal the end of the list a value with this special meaning is defined:
			>usually const
			-an element pointers value can be used for the task:
				>ĐĐsentinel valueĐĐ
				>if an element points to the sentinel value, it signals that the list is over
				>most often the const memory address 0x0 (almost always given a special alias {NULL, nullptr, nill})
				>all traversal operations will have to compare against this value
			//?!; reorder?
		>the number of times other nodes refer to a node is called its ĐĐin-degreeĐĐ
		>the number of valid node references a node holds is called its ĐĐout-degreeĐĐ
		Pros:
			>const insertion time  \_ NOTE: traversal of element position not calculated in
			>const removal time    /
			>fast over all const insertion at the beginning
		Cons:
			>linearly increasing access time for nodes
		Forward: //(0x000000e7)➞
			>each node knows the location of the next one
			¤definition by degree
				>there is exactly one node with an in-degree of 0 (the first)
				>there is exactly one node with an out-degree of 0 (the last)   // except if cyclical termination is used; ?!
				>all other degrees are 1
			>for the access the <int>th node, first <int>-1 pointers must be traversed
			{ // forward linked list of numbers in C
				struct fil {
					int value;			// actual data
					fil *next = NULL;	// pointer to the memory address of the next element;
										//  takes up the terminating signal as a value by default
				};
			  // method for reading an arbitrary element
			  	int access(fil *e, unsigned int n){
					for(int i = 0; i < n; i++){
						if(this->next == NULL){	// the list was over indexed
							/* Arbitrary error handling */
						}
						e = e->next;
					}
					return e;
				}
			  // recursive method for reading an arbitrary element
			  	int access(fil *e, unsigned int n){							// ?!; NOTE: this is probably the best example ever for recursion; reuse it!
					if(n == 0){
						return this->value;
					}
					if(this->next == NULL){	// the list was over indexed
						/* Arbitrary error handling */
					}

					return access(this->next, n-1);
				}
			  // abstract graph
				0──────0                                                                                                       
				│ Head │ -------------+          +---------+          +---------+          +---------+          +-------------+
				0──────0              |          |         |          |         |          |         |          |             |
									  V          |         V          |         V          |         V          |             V
				/* ADDRESS */   +------------+   |   +------------+   |   +------------+   |   +------------+   |         0────────0
				/*         */   | 0xnnnn38b6 |   |   | 0xnnnn5c02 |   |   | 0xnnnndf84 |   |   | 0xnnnn2a76 |   |         │ 0x0000 │
				/*         */   +------------+   |   +------------+   |   +------------+   |   +------------+   |         0────────0
								| int value: |   |   | int value: |   |   | int value: |   |   | int value: |   |
								|        3   |   |   |        5   |   |   |        1   |   |   |        7   |   |
								|            |   |   |            |   |   |            |   |   |            |   |
								| fil *next: |   |   | fil *next: |   |   | fil *next: |   |   | fil *next: |   |
								| 0xnnnn5c02 |---+   | 0xnnnndf84 |---+   | 0xnnnn2a76 |---+   |       NULL |---+
								|            |       |            |       |            |       |            |
								+------------+       +------------+       +------------+       +------------+
			  // layout in memory
			  	┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
				┃┌──────┐           ┌───────────┐┃
				┃│ Head │-------+   │ my_fil[3] │┃
				┃└──────┘       |   └───────────┘┃
				┃               V          A   | ┃
				┃         ┌───────────┐    |   | ┃
				┃    ?    │ my_fil[0] │    |   | ┃
				┃         └───────────┘    |   | ┃
				┃               |          |   | ┃
				┃┌───────────┐  |     ?    |   | ┃
				┃│ my_fil[1] │<-+          |   ++┃
				┃└───────────┘             |    |┃
				┃      |                   |  ? |┃
				┃      |                 +-+    |┃
				┃      |      ?          |      |┃
				┃      |                 |      |┃
				┃      |           ┌───────────┐|┃
				┃  ?   +---------->│ my_fil[2] │|┃
				┃                  └───────────┘|┃
				┃                               |┃
				┃                      ?        |┃
				┃          ?                    V┃
				┃                        @@@@@@@@┃
				┃                        @ NULL @┃
				┃                        @@@@@@@@┃
				┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
			}
		Doubly: //(0x000000e8)➞
			>each node knows the location of the next and previous one
			>makes backtracking possible {for reverse search}
			¤definition by degree
				>there is exactly one node with an in-degree of 1 (the first)
				>there is exactly one node with an out-degree of 1 (the last)   // except if cyclical termination is used; ?!
				>all other degrees are 2
			{ // doubly linked list of numbers in C
				struct fil {
					int value;			// actual data
					fil *next = NULL;	// pointer to the memory address of the next element;
										//  takes up the terminating signal as a value by default
					fil *prev = NULL;	// pointer to the memory address of the previous element;
										//  takes up the terminating signal as a value by default
				};
			  /* abstract graph */      +----------+           +----------+           +----------+
				0──────0                |          |           |          |           |          |                                                  
				│ Head │ ------------+  |        +----------+  |        +----------+  |        +----------+           +-------------+
				0──────0             |  |        | |        |  |        | |        |  |        | |        |           |             |
									 V  V        | |        V  V        | |        V  V        | |        V           |             V
				/* ADDRESS */   +------------+   | |   +------------+   | |   +------------+   | |   +------------+   |         0────────0
				/*         */   | 0xnnnn38b6 |   | |   | 0xnnnn5c02 |   | |   | 0xnnnndf84 |   | |   | 0xnnnn2a76 |   |         │ 0x0000 │
				/*         */   +------------+   | |   +------------+   | |   +------------+   | |   +------------+   |         0────────0
								| int value: |   | |   | int value: |   | |   | int value: |   | |   | int value: |   |             A
								|        3   |   | |   |        5   |   | |   |        1   |   | |   |        7   |   |             |
								|            |   | |   |            |   | |   |            |   | |   |            |   |             |
								| fil *next: |   | |   | fil *next: |   | |   | fil *next: |   | |   | fil *next: |   |             |
								| 0xnnnn5c02 |---+ |   | 0xnnnndf84 |---+ |   | 0xnnnn2a76 |---+ |   |       NULL |---+             |
								|            |     |   |            |     |   |            |     |   |            |                 |
							+---| fil *prev: |     +---| fil *prev: |     +---| fil *prev: |     +---| fil *prev: |                 |
							|   |       NULL |         | 0xnnnn5c02 |         | 0xnnnn5c02 |         | 0xnnnndf84 |                 |
							|   +------------+         +------------+         +------------+         +------------+                 |
							|                                                                                                       |
							+-------------------------------------------------------------------------------------------------------+
			}
		Chunk_list: //(0x000000e9)➞
			>each node consist of arrays of the data wished to be stored
		Tree: //(0x000000ea)➞
			>the head node is called the ĐĐrootĐĐ
			>terminating node, which points to no valid elements is called a ĐĐleafĐĐ
			>the distance of a node from the root (the number of nodes that must be traversed to access it) is called its ĐĐlevelĐĐ or ĐĐdeptĐĐ;
			  NOTE: the numbering of leaves can be 0 or 1 based; 1 based makes more sense if the head is stored explicit-ly, but
			         both are valid either way; ill use 1 based
			>the distance of a node to the deepest node that can be accessed through it is called its ĐĐheighĐĐ
			>leaves have a height of 0
			>the height of the root is the level of the deepest node (or that -1 if counted from 1)
			>the height of the root is the height of the tree
 			¤formal definition
				>there is exactly one node with in-degree of 0 (the root)
				>all other nodes have in-degree of 1
				>there is exactly one path from the root to any leaf
			{ // graph of generic tree   LEVEL
					 O  Yellow( ROOT )     1.
					/|\
				   / | \
				  o  o  o                  2.
				 /  / \  \
				0  o   0  o                3.
				   |     / \
				   0    0   0              4.
			   NOTE: 0s mark leaves
			  // generic tree with heights                  LEVEL
			                    O "HEIGHT: max(level)-1=3"    1.
			                   / \
			                  /   \
			                 /     \
			    "HEIGHT: 1" o       o "HEIGHT: 2"             2.
			                |      / \
			                0     0   o "HEIGHT: 1"           3.
					     "HEIGHTS: 0" |
									  0                       4.
			}
			>the nodes a node points to are called its ĐĐchildrenĐĐ
			>the node that points to a node is called its ĐĐparentĐĐ
			>ĐparentsĐ point to their ĐchildrenĐ
			>nodes which have the same ĐparentĐ are called ĐĐsiblingsĐĐ
			Binary:
				>each node can have 2 children max
				>children are named ĐĐleft childĐĐ and ĐĐright childĐĐ
				>the tree is ĐĐstrictly binaryĐĐ if each node has either 2 or 0 children
				{
					struct Node{
						int value;
						Node* left = NULL;
						Node* right = NULL;
					}
				}
				{
					O          O            O
				   / \        / \          / \
				  0   0      0   o        /   \
				                / \      o     o
						       0   0    / \   / \ 
									   0   0 0   0
				}
				-the tree is ĐĐfull binaryĐĐ of <int> if:
					>each node on level <int> is a leaf and
					>each node on level <int>-1 has left and right children
				-the tree is ĐĐcomplete binaryĐĐ if:
					>each node on level height-2 has 0 or 2 children and
					>every node on level height-1 has 2 children or only a left child
				-balanced tree:
					>every nodes subtrees height differ by at most 1
				{
					struct Node{
						int value;
						Node* left = NULL;
						Node* right = NULL;
					}
				}
				traversal:
					-the order of the following operations are arbitrarily mixable;
					  they all have an associated char as a short-hand:
						>continue-ing with the left child	'L'
						>continue-ing with the right child  'R'
						>readint the current node			'N'
					+===================+
					I Order I   Name    I
					+===================+
					| LRN   | postorder |
					+-------------------+
					| LNR   | inorder   |
					+-------------------+
					| RLN   | N/A       |
					+-------------------+
					| RNL   | N/A       |
					+-------------------+
					| NLR   | preorder  |
					+-------------------+
					| NRL   | N/A       |
					+-------------------+
					{ // Implementation of inorder traverse
						void traverse(Node* root){	// NOTE: root, as in root the subtree currently traversed
							if(root = NULL){
								return;
							}

							traverse(root->left);
							printf("%d\n", root->value);	// print the value to a new line;
							traverse(root->right);			//  NOTE: printing is an example;
						}									//   a function pointer could have been passed to perform any operation reusing traverse()
					}
				-the tree is ĐĐfull binaryĐĐ of <int> if:
					>each node on level <int> is a leaf
					>each node on level <int>-1 and below has left and right children
				{// full binary tree of 2    |    full binary tree of 3     |    full binary tree of 3    |
				            O                              O                               O
				           / \                            / \                             / \
				          0   0                          /   \                           /   \
				                                        o     o                         /     \
				                                       / \   / \                       /       \
													  0   0 0   0                     o         o   
																					 / \       / \
																					/   \     /   \
																				   0     0   0     0

				}
				-the tree is ĐĐcomplete binaryĐĐ if:
					>each node on level height-2 has 0 or 2 children and
					>every node on level height-1 has 2 children or only a left child
				>the tree is ĐĐorderedĐĐ or other wise called a ĐĐbinary search treeĐĐ if each nodes,
				  left child holds a smaller value than itself and its right child holds a larger value than itself 
				  { // Here the numbers represent the nodes value
				  		   	     8
						   	    / \
						   	   /   \
							  /     \
							 /       \
							3         10   
						   / \         \
						  /   \         \
						 1     6         14
							  / \       /
							 4   7    13
				  }
				Balanced_tree:
					>every nodes subtrees height differ by at most 1
					-balance factor:
						>each node has one
						>calculated so that the tree can be kept balanced
						>height(right_subtree) - height(left_subtree)
						> -1, 0 or 1
					{ // NOTE: <num>f is the nodes balance factor
						  O 1f
						 /
						0  0f
								  O -1f
								 / \
								/   \
							   /     \
							  /       \
					      0f o         o -1f
							/ \       /
						   /   \     /
					   0f o  0f o   0 0f
						 / \   / \
						0   0 0   0
					  0f   0f  0f  0f
					  // unbalanced tree
							O
							 \
							  o
							   \
								o
							   /
							  0
					}



	Hash_table: //(0x000000eb)➞
		Components:
			>bucket array
			>bucket containers
			>hash function
		Hash_function:
			<function> : <set-1> -> range(0, len(<bucket array>))
			>a function which will a valid index inside the bounds of the bucket array to arbitrary input
			>the more evenly it distributes the better
			{ // Using a numbers  with the bucket array length is a very simplistic example of hashing;
			  //  NOTE: the example presumes a table with a bucket array length of 5
				int rem10(int i){
					return i % 5;	// Modulo operator in C
				}
			}
			>a ĐĐperfect hash functionĐĐ maps exactly 1 hash to every element of a set of inputs (NOTE this set ought to be a subset of all inputs)
			>a ĐĐminimal perfect hash functionĐĐ is a Đperfect hash functionĐ that maps the inputs to a dense range of integers of [0,...|S|-1]
		Rehashing:
			>the larger (elements num)/(bucket num) is, the slower operating in the table gets
			>operation speed can be increased by reallocating all data to a new table
			>NOTE: a new hash function is chosen and every element is hashed again
			>the bucket array size usually increased to 2 times its original size
	  	 /* Keys */ |                                                    /* Values */
	  	============+====================================================================================================================
	  	      ┏━━━┓ | 0────────0        ┌─────────────┐        ┌─────────────┐
	  	      ┃ 0.┃ | │ Head-0 │ -----> │ Element-0-0 │ -----> │ Element-0-1 │ -----> NULL
	  	      ┗━━━┛ | 0────────0        └─────────────┘        └─────────────┘                                              
	  	            |                                                                                                      
	  	      ┏━━━┓ | 0────────0        ┌─────────────┐        ┌─────────────┐        ┌─────────────┐        ┌─────────────┐
	  	      ┃ 1.┃ | │ Head-1 │ -----> │ Element-1-0 │ -----> │ Element-1-1 │ -----> │ Element-1-2 │ -----> │ Element-1-3 │ -----> NULL
	  	      ┗━━━┛ | 0────────0        └─────────────┘        └─────────────┘        └─────────────┘        └─────────────┘
	  	            |
	  	      ┏━━━┓ | 0────────0
	  	      ┃ 2.┃ | │ Head-2 │ -----> NULL
	  	      ┗━━━┛ | 0────────0
	  	            |
	  	      ┏━━━┓ | 0────────0        ┌─────────────┐                                            
	  	      ┃ 3.┃ | │ Head-3 │ -----> │ Element-3-0 │ -----> NULL
	  	      ┗━━━┛ | 0────────0        └─────────────┘                                             
	  	            |
	  	      ┏━━━┓ | 0────────0        ┌─────────────┐        ┌─────────────┐        ┌─────────────┐
	  	      ┃ 4.┃ | │ Head-4 │ -----> │ Element-4-0 │ -----> │ Element-4-1 │ -----> │ Element-4-2 │ -----> NULL
	  	      ┗━━━┛ | 0────────0        └─────────────┘        └─────────────┘        └─────────────┘
	  	            |


	Joker_Tao:
		>NOTE: NOT an industry standard


#define algorithms: //(0x000000ec)➞\
I----------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------\
I      /$$$$$$  /$$                               /$$   /$$     /$$                                  \
I     /$$__  $$| $$                              |__/  | $$    | $$                                  \
I    | $$  \ $$| $$  /$$$$$$   /$$$$$$   /$$$$$$  /$$ /$$$$$$  | $$$$$$$  /$$$$$$/$$$$   /$$$$$$$    \
I    | $$$$$$$$| $$ /$$__  $$ /$$__  $$ /$$__  $$| $$|_  $$_/  | $$__  $$| $$_  $$_  $$ /$$_____/    \
I    | $$__  $$| $$| $$  \ $$| $$  \ $$| $$  \__/| $$  | $$    | $$  \ $$| $$ \ $$ \ $$|  $$$$$$     \
I    | $$  | $$| $$| $$  | $$| $$  | $$| $$      | $$  | $$ /$$| $$  | $$| $$ | $$ | $$ \____  $$    \
I    | $$  | $$| $$|  $$$$$$$|  $$$$$$/| $$      | $$  |  $$$$/| $$  | $$| $$ | $$ | $$ /$$$$$$$/    \
I    |__/  |__/|__/ \____  $$ \______/ |__/      |__/   \___/  |__/  |__/|__/ |__/ |__/|_______/     \
I                   /$$  \ $$                                                                        \
I                  |  $$$$$$/                                                                        \
I                   \______/                                                                         \
I----------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------I
		-NOTE:
			>pseudo code is fake and gay, and whats worse: unreadable to everyone
			-all code below is written in C
				>inclusion of <iso646> is always presumed
Purple(			>all code examples BELOW are written in valid Nim |see AT "/Nim")	// redo in C; ?!
			-how nim differs from pseudo code:
				>pass-ing an array of arbitrary size is done with "varargs";
				  just mentally replace it with "array"

		¤Example data used in this chapter
			{ var myArray = @[34, 23, 78, 41, 7, 87, 52, 36, 29, 42] 
			  var myArray2 = @[34, 12, 31, 76, 41, 43, 71, 23, 36, 91, 92, 42]
			  var sortedArray = @[1, 2, 3, 6, 8, 10, 13, 14, 17, 20]
			}
			{ int myArray[] = {34, 23, 78, 41, 7, 87, 52, 36, 29, 42};
			  int myArray2[] = {34, 12, 31, 76, 41, 43, 71, 23, 36, 91, 92, 42};
			  int sortedArray[] = {1, 2, 3, 6, 8, 10, 13, 14, 17, 20};
			}

	Flow_charts: //(0x000000ed)➞
		>diagrammatic representation of an algorithm
		>very useful for visualizing control
		¤struct
			[start][arrow]([step][arrow]*)[end]
		¤components
			flowline		: connects any (with a few exceptions) 2 blocks; one directional; symbolizes control flow;
							   some form of an arrow; multiple flowlines directed to the same [block] shall be
							   intersected beforehand 
			¤[blocks]
				start			: where execution starts; no flowlines lead into it
				end				: where execution terminates; no flowlines lead out of it
				process			: changes some internal state {variable assignment}; a normal instruction;
				logic			: conditional decision; most commonly binary
				input/output	: entering data or displaying data
				function		: jump to predefined process (the start of another flowchart)
		¤symbols
			ANSI_and_ISO:
				start:
					// rounded rectangle
					   ,,,,,,,,,
					 .'         '.
					|    START    |
					 '.         .'
					   ^^^^^^^^^
				end:
					// rounded rectangle
					   ,,,,,,,,,
					 .'         '.
					|     END     |
					 '.         .'
					   ^^^^^^^^^
				process:
					// rectangle
					+-------------+
					|    [...]    |
					+-------------+
				input_or_output:
					// rhomboid
					 --------------
					/    [...]    /
					-------------- 
				logic:
					// rhombus
					   A
					  / \
					 /   \
					/     \
				   | [...] |
					\     /
					 \   /
					  \ /
					   V
				function:
					+-------------+
					| |  [...]  | |
					+-------------+

	Computability: //(0x000000ee)➞
		>a bool property of all problems
		>if a problem could not be decided by any possible algorithm, its said to be incompatible
		>its formally accepted that such, uncomputable program does exist, proven by the Halting problem
		>its the decision problem applied to programming
		Halting_problem:
			>assume bool function HALT('x') can compute whether 'x' is computable or not
			    x       ┌──────────┐       Y/N
			/* In */ -> │   HALT   │ -> /* Out */
						└──────────┘
			>we can construct a machine which depending on the output of HALT, if:
				true  : while(true){}	// run forever
				false : true                                 ┌───┐
			    x       ┌──────────┐       Y/N       ┌───────┘ ∞ │        N      
			/* In */ -> │   HALT   │ -> /* Out */ -> │    LOL    │ -> /* Out */
						└──────────┘                 └───────────┘
			>call this DIAGONAL	// referring to the type of proof it will provide
			            ┏━━━━━━━━━━━━┓
			            ┃  DIAGONAL  ┃
			   x        ┃┌───┐  ┌───┐┃       Y/N
			/* In */ -> ┃│ H │->│ L │┃ -> /* Out */
			            ┃└───┘  └───┘┃
			            ┗━━━━━━━━━━━━┛
			>lets feed it itself
			            ┏━━━━━━━━━━━━┓
			            ┃  DIAGONAL  ┃
			 DIAGONAL   ┃┌───┐  ┌───┐┃        ?
			/* In */ -> ┃│ H │->│ L │┃ -> /* Out */
			            ┃└───┘  └───┘┃
			            ┗━━━━━━━━━━━━┛
			if HALT concludes that DIAGONAL will halt
				 -> HALT returns true
					-> L enters an infinite loop
						-> DIAGONAL never halts
			if HALT concludes that DIAGONAL will not halt
				 -> HALT returns false
					-> L returns false
						-> DIAGONAL did halt
			>in both possibilities HALT is wrong
			>therefor no such HALT can be built that is always correct
			>therefor HALT is impossible
			>therefor there is at least 1 problem that cannot be computed


	Complexity: //(0x000000ef)➞
		Computational:
			>describes how the number of computational steps increase depending on the size of the input
			>doesnt actually tell one "how fast" an algorithm is {linear and sentinel search both have the same complexity}
			Oh_notation:
				>"O notation"
				>classifies worst case computational complexity (maximum steps taken) with const-s ignored
				-Big-Oh:
					if f(n) <= c * g(n); then
						f(n) :=  O(g(n))
				-Little-Oh:
					if f(n) < c * g(n); then
						f(n) :=  o(g(n))
		Classes:
			>set of machines of languages using some model grouped together by their common limit on a specific resource while performing computation
			¤
				P ⊆ NP ⊆ PSPACE ⊆ EXP ⊆ NEXP ⊆ DTIME ⊆ NTIME
			DTIME:
				DTIME(f(n)) :=  { P : P will be solved under O(f(n)) on a deterministic Turing Machine }	//NOTE: recognize the set builder notation
				>"Deterministic TIME"
				>its a function, return-ing sets of languages which can be solved on a Turing machine
				  under the argument function applied to the Big-Oh notation
				>practically the Big-Oh notation interpreted as a set in the context of Turing Machines
				>such f(n) exists, that the result entails all deterministic problems
				>the main use of DTIME() is to define (other) complex-ity class-es with
			P:
				P := Uₖ DTIME(n^k)
				>"Polinominal time"
				>its easiest to tell whether an algorithm is P, by confirming that each of its atomic steps are P
				>"reasonably" solvable problems all belong here; ie. there is an actual strategy
				{ path finding
				  matrix multiplication
				}
			NTIME:
				NTIME(f(n)) :=  { P : P will be solved under O(f(n)) on a non-deterministic Turing Machine }
				>"Non-deterministic TIME"
			NP:
				NP := Uₖ NTIME(n^k)
				>"Nondeterministic Polinominal time"
				>no solving strategy is know; each possible solution must be tried
				>verifying a solution can be done in polynomial time
				>can be solved polinominally on a non-deterministic Turing Machine
				>many algorithms belonging to NP are unsolved problems; there is no formal proof that there is no P solution
				>there is no formal proof that NP is not equal to P
				{ hamiltonian path
				  independent set
				  traveling salesman
				  sodoku
				}
				NP_complete:
					>every language that is an element of NP, to which every other element of NP is polynominal time Karp reducible
					>a solution in P could only exist if P == NP
				NP_hard:
					>a problem at least as hard has the hardest problem in NP (an NP-complete one)
					>if any NP hard problems were to be solved, it would prove that P == NP
					>is not necessary an element of NP
			coNP:            _
				coNP := {L : L ∈ P}
				>not equal to complementer NP
				>could be equal to NP
				if P == NP; then
					coNP == NP == P
				if NP != coNP; then
					P != NP
				{ tautology
				}
			EXP:
				EXP := Uₖ DTIME(2^n^k)
				>"EXPonential time"
			NEXP:
				NEXP := Uₖ NTIME(2^n^k)
				>"Non-deterministic EXPonential time"
			P_VS_NP_problem:
				-is coming up with a solution inherently harder than checking it?
					{ Is composing "Das Wohltemperierte Klavier Book_1" inherently harder, than appreciating it?
					}
				-if P turns out to equal NP:
					>all encryption is out of the window, forever
					>we get the answer to the Ultimate Question of Life, The Universe, and Everything
			DSPACE:
				DSPACE(f(n)) := {P : P always halts on all inputs of length n, using a maximum of f(n) cells on a deterministic Turing Machine}
				DTIME(t(n)) ⊆ DSPACE(t(n))	// because single Tape Turing machine can only access a single cell per step
				>"Deterministic SPACE"
			NSPACE:
				NSPACE(f(n)) := {P : P always halts on all inputs of length n, using a maximum of f(n) cells on a non-deterministic Turing Machine}
				NSPACE(f(n)) ⊆ DSPACE(f(n)²)
				>"Non-deterministic SPACE"
				>NOTE: the maximum of any path, not the maximum of all paths added


	Swap: //(0x000000f0)➞
		>to swap the values of 2 variables another one of is required as a buffer
		>the swap variable holds the value of one variable while its value gets overwritten by the others
			|      NAME      | VALUE |
			//------------------------  Initial state
			  [ VARIABLE 1 ] =   5   ;



			  [ VARIABLE 2 ] =  12   ;



			  [    SWAP    ] =  N/A  ;
			//------------------------  End state and steps
			  [ VARIABLE 1 ] =   5   ; <--.--.
										   \  \
									    II. |  \
									       /    |
			  [ VARIABLE 2 ] =  12   ; <--.     | I.
									       \    |
									   III. |  /
									       /  /
			  [    SWAP    ] =   5   ; <-----'
			//-- Steps Broken Down  --
			//------------------------  Storing the first value for later use
			  [ VARIABLE 1 ] =   5   ; ---.
										   \
											\
											 |
			  [ VARIABLE 2 ] =  12   ;       |
											 |
											/
										   /
			  [    SWAP    ] =   5   ; <--'
			//------------------------  Over writing VARIABLE 1 with VARIABLE 2; now '5' can only be retrieved from SWAP
			  [ VARIABLE 1 ] =  12   ; <--.
										   \
									        |
									       /
			  [ VARIABLE 2 ] =  12   ; ---'
									  
									  
									  
			  [    SWAP    ] =   5   ;
			//------------------------  Over writing VARIABLE 2 with SWAP; the swap is completed; SWAP can be discarded or repurposed
			  [ VARIABLE 1 ] =  12   ;
									  
									  
									  
			  [ VARIABLE 2 ] =  12   ; <--.
									       \
											|
									       /
			  [    SWAP    ] =   5   ; ---'
			
			{ // function
				template<typename T> void swap(T& t1, T& t2){
					T swp = t1;
					t1 = t2;
					t2 = swp;
				}
			  // called as
				swap([a], [b])
			}
        -arithmetic:
            >spares us from using a swap
            >basically only works on ints {floats could loose percision;
              variadic strings may resize; the may Lord save us from attempting this on C strings}
            {
                void swap(int &a, int &b) {
                    a = a + b;
                    b = a - b;
                    a = a - b;
                }
            }



	DATA_STRUCTURE_BASED: //(0x000000f1)➞
		Summary: //(0x000000f2)➞
			>"How much?"
			¤given
				>an array containing <typename> elements
				><typename> has /* calculus, relation, derka derka, fix that first ?!*/
			¤algorithm
			{ // function
				int summary(int* a, int n){
					int sum = 0;
					int i = 0;
					while(i < n){
						sum = sum + a[i];
						++i;
					}
					return sum;
				}
			  // called as
			    summary(myArray, len(myArray))
			  // returns
			    429
			}
		Selection: //(0x000000f3)➞
			>"Which are?"
			>one wants to get (ie. copy) all the elements from an array which has ĐsomeĐ property
			¤given
				>2 arrays containing <typename> elements
				><typename> has /* calculus, relation, derka derka, fix that first ?!; something something logical operator*/
			¤algorithm
			{ proc k(a, b : varargs<int>; n : int) : int =

			}
		Counting: //(0x000000f4)➞
			>"Megszámlálás"^HU
			>"How many?"
			>one wants to know how many elements are in an array which has ĐsomeĐ property
			¤given
				>an arrays containing <typename> elements
				><typename> has /* calculus, relation, derka derka, fix that first ?!; something something logical operator*/
			¤algorithm
			{ proc k(a : varargs<int>; n : int) : int =

			}
		Minmax_selection: //(0x000000f5)➞
			>"Minimum, maxiumum kiválasztás"^HU
			>"Which is?"
			>one wants to know what is the largest/smallest element of an array
			¤given
				>an arrays containing <typename> elements
				><typename> has /* calculus, relation, derka derka, fix that first ?!; something something logical operator*/
			¤algorithm
				1. initialize a variable
					¤type:				same as <typename>
					¤purpose:			to hold the desired value
					¤default value:		one that will return false when tested against any element of the array
										 {if one is looking for the max value, choose a number which will be smaller
										   than any possible value in array;
										   for example:
										 		if you know array contains only positive numbers then -1 will do
												if you know array contains a wide range of values then the smallest possible
													represntable in <typename> is your best bet
												if NaN is a possible value of <typename> and NaN > [value] is always false
													then its always gonna be safe
											}
        Descision: //(0x000000f6)➞
		    >"eldöntés"^HU
			>"Is there?"
			>any
			>just fucking any
		Intersection: //(0x000000f7)➞
			>"Metszet"^HU
			>creation of a set from the common elements of 2 sets
			{ // function
				proc intersection(a : varargs<int>; b : varargs<int>; an : int; bn : int) : seq<int> =
				 var c = newseq<int>()
				 var i = 0
				 while i < an:
				  var h = 0
				  while h < bn:
				   if a[i] == b[h]:
					c.add(a[i])
				   h = h + 1
				  i = i + 1
				 return c
			  // called as
			  	intersection(myArray, myArray2, len(myArray), len(myArray2))
			  // returns
			    @[34, 23, 41, 36, 42]
			}
		Union: //(0x000000f8)➞
			pass
		Merge: //(0x000000f9)➞
			>"Összefutattás"^HU
			pass
		SEARCH: //(0x000000fa)➞
			>NOTE: return-ed values are always 0 indexed
			>algorithms which try to find the index of a value inside an array
			>if the value is not found a value outside of the bounds of the array is return-ed;
			  conventionally this dummy value is -1 in most implementations across languages
			Linear: //(0x000000fb)➞
				>one checks every element until the desired element is found
				>if the desired element is not found a value outside of the bounds of the searched array is return-ed
				{ // function
					proc linearSearch(a : varargs<int>; n : int; q : int) : int =
					 var i = 0
					 while a[i] != q  and i < n:
					  i = i + 1
					 return i
					 // OR
					proc linearSearch(a : varargs<int>; n : int; q : int) : int =
					 for i in countup(0, n):
					  if a[i] == q:
					   return i
					 return -1
				  // called as
					linSrc(myArray, len(myArray), 41)
				  // returns
					3
				}
			Sentinel: //(0x000000fc)➞
				>"strázsás"^HU
				>builds on linear search
				>one adds the desired element to the end of the array; this way the element will always be found before over running the indexes,
				  therefor the bound checking part of the while-s condition can be eliminated
				>for every iteration uses one less comparison
				>adding one element to an array ĐcouldĐ be very costly so not always better than linear search
				{ // function
					proc sentinelSearch(a : var seq<int>, n : int, q : int) : int =
					 a.add(q)
					 var i = 0
					 while a[i] != q:
					  i = i + 1
					 return i
				  // called as
					sentinelSearch(a, len(a), 7)
				  // returns
					4
				}
			Jump: //(0x000000fd)➞
				>alias "block search"
				>ĐĐsorted onlyĐĐ
				>one ĐjumpsĐ ĐblocksĐ of square route of the length of the array;
				  at each position its checked whether that value is larger than the desired one;
				  if so one jumps back (with the same interval) and linear searches until the position from which he jumped back from;
				  if the value is found in the process its return-ed else we know value is not present in the array
				{ // Nim specific notes
					import std/math
				  // function
					proc jumpSearch(a : varargs<int>; n : int; q : int) : int =
					 var j = (int)sqrt((float)n)
					 var i = j - 1
					 while i < n and a[i] < q:
					  i = i + j
					 i = i - j
					 for h in countup(i, i + b):
					  if a[h] == q:
					   return h
					 return -1
				  // called as
					jumpSearch(sortedArray, len(sortedArray), 10)
				  // returns
					5
				}
			Binary: //(0x000000fe)➞
				>ĐĐsorted onlyĐĐ
				>one tests at the middle of the array, this tells him whether the desired value is to the left or the right
				  relative to this halving point (or it is it); one readjusts the searched array to the derived area
				>we create two indexes pointing to the two ends of the array at the start, call them ${left} and ${right};
				  we got another one which always calculated to halve the distance of the first two, call it ${middle}
				  (when this would leave us with a fraction the result is rounded consistently to one way);
				  if the value locate at ${middle} is smaller than our desired value -as the array is ordered-
				  one can be certain that every value bellow it is also smaller therefor only the top half must be further searched,
				  so we readjust ${left} to where ${middle} was + 1 and we recalculate ${middle};
				  in the opposite case .ie ${middle} is larger by the same logic ${right} gets moved to ${middle} - 1 which is recalculated afterwards;
				  this process is continue-d until either ${left} or ${right} doesnt hit the desired value or the two overlap,
				  proving the desired value is not present
				{ // function
					proc binarySrc(a : var seq<int>, n : int, q : int) : int =
					 var l = 0
					 var r = n - 1
					 while l <= r:
					  let i = (int)( (l + r) / 2 )
					  if a[i] < q:
					   l = i + 1
					  elif a[i] > q:
					   r = i - 1
					  else:
					   return i
					 return -1
				  // called as
					binarySearch(sortedArray, len(sortedArray), 6)
				  // returns
					3
				}
			¤Comparison tables
				+------------+------------+
				| Algorithm  | Complexity |
				+------------+------------+
				| Linear     |       O(n) |
				| Sentinel   |       O(n) |
				| Jump       |      O(√n) |
				| Binary     |  O(log(n)) |
				+------------+------------+
            GRAPH: //(0x000000ff)➞
                    // Example graph
                                 ___        ___        ___        ___  
                                /   \      /   \      /   \      /   \
                               |  1  |    | 10  |    |  4  |----|  6  |
                               ,\___/,     \___/     ,\___/      \___/
                             ,ˇ       ˇ,           ,ˇ      
                      ___  ,ˇ           ˇ,  ___  ,ˇ               ___      
                     /   \ˇ               ˇ/   \ˇ                /   \ 
                    |  0  |               |  3  |               |  7  |
                     \___/,               ,\___/,               ,\___/
                           ˇ,           ,ˇ       ˇ,           ,ˇ       
                             ˇ,  ___  ,ˇ           ˇ,  ___  ,ˇ         
                               ˘/   \ˇ               ˘/   \ˇ           
                               |  2  |               |  5  |           
                                \___/                ,\___/,           
                                                   ,ˇ       ˇ,         
                                            ___  ,ˇ           ˇ,  ___  
                                           /   \ˇ               ˘/   \
                                          |  9  |               |  8  |
                                           \___/                 \___/
                    >NOTE: a ĐcostĐ might be associated with each edge
                    ¤common search problems on graphs
                        >find a path between ${A} and ${B}
                        >find the shortest path between ${A} and ${B}
                        >find the lowest cost path between ${A} and ${B}
                        >find node clusters (based on connectivity)
                Random: //(0x00000100)➞
                    >the name does not lie
                    >we randomly go from vertex to vertex
                    >Đdoes it sound like a good idea to you?Đ
                DFS: //(0x00000101)➞
                    >"Dept First Search"
                       I.|  II.|III.| IV.
                               O         
                              / \          │
                             /   \         │
                            /     \        │
                           O       O       │
                          / \     / \      │
                         /   \   /   \     V
                        O     O O     O   
                    >the graph is traversed vertically
                    >a list of previously seen states is kept
                    { // Example traversal based on the example graph
                        0 1 3 4 5
                              6 7
                                8
                                9
                          2
                    }
                BFS: //(0x00000102)➞
                    >"Breath Frist Search"
                             O       I.   <───
                            / \
                           /   \    -----
                          O     O    II.  <───
                         / \   / \  -----
                        O   O O   O  III. <───
                    >the graph is traversed vertically horizontally
                    >a list of previously seen states is kept
                    { // Example traversal based on the example graph
                        0 1
                          2
                            3 4
                              5
                                6
                                7
                                8
                                9
                    }
                ¤Comparison tables
                    +------------+------------+
                    | Algorithm  | Complexity |
                    +------------+------------+
                    | DPS        |     O(V+E) |
                    +------------+------------+
		SORTING: //(0x00000103)➞
			¤Comparison perspectives
				-complexity
				-memory
				-stability
			-NOTE: all explanations will use the following array as an example:
				int myArray[] = {5, 3, 7, 2, 8, 4, 1, 6};
				// Graphical representation
				  Memory before the array    Memory after the array	// both can be pointed to, but neither are accessible
				    |                                   |			// if not needed, they are omitted
				    V                                   V
				  +---+---+---+---+---+---+---+---+---+---+
				  |###| 5 | 3 | 7 | 2 | 8 | 4 | 1 | 6 |###|
				  +---+---+---+---+---+---+---+---+---+---+
			Bubble: //(0x00000104)➞
				>by repeatedly comparing neighbouring element pairs we shift shift the larger values to one side
				>every <int>th run will place the <int>th largest to its correct position, therefor comparisons
				  with that element can be omitted from further runs
				{ // basic function
					void bubbleSort(int a[], const int &n){
						bool swapped;
						do{
							swapped = false;
							int i = 0;
							while(i < n - 2){
								if(a[i] > a[i + 1]){
									swap(a[i], a[i + 1])
									swapped = true;
								}
								i = i + 1;
							}
						}while(swapped);
					}
				  // optimized function
					void bubbleSort(int a[], const int &n){
						bool swapped;
						do{
							swapped = false;
							int i = 0;
							int h = n - 2
							while(i < h){
								if(a[i] > a[i + 1]){
									swap(a[i], a[i + 1])
									swapped = true;
								}
								i = i + 1;
							}
							h = h - 1;
						}while(swapped);
					}
				  // called as
				}
			Cocktail: //(0x00000105)➞
				>bidirectional bubble sort
				>iterates over which side it goes from
				>performs better if elements are close to their final position
				{ // function
					void cocktailSort(int a[], const int &n){
						bool swapped;
						do{
							swapped = false;
							int i = 0;
							while(i < n - 2){
								if(a[i] > a[i + 1]){
									swap(a[i], a[i + 1])
									swapped = true;
								}
								i = i + 1;
							}
							if(not swapped){ break; }
							i = n - 1;
							while(i > 0){
								if(a[i] < a[i - 1]){
									swap(a[i], a[i - 1])
									swapped = true;
								}
								i = i - 1;
							}
						}while(swapped);
					}
				  // called as
				  	cocktailSort(myArray1, lenMyArray1)
				}
			Insertion: //(0x00000106)➞
				>we start from the start of the array and approach to the end
				>for every position we check every 
				{ // function
					void insertionSort(int a[], const int &n){
						int i = 1;
						int j;
						while(i < n){
							j = i - 1;
							while(j > 0 and a[j - 1] > a[j]){
								swap(a[j], a[j - 1])
								j = j - 1;
							}
							i = i + 1;
						}
					}
					// OR
					void improvedInsertionSort(int a[], const int &n){
						int i = 1;
						while(i < n){
							int swap = a[i];
							int j = i - 1;
							while(j >= 0 and a[j] > swap){
									a[j + 1] = a[j];
									j = j - 1;
							}
							a[j + 1] = swap;
							i = i + 1;
						}
					}
					// called as
					insertionSort(myArray1, lenMyArray1)
				}
				¤in practice:
					// WRITE A FUCKING PROGRAM FOR THIS YOU FAGGOT; ?!
					// ### Iteration 1:1 ###
					//  Number of swaps: 0
					//  Number of compares: 0
						     i,j
						      |
						      V
						+---+---+---+---+---+---+---+---+---+
						|###| 5 | 3 | 7 | 2 | 8 | 4 | 1 | 6 |
						+---+---+---+---+---+---+---+---+---+
Green(				  j > 0 ?   No.										)
					// ### Iteration 2:1 ###
					//  Number of swaps: 0
					//  Number of compares: 1
						     j-1 i,j
						      |   |
						      V   V
						+---+---+---+---+---+---+---+---+---+
						|###| 5 | 3 | 7 | 2 | 8 | 4 | 1 | 6 |
						+---+---+---+---+---+---+---+---+---+
Green(				  j > 0 ?   Yes.										)
Green(				  myArray[j] > 0 ?   Yes.										)
			Selection: //(0x00000107)➞
				{ // function
					void selectoinSort(int a[], const int &n){
						int i = 0;
						while(i < n){
							int min = i;
							int j = i + 1;
							while(j < n){
								if(a[j] < a[min]){
									min = j;
								}
								j = j + 1;
							}
							if(min != i){
								swap(a[i], a[min])
							}
							i = i + 1;
						}
					}
				// called as
					selectionSort(myArray1, lenMyArray1)
				}
			Quick: //(0x00000108)➞
				{ // function
					void quickSort(int a[], const int &low, const int &high){
						if(low < high){
							int swap;
							int i = low - 1;
							int j = low;
							while(j < high){
								if(a[j] < a[high]){
									i = i + 1;
									swap(a[i], a[j])
								}
								j = j + 1;
							}
							i = i + 1;
							swap(a[i], a[high])

							quickSort(a, low, i - 1);
							quickSort(a, i + 1, high);
						}
					}
				  // called as
					quickSort(myArray1, 0, lenMyArray1);
				}
			Merge: //(0x00000109)➞
				{ // function
					// easier to understand version
					void mergeSort1(int a[], int b[], const int &low, const int &high){
						if(high - low == 1){ return; }

						const int mid = (low + high) / 2;

						mergeSort1(b, a, low, mid);
						mergeSort1(b, a, mid, high);

						int i = low;
						int j = mid;
						int k = low;
						while(i < mid and j < high){
							if(a[i] < a[j]){
								b[k] = a[i];
								i = i + 1;
							}else{
								b[k] = a[j];
								j = j + 1;
							}
							k++;
						}
						while(i < mid){
							b[k] = a[i];
							i = i + 1;
							k = k + 1;
						}
						while(j < high){
							b[k] = a[j];
							j = j + 1;
							k = k + 1;
						}
					}
					// rework - same idea
					void mergeSort2(int a[], int b[], const int &low, const int &high){
						if(high - low <= 1){ return; }

						const int mid = (low + high) / 2;

						mergeSort2(b, a, low, mid);
						mergeSort2(b, a, mid, high);

						int i = low;
						int j = mid;
						int k = low;
						while(k < high){
							if(i < mid and (j >= high or a[i] <= a[j])){
								b[k] = a[i];
								i = i + 1;
							}else{
								b[k] = a[j];
								j = j + 1;
							}
							k = k + 1;
						}
						return;
					}
				  // called as
				   int arrayToSortTo[] = (int*)malloc(lenMyArray1 * sizeof(int));					// making an array of the same size
				   int i = 0; while(i < lenMyArray1){ arrayToSortTo[i] = myArray1[i]; i = i + 1; }	// copying myArray1 into arrayToSortTo
				   mergeSort(myArray1, arrayToSortTo, 0, lenMyArray1)
				}
			Shell: //(0x0000010a)➞
				{ // function
					void shellSort(int a[], const int &n){
						int i = 0;
						int g;
						while((g = n / pow(2, i + 1) , g > 0)){
							int h = 0;
							while(h < g){
								int j = h;
								while(j < n){
									int swap = a[j];
									int k = j;
									while(k >= g and b[k - g] > swap){
										a[k] = a[k - g];
										k = k - g;
									}
									a[k] = swap;
									j = j + g;
								}
								h = h + 1;
							}
							i = i + 1;
						}
					}
				  // called as
					shellSort(myArray1, lenMyArray1)
				}
			Sleep: //(0x0000010b)➞
				>peak autism
				>the elements are concurrently passed to a function which waits for the specified amount before yield-ing it back some way
				{ // NOTE: this implementation is written in Bash because of its suitableness
				  // script
					#!/bin/bash

					function f() {
						sleep "$1"
						echo "$1"
					}

					while [ -n "$1" ]
					do
						f "$1" & shift
					done
					wait
				  // called as
					./sleep_sort.sh 5 3 6 3 6 3 1 4 7
				}




	Combinatoric: //(0x0000010c)➞
		Permutation: //(0x0000010d)➞
			{ // redo in C!; ?!
				def f(v, s):
					if len(v) == 1:
						print(s + v[0])
						return
					for h in range(len(v)):
						s2 = s + v[h]
						v2 = v.copy()
						del v2[h]
						f(v2, s2)
			}





	COMPRESSION: //(0x0000010e)➞
		Lossless: //(0x0000010f)➞
			>the act of rehousing data to less memory, in such a way that no information is lost
			Huffman_algorithm: //(0x00000110)➞
				>for every symbol in the original data, a new variable length symbol is assigned
				>the more more likely is the usage of an original symbol (ie. the more it is present
				  in the original data) the short-er the assigned symbol will be
				¤process
					1. a list of all array with a corresponding weight is made (where the weight
						is equal to the probability it will be used or the times it is used)
					2. the two lowest weight are get assigned a bit each, then a new weight is
						created with from the sum of them
					3. repeat step 2 until there's a single weight is left
					4. a uniquely identifiable new symbol can be read for every symbol from
						the highest weight towards the original symbol interpreting the bits
						assigned
					>assigning 0/1 corresponding to the lower/higher weight consistently
					  is good practice
					{ "dreamers and the dead"
					  // determining the weights
					   'd': III
					   'r': II
					   'e': IIII
					   'a': III
					   'm': I
					   ' ': III
					   'n': I
					   'd': I
					   't': I
					   'h': I
					  // summing and reordering
					   'e': 4
					   'd': 3
					   'a': 3
					   ' ': 3
					   'r': 2
					   'm': 1
					   'n': 1
					   'd': 1
					   't': 1
					   'h': 1
					  // the 2 lowest are connected (white space is added here so the example may become more legible)
					   'e': 4
					   'd': 3
					   'a': 3
					   ' ': 3
					   'r': 2
					   'm': 1
					   'n': 1
					   'd': 1
					   't': 1 -----.
									\
									 }-----
									/
					   'h': 1 -----^
					  // bits are assigned; 1 to the more likely or the top
					   'e': 4
					   'd': 3
					   'a': 3
					   ' ': 3
					   'r': 2
					   'm': 1
					   'n': 1
					   'd': 1
								1
					   't': 1 -----.
									\
									 }-----
								0   /
					   'h': 1 -----^
					  // the resulting, summed weight is calculated (1+1)
					   'e': 4
					   'd': 3
					   'a': 3
					   ' ': 3
					   'r': 2
					   'm': 1
					   'n': 1
					   'd': 1
								1
					   't': 1 -----.
									\ 
									 }----- 2
								0   /
					   'h': 1 -----^
						// repeat till finished
								1
					   'e': 4 -----.
									\           1
									 }----- 7 ------------------------------------------------------------------------.
								0   /                                                                                  \
					   'd': 3 -----^                                                                                    \
																														 \
																														  }----- 20
								1                                                                                        /
					   'a': 3 -----.                                                                                    /
									\           1                                                                      /
									 }----- 6 -------------------------------------------------.                      /
								0   /                                                           \                    /
					   ' ': 3 -----^                                                             \                  /
																								  \            0   /
																								   }----- 13 -----^
								1			                                                      /
					   'r': 2 -----.                                                             /
									\           1                                               /
									 }----- 3 ---------------------------.                     /
								0   /                                     \                   /
					   'm': 1 -----^                                       \                 /
																			\           0   /
																			 }----- 7 -----^
								1                                           /
					   'n': 1 -----.                                       /
									\           1                         /
									 }----- 2 -----.                     /
								0   /               \                   /
					   'd': 1 -----^                 \                 /
													  \           0   /
													   }----- 4 -----^
								1                     /
					   't': 1 -----.                 /
									\           0   /
									 }----- 2 -----^
								0   /
					   'h': 1 -----^
					   // now the symbol (code) for every symbol (char) can be read from right to left:
					   'e': 11
					   'd': 10
					   'a': 011
					   ' ': 010
					   'r': 0011
					   'm': 0010
					   'n': 00011
					   'd': 00010
					   't': 00001
					   'h': 00000
					}

		Entropy: //(0x00000111)➞
			where p is a set of weighted properties;
			      n is the number of elements in p
			 n
			 Σ  pˇi == 1
			i=1
			   n	
			-( Σ  pˇi * log₂(pˇi) )
			  i=1
			>a measurement of uncertainty
			>you should be embracing entropy
			{ // The entropy of Russian roulette with a revolver which
			  //  has a capacity of 6 an is loaded with a single bullet:
			  -( 1/6 * log₂(1/6)  +  5/6 * log₂(5/6) ) ~= 0.65
			}

	RASTER: //(0x00000112)➞
		Line: //(0x00000113)➞
			DDA: //(0x00000114)➞
				>suffers from float errors
				>on small scales it still looks more orderly than alternatives
                >a step is determined used throughout
				{
					// @COMPILECMD g++ $@ -o $*.out -ggdb $(pkg-config --cflags --libs ncurses)
					#include <sys/param.h>	// MAX()
					#include <math.h>
					#include <ncurses.h>

					typedef struct {
						int y;
						int x;
					} spatial;

					void dda(const char c, const spatial from, const spatial to) {
						const int steps = MAX(abs(to.y - from.y), abs(to.x - from.x));

						struct {
							double y;
							double x;
						} d = {
							.y = (double)from.y,
							.x = (double)from.x,
						};

						for (int i = 0; i < steps+1; i++) {
							mvaddch(round(d.y), round(d.x), c);
							d.y += (double)(to.y - from.y) / (double)steps;
							d.x += (double)(to.x - from.x) / (double)steps;
						}
						return;
					}

					signed main() {
						initscr();
						noecho();
						curs_set(0);

						spatial from = {6,  0};
						spatial to   = {0, 20};
						
						dda('-', from, to);

						refresh();
						while(1){}
						endwin();
						return 0;
					}
				}
			MidPoint: //(0x00000115)➞
				>unlike DDA, it does not use floats
                >closest pixel is determined on a per point basis
				{
					// @COMPILECMD g++ $@ -o $*.out -ggdb $(pkg-config --cflags --libs ncurses)
					#include <sys/param.h>	// MAX()
					#include <math.h>
					#include <ncurses.h>

					typedef struct {
						int y;
						int x;
					} spatial;

					void midpoint(const char c, spatial from, const spatial to) {
						spatial d = {
							.y = abs(to.y - from.y),
							.x = abs(to.x - from.x),
						};
						spatial s = {
							.y = (from.y < to.y) ? 1 : -1,
							.x = (from.x < to.x) ? 1 : -1,
						};

						int direction = (d.x > d.y ? d.x : -d.y) / 2;

						while (true) {
							mvaddch(from.y, from.x, c);

							if (from.x == to.x
							&&  from.y == to.y) {
								break;
							}

							int buffer = direction;
							if (buffer > -d.x) {
								direction += -d.y;
								from.x    +=  s.x;
							}
							if (buffer <  d.y) {
								direction +=  d.x;
								from.y    +=  s.y;
							}
						}
					}

					signed main() {
						initscr();
						noecho();
						curs_set(0);

						spatial from = {6,  0};
						spatial to   = {0, 20};
						
						midpoint('-', from, to);

						refresh();
						while(1){}
						endwin();
						return 0;
					}
				}
		Circle: //(0x00000116)➞
			{
				// @COMPILECMD g++ $@ -o $*.out -Wall -Wpedantic $(pkg-config --cflags --libs sdl2)
				#include <math.h>
				#include <SDL.h>

				SDL_Window*   window;
				SDL_Renderer* renderer;

				void draw_circle_2w(const SDL_Point &p, const int &r){
					const int r2 = r * r;

					for (int y, x = -r; x <= r; x++) {
						y = (int)(round(sqrt(r2 - x*x)));
						SDL_RenderDrawPoint(renderer, p.x + x, p.y + y);
						SDL_RenderDrawPoint(renderer, p.x + x, p.y - y);
					  }
				}

				void draw_circle_4w(const SDL_Point &p, const int &r){
					const int r2 = r * r;

					SDL_RenderDrawPoint(renderer, p.x, p.y + r);
					SDL_RenderDrawPoint(renderer, p.x, p.y - r);
					for (int y, x = 1; x <= r; x++) {
						y = (int)(round(sqrt(r2 - x*x)));
						SDL_RenderDrawPoint(renderer, p.x + x, p.y + y);
						SDL_RenderDrawPoint(renderer, p.x + x, p.y - y);
						SDL_RenderDrawPoint(renderer, p.x - x, p.y + y);
						SDL_RenderDrawPoint(renderer, p.x - x, p.y - y);
					  }
				}

				void draw_circle_8w(const SDL_Point &p, const int &r){
					const int r2 = r * r;

					SDL_RenderDrawPoint(renderer, p.x    , p.y + r);
					SDL_RenderDrawPoint(renderer, p.x    , p.y - r);
					SDL_RenderDrawPoint(renderer, p.x + r, p.y    );
					SDL_RenderDrawPoint(renderer, p.x - r, p.y    );

					for (int x = 1, y = (int)(round(sqrt(r2 - x*x)));
						 x <= y;
						 ++x, y = (int)(round(sqrt(r2 - x*x)))) {
						SDL_RenderDrawPoint(renderer, p.x + x, p.y + y);
						SDL_RenderDrawPoint(renderer, p.x + x, p.y - y);
						SDL_RenderDrawPoint(renderer, p.x - x, p.y + y);
						SDL_RenderDrawPoint(renderer, p.x - x, p.y - y);
						SDL_RenderDrawPoint(renderer, p.x + y, p.y + x);
						SDL_RenderDrawPoint(renderer, p.x + y, p.y - x);
						SDL_RenderDrawPoint(renderer, p.x - y, p.y + x);
						SDL_RenderDrawPoint(renderer, p.x - y, p.y - x);
					}
				}

				void fill_circle_nested(const SDL_Point &p, const int &r){
					for (int i = 0; i < r; i++) {
						draw_circle_8w((SDL_Point){p.x, p.y}, i);
					}
				}

				void fill_circle_2w(const SDL_Point &p, const int &r){
					const int r2 = r * r;

					for (int y, x = -r; x <= r; x++) {
						y = (int)(round(sqrt(r2 - x*x)));
						SDL_RenderDrawLine(renderer, p.x + x, p.y + y, p.x + x, p.y - y);
					  }
				}

				signed main(int argc, char* argv[]) {
					SDL_Init(SDL_INIT_VIDEO);
					window   = SDL_CreateWindow("Circle", 0, 0, 800, 800, SDL_WINDOW_SHOWN);
					renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

					SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
					SDL_RenderClear(renderer);

					SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
					draw_circle_2w(    (SDL_Point){400      , 400 - 210}, 100);
					draw_circle_4w(    (SDL_Point){400      , 400      }, 100);
					draw_circle_8w(    (SDL_Point){400      , 400 + 210}, 100);
					fill_circle_nested((SDL_Point){400 + 210, 400      }, 100);
					fill_circle_2w(    (SDL_Point){400 - 210, 400      }, 100);

					SDL_RenderPresent(renderer);

					while (1) { ; }

					return 0;
				}
			}

    Levenshtein: //(0x00000117)➞
        >string distance metric
        >"the number of edits to produce one text from another"
        >NOTE: commonly misspelled as "Levenstein"
        -associated with fuzzy searching, but not great for it:
            >computationally expensive especially for substrings,
              so it scales badly in interactive systems {user browser history}
            >cannot recognize missing or swapped keywords
            >does not account for common typos {'e' -> 'i'} or fat-fingering
            >for the ABOVE reasons its best as a quick spell checker
        ¤"edit"
            >insertion
            >deletion
            >substitution
        >used for fuzzy search // ?!
        Damerau_levenshtein:
            ¤"edit"
                >insertion
                >deletion
                >substitution
                >adjacent char swapping 


#define cryptography: //(0x00000118)➞\
I-------------------------------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------------------------------\
I      /$$$$$$                                  /$$                                                      /$$                    \
I     /$$__  $$                                | $$                                                     | $$                    \
I    | $$  \__/  /$$$$$$  /$$   /$$  /$$$$$$  /$$$$$$    /$$$$$$   /$$$$$$   /$$$$$$  /$$$$$$   /$$$$$$ | $$$$$$$  /$$   /$$    \
I    | $$       /$$__  $$| $$  | $$ /$$__  $$|_  $$_/   /$$__  $$ /$$__  $$ /$$__  $$|____  $$ /$$__  $$| $$__  $$| $$  | $$    \
I    | $$      | $$  \__/| $$  | $$| $$  \ $$  | $$    | $$  \ $$| $$  \ $$| $$  \__/ /$$$$$$$| $$  \ $$| $$  \ $$| $$  | $$    \
I    | $$    $$| $$      | $$  | $$| $$  | $$  | $$ /$$| $$  | $$| $$  | $$| $$      /$$__  $$| $$  | $$| $$  | $$| $$  | $$    \
I    |  $$$$$$/| $$      |  $$$$$$$| $$$$$$$/  |  $$$$/|  $$$$$$/|  $$$$$$$| $$     |  $$$$$$$| $$$$$$$/| $$  | $$|  $$$$$$$    \
I     \______/ |__/       \____  $$| $$____/    \___/   \______/  \____  $$|__/      \_______/| $$____/ |__/  |__/ \____  $$    \
I                         /$$  | $$| $$                           /$$  \ $$                   | $$                 /$$  | $$    \
I                        |  $$$$$$/| $$                          |  $$$$$$/                   | $$                |  $$$$$$/    \
I                         \______/ |__/                           \______/                    |__/                 \______/     \
I-------------------------------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------------------------------I

	>science of encryption

#define classical_cryptography:: //(0x00000119)➞\
	 _____ _               _           _  \
	/  __ \ |             (_)         | | \
	| /  \/ | __ _ ___ ___ _  ___ __ _| | \
	| |   | |/ _` / __/ __| |/ __/ _` | | \
	| \__/\ | (_| \__ \__ \ | (_| (_| | | \
	 \____/_|\__,_|___/___/_|\___\__,_|_|

	>ĐĐclassical cryptographyĐĐ roughly means "pre-computer" cryptography
	>all of the BELOW methods are "trivially" brute forceable one way or another
	  with minimal computational power

	Statistical_decryption: //(0x0000011a)➞
		>the encoding must be known
		>statistical methods are used to deduct the most common tokens (letters/words/word segments)

	Monoalphabetic_systems: //(0x0000011b)➞
		>each token has a single substitute
		Casear: //(0x0000011c)➞
			{
			  Open alphabet  | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |
			-----------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
			 Closed alphabet | v | w | x | y | z | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u |	// alpha + 5
			// E.g
				Casear("absent", 5) -> "vwnzio"
			}
			>the same alphabet is used for I/O
			>each letter is mapped to another letter
			>ancient roman technique
			>the historical method is to shift the alphabet by an int (looping it around)
			Keyword_variant:
				>a keyword is inserted at the start of the alphabet
				>the keyword must not contain any letter multiple times {or just leave out said repetitions}
				{
				  Open alphabet  | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |
				-----------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
				 Closed alphabet | s | y | m | b | o | l | a | c | d | e | f | g | h | i | j | k | n | p | q | r | t | u | v | w | x | z |	// alpha + "symbol"
				// E.g
					Casear_vk("absent", "symbol") -> "syqoir"
				}
		Polybios: //(0x0000011d)➞
			>anchient greek
			>the alphabet is placed in a grid
			>conventionally the grid has an equal amount of rows and columns
			>the greek alphabet has 25 letters (5^2)
			>if the len(alphabet) cannot be squarerooted, its either extended {with ',', '.' symbols}
			  or multiple letters are merged {'i'/'j' traditionally; 'v'/'u'}
			>the coordinates are read and combined into a 2 digit number
			>the coordiate rading can be done in arbitrary directions as long as its consistent;
			  column first is conventional
			>a keyword can be added to make decryption harder even if the methodology is known
			{ // standard polybious cypher
				   | 1 | 2 | 3 | 4 | 5 |
				---+---+---+---+---+---+
				 1 |'a' 'b' 'c' 'd' 'e' 
				---+   +   +   +   +   +
				 2 |'f' 'g' 'h'"i/j"'k'
				---+   +   +   +   +   +
				 3 |'l' 'm' 'n' 'o' 'p'
				---+   +   +   +   +   +
				 4 |'q' 'r' 's' 't' 'u'
				---+   +   +   +   +   +
				 5 |'v' 'w' 'x' 'y' 'z'
				---+   +   +   +   +   +
			  // in practice
			  volatile -> 15 43 13 11 44 41 13 51 // the extra punctuation is just for readability
			  // the keyword "serbia" was added
				   | 1 | 2 | 3 | 4 | 5 |
				---+---+---+---+---+---+
				 1 |'s' 'e' 'r' 'b'"i/j"
				---+   +   +   +   +   +
				 2 |'a' 'c' 'd' 'f' 'g'
				---+   +   +   +   +   +
				 3 |'h' 'k' 'l' 'm' 'n'
				---+   +   +   +   +   +
				 4 |'o' 'p' 'q' 't' 'u'
				---+   +   +   +   +   +
				 5 |'v' 'w' 'x' 'y' 'z'
				---+   +   +   +   +   +
			  // in practice
			  volatile -> 15 14 33 12 44 51 33 21
			}

	Polyalphabetic_systems: //(0x0000011e)➞
		>a single token has multiple substitutes
		Vigenere:
			>each letter in the keyword represents an offset in the Casear cypther
			-to effectively decrypt it, one need a ĐĐtabula rectaĐĐ (along side with the code and keyword of course):
				###| a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |
				---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
				 a |'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 
				 b |'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 
				 c |'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 
				 d |'d' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 
				 e |'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 
				 f |'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 
				 g |'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 
				 h |'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 
				 i |'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 
				 j |'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 
				 k |'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 
				 l |'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 
				 m |'m' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 
				 n |'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 
				 o |'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 
				 p |'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 
				 q |'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 
				 r |'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 
				 s |'s' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 
				 t |'t' 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 
				 u |'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 
				 v |'v' 'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 
				 w |'w' 'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 
				 x |'x' 'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 
				 y |'y' 'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 
				 z |'z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 
			{ // Example to working with the Vigenere
				let ${keyword} be "internet"
				let ${message} be "The kiwi is flightless."
				We lay the keyword over the message repeatedly:
				"int erne ti nternetint."
				"The kiwi is flightless."
				We look up each index.
				E.g column 'i', row 'T' becomes 'b'.
				-> "bux ozjm ba semxuxlmfl"
			}


#define modern_cryptography:: //(0x0000011f)➞\
	___  ___          _                  \
	|  \/  |         | |                 \
	| .  . | ___   __| | ___ _ __ _ __   \
	| |\/| |/ _ \ / _` |/ _ \ '__| '_ \  \
	| |  | | (_) | (_| |  __/ |  | | | | \
	\_|  |_/\___/ \__,_|\___|_|  |_| |_| \

	YYY:
		GPG

	>"post-classical cryptography"
	-(in general) ĐveryĐ hard to crack with computers, to quote the GPG FAQ:
		"                                                                                     \
		Can any of the ciphers in GnuPG be brute-forced?                                      \
		                                                                                      \
		No.                                                                                   \
		The laws of physics require that a certain amount of heat be used in computation.     \
		This is a consequence of the Second Law of Thermodynamics,                            \
		and may not be violated under our current understanding of the laws of physics.       \
		Further, physics requires that a certain amount of time be used in computation.       \
		This is a consequence of the Heisenberg Uncertainty Principle,                        \
		and may not be violated under our current understanding of the laws of physics.       \
		Using these two principles (the Landauer bound and the Margolus–Levitin limit),       \
		we can determine quite accurately how much heat would be released by a computer       \
		that brute-forced a 128-bit cipher. The results are profoundly silly:                 \
		it’s enough to boil the oceans and leave the planet as a charred, smoking ruin.       \
		This is not to say that GnuPG cannot be successfully attacked.                        \
		It is only to say that none of the ciphers in GnuPG are susceptible to brute-forcing. \
		"
		>NOTE: notice the word ĐcurrentĐ. Quantum-computers are theorized to have the potential
				to be able to decrypt with much less resources burned through.
				However, as of 2024, quantum computation is apparently in a state that is compare
				to electricity in the 19th century.
				Regardles, so called "post-quantum cryptography" is already being developed.
	>relies on one way conversions { I taught of a number, its modulo 10 is 3; you will not be able to figure it out }
	  and or NP-hard problems with special cases, etc.
	>a ĐĐblock cypherĐĐ is an algorithm that encrypts a fixed sized message
	  (if you have a longer message, you gotta feed it in segments)



	BRIEF_CASE_METAPHORE: //(0x00000120)➞
		>Alice wishes to send a package to Bob over mail
		>Alice and Bob have a constitutional right for their packages not to be opened
		>if this is violated they can get away jail free
		>the wish to make sure the Glowies cant peak inside without notice to later on
		  reverse engineer evidence for an uncomming swapping
		>so anyways, they wish to know their briefcase of crack in safety
		{ // They do not share key to a common lock (yet)
		  // They should not post keys in the open.
              ,=,                                                             _        
             |( )|     ┌───┐                                                 ( )       
             .- -.    ┏┷━━━┷┓                                               .---.      
            |     |   ┃ XXX ┃                                              |     |     
             Alice    ┗━━━━━┛                                                Bob       
          // What Alice can do is to get a padlock and place it on the handle
          //  and send it over to Bob.
              ,=,                                                             _        
             |( )|  F                                             ┌#──┐      ( )       
             .- -.  O                                            ┏┷━━━┷┓    .---.      
            |     |                                              ┃ XXX ┃   |     |     
             Alice                                               ┗━━━━━┛     Bob       
          // Bob can obviously not open Alices's padlock,
          //  but we can do is place on his own and send it back.
              ,=,                                                             _        
             |( )|  F  ┌#─@┐                                             E   ( )       
             .- -.  O ┏┷━━━┷┓                                            O  .---.      
            |     |   ┃ XXX ┃                                              |     |     
             Alice    ┗━━━━━┛                                                Bob       
          // Alice takes of her padlock and yet again sends the package to Bob.
              ,=,                                                             _        
             |( )|  F                                             ┌──@┐  E   ( )       
             .- -.  O                                            ┏┷━━━┷┓ O  .---.      
            |     |                                              ┃ XXX ┃   |     |     
             Alice  #                                            ┗━━━━━┛     Bob       
          // Since the only padlock on the brief case is Bob's on,
          //  and the briefcase was never transported without a padlock on,
          //  Bob can open it with confidence.
			   _            
		  E   ( )        ┌───┐ 
		  O  .---.      ┏┷━━━┷┓
			|     | XXX ┃     ┃
		  @   Bob       ┗━━━━━┛
		  // NOTE: "Alice" and "Bob" are the de facto example names used in cryptography,
		  //       along side with "Eve" (after `eavesdropper`) trying to listen on them 
		}



	SYMMETRIC: //(0x00000121)➞
		>there is only one key
		                   .--.            
			┌─────┐       /.-. '----------.       ┌─────┐
			│ Msg │       \'-' .--"--""-"-'       │ A#! │
			│     │        '--'                   │ @i- │
			│     │ <---------------------------> │ g\? │
			└─────┘             key               └─────┘
		>the key, for convenience, is usually a passphase
		Diffie_Hellman_Merkle:
			>relies on the discrete logarithm problem
			>commonly explained in terms of mixing pains,
			  assuming deducting the input colors is hard
			{
					,=,           |        Public Space        |            _        
				   |( )|          |         │Yellow()│         |           ( )       
				   .- -.                    │Yellow()│                    .---.      
				  |     | a=4     |        .└────────┘.        |     b=3 |     |     
				   Alice                .-' {p=23;g=5} '-.                 Bob
				│Red(###)│        |  .-'                  '-.  |        │Blue(##)│
			+---│Red(###)│        .-'                        '-.        │Blue(##)│---+
			|   └────────┘     .-'|                            |'-.     └────────┘   |
			|        .      .-'                                    '-.      .        |
			|        |   .-'      |                            |      '-.   |        |
			|        |.-'                                                '-.|        |
			|        | A=5⁴%23    |                            |    B=5³%23 |        |
			|        V  =4                                           =10    V        |
			|   │Purple()│----....|                            |....----│Green(#)│   |
			|   └────────┘        ''''----....      ....----''''        └────────┘   |
			|                     |      ....-''''''-....      |                     |
			|                ....----''''                ''''----....                |
			+-->│XXX##XXX│<''     |                            |     ''>│XXX##XXX│<--+
				└────────┘                                              └────────┘
					  s=10⁴%23    |                            |    s=4³%23=18
					   =18        |                            |
			}
			>NOTE: not a concrete algorithm; its protocol-ĐishĐ
			elliptic_curves:
                YYY:
                    https://curves.xargs.org/
                    https://www.rareskills.io/post/elliptic-curves-finite-fields
                    https://www.youtube.com/watch?v=nybVFJVXbww
			    >"ECC(ryptography)" 
                    y² = x³ + ax + b
				>drop-in replacement for the regular discrete logarithm problem
				>harder to compute, therefor shorter key sizes yield the same security
				>based on point multiplication on the surface of an elliptic curve
				>adding a point to itself on an elliptic(!) curve will result in only one point
				>the NSA has choosen "recommended" curves to use, for that exact reason,
				  most people dont trust them (and rightfully so, as it turns out,
                  it is mathematically proven that a backdoor could exist,
                  a cryptographical master-key basically)
				private key - ${N}th power of the generator point
				public  key - coordinates of corresponding to the private key
                /* The two possible generic shapes for elliptic curves. */
                  ▲ y                             ▲ y              .'  
                  │                 ..'           │               .' 
                  │               .'              │     ..     ..' 
                  │   ...      .-'                │   .'  ''--' 
                  │ .'   '.  .'                   │  |
                  │ '.   .'  '.                   │   '.  ..--. 
                  │   ```      '-.                │     ``     ''. 
                  │               '.              │               '. 
                  │                 ''.           │                ',
                  ┼──────────────────────▶ x      ┼──────────────────────▶ x 
                finite_field_math: // ?!
                    𝔽  := "field"; set where +, -, * and / are defined
                    𝔽ₚ := finite field over 'p'
                    The elements of 𝔽ₚ are {0..'p'-1, O}.
                    -${a} := 'p' - ${a}
                    ${a} + ${b} := (${a}  +  ${b}) % 'p'
                    ${a} - ${b} := (${a}  + -${b}) % 'p'
                    ${a} * ${b} := (${a}  *  ${b}) % 'p'
                    prime:
                        ${a} * ${a}⁻¹ == 1
                        >if 'p' is a prime ${a}⁻¹ always exists for ${a} > 0
                        ${a} / ${b} := ${a} * ${b}⁻¹ % 'p'
                        √${a} * √${a} == ${a}
		DES: //(0x00000122)➞
			>"Data Encryption Standard"
			>depricated
			>64 bit Đblock cypherĐ
			>the key size is 64 bits
			>out of every key byte, 1 is for parity checking, leaving an effective key of 56
			>enctyption and decryption is done with the same algorithm
			{
						   64 bits of                         64 bit Key
							plantext                              |
							   |                                  |
							   V                                  |
						┌──────────────┐                          |
						│   Initial    │                          |
						│ Permutation  │                          |
						└──────────────┘                          V
			left 32 bits |            | right 32 bits    ┌─────────────────┐
						 V  ┌──────┐<-|------------------│ key Permutation │
						 ⊕<-│ fn f │<-+                  └─────────────────┘
						 |  └──────┘  |                           |
						 '-.        .-'                           |
							'-.__.-'                              |
							.-'  '-.                              |
						 .-'        '-.                           V
						 |            |                  ┌─────────────────┐  
						 V  ┌──────┐<-|------------------│ key Permutation │  
						 ⊕<-│ fn f │<-+                  └─────────────────┘  
						 |  └──────┘  |                           |
                         '            '                           '
						  ... 12 more                             :
						to a total of 16                          .
                         .            .                           V
						 |            |                  ┌─────────────────┐
						 V  ┌──────┐<-|------------------│ key Permutation │
						 ⊕<-│ fn f │<-+                  └─────────────────┘
						 |  └──────┘  |                           |
						 '-.        .-'                           |
							'-.__.-'                              |
							.-'  '-.                              |
						 .-'        '-.                           V
						 |            |                  ┌─────────────────┐
						 V  ┌──────┐<-|------------------│ key Permutation │
						 ⊕<-│ fn f │<-+                  └─────────────────┘
						 |  └──────┘  |
						┌──────────────┐
						│    Final     │
						│ Permutation  │
						└──────────────┘
                               |
                               V
                           64 bits of
                           cyphertext
			}
            3DES:
				>"Triple DES"
				>attempts to "save" DES
                {
                     M   K₁ +--+  k₂  +--+  k₂ 
                     |   |  |  |  |   |  |  |  
                     V   V  |  V  V   |  V  V  
                    ┌─────┐ | ┌─────┐ | ┌─────┐
                    │ DES │ | │ DES │ | │ DES │
                    └─────┘ | └─────┘ | └─────┘
                       |    |    |    |    |   
                       +----+    +----+    +---> C  
                }
		AES: //(0x00000123)➞
			>"Advanced Encryption Standard"
			>DES replacement
			>128 bit Đblock cypherĐ
			>in operation, similar to DES
			+----------+--------+
			| Key size | Rounds |
			+----------+--------+
			| 128 bits |     10 |
			| 192 bits |     12 |
			| 256 bits |     14 |
			+----------+--------+
			>manages bytes in a grid like manner
			>NOTE: has its own bloody CPU instruction set


	PUBLIC_KEY: //(0x00000124)➞
		>there are 2 keys
		/*  Public key                           Private key */  Green(
		     __                                    __
		    /o \______                            /o \______
		    \__/-=^=^='                           \__/-=^=^='         )			// jgs
		Decrypts what the private             Decrypts what the public
		 key encrypted.                        key encrypted.
		Shared with everyone.                 If leaked, you are fucked
		/**/
		>key must be generated (in contrast to just coming up with a passphase),
		  and they are too complex to realistically memorized
		>keys are commonly stored as files
        >the public key is publicised, after which,
		  the other must NOT be, or any and all security is compromised
		>ĐĐsigningĐĐ is the act of encoding a document with the primate key;
		  since only the public key can decrypt it, it proves that the keypair
		  belongs to you
		>if someone wishes to send a private message, he would encrypt with your
		  public key, knowing that only your private key can decrypt it and
		  hence only you can read it
		>secure communication can easily be established after the participiants
		  traded public keys
		Knapsack: //(0x00000125)➞
			-based on the knapsack problem:
				Given a knapstack and an arbitrary number of blocks of various volumes,
				 can a subset of these blocks be found to completely fill the knapstack?
				Formarly:
					bool xᵢ		// is used for filling?
					V = a₀x₀ + a₁x₁ + ... + aₙxₙ
				 3l                         4l                          6l                           8l                 
				│__│      bool        |    │~~│      bool        |    │~~~│      bool         |    │~~~~│      bool     
				│  │ X is_used[0]?  --+--  │  │ X is_used[1]?  --+--  │   │ X is_used[2]?   --+--  │    │ X is_used[3]? 
				└──┘                  |    └──┘                  |    └───┘                   |    └────┘               

				┌──┘ └──┐
				│  10l  │
				│ Knap- │
				│ sack  │
				└───────┘
				>non-special cases of the knapstack problem are NP-hard
				>a special case which is not, is when the volumes are super increasing
				  (each Nth element is larger than the sum of all before it)
			>NOTE: here the 2 keys are non-interchangeable
			>depricated as the special case used for the private key turned out to be so special
			  that it can be correlated with the public key
		RSA: //(0x00000126)➞
			>"Rivest–Shamir–Adleman"
			>the original
			>not very performent
			>commonly used for transmitting a shared key
			>the 2 keys are conceptually interchangeable
			>the private key is arbitrarily chosen
			>relies on prime numbers (huge ones) and their factors
			>cryptography is one of the reasons new primes are fiercely searched for


    Signing: //(0x00000127)➞
        >"digital signatures"
        >named after analog ink signatures
        >ensures that a message was approved by someone
        >the message is """encrypted""" with a private key, anyone in the possession of the
          public key (which, again, should be publicly available), may decrypt it
        >since the signature could have been only left by the private key's owner,
          we know it belongs to him
        >NOTE: this does not mean it was physically written by him by hand or
                he is the messages sender
        >whole documents might be signed
        >ĐĐelectronic signaturesĐĐ are digital signatures with legal weight
        Timestamping: //(0x00000128)➞
            >signing with a data/time
            -in formal cases the signer cannot be trusted with signing with the correct data,
              a trusted 3th party must be involved
            -RFC 3161 defines TSAs ("TimeStamping Authority"s)
                1. the client sends checksum
                2. the TSA combines it with the real time
                3. the TSA signs it
                4. this is sent back
               (5. the timestamp is validated using both the author's and the TSA's public key)

    Web_of_Trust: //(0x00000129)➞
        >NOTE: there is a global Web of Trust and there are many web of trusts,
                similar to Internet vs internets
        >composed of people who mutually trust eachothers ĐĐkeysĐĐ
        >the web grows by key signing
        >(You) know and trust Anon, Anon has signed the public key of Anony,
          therefor you know you can trust Anony
        >conformation before signing a key is a good idea {phone call; asking back for past events}
        >signed keys are return-ed to the sender, granting them the right
          to brag with your signature
        >NOTE: keyservers have bultin support
        >a ĐĐkeyringĐĐ is a collection of public keys (which are usually trusted)
        >a ĐĐkeysigning partyĐĐ is an in-person social event with the intent
          of building a web of trust
        -trust levels (actually software implemented):
            None     : the identity is trusted, but this persons ability to verify is questionable
            Marginal : the identity is trusted and this person seems reasonably skilled
            Trusted  : the identity is trusted and i trust this person completely with verificating others
            Implicit : its literally me
        >a ĐĐpath-finderĐĐ is a program that shows how 2 keys relate to each other with regards to trust


    PROGRAMS: //(0x0000012a)➞
        Gnu Privacy Guard

        Shell_variables:
            $GNUPGHOME		: the directory configurations are read from; unset by default and instead $HOME is used

        Files:
            $GNUPGHOME/.gnupg/gpg.conf
            $GNUPGHOME/.gnupg/dirmngr.conf
        Shell_variables:
            $GNUPGHOME		: where the directory configurations are read from;
                               unset by default and instead $HOME is used

        Environment_variabes:
            ${GPG_TTY}
            ${PINETRY_USER_DATA}
        
        gpg [options] [files]	: encrypts files
            NOTE: the --version flag also prints the available algorithms
            -o [file]				: specifies output file
            Symetric_encryption:
                -c						: symmetric encryption
                --cipher-alog [algo]		: use encryption algorithm [algo]
                --no-symkey-cache		: do not cache password (therefor always ask for it)	//writting this one with a single '-' will throw no error, but also result in no output file created
            Asymetric_encryption:
                --full-gen-key		: generate key pair
                --list-public-keys	: ?!
                --list-secret-keys	: ?!
                --import [key]		: adds someone else-s public key

        gpgtar [options] [folder]

    .	### Secure communication using GPG ###	// ?!
            1. Create keys:
                >the default-s are fine if you dont know any better
                >the creation is private and offline, the email address doesnt have to be valid (or verified)
                >the name field will later be used to refer to the key
                $ gpg --full-gen-key
               Success can be verified by querying the keys:
                $ gpg --list-public-keys
                /home/anon/.gnupg/pubring.kbx
                -----------------------------
                pub   ed25519 2023-02-10 [SC]
                      05D4D579A672AB3789322FB70F6007032F38734E
                uid           [ultimate] man <example@email.biz>
                sub   cv25519 2023-02-10 [E]
                $ gpg --list-secret-keys
                /home/anon/.gnupg/pubring.kbx
                -----------------------------
                sec   ed25519 2023-02-10 [SC]
                      05D4D579A672AB3789322FB70F6007032F38734E
                uid           [ultimate] man <example@email.biz>
                ssb   cv25519 2023-02-10 [E]
            2. Share the public key:
                >query the public key in block format:
                $ gpg --armor --export <name>
                -----BEGIN PGP PUBLIC KEY BLOCK-----

                mDMEY+aWzRYJKwYBBAHaRw8BAQdABWkIK/MJ1759U9/XKxncuPC77+KxMAi7BoVF
                DgnLbKK0/%=(b24gPGFub25AYW5vbi5hbm9u(796BBMWCgA7FiEEBdTVea+LkgeJ
                Mi+3D2AHAy84c04FAmPmls0CGwMFCwkIBwICIgIGFQoJCAsSBBYCAwECHgcCF4AA
                CgkQD2AHAy84c06AOgEAwmLKr73DEJyejsuvs1Eio/3JeWY0JJfI6ANqCtprGAsB
                AOc9xUPCEhpplb2pRSUJLOgTsaMS3gZFtwN1JyVir2UMuDgEY+aWzRIKKwYBBAGX
                VQEFAQEHQLX371h7snspNaCVsC1OJDrEXBULHBCtazbT05YOgJE/AwEIB4h4BBgW
                CgAgFiEEBdTVea+LkgeJMi+3D2AHAy84c04FAmPmls0CGwwACgkQD2AHAy84c04n
                AQEAAklKej3ZHsMSEiX/JwDrc8MIf/LACCk/D9rOZOJhjsoBAMxkY41uz4gVp2Ls
                iAY0XDD8c/XB3Qnsum/TPy8rVGcK
                =4Nd0
                -----END PGP PUBLIC KEY BLOCK-----
        #

#define databases: //(0x0000012b)➞\
I----------------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------------\
I         /$$$$$$$              /$$               /$$                                                      \
I        | $$__  $$            | $$              | $$                                                      \
I        | $$  \ $$  /$$$$$$  /$$$$$$    /$$$$$$ | $$$$$$$   /$$$$$$   /$$$$$$$  /$$$$$$   /$$$$$$$        \
I        | $$  | $$ |____  $$|_  $$_/   |____  $$| $$__  $$ |____  $$ /$$_____/ /$$__  $$ /$$_____/        \
I        | $$  | $$  /$$$$$$$  | $$      /$$$$$$$| $$  \ $$  /$$$$$$$|  $$$$$$ | $$$$$$$$|  $$$$$$         \
I        | $$  | $$ /$$__  $$  | $$ /$$ /$$__  $$| $$  | $$ /$$__  $$ \____  $$| $$_____/ \____  $$        \
I        | $$$$$$$/|  $$$$$$$  |  $$$$/|  $$$$$$$| $$$$$$$/|  $$$$$$$ /$$$$$$$/|  $$$$$$$ /$$$$$$$/        \
I        |_______/  \_______/   \___/   \_______/|_______/  \_______/|_______/  \_______/|_______/         \
I----------------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------------I

	Dependency: //(0x0000012c)➞
		Functional:
			>2 attributes values have "egyértelmű hozzárendelés"^HU
		Transitive:
			>when a dependency has a dependency
			>indirect functional dependency
			{ A->B and B->C
			  therefor A->C
			}



	Key: //(0x0000012d)➞
		>a key is a set of attributes by which a record is uniquely identifiable
		>one or more columns of the original data set or an added id (num) row
		Superkey:
			>the set of attribute sets which can uniquely identify a record
			>cannot contain attributes with possible NULL values
			>the element of the superkey consisting of the most attributes is called the ĐĐtrivial superkeyĐĐ
			>all attributes excluded from the
		Candidate_key:
			>all elements of the superkey which have no real subsets in the superkey
		Primary_key:
			>a freely chosen candidate key or a newly added id row which represents a freely chosen candidate key
            >a ĐĐnatural keyĐĐ is a candidate key choosen to be the primary key
            >an ĐĐartifical keyĐĐ is a newly given, enum-erating primary key
			-adding an id row is prefered when:
				>the chosen candidate key consists of multiple attributes
				>if the candidate key is an attribute holding complex data (long strings) // whichs reading is relatively slow
			>id rows are most often incremental, ei. each new elements
			  id is the previous ones + 1



	Normal_forms: //(0x0000012e)➞
		0.:
			>anything that is not in 1st normal form
		1.:
			>Đprimary keysĐ are present
			>every field is atomic ie. at no point will have to be split into multiple
			  parts by a user
			>normalizing a data structure from 0th normal form strictly
			  to 1st normal form doesnt result in any new tables
			  being created
			{ // People table; we know that parts of the address will be handled independently
				Name | Age | Address                                  |
				Anon |  18 | 1204 Budapest, Nagysándor József utca 93 |
				[...]
			  // Therefor we organize the individual parts into different columns
				Name | Age | Post code | City     | Address                | Address number |
				Anon |  18 |      1204 | Budapest | Nagysándor József utca |             93 |
				[...]
			}
		2.:
			>auto when the primary key is a single attribute
			>functional dependencies of the primary key are eliminated
		3.:
			>all candidate key related functional dependencies are eliminated
		3.5. (Boyce-Codd):
			>all functional dependencies are eliminated
			>a table in 3 normal form without multiple overlapping candidate keys is always also in 3.5. normal form
		4.:
			pass
		5.:
			pass



	Object_diagramm: //(0x0000012f)➞
		Attribute:
			// its name and optionally its type in a ellipse
			  .--------------.
			 /                \
			(	   [name]      )
			 \                /
			  ^--------------^
		Multi_value_attribute:
			>list/set/etc.
			// attribute with an additional ellipse
			  .--------------.
			 / .------------. \
			( (	   [name]    ) )
			 \ ^------------^ /
			  ^--------------^
		Key:
			// attribute with the inner text underlined
			  .--------------.
			 /                \
			(	  đ[name]đ     )
			 \                /
			  ^--------------^
		Partial_key:
			// attribute with the inner text non-continuously underlined
			  .--------------.
			 /                \
			(	   [name]      )
			 \     ‾ ‾ ‾ ‾    /
			  ^--------------^
		struct:
			>attribute made up from multiple attributes
			// 2 or more attributes connected with a continuous line
			  .--------------.              .--------------.
			 /                \            /                \
			(	   [att1]      )──────────(      [att2]      )
			 \                /            \                /
			  ^--------------^              ^--------------^
		Entity:
			>connects attributes
			// rectangle
			  .--------------.            +----------------+            .--------------.
			 /                \           |                |           /                \
			(	   [att1]      )──────────|     [name]     |──────────(      [att2]      )
			 \                /           |                |           \                /
			  ^--------------^            +----------------+            ^--------------^
			                                      │
			                                      │
										   .--------------.
										  /                \
										 (      [att2]      )
										  \                /
										   ^--------------^

		Relation:
			>always connected to atleast 2 structs with continuous lines
			>the num of attributes in a relation is called its ĐdegreeĐ
			// rhombus
			                                     _-^-_                  
			  .--------------.                _-^     ^-_                .--------------.
			 /                \            _-^           ^-_            /                \
			(      [att1]      )──────────<     [name]      >──────────(      [att2]      )
			 \                /            ^-_           _-^            \                /
			  ^--------------^                ^-_     _-^                ^--------------^
					                             ^-_-^                  
					          


#define electricity: //(0x00000130)➞\
I-------------------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------------------\
I			 /$$$$$$$$ /$$                       /$$               /$$           /$$   /$$              			\
I			| $$_____/| $$                      | $$              |__/          |__/  | $$              			\
I			| $$      | $$  /$$$$$$   /$$$$$$$ /$$$$$$    /$$$$$$  /$$  /$$$$$$$ /$$ /$$$$$$   /$$   /$$			\
I			| $$$$$   | $$ /$$__  $$ /$$_____/|_  $$_/   /$$__  $$| $$ /$$_____/| $$|_  $$_/  | $$  | $$			\
I			| $$__/   | $$| $$$$$$$$| $$        | $$    | $$  \__/| $$| $$      | $$  | $$    | $$  | $$			\
I			| $$      | $$| $$_____/| $$        | $$ /$$| $$      | $$| $$      | $$  | $$ /$$| $$  | $$			\
I			| $$$$$$$$| $$|  $$$$$$$|  $$$$$$$  |  $$$$/| $$      | $$|  $$$$$$$| $$  |  $$$$/|  $$$$$$$			\
I			|________/|__/ \_______/ \_______/   \___/  |__/      |__/ \_______/|__/   \___/   \____  $$			\
I  			                                                                                   /$$  | $$			\
I 		                                                                                      |  $$$$$$/			\
I                                                                                              \______/ 			\
I-------------------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------------------I

	>electricity is literally magic; "boohoo i wish i was living in a fantasy world", look around you faggot



	Current_flow_in_a_cable: //(0x00000131)➞
								  Red( Resistence )          Blue( Current )
Gray(                                    /   |                      /   \
										/    |                     /     \
									   /     |                    /       \
									  /      |                   /         \                                   )
Yellow(         .-.	 )Green(────────)/Green()|Green(───────────)/Green(────)\Green(────────────────────────────)
Yellow(    _____|  \ )  O  >  O     O  >  O  |  O  >  O     O  >  O     O  > \O     O  >  O     O  >  O     O    [...]
Yellow(   | Voltage })     O  >  O     O  >  O     O  >  O     O  >  O     O  >  O     O  >  O     O  >  O       [...]
Yellow(    ˇˇˇˇˇ|  / )  O  >  O     O  >  O     O  >  O     O  >  O     O  >  O     O  >  O     O  >  O     O    [...]
Yellow(         ^-^	 )Green(───────────────────────────────────────────────────────────────────────────────────)
Purple(                 |     )  Yellow(           Constant current ['>'] flow             ) Purple(           )
Purple(              ---+---  )  Yellow(        ---------------------------------->        ) Purple(   -----   )
Purple(                 |     )  Yellow(                                                   ) Purple(           )

		>this is Benjamin Franklin's conventional chart
		>on a technicality, its wrong
		>it used to be assumed that positive charge flows from '+' to '-';
		  in reality, a negative charge flows from '-' to '+', which is mathematically equivalent


	Semmiconductor_devices: //(0x00000132)➞
			NOTE: chan. == channeled
			Semiconductors
			      /  \
			     /    \
			    /      \
			   /        \
		    Diodes   Transistors
			            / \
					   /   \
					  /     \
					 /       \
					/         \
			    Bipolar     Unipolar
				  /\           /\
				 /  \         /  \
			   PNP  NPN      /    \
				            /      \
				           /        \
				          /          \
				         /            \
				        /              \
				Deplation-mode     Enchancement-mode
			          /\                /\
			         /  \              /  \
			        /    \            /    \
			       /      \          /      \
			   N chan.  P chan.  N chan.  P chan.

Blue(####################################################################################################################################################)



	Coulomb: //(0x00000133)➞
		>a measurement
		>the amount of electric charge carried by 1/(1.602176634×10^−19) electrons
		>symbol:	'C'
	Voltage: //(0x00000134)➞
		>alias "Electro Motive Force"
		>electrical force which pushes the flow of electricity
		>symbol:	'u'
		-Measurement:
			-volt:
				>symbol:	'V'
	Current: //(0x00000135)➞
		>current
		>rate of electricity flow
		>symbol:	'I'
		-Measurement:
			-ampare:
				>symbol:	'A'
		¤equation
			//  coulomb/second
					  1 C
			1 A  =  -------
					  1 s
	Ohm: //(0x00000136)➞
		>measurement of resistance
		>symbol:	'Ω'
		>when an electrical signal travels down a cable the signal exerts resistance and loses energy,
		  making it weaker; this is called ĐĐattenuationĐĐ
		>ĐattenuationĐ is the reason why all cables have a so called ĐĐmaximum lenghtĐĐ, which is
		  the point forward from which data can not be read (reliably) any more (if we ignore jamming)
	Joule: //(0x00000137)➞
		>measurement of work
		>symbol:	'J'
	Watt: //(0x00000138)➞
		>measurement of work over time
		>symbol:	'W'
		¤equation
			//   joule/second
					  1 J
			1 W  =  -------
					  1 s 

	Transformer: //(0x00000139)➞
		>a device that changes the ratio of voltage and current

	Currents: //(0x0000013a)➞
		>a ĐĐrectifierĐĐ is a device that converts AC to DC
		>a ĐĐinverterĐĐ is a device that converts DC to AC
		Direct:
			>"DC"
		Altering:
			>"AC"

	Semiconductor: //(0x0000013b)➞
		>a material that only conducts when under a specific voltage ( 0.5~0.7 V )
		>makes diodes possible
		Silicon:
			>"silícium"^HU
			>the most widely used material for semi-conductors
			¤molecular structure:
				{     |    |    |    
				      |    |    |    
.				  ----4----4----4----
				      |    |    |    
				      |    |    |    
.				  ----4----4----4----
				      |    |    |    
				      |    |    |    
.				  ----4----4----4----
				      |    |    |    
				      |    |    |    
				}
		¤types
			-donor/type N
				>another element with a higher electron count is introduced into silicon
			-acceptor/type P
			>N and P will always be interchangeable as long as its done in a consistent manner (swapping polarities too)
			¤molecular structure:
				{ // It is then "polluted" with another material
				  //  in one of the following 2 ways:
					 /* Donor */              /* Acceptor */
					 /* Type N */             /* Type P */
					  |    |    |              |    |    |    
					  |    |    |              |    |    |    
	.			  ----4----4----4----      ----4----4----4----
					  |    | ,  |              |    |    |    
					  |    |/   |              |    |    |    
	.			  ----4----5----4----      ----4----3    4----
					  |    |    |              |    |   /|    
					  |    |    |              |    |  ˇ |    
	.			  ----4----4----4----      ----4----4----4----
					  |    |    |              |    |    |    
					  |    |    |              |    |    |    
				  // Both grant a free electron which could move if there's (any) current
				}

	Diode: //(0x0000013c)➞
		{     Blue( Thin stable line)	// Formed naturally because of the properties of Type N and Type P semi conductors
		                   |
		    			   V
		           +=======I=======+
		    ┌──────‖   N  -I+  P   ‖──────┐
		    │      +=======I=======+      │
		    │                             │
		    │            -   +            │
		    └────────────O   O────────────┘
		  // When and only when the current is high enough will the thin stable line be "broken"
		  //  and will the electrons flow through ( ~0.5-0.7 V )
		}
		LED:
			>"Light Emitting Diode"
		       .--.
		      | .-.|
		      |T  ||
		     [_|__|_]
		       |  |
		       |  |
		       |  |
		       |   


	Transistor: //(0x0000013d)➞
		Unipolar: //(0x0000013e)➞
			>doesnt require const drainage to keep the current flowing (opposed to bipolar)
			>work is only needed to close/open the current flow
			-MOSFET
				>"Metal-Oxid-Semiconductor Field-Effect transistor"
				-depletion-mode MOSFET //elzáródásos^HU
					>
					{	   /*    N Channel    */                /*    P Channel    */
Green(               	    Source; Gate; Drain                  Source; Gate; Drain																		)
				     	      │      -      │                      │      +      │  
				     	      │  ¸¸¸¸│¸¸¸¸  │                      │  ¸¸¸¸│¸¸¸¸  │ 
				     	      │  ####H####  │                      │  ####H####  │
				     	 +==+===+_________+===+==+            +==+===+_________+===+==+
				     	 ‖  ‖ N .=͈========. N ‖  ‖            ‖  ‖ P .=͈========. P ‖  ‖
				     	 ‖  +===+         +===+  ‖            ‖  +===+         +===+  ‖
				     	 ‖           P           ‖            ‖           N           ‖
				     	 +=======================+            +=======================+
					 	             │                                    │
				     	             +                                    -
					}
				-enhancement-mode MOSFET //növekményes^HU
				  	{   /*    N Channel     */                  /*    P Channel     */                  
Green(                   Source; Gate; Drain                     Source; Gate; Drain 																		)
				           │      +      │                         │      -      │  
				           │  ¸¸¸¸│¸¸¸¸  │                         │  ¸¸¸¸│¸¸¸¸  │ 
				           │  ####H####  │                         │  ####H####  │
				      +==+===+=========+===+==+               +==+===+=========+===+==+
				      ‖  ‖ N ‖ ͈        ‖ N ‖  ‖               ‖  ‖ P ‖ ͈        ‖ P ‖  ‖
				      ‖  +===+    P    +===+  ‖               ‖  +===+    N    +===+  ‖
				      ‖                       ‖               ‖                       ‖
				      +=======================+               +=======================+
								  │                                       │
.				                  -                                       +
					}

		Bipolar: //(0x0000013f)➞
			>requires const drainage to keep the current flowing
			-NPN
			-PNP
	       {   Green( Emitter;Base;Collector                         Emitter;Base;Collector 																)
						 |     |     |                                  |     |     |
	                     V     V     V                                  V     V     V
	                 +=======I===I=======+                          +=======I===I=======+
			  ┌──────‖   N   I P I   N   ‖──────┐            ┌──────‖   P   I N I   P   ‖──────┐
			  │      +=======I===I=======+      │            │      +=======I===I=======+      │
			  │                │                │            │                │                │
			  │     - +        │      - +       │            │     + -        │      + -       │
			  └─────O O────────┴──────O O───────┘            └─────O O────────┴──────O O───────┘
					   JˇCollector 
   	           Beta = ───────────── ~ 100
	                     JˇBase
			}

		In_practice:
			{ // look of the average transistor
				ßß#ßß
				ßß#ßß
				ßß#ßß
				| | |
				| | |
				| | |
			  // different drawing; showing how one side is rounded
				 _____
				I^-_-^I
				I     I
				I     I
				|^-_-^|
				|  |  |
				|  |  |
				|  |  |

				C  B  E
			}

	Multimeter:	// ?!?!?!
		pass


#define hardware: //(0x00000140)➞\
I-----------------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------------\
I			 /$$   /$$                           /$$                                             			\
I			| $$  | $$                          | $$                                             			\
I			| $$  | $$  /$$$$$$   /$$$$$$   /$$$$$$$ /$$  /$$  /$$  /$$$$$$   /$$$$$$   /$$$$$$  			\
I			| $$$$$$$$ |____  $$ /$$__  $$ /$$__  $$| $$ | $$ | $$ |____  $$ /$$__  $$ /$$__  $$ 			\
I			| $$__  $$  /$$$$$$$| $$  \__/| $$  | $$| $$ | $$ | $$  /$$$$$$$| $$  \__/| $$$$$$$$ 			\
I			| $$  | $$ /$$__  $$| $$      | $$  | $$| $$ | $$ | $$ /$$__  $$| $$      | $$_____/ 			\
I			| $$  | $$|  $$$$$$$| $$      |  $$$$$$$|  $$$$$/$$$$/|  $$$$$$$| $$      |  $$$$$$$ 			\
I			|__/  |__/ \_______/|__/       \_______/ \_____/\___/  \_______/|__/       \_______/ 			\
I-----------------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------------I
	
	>visual representations are not up-to-scale nor have realistic relative sizes

	LOGIC_GATES: //(0x00000141)➞
		>gives a bool output dependent on bool inputs
		>usually 1 or 2 inputs and 1 output
		>see more AT "/Theory/Calculus/Logic"
		Not:
			>has one input, switch-es the signal
			>all other gates have a corresponding not gate
			<[gate]> -> <not> == corresponding not gates
Green(			+-----+        +---\          +-----+
				| In1 |--------|    |O--------| Out |
				+-----+        +---/          +-----+ )
			¤table
				------------------
				|  In   ||  Out  |
				------------------
				| false || true  |
				| true  || false |
				------------------								/* Corresponding not gate row; tables are not provided intentionally */
		And:													//  Nand:                                                            */
			>true output if all input are true					//                                                                   */
			¤graph												//                                                                   */
Green(			+-----+                                         )//   +-----+                                                        */
Green(			| In1 |----+==========\                         )//   | In1 |----+==========\                                        */
Green(			+-----+    |           \                        )//   +-----+    |           \                                       */
Green(					   |            \     +-----+           )//              |            \     +-----+                          */
Green(					   |             |----| Out |           )//              |             |O---| Out |                          */
Green(					   |            /     +-----+           )//              |            /     +-----+                          */
Green(			+-----+    |           /                        )//   +-----+    |           /                                       */
Green(			| In2 |----+==========/                         )//   | In2 |----+==========/                                        */
Green(			+-----+                                         )//   +-----+                                                        */
			¤table                                              //                                                                   */
				--------------------------                      //                                                                   */
				|  In1  |  In2  ||  Out  |                      //                                                                   */
				--------------------------                      //                                                                   */
				| false | false || false |                      //                                                                   */
				| false | true  || false |                      //                                                                   */
				| true  | false || false |                      //                                                                   */
				| true  | true  || true  |                      //                                                                   */
				--------------------------                      //                                                                   */
		Or:                                                     //  Nor:                                                             */
			>true output if any input is true                   //                                                                   */
			¤graph                                              //                                                                   */
Green(			+-----+                                         )//   +-----+                                                        */
Green(			| In1 |----+==========\                         )//   | In1 |----+==========\                                        */
Green(			+-----+     \          \                        )//   +-----+     \          \                                       */
Green(					     \          \     +-----+           )//                \          \     +-----+                          */
Green(					      |          |----| Out |           )//                 |          |O---| Out |                          */
Green(					     /          /     +-----+           )//                /          /     +-----+                          */
Green(			+-----+     /          /                        )//   +-----+     /          /                                       */
Green(			| In2 |----+==========/                         )//   | In2 |----+==========/                                        */
Green(			+-----+                                         )//   +-----+                                                        */
			¤table                                              //                                                                   */
				--------------------------                      //                                                                   */
				|  In1  |  In2  ||  Out  |                      //                                                                   */
				--------------------------                      //                                                                   */
				| false | false || false |                      //                                                                   */
				| false | true  || true  |                      //                                                                   */
				| true  | false || true  |                      //                                                                   */
				| true  | true  || true  |                      //                                                                   */
				--------------------------                      //                                                                   */
		Xor:                                                    //  Xnor:                                                            */
			>true output if any input,                          //                                                                   */
			  but not all inputs are true                       //                                                                   */
			¤graph                                              //                                                                   */
Green(			+-----+                                         )//   +-----+                                                        */
Green(			| In1 |----+ +========\                         )//   | In1 |----+ +========\                                        */
Green(			+-----+     \ \        \                        )//   +-----+     \ \        \                                       */
Green(					     \ \        \     +-----+           )//                \ \        \     +-----+                          */
Green(					      | |        |----| Out |           )//                 | |        |O---| Out |                          */
Green(					     / /        /     +-----+           )//                / /        /     +-----+                          */
Green(			+-----+     / /        /                        )//   +-----+     / /        /                                       */
Green(			| In2 |----+ +========/                         )//   | In2 |----+ +========/                                        */
Green(			+-----+                                         )//   +-----+                                                        */
			¤table
				--------------------------
				|  In1  |  In2  ||  Out  |
				--------------------------
				| false | false || false |
				| false | true  || true  |
				| true  | false || true  |
				| true  | true  || false |
				--------------------------



	CIRCUITS: //(0x00000142)➞
		Voting_machine: //(0x00000143)➞
			(In1 and In2) or (In2 and In3) or (In1 and In3)
			>3 inputs; 1 output
			>if 2 or more true it returns true
			¤graph
Green(		+-----+                               
	  		| In1 |-----------------+-----+==========\               
	  		+-----+                 |     |           \              
	  				                |     |            \             
	  				                |     | In1 & In2   |---------------+
	  				                |     |            /                 \
	  		+-----+                 |     |           /                   \
	  		| In2 |-----------+-----|-----+==========/                     \
	  		+-----+           |     |                                       \   
	  				          |     |                                        \  
	  				          |     |                                         \ 
	  				          |     |                                          \
	  		+-----+           |     |                                           \
	  		| In3 |-----+-----|-----|-----+==========\                           \      +==========\   
	  		+-----+     |     |     |     |           \                           ^------\    In1   \  
						|     |     |     |            \                                  \    or    \      +-----+
						|     |     |     | In3 & In2   |----------------------------------|  In2     |-----| Out |
						|     |     |     |            /                                  /    or    /      +-----+
						|     |     |     |           /                           .------/    In3   /  
						|     +-----|-----+==========/                           /      +==========/   
						|           |                                           /
	  				    |           |                                          /
	  				    |           |                                         /
	  				    |           |                                        /
						|           |                                       /
						|           +-----+==========\                     /
	  		            |                 |           \                   /
						|                 |            \                 /
						|                 | In1 & In3   |---------------+
						|                 |            /            
						|                 |           /             
						+-----------------+==========/              																						)
		Half_adder: //(0x00000144)➞
			In1 and In2; In1 xor In1
			>2 inputs; 2 output
			>returns the sum (at the first "helyi érték"ˇHU /*?!*/) and remainder of 2 bits
			>the remainder is usually called ĐĐcarryĐĐ
			>called a half adder because its impossible to hook <int> number of them together to get the sum of <int> bit long nums
			¤graph
Green(			+-----+                               
	  			| In1 |-----------+-----+ +========\               
	  			+-----+           |      \ \        \              
	  				              |       \ \  In1   \     +-------+
	  				              |        | | xor    |----|  Sum  |
	  				              |       / /  In2   /     +-------+
	  			+-----+           |      / /        /              
	  			| In2 |-----+-----|-----+ +========/               		
	  			+-----+     |     |                                
	  			            |     |                                
	  			            |     +-----+==========\               
	  			            |           |           \              
	  				        |           |            \     +-------+  
	  				        |           | In1 & In2   |----| Carry |
	  				        |           |            /     +-------+  
							|           |           /              
							+-----------+==========/                     																					)
			¤table
				>it makes more sense to display the values as nums here rather than bools
				--------------------------
				| In1 | In2 || Sum | Re. |
				--------------------------
				|   0 |   0 ||   0 |   0 |
				|   0 |   1 ||   1 |   0 |
				|   1 |   0 ||   1 |   0 |
				|   1 |   1 ||   0 |   1 |
				--------------------------
		Adder: //(0x00000145)➞
			(In1 xor In2) xor CarryIn; Voting_machine(In1, In2, CarryIn)
			>3 inputs; 2 outputs
			>input and output ĐcarryĐ
			><int> number of them can be hooked up together to get the sum of <int> bit long nums
Green(			+-----+
	  			| In1 |-----------+-----+ +========\                   
	  			+-----+           |      \ \        \              
	  				              |       \ \  In1   \     
	  				              |        | | xor    |------------------+ +========\   
	  				              |       / /  In2   /                    \ \        \  
	  			+-----+           |      / /        /                      \ \  In1   \      +----------+
	  			| In2 |-----+-----|-----+ +========/                        | | xor    |-----|    Sum   |
	  			+-----+     |     |                                        / /  In2   /      +----------+
	  				        |     |      +---------+                      / /        /  
	  				        |     |      | CarryIn |------+--------------+ +========/   
	  				        |     |      +---------+      |
	  			            |     |                       |
	  			            |     |                       |
	  			            |     |                       |
							|     |                       +-------+====================+
							|     |                               |                    |     +----------+
							|     +-------------------------------|   Voting Machine   |-----| CarryOut |
							|                                     |                    |     +----------+
							+-------------------------------------+====================+																	)
		Single_bit_artimetric_unit: //(0x00000146)➞
Green(			+-----+                               
	  			| In1 |-----------+-----+==========\                 
	  			+-----+           |     |           \                
	  				              |     |            \     
	  				              |     | In1 & In2   |-----+
	  				              |     |            /       \
	  			+-----+           |     |           /         \
	  			| In2 |-----+-----|-----+==========/           \            +-----+  +-----+
	  			+-----+     |     |                             \           |  S₁ |  |  S₂ |
	  			            |     |                              \          +-----+  +-----+
	  			            |     |                               \            |        |
	  			            |     +-----+==========\               \           |        |
	  			            |     |      \          \               ^-----+==================+
	  				        |     |       \   In1    \                    |                  |      	+-----+
	  				        |     |        |   Or     |-------------------|     Selector     |----------| Out |
	  				        |     |       /   In2    /                    |                  |          +-----+
							|     |      /          /               .-----+==================+
							+-----|-----+==========/               /               |
	  			            |     |                               /                |
	  			            |     |                              /                / 
	  			            |     |                             /                /
							|     |     +---\                  /                /
							|     +-----|¬In1|O---------------+                /
							|     |     +---/                                 /
							|     |                                          /
							|     |                                         /
							|     +-----+===============+                  /
							|           |               |-----------------^
							+-----------|     Adder     |                       +----------+
			+---------+                 |               |-----------------------| CarryOut |
			| CarryIn |-----------------+===============+                       +----------+
			+---------+																																		)
		Flip_flops: //(0x00000147)➞
			>can be used for storing a binary state => memory
			>2 outputs that always have the opposite values of the circuit is powered on
			>they are formerly called ĐĐ_Q_ĐĐ and ĐĐ_Q_negate_ĐĐ
			>Đ_Q_negate_Đ is often discarded
			Set_reset_flip_flop: //(0x00000148)➞
				>or "S-R latch"
				>2 inputs and 2 outputs
				>on 2 false inputs the output values wont change
				>both inputs true is referred to as an illegal state (as its not intended usage)
				>switch-ing the input which was least recently true to true will swap the values of the 2 outputs
Green(					+-----+                               
						| In1 |-----------------+==========\    
						+-----+                  \          \   
												  \   In1    \            +-------+
												   |  nor     |O----+-----|  Out  |
												  /  ¬Out    /      |     +-------+
												 /          /      /
										  +-----+==========/      /
										   \                     /  
											\  +----------------^   
											 \/                     
											 /\                     
											/  +----------------.
										   /                     \
										  +-----+==========\      \
												 \          \      \
												  \   In2    \      |     +-------+
												   |  nor     |O----+-----| ¬Out  |
												  /   Out    /            +-------+
						+-----+                  /          /   
						| In2 |-----------------+==========/    
						+-----+																																	)
			D_flip_flop: //(0x00000149)➞
				>2 inputs and 2 outputs
				>one of the inputs is formerly called ĐĐ_D_ĐĐ /*?!*/
				>clock input somethin somethin ?!
				-one of the inputs is a clocks positive/negative state changes	// move; ?!
					{ // in case of converting positives
					  ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

 					  Clock:                 ┌─────────────┐              ┌─────────────┐              ┌─────────────┐
					                      /* │ */          │           /* │ */          │           /* │ */          │
					                        ─┘             └──────────────┘             └──────────────┘             └

					  ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

 					  Converted_signal:      
					                    Red( │ )                     Red( │ )                     Red( │ )           
					                        ─┴────────────────────────────┴────────────────────────────┴─────────────

					  ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
					}
				>Đ_D_Đ is copied to Q whenever the clock input is true
Green(			   +==========+
.               ---| D      Q |---
				   |          |
				   |        _ |
.               ---|>CLK    Q |---
				   +==========+																																)
				Delaying:
					>if Đ_Q_Đ is wired to a not gate and looped back to Đ_D_Đ then it can be used for halving the clock speed
					>used in actual clocks and wrist watches
Green(                         /----+  
					 +-------O|     |-------+
					 |         \----+       |
					 |                      |
					 |     +==========+     |
.                    +-----| D      Q |-----+---
			        	   |          |
			        	   |        _ |
.                       ---|>CLK    Q |---
			        	   +==========+																														)

	
	BREADBOARD:
		>legend says that the name comes from the alternative name for Đcutting boardĐ,
		  which used to be used before "modern" breadboards became widely available
		┏━━━━━━━┳━━━━━━━━┳━┳━━━━━━━━┳━━━━━━━┓
		┃ -   + ┃ ┌┬┬┬┬┐ ┃ ┃ ┌┬┬┬┬┐ ┃ -   + ┃
		┃ I┌┬┐I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I┌┬┐I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I└┴┘I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I└┴┘I ┃
		┃ I┌┬┐I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I┌┬┐I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I└┴┘I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I└┴┘I ┃
		┃ I┌┬┐I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I┌┬┐I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I└┴┘I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I└┴┘I ┃
		┃ I┌┬┐I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I┌┬┐I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I└┴┘I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I└┴┘I ┃
		┃ I┌┬┐I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I┌┬┐I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I├┼┤I ┃ ├┼┼┼┼┤ ┃ ┃ ├┼┼┼┼┤ ┃ I├┼┤I ┃
		┃ I└┴┘I ┃ └┴┴┴┴┘ ┃ ┃ └┴┴┴┴┘ ┃ I└┴┘I ┃
		┗━━━━━━━┻━━━━━━━━┻━┻━━━━━━━━┻━━━━━━━┛
			A         A   A    A        A
			|         |   |    |        |
			|         '.  |    |        |
			|           '.|    |       .'
			+-------------|'.--|------'
			|             |  '.|
	   Power Rails        |    '-- Terminal Strips
		                  |
			        Center Divider

		// Holes are connected the following way
		 │ │  ─────   ─────  │ │
		 │ │  ─────   ─────  │ │
		 │ │  ─────   ─────  │ │
		 │ │  ─────   ─────  │ │
		 │ │  ─────   ─────  │ │
		 │ │  ─────   ─────  │ │
		 │ │  ─────   ─────  │ │
		 │ │  ─────   ─────  │ │
		     // ...
	Power_rails:
		>responsible for providing easy power access from any point of the board
		>must be connected to some power source;
		  there are power supply units specifically designed for bread boards which nicely fit to tip



	DANGERS: //(0x0000014a)➞
		>getting electrocuted to death
		ESD:
			>static electricity
			>could cause data loss, upset or catashtrophic failure
			Countermeasure:
				-grounding
					>ground bracelet
					>static strap
					>ground mat
					>static shielding bag
					>antistatic gloves
					>antistatic spray
			Symbols:
Yellow(			--------------------
				---------==---------			  -======-      
				---------##---------			-=-      -=-    
				--------####--------		   -=    --    =-   
				-------=####=-------		  -=     ##     =-  
				-------######-------		  =     =##=     =  
				------=##==---------		 --    -####     -- 
				--------------------		 =     #=--       = 
				-----=--------=-----		 =    ==     -    = 
				----=#-------##=----		 =    # -   =#    = 
				----#=-==---=###----		 =   == =- =##=   = 
				---=#=-==-==--##=---		 =  -##-- #####-  = 
				---###-=-=###---#---		 -- ###==####### -- 
				--####=#=#####=-----		  =-============-=  
				--##############----		  --            --  
				--------------------)
				>a hand inside a			>a circle surrounding
				  triangle, crossed			  a hand inside a 
				  through                     triangle
		Surge:
			Countermeasure:
				>having the computer plugged into a grounded outlet


#define computer_components:: //(0x0000014b)➞\
I-------------------------------------------------------------------------------------------------------------------\
I	 _____                             _              _____                                              _       	\
I	/  __ \                           | |            /  __ \                                            | |      	\
I	| /  \/ ___  _ __ ___  _ __  _   _| |_ ___ _ __  | /  \/ ___  _ __ ___  _ __   ___  _ __   ___ _ __ | |_ ___ 	\
I	| |    / _ \| '_ ` _ \| '_ \| | | | __/ _ \ '__| | |    / _ \| '_ ` _ \| '_ \ / _ \| '_ \ / _ \ '_ \| __/ __|	\
I	| \__/\ (_) | | | | | | |_| | |_| | ||  __/ |    | \__/\ (_) | | | | | | |_| | (_) | | | |  __/ | | | |_\__ \	\
I	 \____/\___/|_| |_| |_| .__/ \__,_|\__\___|_|     \____/\___/|_| |_| |_| .__/ \___/|_| |_|\___|_| |_|\__|___/	\
I                         | |                                              | |                               		\
I                         |_|                                              |_|  									\
I-------------------------------------------------------------------------------------------------------------------I

	-short and comprehensible list of commercial computer parts: //(0x0000014c)➞
			>PSU
			>Motherboard
			>CPU
			>GPU
			>RAM
			-Drives
				>HDD
				>SSD
			>Fans



	PSU: //(0x0000014d)➞
		>"Power Supply Unit"
		-dual-voltage selector switch
			>optional
			¤options
				>115 V
				>220 V
		UPS:
			>"Uninterruptible Power Supply"
			>a regular PSU with a battery built in



	Motherboards: //(0x0000014e)➞
		>main/system board or mobo
		>normal mobos come with a piece of aluminium called and ĐĐI/O shildĐĐ,
		  its for covering the empty space between the ports and the case, there
		  by protecting the mobo
		NOTE:
			the turn on is meant to be invoked by pressing a button, however,
			bringing the "pw+" and "pw-" (or "-pw+") pins together with any conductor {nail} should do the job
		Parts:
			>CPU socket(s)
			>extension card slots
			-bus:
				>(usually) visible lines/traces from conductors
				>these allow electricity and data to move from one component to another
				-the collective name of these lines is the ĐĐbusĐĐ
					>the parts of the ĐbusĐ that are responsible for address transfer are collectively called the ĐĐaddress busĐĐ
					>the parts of the ĐbusĐ that are responsible for data transfer are collectively called the ĐĐdata busĐĐ
			Integration:
				>most modern mobos have devices integrated (built into) them
				>integrated devices perform tasks which are not strictly necessary for a computer to work
				¤commonly integrated devices
					>sound card
					>network interface card
					>gpu
			-CROM
				>holds BIOS settings
				>must be powered at all times or it looses all data
			-CROM battery:
				>powers the CROM even when the mobo is disconnected from the grid
				>in theory it should not affect the boot process, but there have been cases reported when
				  a faulty battery caused the computer to refuse to boot



	CPU: //(0x0000014f)➞
		>ĐĐsee way moreĐĐ AT ĐĐ/AssmeblyĐĐ
		>a web of logical gates
		Instruction_sets: //(0x00000150)➞
			-CISC
				>"Complex Instruction Set Computer"
			-RISC
				>"Reduced Instruction Set Computer"
				>hardware adaption for pipelining
				>its counter part is CISC "Complex Instruction Set Computer"
				+----------------------+--------------------+-------------+
				|         CISC         | ################## |     RISC    |
				+----------------------+--------------------+-------------+
				| volatile             | instruction length |       const |
				| volatile             |   execution time   |       const |
				| memory referenceable | 	                  | load, store |
				| small                |     cache size     |       large |
				+----------------------+--------------------+-------------+
		Branch_prediction: //(0x00000151)➞
			>the act of educated guessing where the execution will continue
              after a branch and pipeline loading instructions from that path
			-static:
				>compilers auto predict
				>burnt into the machine code // is it?; ?!
			-dynamic:
				>previous results are stored
				>the algorithms are top secrets of CPU manufacturers
		Multi_core: //(0x00000152)➞
			>modern processors consist of multiple micro processors 
			  (usually 4 as of 2021)
			-having multiple processors working together can be thought of
			  as a network of processors
				¤topology:
				  >see better graphs and some details which apply AT /Networking/Topology
				  //Bus
					  +-----------+    +-----------+
					  | Processor |    | Processor |
					  +-----│-----+    +-----│-----+
Blue(               #───────┼────────────────┼───────# )
					  +-----│-----+    +-----│-----+
					  | Processor |    | Processor |
					  +-----------+    +-----------+
				  //star
					 +-----------+    +-----------+
					 | Processor |    | Processor |
					 +-----\-----+    +-----/-----+
Blue(                       \              /         
							 \            /          
							  ############           
							 /            \          
							/              \        																										)
					 +-----/-----+    +-----\-----+
					 | Processor |    | Processor |
					 +-----------+    +-----------+
				  //Ring
					  +-----------+         +-----------+
					  | Processor |Blue(───)| Processor |
					  +-----│-----+         +-----│-----+
Blue(                       │                     │																											)
					  +-----│-----+         +-----│-----+
					  | Processor |Blue(───)| Processor |
					  +-----------+         +-----------+
				  //Mesh
					 +-----------+      +-----------+
					 | Processor |Blue()| Processor |
					 +-----│-----+      +-----│-----+
Blue(                      │      \    /      │
						   │       \  /       │
						   │        \/        │
						   │        /\        │
						   │       /  \       │
						   │      /    \      │																										)
					 +-----│-----+      +-----│-----+
					 | Processor |Blue()| Processor |
					 +-----------+      +-----------+
			>the most important trait of multicore systems is the existence of the Đrace conditionĐ
			>resolving Đrace conditionĐs require resources, resulting in overhead
			-executing a process on size_t N processors doesnt mean that the execution time gets
			  divided by N, even in a hypothetical best case scenario
				G = A * B
				H = C * D
				I = H * G
Yellow(			Normal execution:   Execution on 2 processors: )
			  1.    A * B               A * B C * D
			          |                    \   /
					  V                      V
			  2.	C * D                  H * G
					  |
					  V
			  3.	H * G
              "If it takes 9 months for a pregnant woman to birth a child,\
               how long does it take for 9 pregnant women to birth a child?"
			>a ĐĐrace conditionĐĐ occurs whenever multiple processors need the same resource,
			  but only one must have it at the time
			>for example when multiple processors need to read a var count and increase it by one;
			  if they were to read it at the same time {8}, they would both increase the same value {9}
			  and writing it back in {resulting in 9}
			>a ĐĐcritical sectionĐĐ or ĐĐatomic operationĐĐ is a computation that must not be interrupted {such as the ABOVE}
			-selecting a processor:
				>TAS "Test-And-Set"
				>done by a resource free flag (variable)
				>whenever a processor wants to enter a critical section with that resource it reads the flag and assigns it to BUSY;
				  if the flag signalled FREE (usually by 0) then it enters, and signals the other processors that the resource is taken;
				  if the flag is already BUSY, then the processor must wait
				>TAS is an atomic operation by it self (handled by hardware tho)
			>its the operating systems responsibility to assign a useful task to a processor waiting to enter a critical section { another program }
			Multithreading:
                pass
        MMU:
            >"Memory Management Unit"
            >dedicated chip of the CPU responsible for translating addresses
            >the ĐĐtranslation lookaside bufferĐĐ is a cached table of addresses used by the MMU
		Cache:
			>the processors own supper fast memory (see AT /Assembly/Memory/Memory hierarchy)
			>multiple levels
		¤insides:
			Pentium:	//1993
								   ┌───────────┐  ┌───────────┐
								   │ Registers │  │ Registers │
								   │ ┏━━┓ ┏━━┓ │  │ ┏━━┓ ┏━━┓ │
								   │ ┗━━┛ ┗━━┛ │  │ ┗━━┛ ┗━━┛ │
								   │ ┏━━┓ ┏━━┓ │  │ ┏━━┓ ┏━━┓ │
								   │ ┗━━┛ ┗━━┛ │  │ ┗━━┛ ┗━━┛ │
								   └────#─#────┘  └────#─#────┘
										| |            | |
				 +----------+        +--#-#--+      +--#-#--+
				 |          |        |       |      |       |
				 |          #--------#  ALU  |      |  ALU  |
				 | Internal |        |       |      |       |
				 |  memory  |        +--#-#--+      +--#-#--+
				 |  cache   |           | |            | | 
				 |          |        +--#-#------------#-#--+
				 |          #--------#     Control Unit     |
				 +----------+        +------#-#---#-#-------+
											| |   | |     
								   +--------#-#---#-#---------+
								   |         I/O unit         |
								   +--------#-#---#-#---------+
											| |   | |     



	Pipeline_execution: //(0x00000153)➞
		>by splitting execution into steps and having dedicated components speed can be gained
		>when a part finishes its own slice instead of waiting for the whole instruction to finish
		  it starts the execution of the next
		¤ideal pipeline
			>NOTE: the number of steps greatly vary depending on CPU model; 2-20 steps aren't unheard-of;
			        however the following 5 step one is a classic set up
.			F: instruction Fetch
.			D: instruction Decode
.			E: Execute
.			M: Memory access
.			W: register Write back
Green(											CLOCK CYCLES
		    +---------------------------------------------------------------------------------------->														)
Yellow(			 I.        II.        III.       IV.         V.        VI.        VII.      VIII.															)
			┌─────────┐┌─────────┐┌─────────┐┌─────────┐┌─────────┐⋮‥‥‥‥‥‥‥‥‥⋮⋮‥‥‥‥‥‥‥‥‥⋮⋮‥‥‥‥‥‥‥‥‥⋮
			│         ││         ││         ││         ││         │⋮         ⋮⋮         ⋮⋮         ⋮
			│    F    ││    D    ││    E    ││    M    ││    W    │⋮    F    ⋮⋮    D    ⋮⋮    E    ⋮
			│         ││         ││         ││         ││         │⋮         ⋮⋮         ⋮⋮         ⋮
			└─────────┘└─────────┘└─────────┘└─────────┘└─────────┘⋮‥‥‥‥‥‥‥‥‥⋮⋮‥‥‥‥‥‥‥‥‥⋮⋮‥‥‥‥‥‥‥‥‥⋮
			           ┌─────────┐┌─────────┐┌─────────┐┌─────────┐┌─────────┐⋮‥‥‥‥‥‥‥‥‥⋮⋮‥‥‥‥‥‥‥‥‥⋮
			           │         ││         ││         ││         ││         │⋮         ⋮⋮         ⋮
			           │    F    ││    D    ││    E    ││    M    ││    W    │⋮    F    ⋮⋮    D    ⋮    ĐĐ_  [...]  _ĐĐ
			           │         ││         ││         ││         ││         │⋮         ⋮⋮         ⋮
			           └─────────┘└─────────┘└─────────┘└─────────┘└─────────┘⋮‥‥‥‥‥‥‥‥‥⋮⋮‥‥‥‥‥‥‥‥‥⋮
			                      ┌─────────┐┌─────────┐┌─────────┐┌─────────┐┌─────────┐⋮‥‥‥‥‥‥‥‥‥⋮
			                      │         ││         ││         ││         ││         │⋮         ⋮
			                      │    F    ││    D    ││    E    ││    M    ││    W    │⋮    F    ⋮
			                      │         ││         ││         ││         ││         │⋮         ⋮
			                      └─────────┘└─────────┘└─────────┘└─────────┘└─────────┘⋮‥‥‥‥‥‥‥‥‥⋮
		¤hazard
			>when two instructions meant to operate on the same registers/data its possible that pipelining corrupts the result
			{ // theorize that register $rax-s value == 5
				1. inc $rax			// increment the value of register "rax" by one
				2. mov $rbx, $rax	// copy register "rax"-es content to register "rbx"
Green(										CLOCK CYCLES
		    	+------------------------------------------------------------------>																		)
Yellow(				 I.        II.        III.       IV.         V.        VI.     			 		 														)
				┌─────────┐┌─────────┐┌─────────┐┌─────────┐┌─────────┐. . . . . .
				│         ││         ││         ││         ││         │ . . . . .
				│    F    ││    D    ││    E    ││    M    ││    W    │. . . . . .
				│         ││         ││         ││         ││      \  │ . . . . .
				└─────────┘└─────────┘└─────────┘└─────────┘└───────\─┘. . . . . .
				. . . . . .┌─────────┐┌─────────┐┌─────────┐┌────────\┐┌─────────┐
				 . . . . . │         ││         ││         ││         \│         │
				. . . . . .│    F    ││Red(D)   ││    E    ││    M    │\    W    │
				 . . . . . │         ││    |    ││         ││         ││\        │
				. . . . . .└─────────┘└────|────┘└─────────┘└─────────┘└─\───────┘
						                   |                              \
							Red(The point at which the second)   Green(The point at which $rax-s value)
							Red(istruction read $rax-s value)    Green(changes to $rax + 1)
				// This results in the second instruction moving the wrong value
				  => ($rax == 6) and ($rbx == 5)
			}
			¤solutions
				>by inserting an appropriate number of NOP-s (No OPerations), ie. waiting till the hazard is avoided;
				  this is done auto-matically by high level language compilers
				>"adat előre engedés"^HU
				>"utasítás sorrend csere"^HU



	Memory: //(0x00000154)➞
		Memory_hierarchy: //(0x00000155)➞
			>NOTE: the <int>th storages may have built in caches;
			        the OS may use the RAM to cache data from <int>th storage
						  /-----\	  Smaller, faster, and
						 /(SRAM) \	  more expensive
						/   CPU   \
					   / Registers \
					  /-------------\
					 /  Cache (DAM)  \
					/-----------------\
				   /  Primary Storage  \
				  /  Main Memory (RAM)  \
				 /-----------------------\
				/    Secondary Storage    \  
			   / (disk drives, SSD's, etc.)\
			  /-----------------------------\
			 /        Tertiary Storage       \
			/ (remote storage, backups, etc.) \	   Larger, slower, and
.			-----------------------------------	   less expensive
		TYPES_BY_TECHNOLOGY: //(0x00000156)➞
			SSD: //(0x00000157)➞
				>"Solid State Drive"
				ROM: //(0x00000158)➞
					>"Read Only Memory"
					>the data is "burned" into it on production
					>because the production process must be specialized, its rather costly
					>no moving parts
				PROM: //(0x00000159)➞
					>"Programmable ROM"
					>on production all 1-s are "burned" into it
					>its possible to set any 1 to a 0, but the process is irreversible
				EPROM: //(0x0000015a)➞
					>"Erasable PROM"
					>on production all 1-s are "burned" into it
					>its possible to set any 1 to a 0
					>its possible to reset all bits to 1-s, ie. reset the whole thing to its original state (hence "erasable")
					>erasing is done through physical processes {UV light}
				EEPROM: //(0x0000015b)➞
					>"Electronically EPROM"
					>erasing is done with electricity
					>the part doesnt have to be removed from the machine to reset it
					>partial erasing is possible
					Flash: //(0x0000015c)➞
						>limited rewrites, however this property is negligible for personal usage
						>refers to the speed
						NOR:
							>most cost effective at low capacities
							>slower I/O compared to NAND
						NAND:
							>two bits for every bit which gets not-and-ed -> NAND
							>faster I/O compared to NAND
							>might be layed out in 2D or 3D
							>there're 4 types by cell capacity: "slc", "mlc", "tlc", "qlc";
							  with each the amount of memory stored in the same volume is multiplied by 4
			Disc: //(0x0000015d)➞
				>because writing data perfectly aligned with the previous data is practically impossible
				  data must be first read changed then wholly rewritten even if a single bit is to be changed
				>therefor discs are cut up into independently handleable parts
				>segmented into individual rings (which do not conspire) ("sávok"^HU)
				>segmented into equal sized sectors (like a pizza)
				>sectors are separated with gaps containing junk
				{ // Disc with 2 rings and 8 sectors per ring
								   Ring-1
								ooooooooooo                
							ooooo    |    ooooo            
						 oooo  S-8   |   S-1  oooo         
					   ooo \.      ooooo      ./ ooo        
					  ooo    \. ooo  |  ooo ./    ooo       
					 oo       oo   Ring-2  oo       oo      
					oo  S-7  oo  \.  |  ./  oo  S-2  oo     
					oo      o      \.|./      o      oo     
					oo------o--------@--------o------oo     
					oo      o      /^|^\      o      oo     
					oo  S-6  oo  /^  |  ^\  oo  S-3  oo     
					 oo       oo^    |    ^oo       oo      
					  ooo    /^ ooo  |  ooo ^\    ooo      
					   ooo /^      ooooo      ^\ ooo       
						 oooo  S-5   |   S-4  oooo         
							ooooo    |    ooooo            
								ooooooooooo                
				}
				¤sector parts
					1. dummy data; 26 bytes of 0-s followed by 26 bytes of 1-s
					    allowing for the reading head to take up the rotation pace perfectly
					2. IDAM; "ID Address Mark"; signals that a sector ID will soon follow
					3. ID; identifies the sector, ring and disc side
					4. CRC; proves ID value integrity
					5. dummy data; 26 bytes of 0-s followed by 26 bytes of 1-s ensuring perfect syncing
					6. DAM; "Data Address Mark"; signals that actual data will soon follow
					7. <int> bytes of data; as of now (2022.) 512 is the norm
					8. CRC; proves data integrity
					9. gap before the next sector
					 ┃ 0x00 │ 0xff │IDAM│   ID   │CRC│ 0x00 │ 0xff │DAM│ Yellow(                    DATA                          ) │CRC│  GAP  ┃
					─╂──────┼──────┼────┼────────┼───┼──────┼──────┼───┼────────────────────────────────────────────────────────────┼───┼───────╂─
					  <-26-> <-26->                   <-26-> <-26->     <---------------------------512---------------------------->
				HDD: //(0x0000015e)➞
					>commonly has jumpers
					>magnetic
					>moving parts
					>disks
					>RPM, "Round Per Minute" spinning speed; the higher the better
					-transfer:
						PATA:
							>Parallel ATA
							>uses an IDE cable for communication and a MOLEX for power (see looks AT "/Hardware/Ports/IDE" and "/Hardware/Ports")
							>IDE cables are either has 40 or 80 ĐwiresĐ
							>80 wire cables provide better performance
							>IDE cables usually have ribbons, but smaller round are
							  available for better air flow (and therefor cooling)
							>data is transferred in chunks, in parallel
							>its speed is measured in MB/sec
						SATA:
							>Serial ATA
							¤hierarchy
								black < red
							>data is transmitted in a single, const bit by bit flow
							>its speed is measured in Gb/sec
				RAM: //(0x0000015f)➞
					>"Random Access Memory" ("Tetszőleges Elérésű Memória"^HU)
					>it takes the same time to read/write any address
					SRAM:
						>"Static RAM"
						~1/4000 of the size of the main memory and decreasing (in bytes)
						>CPU Cache
						>uses flipflops
					DRAM:
						>Main memory (ram in the everyday sense)
						>slower than SRAM
						>uses a capacitor
						>continuously discharges
						>the preserve its value, it must repeatedly read and rewritten
			TYPES_BY_USAGE: //(0x00000160)➞
				Cache: //(0x00000161)➞
					>holds data present else where too
					>its aim to speed up instruction/data fetching
					>verb: refers to preloading some data to an intermediate medium which is faster than the original
					>when requested data is present in the cache and therefor can be read from there its called a ĐĐcache hitĐĐ
					>when requested data is not present in the cache and therefor cannot be read from there its called a ĐĐcache missĐĐ
					>works seamlessly from the perspective of the requester
					>on a Đcache missĐ a cache line is over written with the requested data
					-processor
						>rather fast memory located physically closely to the registers
						>has multiple levels; hierarchical in speed and reversely in memory size
						>3 levels of cache is the norm as of 2022
					-cache line
						where ${W} is the word size
						where ${N} is an arbitrary [size_t], representing how much data shall be stored
							on a single line and decided by the manufacturer
.						Address: left most part of an ${W} sized memory address; since the cache stores in blocks
 	   						  it only has to refer to the start of the block as its easily calculateble if
 	   						  an address falls into (that; that + cache size) range
.						V: validity bit; signals whether the address is valid (starts at 0 on start up;
 	   					changes very quickly from 1 to 0 to 1 again when the lines address is modified)
.						D: dirty bit; signals if the cached data has been modifed
						┏━━━━━━━━━━━━━┳━━━┳━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
						┃   Address   ┃ V ┃ D ┃ Yellow(        Cached Data            ) ┃
						┗━━━━━━━━━━━━━┻━━━┻━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
						 <-${W}-${N}->  1   1  <---------------2^${N}------------------>
						>if its decided that its best to overwrite the line, first the dirty bit is checked
						  and if its true data is first synced to disc
					¤mapping methods
						>how the original memory corresponds to cache memory
						>cache lines are fixed sized
						>memory is symbolically split into blocks each block is as long as a cache line
						-fully associative
							>every cache line may contain any data block
							>the choose the best data to be cached an algorithm must be employed
							>usually the last used line is replaced on a cache miss
							Pros:
								>no matter what parts of memory are being used speed is consistent
							Cons:
								>every cache line must be checked whether it contains the requested block;
								  this makes scaling harder
								>checking is done simultaneously by a corresponding piece of hardware to every
								  cache line; that shit ain't cheap
						-direct
							>a cache line may only hold blocks from a pre-established set
							   ┏━━━━━━━━━━━━━┳━━━┳━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓                +-------------+
							1. ┃   Address   ┃ V ┃ D ┃ Yellow(        Cached Data            ) ┃}---------------|   Block-1   |
							   ┗━━━━━━━━━━━━━┻━━━┻━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ \              |             |
							   ┏━━━━━━━━━━━━━┳━━━┳━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  \             +-------------+
							2. ┃   Address   ┃ V ┃ D ┃ Yellow(        Cached Data            ) ┃}--\------------|   Block-2   |
							   ┗━━━━━━━━━━━━━┻━━━┻━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ \  \           |             |
							   ┏━━━━━━━━━━━━━┳━━━┳━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  \  \          +-------------+
							3. ┃   Address   ┃ V ┃ D ┃ Yellow(        Cached Data            ) ┃}--\--\---------|   Block-3   |
							   ┗━━━━━━━━━━━━━┻━━━┻━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ \  \  \        |             |
							   ┏━━━━━━━━━━━━━┳━━━┳━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  \  \  \       +-------------+
							4. ┃   Address   ┃ V ┃ D ┃ Yellow(        Cached Data            ) ┃}--\--\--\------|   Block-4   |
							   ┗━━━━━━━━━━━━━┻━━━┻━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ \  \  \  \     |             | 
							Pros:                                                                 \  \  \  \    +-------------+
								>cheaper to scale                                                  \  \  \  ^---|   Block-1   |
							Cons:                                                                   \  \  \     |             |
								>if blocks belonging to the same set are used continue-s after each  \  \  \    +-------------+
								  other, it completely ruins performance                              \  \  ^---|   Block-2   |
						-group associative                                                             \  \     |             |
							>cache lines may only hold blocks from pre-established sets                 \  \    +-------------+
							>multiple lines belong to the same set                                       \  ^---|   Block-3   |
							>middle ground of filly associative and direct map-ping                       \     |             |
							Pros:                                                                          \    +-------------+
								>cheaper than fully associative mapping                                     ^---|   Block-4   |
								>more reliable (and therefor faster if you zoom out the graph)                  |             |
								  than direct map-ping                                                          +-------------+
									   /┏━━━━━━━━━━━━━┳━━━┳━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓                +-------------+
									  / ┃   Address   ┃ V ┃ D ┃ Yellow(        Cached Data            ) ┃}---------..    |   Block-1   |
							Group 1. {  ┣━━━━━━━━━━━━━╋━━━╋━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫ \         #>---|             |
									  \ ┃   Address   ┃ V ┃ D ┃ Yellow(        Cached Data            ) ┃}-\-------^^    |             |
									   \┗━━━━━━━━━━━━━┻━━━┻━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ \ \            |             |
									   /┏━━━━━━━━━━━━━┳━━━┳━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  \ \           +-------------+
									  / ┃   Address   ┃ V ┃ D ┃ Yellow(        Cached Data            ) ┃}--\-\----..    |   Block-2   |
							Group 2. {  ┣━━━━━━━━━━━━━╋━━━╋━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫ \  \ \    #>---|             |
									  \ ┃   Address   ┃ V ┃ D ┃ Yellow(        Cached Data            ) ┃}-\--\-\--^^    |             |
									   \┗━━━━━━━━━━━━━┻━━━┻━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ \ \  \ \       |             |
							Pros:                                                                          \ \  \.#      +-------------+
								>cheaper to scale                                                           \ \   ^------|   Block-3   |
							Cons:                                                                            \ \         |             |
								>if blocks belonging to the same set are used continue-s after each           \ \        |             |
								  other, it completely ruins performance                                       \ \       |             |
						-group associative                                                                      \.#      +-------------+
							>cache lines may only hold blocks from pre-established sets                           ^------|   Block-4   |
							>multiple lines belong to the same set                                                       |             |
							>middle ground of filly associative and direct map-ping                                      |             |
							Pros:                                                                                        |             |
								>cheaper than fully associative mapping                                                  +-------------+
								>more reliable (and therefor faster if you zoom out the graph)                                          
								  than direct map-ping                                                                                  
		¤technologies	//(0x000000a8)➞
			SMART: //(0x00000162)➞
				>"Self-Monitoring Analysis and Reporting Technology"
				>the drive monitors it self and collects data on its own health so the user may suspect an upcoming failure beforehand
				// i think i lost data; ?!; make(/remake graph)
			RAID: //(0x00000163)➞
				>"Redundant Array of Inexpensive/Independent Drives"
				>using more drives as less
				>possible on either hardware or software level
				>RAID performance is optimal with identical drives
				¤kinds
					-JBOD
						>multiple physical drives holding a single partition
						>used for convenience
					-RAID 0
						>multiple physical drives holding a single partition and
						  distributing data evenly
						>used for convenience, drive sparing and performance
					-RAID 1
						>multiple disks mirroring, ie. holding the same data
						>used for data safety
					-RAID 5
						>3 or more drives sharing parity data for fault tolerance
						>used for data safety and having better space usage (as data does not have to be fully copied) than RAID 1
                        >a ĐĐsingleĐĐ drive may fail without data loss, a hot spare may prevent dataloss from a fail following
                          shortly after
					-RAID 10
						>or RAID 1+0
						>literally using both RAID 0 and RAID 1 (a single ĐpartitionĐ is getting mirrored)
						>used for convenience, drive sparing, performance and data safety
			ZFS:	//?!
				pass



	Expension_cards: //(0x00000164)➞
		>cards using buses operating on different voltages are designed
		  to not fit into incompatible slots, because such deed would likely
		  damage the equipment; such design is accomplished by having a notch
		  at different locations
		>the wider the connection ports, the faster the card theoretically ĐĐcouldĐĐ transfer data
		GPU: //(0x00000165)➞
			>"Graphics processing unit"
			>or graphics adapter
			>most modern day mobos have (a very shitty) one integrated
			>uses AGP or PCI slots to connect
		RAM: //(0x00000166)➞	
			>"Random Access Memory"
			>ĐĐSIMMĐĐs are predecessors of the DIMM technology, not continue-d
			>ĐĐRIMMĐĐs came after the DIMM technology, not continue-d
			>its best to keep them in the furthest slot from the CPU
			DIMM:
				>common technology
				-single or double-sided
					>memory chips are either installed on only one or both sides
					>"dual ranked" (double-sided)
					>Đsingle sided DIMMs actualy perform beterĐ
				-Parity
					>error checking technology
					>with every byte an extra bit is stored
					>the parity bit is set in such a way to make the number of 1-s
					  either always odd or always even (either one or the other)
					>if the parity bit doesnt reflect the data, that signals an error
				-ECC
					>Error-Correcting Code
					>a technology which by having and extra chip ensures read data from the
					  card is correct
					>more reliable
					>all components must be able to support it
					>if ECC and non ECC DIMMs are mixed, that will cause the system to not work
					>possibly must be enabled in the BIOS
				Speed:
					>MHz
					>PC rating
		Sound_card: //(0x00000167)➞
			>most mobos have (not so quality but more then fine for personal use) one integrated
			>provides professional audio processing
		Network_interface_card: //(0x00000168)➞
			>"NIC"
			>allows for networking functionality
			>stores a MAC address (see AT "/Networking/?!")
			>most mobos have one integrated
		TV_tuner_card: //(0x00000169)➞
			>a card that processes cable TV signal
			>commonly combined with a Đcapture cardĐ
		Capture_card: //(0x0000016a)➞
			>a card dedicated to capturing video
			>commonly combined with a ĐTV tuner cardĐ
		Riser: //(0x0000016b)➞
			>redirects a GPU, most commonly in a 90° angle, or perhaps, by the use of two disconnected
			  card pieces and a USB cable, to any desired position


	Cooling: //(0x0000016c)➞
		¤dev
			>fans
			>heatsinks
			>liquid cooling



	Accessories: //(0x0000016d)➞
		Keyboards: //(0x0000016e)➞
			-keyboard key values:
				>control keys {shift, ctrl}, contrary to common belief, dont modify the key value
Purple(-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------)
				>look for keys where they are located at the board
				>all keys returning a printable char are not marked
Purple(-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------)
				+----------+   +----------+----------+----------+----------+   +----------+----------+----------+----------+   +----------+-----------+-----------+------.----+   +--------------+----------------+--------------+
				| Esc = 27 |   | F1 = 112 | F2 = 113 | F3 = 114 | F4 = 115 |   | F5 = 116 | F6 = 117 | F7 = 118 | F8 = 119 |   | F9 = 120 | F10 = 121 | F11 = 122 | F12 = 123 |   | Ptr Scr = 44 | Scrl lck = 145 | Pause  =  19 |
				+----------+   +----------+----------+----------+----------+   +----------+----------+----------+----------+   +----------+-----------+-----------+------.----+   +--------------+----------------+--------------+

																																							 +----------------+   +--------------+----------------+--------------+   +------------+----------+----------+----------+
																																							 | Backpspace = 8 |   | Insert  = 45 | Home   =   36  | Page Up = 33 |   | Nlck = 144 | N/ = 111 | N* = 106 | N- = 109 |
				+---------+																																	 +----------------+   +--------------+----------------+--------------+   +------------+----------+----------+----------+
				| Tab = 9 |																																						  | Delete  = 46 | End    =   35  | Page Dw = 34 |	 | N7   = 103 | N8 = 104 | N9 = 105 |          |
				+---------+-+																																	 +------------+	  +--------------+----------------+--------------+   +------------+----------+----------+ N+ = 107 |
				| CAPS = 20 |																												      				 | Enter = 13 |														 | N4   = 100 | N5 = 101 | N6 = 102 |          |
				+-----------++																											          				 +------------+                    +---------+                       +------------+----------+----------+----------+
				| Shift = 16 |																													  				 | Shift = 16 |                    | Up = 38 | 						 | N1   =  97 | N2 =  98 | N3 =  99 |   Enter  |
				+-----------++		   +----------+------------------------------------------------------------------+											 ++-----------+        +-----------+-----------+------------+        +------------+----------+----------+     =    |
				| Ctrl = 17 |          | Alt = 18 |                    Space = 32                                    |                                            | Ctrl = 17 |        | Left = 37 | Down = 40 | Right = 39 |		 |         N0 = 96       | N. = 110 |    13    |
				+-----------+ 		   +----------+------------------------------------------------------------------+											  +-----------+        +-----------+-----------+------------+        +------------+----------+----------+----------+
Purple(-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------)
			Keys:
				Sys_req:
					>[alt] + [ptr_scr]
					>"magical SYStem REQuest"
					>on some systems {Linux} it is used to communicate with the kernel and cannot be intercepted by any program
        Mice:
            >"computer mouse"
            -traditionally comes with at least 5 different inputs:
                >left click
                >right click
                >wheel rolled upward
                >wheel rolled downward
                >wheel pushed down
              NOTE: Apple managed to fuck even this up
            >inputs are often referred to by "Button" number
Green(
                         Button-3
                             │                   
               Button-1  _...│  Button-2     ┌───────────────┐
                      ╲.'  | │'.╱            │    .......    │          
                      /╲   |.' ╱\            │   |{_____}|   │ A
                     |  ╲ [_] ╱  |           │   |{_____}|   │ ┃
                     |     | ╲   |           │   |{_____}|   │ ┃ Button-4
                     |-----'--╲--|           │   |{_____}|   │ ┃
                     |         '─────────────┤   |{_____}|   │ ╋
                     |           |           │   |{_____}|   │ ┃
                     |;         .|           │   |{_____}|   │ ┃ Button-5
                     ;\         /;           │   |{_____}|   │ ┃
                      \\       ;/            │   '-------'   │ V
                  jgs  \'._ _.'/             └───────────────┘
)

	Ports: //(0x0000016f)➞
		Power: //(0x00000170)➞
			P1: //(0x00000171)➞
				>connects to the mobo
				>20, 24 or 20+4 (for compatibility) pins
				¤looks		//20 pin; close enough(ish)
					┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
					┃ ╭╮ ┌┐ ┌┐ ╭╮ ╭╮ ┌┐ ┌┐ ╭╮ ╭╮ ┌┐ ┃ 
					┃ └┘ └┘ └┘ └┘ └┘ └┘ └┘ └┘ └┘ └┘ ┃
					┃ ┌┐ ╭╮ ╭╮ ┌┐ ┌┐ ╭╮ ╭╮ ┌┐ ┌┐ ╭╮ ┃
					┃ └┘ └┘ └┘ └┘ └┘ └┘ └┘ └┘ └┘ └┘ ┃
					┗━━━━━━━━━━━━"░░░░░"━━━━━━━━━━━━┛
								"#######"
			AUX: //(0x00000172)➞
				>"auxiliary"
				>provides extra power to components
				>4, 6, 6+2 or 8 pins
				>an 8 pin AUX is no different form 2, 4 pin AUX-es
				¤looks		//6 pin
					┏━━━━━━━━━━┓
					┃ ┌┐ ┌┐ ┌┐ ┃
					┃ └┘ └┘ └┘ ┃
					┃ ┌┐ ┌┐ ┌┐ ┃
					┃ └┘ └┘ └┘ ┃
					┗━━━━━━━━━━┛
			Molex: //(0x00000173)➞
				>4 pins
				>used by PATA drives
				¤looks
					.---------.
					| O O O O |
					ˇ---------ˇ
		Data: //(0x00000174)➞
			GPIO: //(0x00000175)➞
				>"General Purpose Input/Output"
				>has no specific purpose
			Serial: //(0x00000176)➞
				>D89 port
				>9 pins
				¤looks
					 .---------.
					| O O O O O |
					 | O O O O |
					  ˇ-------ˇ
			Paralel: //(0x00000177)➞
				>25 pins
				>replaced by USB-s
				¤looks
					 .-------------------------.
					| O O O O O O O O O O O O O |
					 | O O O O O O O O O O O O |
					  ˇ-----------------------ˇ
			S_video: //(0x00000178)➞
				>4 or 7 pins
				¤looks
					   ...... 
					 . ###### .
					. O  OO  O .
					.  O    O  .
					 .   ##   .
					   ...... 
			VGA: //(0x00000179)➞
				>"Video Graphics Array port"
				>or DB-15
				>15 pins
				>analog video
				>used by displays
				¤looks
					 .-------------. 
					|   O O O O O   |
					 |   O O O O O |
					  | O O O O O |
					   ˇ---------ˇ
			DVI: //(0x0000017a)➞
				>"Digital Video interface port"
				>digital or analog video
				>designed to replace VGA
				¤kinds
					-DVI-D
						>single or dual link
						>digital only
					-DVI-A
						>analog only
					-DVI-I
						>digital or analog
				¤looks
						//DVI-D single			    //DVI-A					 	//DVI-I single
					 .--------------------. 	 .--------------------. 	 .--------------------.
					|      o o o     o o o |	| @I@  o o o       o o |	| @I@  o o o     o o o |
					| ¬¬¬  o o o     o o o |	| ¬¬¬  o o o           |	| ¬¬¬  o o o     o o o |
					|      o o o     o o o |	| @I@  o o         o o |	| @I@  o o o     o o o |
					 ˇ--------------------ˇ 	 ˇ--------------------ˇ		 ˇ--------------------ˇ
						//DVI-D dual			                        	 	//DVI-I dual
					 .--------------------. 	                        	 .--------------------.
					|      o o o o o o o o |	                        	| @I@  o o o o o o o o |
					| ¬¬¬  o o o o o o o o |	                        	| ¬¬¬  o o o o o o o o |
					|      o o o o o o o o |	                        	| @I@  o o o o o o o o |
					 ˇ--------------------ˇ 	                        	 ˇ--------------------ˇ
			HDMI: //(0x0000017b)➞
				>"High Definition Multimedia Interface"
				¤looks
					 .------------.
					|  """"""""""  |
					 ˇ.			 .ˇ
					   ˇˇˇˇˇˇˇˇˇˇ
			Modem: //(0x0000017c)➞
				¤R3-11 port
				¤looks
					## [""] ##
					##[    ]##
					|        |
					|        |
					|--------|

			Ethernet: //(0x0000017d)➞
				>network || RJ-45 port
				¤looks
					## ["="] ##
					##[     ]##
					|         |
					|         |
					|---------|

			USB: //(0x0000017e)➞
				>"Universal Serial Bus port"
				>plenty of types
				¤types
					>the sizes are not proportional
					.----------------.
					:  _   _  _   _  :  USB Type A	//most common
					:################:
					'----------------'

					 /^^^^\
					|'    '|  USB Type B
					|_    _|
					'------'

					_.-----------._
					| _ _ _ _ _ _ |  USB Type C
					ˇ-...........-ˇ

					+-------+
					 \_____/   USB Mini A

					+-------+
					|       |  USB Mini B
					ˇ-------ˇ

					MMMMMMMM
					M""""""M  USB Micro A
					ˇˇˇˇˇˇˇˇ

					,mmmmmm.
					M""""""M  USB Micro B
					ˇˇˇˇˇˇˇˇ
					 _____________________
					|_ _ _ _|ˇ M_ _ _ _ _M  USB Micro B Super Speed
					^mmmmmmm^  \MMMMMMMMM/

				-4 pins up untill 2.x
					>VBUS (+5V power)
					>D- (data minus)
					>D+ (data plus)
					>GND (ground)
				-9 pins from 3.x
					>VBUS (+5V power)
					>D- (data minus)
					>D+ (data plus)
					>GND (ground)
					>SS_TXP (SuperSpeed Transmit Data+)
					>SS_TXM (SuperSpeed Transmit Data-)
					>GND_DRAIN (ground)
					>SS_RXM (SuperSpeed Receive Data-)
					>SS_RXP (SuperSpeed Receive Data+)
				¤Color coding
					White - version 1.x
					Black - version 2.x
					Blue  - version 3.0
					Teal  - version 3.0+	//"Teal" is a blueish-greenish color
					Red, Orange, Yellow - always under power (even when the computer is turned off)
			eSATA: //(0x0000017f)➞
				>extern SATA port
			PS2: //(0x00000180)➞
				>mini-DIN port
				>6 pins
				¤looks
					   ...... 
					 .   O O  .
					. O   ### #.
					. O   ### #.
					 .   O O  .
					   ...... 
			SATA: //(0x00000181)➞
				>see more AT "../Drives/HDD/SATA"
				¤looks
					~~~########~##
					##~#"ˇˇˇˇˇ"~~#
					##~~~~~~~~~~##
			IDE: //(0x00000182)➞
				>39 or 40 pins
				¤looks
					┏┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┳┓
					┣╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋╋┫
					┗┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┻┛

	Factors:
			>the specifications by which cases, PSU-s and mobos fit together
			ATX:
				>very common
				>non-proprietary
				-power:
					>see AT "../Power"
					>ps1
					>aux
					>molex
			MATX:
				>microATX
				>ATX variation that is more compact
			ITX:
				>Mini-ITX
				>MATX variation, that is even smaller
			FlexATX
			BTX
			MicroBTX
			PicoBTX
			NLX

	Computer_models: //(0x00000183)➞
		CPU:	  CPU
		M:	  	  memory
		I/O:  	  I/O unit
		Green():  data bus
		Yellow(): control bus
		Blue():   address bus
		//------------------------------------------------------------------------------------------------------------------------------------------------
Green(		 ┌──────────────────┐                     																										)
		┏━━━━━━━━━┓        ┏━━━━━━━━━┓
		┃         ┃Yellow()┃         ┃
		┃   CPU   ┃        ┃    M ┌──┨
		┃         ┃Yellow()┃      │IO┃
		┗━━━━━━━━━┛        ┗━━━━━━┷━━┛
Blue(		 └──────────────────┘      																														)
		>I/O devices have a designated space in memory by which they are addressable
		//------------------------------------------------------------------------------------------------------------------------------------------------
		>NOTE: the CPU and the I/O unit are directly connected (through the 3th dimension)
Green(		┌───────────────────────────────────────┐
			│ ┌────────────────┐ ┌────────────────┐ │																										)
		┏━━━━━━━━━┓        ┏━━━━━━━━━┓        ┏━━━━━━━━━┓
		┃         ┃Yellow()┃         ┃Yellow()┃         ┃
		┃   CPU   ┃        ┃    M    ┃        ┃   I/O   ┃
		┃         ┃Yellow()┃         ┃Yellow()┃         ┃
		┗━━━━━━━━━┛        ┗━━━━━━━━━┛        ┗━━━━━━━━━┛ 
Blue(		│ └────────────────┘ └────────────────┘ │
		    └───────────────────────────────────────┘																										)
		IO_unit:
			>handles all information to be displayed
		CPU_and_IO_unit:
			¤means of communication
				1. Polling ("Pollozgatás"^HU); continuous checking by the CPU for operations
				2. Interrupts; the I/O unit sends a signal for the CPU requesting immediate handling;
				    the CPU stops what its currently doing, handles the request, than continue-s
				3. With a DMA (see BELOW)
		//------------------------------------------------------------------------------------------------------------------------------------------------
Green(		┌───────────────────────────────────────┐
			│ ┌────────────────┐ ┌────────────────┐ │																										)
		┏━━━━━━━━━┓        ┏━━━━━━━━━┓        ┏━━━━━━━━━┓
		┃         ┃Yellow()┃         ┃Yellow()┃         ┃
		┃   CPU   ┃        ┃    M ┌──┨        ┃   I/O   ┃
		┃         ┃Yellow()┃      │IO┃Yellow()┃         ┃
		┗━━━━━━━━━┛        ┗━━━━━━┷━━┛        ┗━━━━━━━━━┛ 
Blue(		│ └────────────────┘ └────────────────┘ │
		    └───────────────────────────────────────┘																										)
		>the I/O partition designated in memory makes a return very fast, because it turns out its a bloody good way of doing things
		IO_unit:
			>handles settings and options {terminal color, cursor position, ${COLUMNS}, ${LINES}}
		Memory_IO_partition:
			>handles raw data to be displayed
		//------------------------------------------------------------------------------------------------------------------------------------------------
		DMA:
			>"Direct Memory Access unit"
			>faster than using interrupts as those cause an over head when the new stack frame handling it is created
			>sends DMA requests (DMAREQ-s) to the CPU
			>DMA requests are answered with a DMA acknowledgements, after which the CPU stops
			-part of the bus system
				>NOTE: every component is directly connected to every other, with all 3 types of buses
Yellow(									  DMAREQ
	   									<---------																											)
Green(			┌──────────────────────────────────────────────────────────┐
				│ ┌────────────────┐ ┌────────────────┐ ┌────────────────┐ │		   																		)
			┏━━━━━━━━━┓        ┏━━━━━━━━━┓        ┏━━━━━━━━━┓        ┏━━━━━━━━━┓
			┃         ┃Yellow()┃         ┃Yellow()┃         ┃Yellow()┃         ┃
			┃   CPU   ┃        ┃    M ┌──┨        ┃   I/O   ┃        ┃   DMA   ┃
			┃         ┃Yellow()┃      │IO┃Yellow()┃         ┃Yellow()┃         ┃
			┗━━━━━━━━━┛        ┗━━━━━━┷━━┛        ┗━━━━━━━━━┛        ┗━━━━━━━━━┛  
Blue(			│ └────────────────┘ └────────────────┘ └────────────────┘ │
			    └──────────────────────────────────────────────────────────┘		   																		)
Yellow(									  DMAACK
	   									--------->																											)
			¤modes
				-burst:
					>continuous
					Pros:
						>fastest means of data transfer
					Cons:
						>the CPU awaits for a significantly long time (ie. no execution in the mean while)
				-cycle steal:
					>data is transferred at fixed sized pieces
					>between transfers the CPU is given back control
					>used when there's a significant speed difference between the data destination and source
				-transparent:
					>"transparent" from the view of the processor
					>when it's certain that the CPU is not using the memory the DMA seamlessly uses the time to do its own business
					Pros:
						>doesnt slow down execution at all
					Cons:
						>slowest way of data transfer

	Serial_port: //(0x00000184)➞
		¤IBM I/O address and interrupt request presets
			>COM<int> signals a serial device
			>LPT<int> signals a parallel device
			+------+-------------+-----+
			| Port | I/O Address | IRQ |
			+------+-------------+-----+
			| COM1 |       0x3F8 |   4 |
			| COM2 |       0x2F8 |   3 |
			| COM3 |       0x3E8 |   4 |
			| COM4 |       0x2E8 |   3 |
			| LPT1 |       0x378 |   7 |
			| LPT2 |       0x278 |   5 |
			+------+-------------+-----+
		¤differentiation
			-COM<int> is selected by the user with jumpers
			-unique COM identifier burnt into every device; processed on system start up
Purple(		Serial rail connection
	   			1. akinek '1' bekapcs
	   			2. akinek '1' kikapcs
	   			3. felezés
)
Purple(		   ┏━━━━━━━━━┓
			 ──┨ A1   D0 ┠───
			   ┃         ┃
			 ──┨ A2   D1 ┠───
			   ┃         ┃
			 ──┨ A1   D2 ┠───
			   ┃         ┃
			   ┃      D3 ┠───
			   ┃         ┃
			 ──┨ RD   D4 ┠───
			   ┃         ┃
			 ──┨ WR   D5 ┠───
			   ┃         ┃
			   ┃      D6 ┠───
			   ┃         ┃
			 ──┨ CS   D7 ┠───
			   ┗━━━━━━━━━┛)
				-A0-A2
					>address wires
					>on 3 bits its capable of addressing 8 different addresses
					>selects one of D0-D7
				-RD
					>"ReaD"
					>signals the intent an intent of reading
				-WR
					>"WRite"
					>signals the intent an intent of writing
				-CS
					>"Chip Select"
					>disables/enables the whole chip

	Settings: //(0x00000185)➞
		-DIP switches
			>like actual, fucking, little switches
		-Jumpers
			>a set of pins which must be "jumped", ie connected with a little cap
			  in a specific way to change a setting
		BIOS:
			>mostly deeply mobo specific, please refer to the cards documentation
			>access by pressing or possibly holding a specific key while booting
			¤most common BIOS access keys:
				<F1>  or  <F2>  or  <F10>  or  <Del>
				<Ctrl>  and  <Alt>  and  <S>
				<Ctrl>  and  <Alt>  and  <Enter>
			>BIOS settings are often stored with the help of a ĐCROM and a dedicated batteryĐ (see ABOVE)
			¤most commonly available options:
				>boot order changing
				>enabling UEFI boot
				>disabling ports
				>enabling intrusion detection	//having a cable connected to the case, monitoring and logging when its opened; move; ?!
				>enabling virtualization
				>turning on SMART (see AT /Hardware/Drives/HHD)
				>restore settings to default


	Overclocking: //(0x00000186)➞
		pass

	Boot_process: //(0x00000187)➞
		UEFI:
			>successor of BIOS booting
			>the BIOS hands over the boot process to the OS

	Networking_Hardware: //(0x00000188)➞
		>see AT "/Networking/Networking_Hardware"

	CASIO_CLASSWIZ_fx85CE_X: //(0x00000189)➞
		>pressing the <SHIFT> or <ALPHA> key followed by a second key
          performs the alternate function
		¤Reading the display
			+--------------------------------+
			| [.........Indicators.........] |
			| [.....Input.....]              |
			| [...............]              |
			|                                |
			|                         [ANS]  |
			+--------------------------------+
			Indocators:
				▲		: theres more, older calculation history
				▼		: theres more, more recent calculation history
				▶		: the display continues on the right
				◀		: the display continues on the left
				S		: <SHIFT> is on
				A		: <ALPHA> is on
				D|R|G	: "Degree/Radian/Gradian"; indicates the currently used angle unit
				FIX		: a fixed number of decimal places is in effect
				SCI		: a fixed number of significant digits is in effect
				M		: there is a value stored in ${M}
				->x		: standing by for a variable to be assigned
				ˇ□✏		: Mathl/MathO is selected for I/O
				[pause]	: an intermediate is shown
				*		: indicates that the solar panel is currently generating power
			ANS:
				>fractions in calculation results are displayed
                  after being reduced to their lowest terms
        ¤Menu
            +----+----+----+
            | x/ |  I | □□ |
            | +- | II | □□ |
            +----1----2----3
            1: Calculator
            2: Statistics
            3: Tables
		¤Setup:
			><SHIFT> + <MENU>
			+----------------------+----------------------+----------------------+
			|                      |                      |                      |
			|  1 : Bevitel/Kiírás  |  1 : Statisztika	  |  1 : Language		 |
			|  2 : Szög m. egys    |  2 : Táblázat		  |  2 : QR Code	     |
			|  3 : Számformátum    |  3 : Ezres tagolás   |  3 : Kontraszt	     |
			|  4 : Tört alakja     |  4 : Többsoros betű  |  				     |
			|                      |                      |                      |
			+----------------------+----------------------+----------------------+^HU
			1 : Bevitel/Kiírás:
				+-----------------+
				|  1:Mat be/Mat   |	#default_
				|  2:Mat be/Dec˙  |
				|  3:Sor be/Sor°  |
				|  4:Sor be/Dec°  |
				+-----------------+
				˙  : decimal output is applied when these formats cannot be output
				°  : all calculations input in a single line
			2 : Szög m. egys:
				>specifies angle unit
			3 : Számformátum
				>specifies format for_ the result
				+-----------------------+
				|  1 : Rögzített(Fix)   |
				|  2 : Tudományos(Sci)  |
				|  3 : Normál alak      |
				+-----------------------+
			4 : Tört alakja
				+------------+
				|  1 : ab/c  |
				|  2 : d/c   |
				+------------+
				>{ (5*10)/8 ==> 25/4 || 6*(1/4) }
			// -------------
			1 : Statisztika
				>specifies whether to display frequency column in Statistics Mode Statistics Editor
				+------------------+
				| Gyakoriság?	   |
				|   1 : Be         |
				|   2 : Ki         |
				+------------------+
			2 : Táblázat
				>specifies which functions to use in Table Mode
				+------------------+
				|  1 : f(x)        |
				|  2 : f(x), g(x)  |
				+------------------+
			3 : Ezres tagolás
				>specifies whether to use a separator char_ when displaying the results
				+------------------+
				| Számelválasztó?  |
				|   1 : Be         |
				|   2 : Ki         |
				+------------------+
			4 : Többsoros betű
				>specifies the font in /*Sor be/Sor"*/ and_ /*"Sor be/Dec"*/ Modes (see AT ''1 : Bevitel/Kiírás'')
				+---------------------+
				|  1 : Normál betű    |
				|  2 : Kis betűtipus  |
				+---------------------+
			// -------------
			1 : Language    : duh
			2 : QR Code
				>?!
			3 : Kontraszt   : duh
        Modes:
            calculator:
                >basic signs do what you would expect (+; -; *; /; ^[...]; ˇ[...])
                >operation priority is automatic
                >the cursor will change to a '■' when theres less then 10 bytes of input space remaining
                >putting a number immediately before parenthesis or a value {ˇ2} will result in a Yellow(multiplication) { 2(3*4) -> 24 };
                  however putting a number immediately AFTER will result in a Red(syntax error)
                >when squaring a negative value, the value being squared must be enclosed in parentheses,
                  since x^2 has a higher priority than the negative sign
                ¤percentage:
                    <SHIFT> + <ANS>		: writes a percentage ('%')
                    What is [x] percentage of [y]? ---> [y]*[x]%=	{ 30*50%  == 15 }
                    [x] is what percentage of [y]? ---> [x]/[y]%=	{ 70*200% == 35 }
                    [x]% ---> 1*[x]% { 5% == 1/20 }
                ¤degrees
                    <¤' ''>									: degree button
                    [int]<¤' ''>[int]<¤' ''>[int]<¤' ''>	: a [degree value] (degrees¤minutes'seconds''); always input minutes and seconds, 
                                                               even if the are 0; no need to 0 pad them tho;
                    [degree value]=<S<->D>					: convert degree with minutes and/or seconds to a degree fraction
                    [int]<¤' ''>							: convert degree fraction to a degree with minutes and/or seconds
                ¤multi-statement
                    <ALPHA> + <x+3>				: char colon
                    [equation]:[equation][...]	: execute all equation (independently) in a sequence,
                                                   allowing you switch between the results easily with the '=' button
                ¤prime factorization
                    <SHIFT> + <¤' ''>		: <factorial>
                    >have to get the prime factors of a number, have it in [ANS] (not ${ANS}) and press the <factorial> button
                    >only 10 or less digit numbers, or it results in a Red(mathematical error)
                ¤combinatorics
                    cPr:
                        <SHIFT> + <MUL>
                        [value-1]P[value-2]
                        >calculates "Permutation"
                    nCR:
                        <SHIFT> + <DIV>
                        [value-1]C[value-2]
                        >"Choose"
                        >[value-2] under [value-1]
                ¤History
                    >maneuver in history with the up and down arrows
                    >resets whenever the <ON> button is pressed
                ¤Variables
                    >they survive restarts
                    >[base] is a button corresponding to a variable
                    +--------+---------+
                    |  Name  | [base]  |
                    +--------+---------+
                    | ${ANS} | < = >   |
                    | ${A}   | <(-)>   |
                    | ${B}   | <°' ''> |
                    | ${C}   | <x^-1>  |
                    | ${D}   | <sin>   |
                    | ${E}   | <cos>   |
                    | ${F}   | <tg>    |
                    | ${M}   | <M+>    |
                    | ${x}   | <)>     |
                    | ${y}   | <S<=>D> |
                    +--------+---------+
                    ¤assignment
                        [value] + <STO> + [base]
                    ¤recalling
                        <ALPHA> + [base]
                    ¤list all
                        <SHIFT> + <STO>
                    ¤${M}
                        [value] + <M+>				: adds [value] to ${M}
                        [value] + <SHIFT> + <M+>	: subtracts [value] from ${M}
                        >"independent Memory"
                        >recall it as you would any other variable	
                    ¤Clear all
                        <SHIFT> + <9> & <2> & < = >
                ¤Misc:
                    <ALPHA> + <DEL>		: undo/redo; cant undo assignment to $ANS
                    <SHIFT> + <DEL>		: toggle insert mode;
                                            /*Mat be/Mat*/ and_ /*Mat be/Dec*/: grants the ability to place place expressions in '□'s 
                                                                                (x^□; 10_^□; e^□ ; ˇ□; 3ˇ□; xˇ□)
                                            /*Sor be/Sor"*/ and_ /*"Sor be/Dec"*/: overwrites to _char at the current position
                    <S<->D>				: toggle decimal and fractional|ˇ form
                    ¤randint syntax:
                        RandInt#([min]; [max])
            statistics:
                1. choose input type
                2. choose calculation
                { // I would like to get the mean of a list
                    1. with <MENU> open the mode menu
                    2. choose mode 2 for statistics
                    3. choose 1-var
                    4. in the newly displayed table start entering all values one by one,
                        they are '=' separeted
                    5. using <OPTN> choose 1-var statistics
                    6. interpret the info dump (this will contain the mean and
                        other things such as the min, max and standard deviation)
                }
            table:
                >creates a table from a function
                >NOTE: inside the function f(x), <ALPHA> + 'x' is the correct way
                        to refer to 'x'

#define file_systems\
#define filesystems: //(0x0000018a)➞\
I---------------------------------------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------------------------------------\
I	  /$$$$$$$$ /$$ /$$                  /$$$$$$                        /$$                                           \
I	 | $$_____/|__/| $$                 /$$__  $$                      | $$                                           \
I	 | $$       /$$| $$  /$$$$$$       | $$  \__/ /$$   /$$  /$$$$$$$ /$$$$$$    /$$$$$$  /$$$$$$/$$$$   /$$$$$$$     \
I	 | $$$$$   | $$| $$ /$$__  $$      |  $$$$$$ | $$  | $$ /$$_____/|_  $$_/   /$$__  $$| $$_  $$_  $$ /$$_____/     \
I	 | $$__/   | $$| $$| $$$$$$$$       \____  $$| $$  | $$|  $$$$$$   | $$    | $$$$$$$$| $$ \ $$ \ $$|  $$$$$$      \
I	 | $$      | $$| $$| $$_____/       /$$  \ $$| $$  | $$ \____  $$  | $$ /$$| $$_____/| $$ | $$ | $$ \____  $$     \
I	 | $$      | $$| $$|  $$$$$$$      |  $$$$$$/|  $$$$$$$ /$$$$$$$/  |  $$$$/|  $$$$$$$| $$ | $$ | $$ /$$$$$$$/     \
I	 |__/      |__/|__/ \_______/       \______/  \____  $$|_______/    \___/   \_______/|__/ |__/ |__/|_______/      \
I	                                              /$$  | $$                                                           \
I	                                             |  $$$$$$/                                                           \
I	                                              \______/                                                            \
I---------------------------------------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------------------------------------I

	>NOTE: zoomers, dont waste your time here, you will be filtered anyways



        Partitions: //(0x0000018b)➞
            >an abstracted ĐpartĐ of a disk
            >for normal uses and purposes a partition an be treated as a stand alone disk;
              ie. filesystems can be written into individual partitions
            >having multiple partitions allows for breaking up the disk logically and
              having a pallet of different types of filesystems
            //?!; does partitioning virtualize anything
            Partition_tables:
                >responsible for keeping track of partitions
                >always located at a conventional location on the disk
                >NOTE: some retarded OS-es (((Windows))) can see missing a partition table as an error and start auto-"repairing" it
                MBR:
                    >"Master Boot Record"
                    >max 4 partitions
                GPT:
                    >"GUID Partition Table"
                    >max 128 partitions
                    >has 2 copies, a primary and a backup

	FAT: //(0x0000018c)➞
		>"File Allocation Table"
		>max 2 TB
		>max 4 GB file size
		>most widely compatible (with operating systems)
		>most light on SSD-s (as in life time)
		¤file types:
			>files
			>folders
		-metadata:
			>creation
			>last change

	NTFS: //(0x0000018d)➞
		>"New Technology File System"
		>made by Microsoft and used by windows
		>max 16 EB
		>files can be as large as the partition
		¤file types:
			>files
			>folders
			>symlinks
			>hardlinks
		-metadata:
			>file owner
			>POSIX permissions
			>creation
			>last change
			>access control list
		¤file names:
			-disallowed chars
				/
				\
				?
				<
				>
				:
				*
				|
				"
			-disallowed file names:
				<string>.						// any filename ending with a dot ('.')
				com1
				com2
				com3
				com4
				com5
				com6
				com7
				com8
				com9
				lpt1
				lpt2
				lpt3
				lpt4
				lpt5
				lpt6
				lpt7
				lpt8
				lpt9
				con
				nul
				prn

	EXT: //(0x0000018e)➞
		>"EXTended file system"
		>made for and used by Linux (see AT "/Linux/File system")
		>max 4 EiB
		-metadata:
			>file owner
			>POSIX permissions
			>creation
			>last change
			>access control list

#define formats\
#define file_formats\
#define file_types\
#define filetypes: //(0x0000018f)➞\
I-------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------\
I             /$$$$$$$$ /$$ /$$               /$$$$$$$$                                                 \
I            | $$_____/|__/| $$              |__  $$__/                                                 \
I            | $$       /$$| $$  /$$$$$$        | $$ /$$   /$$  /$$$$$$   /$$$$$$   /$$$$$$$            \
I            | $$$$$   | $$| $$ /$$__  $$       | $$| $$  | $$ /$$__  $$ /$$__  $$ /$$_____/            \
I            | $$__/   | $$| $$| $$$$$$$$       | $$| $$  | $$| $$  \ $$| $$$$$$$$|  $$$$$$             \
I            | $$      | $$| $$| $$_____/       | $$| $$  | $$| $$  | $$| $$_____/ \____  $$            \
I            | $$      | $$| $$|  $$$$$$$       | $$|  $$$$$$$| $$$$$$$/|  $$$$$$$ /$$$$$$$/            \
I            |__/      |__/|__/ \_______/       |__/ \____  $$| $$____/  \_______/|_______/             \
I            							             /$$  | $$| $$                                      \
I            							            |  $$$$$$/| $$                                      \
I            							             \______/ |__/                                      \
I-------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------\
I-------------------------------------------------------------------------------------------------------I
    >"file formats"

        EXTENSIONS: //(0x00000190)➞
            name.extension
            >the traditional way to identify filetypes
            >in a file name, everything after a dot is an extension
            >extensions are usually abbreviations of file types
            { script.sh -> SHell script }

        MIMETYPE: //(0x00000191)➞
            type/subtype
            >"media type" // i dont think anyone alive knows what "MIME" stands for
            >IANA defined file type classification system
            >binary mimetypes have magick bytes associated with them which go at the
              start of the file for identification purposes
            {
                text/plain
                video/mp4
                application/octet-stream
            }

	Binary: //(0x00000192)➞
		pass
		Executable: //(0x00000193)➞
			ELF:
                #include <elf.h>
                >"Executable and Linkable Format"
                >de facto standard on *nix
                >cross architecture
                -header:
                    0x7F 'E' 'L' 'F'
                    word size byte
                ¤extensions
                    .elf
                    .o
                    .out
                    .prx
                    .puff
                    .ko
                    .mod
                    .so
                Tools:
                    readelf <flag>+ <file>+
        Fat_binary:
            >contains the bytecode for multiple architectures
            >the header or an all compatible jmp is responsible for selecting
              the right chapter for the current architecture
            >used for convinience of distribution


	Plain_text: //(0x00000194)➞
		Value: //(0x00000195)➞
			{
				<value>
			}
			>the file contains only a single value
			>the "key" (identifier) it belongs to is deducted from the file name
			>UNIX like systems heavily use this format for their virtual files
			{ // $ bat /proc/sys/kernel/panic_on_oops
				───────┬──────────────────────────────────────────
				       │ File: /proc/sys/kernel/panic_on_oops
				───────┼──────────────────────────────────────────
				   1   │ 0
				───────┴──────────────────────────────────────────
			}
		List: //(0x00000196)➞
			{
				<value>(<separator><value>)+
			}
			>some number of values segregated by a special token
			><separator> is most commonly a new line ('\n')
			{ // Python requirements.txt file
				numpy
				pandas
				matplotlib
				requests
				scikit-learn
				tensorflow
				beautifulsoup4
				flask
				django
				pytorch
			}
		CSV: //(0x00000197)➞
			>"Comma Separated Values"
			>used for storing spreadsheets and databases
			>2 dimensional list files
			>all ĐfieldsĐ are separated by commas
			>the first line may store the name of the <int>th column
			{ [Field_name1](,[...])
			  [Field_value1](,[...])
			}
		cfg: //(0x00000198)➞
			{
				(
				<key>=<value>
				)
			}
			>may or may not be whitespace sensitive around the '='
		ini: //(0x00000199)➞
			{
				(
				<label>
				<assignment>+
				)+
			}
			¤<label>
				[<string>]
				>signals in what context the assignments BELOW should be interpreted
				>serves as a sort of namespace
			¤<assignment>
				<string-key> = <string-value>
			Pros:
				>eliminates redundancy which would be caused by key (name) prefixing
			Cons:
				>statements are context dependent -> harder and less flexible to parse
			{ // Qterminal ini file (partial)
				[General]
				AskOnExit=false
				fontSize=10

				[MainWindow]
				ApplicationTransparency=5
				pos=@Point(200 100)
				size=@Size(640 480)
			}
		JSON: //(0x0000019a)➞
			>"JavaScript Object Notation"
			>deserialization format designed for storing Javascript objects as string
			>has no standard way to handle methods/inheritance
			>has no hard ties to Javascript
			>extremely versatile and flexible
			>adopted for many languages
			¤extensions
				.json
			Values:
				>starts with white space and ends with white space { 3 }
				-string
					>"[...]"
				-number
					>int
					>float
					>scientific representation
				-bool
					>true
					>false
				>null
				-array
					>[[white_space][value](,[white_space][value](...))[white_space]]
				-object
					>key-value pairs
					>{[white_space]<string>[white_space]:[value](,[white_space]<string>[white_space]:[value](,[...]))}
		yaml:
            YYY:
                https://web.archive.org/web/20240309094004/https://ruudvanasseldonk.com/2023/01/11/the-yaml-document-from-hell
			>"Yet Another Markup Language"/"Yaml Ain't Markup Language"
            >absolute cancer, TOTAL YAML DEATH (see AT the link ABOVE)
			¤extensions
				.yml
				.yaml
			>super set of JSON
			¤special symbols
				#    : comment
.				---  : document start
				...  : document end
			¤supports 2 syntax styles
				-block:
					>indentation determines the document structure
					>tabs are not allowed
					>a single space (difference) is enough
					>list items are prefixed by "- "
				-flow:
					>guarantees JSON compatibility


	Extention_refrence_table: //(0x0000019b)➞
		c			: C/C++ file (see AT "/C++/Files")
		cc			: C/C++ file (see AT "/C++/Files")
		C			: C/C++ file (see AT "/C++/Files")
		cs			: C# File (see AT "/C#/Files")
		cp			: C/C++ file (see AT "/C++/Files")
		cpp			: C/C++ file (see AT "/C++/Files")
		cxx			: C/C++ file (see AT "/C++/Files")
		c++			: C/C++ file (see AT "/C++/Files")
		i			: C/C++ file (see AT "/C++/Files")
		ii			: C/C++ file (see AT "/C++/Files")
		o			: C/C++ file (see AT "/C++/Files")
		h			: C/C++ file (see AT "/C++/Files")
		hpp			: C/C++ file (see AT "/C++/Files")
		py			: Python script file (see AT "/Python")
		pyc			: Compiled Python script (see AT "/Python")
		sh			: Shell script file (see AT "/Bash")
		md			: Markdown file (see AT "/Documentation/Markdown")
		tex			: LaTeX document (see AT "/Latex")
		html		: HTML file (see AT "/HTML")
		css			: CSS file (see AT "/CSS")
		js			: JavaScript script file (see AT "/JavaScript")
        raw         : Raw 3D Mesh; ascii plain text
        obj         : Waveform 3D object; ascii plain text
        ply         : Stanford University poligon object file


#define metadata:: //(0x0000019c)➞\
 __  __      _            _       _         \
|  \/  |    | |          | |     | |        \
| \  / | ___| |_ __ _  __| | __ _| |_ __ _  \
| |\/| |/ _ \ __/ _` |/ _` |/ _` | __/ _` | \
| |  | |  __/ || (_| | (_| | (_| | || (_| | \
|_|  |_|\___|\__\__,_|\__,_|\__,_|\__\__,_| I

    -get fucked buddy:
        >the tooling is terrible
        >arbirary limitations that does not even fit the task
        -NOTE: seriously now, it should be this easy:
            >magic-byte + plaintext dictionary
            >reserve single chars of 7-bit ascii for special (encoded/tokenized) keys
            >non-alpha order is undefined
            >(perhaps) align pairs
            The above should be reasonably fast, storage efficient and takes
            an afternoon to implement, but big corpo choose sloppy self-deprecating headers
            instead for some reason? i dont get it.

#define id3::: //(0x0000019d)➞\
 ___ ___ ____ \
|_ _|   \__ / \
 | || || |_ \ \
|___|___/___/ I
    >the support is shit
	¤fields
		+---------------+--------------+
		|     Field     |    Bytes     |
		+---------------+--------------+
		| header        | 3            |
		| title         | 30           |
		| artist        | 30           |
		| album         | 30           |
		| year          | 4            |
		| comment       | 28[7] or 30  |
		| zero-byte[7]  | 1            |
		| track[7]      | 1            |
		| genre         | 1            |
		+---------------+--------------+
		¤genre
			>stored as an int
			+---------+------------------------+
			| Number  |          Genre         |
			+---------+------------------------+
			| 00      | Blues                  |
			| 01      | Classic rock           |
			| 02      | Country                |
			| 03      | Dance                  |
			| 04      | Disco                  |
			| 05      | Funk                   |
			| 06      | Grunge                 |
			| 07      | Hip-Hop                |
			| 08      | Jazz                   |
			| 09      | Metal                  |
			| 10      | New Age                |
			| 11      | Oldies                 |
			| 12      | Other                  |
			| 13      | Pop                    |
			| 14      | Rhythm and Blues       |
			| 15      | Rap                    |
			| 16      | Reggae                 |
			| 17      | Rock                   |
			| 18      | Techno                 |
			| 19      | Industrial             |
			| 20      | Alternative            |
			| 21      | Ska                    |
			| 22      | Death metal            |
			| 23      | Pranks                 |
			| 24      | Soundtrack             |
			| 25      | Euro-Techno            |
			| 26      | Ambient                |
			| 27      | Trip-Hop               |
			| 28      | Vocal                  |
			| 29      | Jazz & Funk            |
			| 30      | Fusion                 |
			| 31      | Trance                 |
			| 32      | Classical              |
			| 33      | Instrumental           |
			| 34      | Acid                   |
			| 35      | House                  |
			| 36      | Game                   |
			| 37      | Sound clip             |
			| 38      | Gospel                 |
			| 39      | Noise                  |
			| 40      | Alternative Rock       |
			| 41      | Bass                   |
			| 42      | Soul                   |
			| 43      | Punk                   |
			| 44      | Space                  |
			| 45      | Meditative             |
			| 46      | Instrumental Pop       |
			| 47      | Instrumental Rock      |
			| 48      | Ethnic                 |
			| 49      | Gothic                 |
			| 50      | Darkwave               |
			| 51      | Techno-Industrial      |
			| 52      | Electronic             |
			| 53      | Pop-Folk               |
			| 54      | Eurodance              |
			| 55      | Dream                  |
			| 56      | Southern Rock          |
			| 57      | Comedy                 |
			| 58      | Cult                   |
			| 59      | Gangsta                |
			| 60      | Top 40                 |
			| 61      | Christian Rap          |
			| 62      | Pop/Funk               |
			| 63      | Jungle                 |
			| 64      | Native US              |
			| 65      | Cabaret                |
			| 66      | New Wave               |
			| 67      | Psychedelic            |
			| 68      | Rave                   |
			| 69      | Show tunes             |
			| 70      | Trailer                |
			| 71      | Lo-Fi                  |
			| 72      | Tribal                 |
			| 73      | Acid Punk              |
			| 74      | Acid Jazz              |
			| 75      | Polka                  |
			| 76      | Retro                  |
			| 77      | Musical                |
			| 78      | Rock ’n’ Roll          |
			| 79      | Hard rock              |
			| 80      | Folk          		   |
			| 81      | Folk-Rock              |
			| 82      | National Folk          |
			| 83      | Swing                  |
			| 84      | Fast Fusion            |
			| 85      | Bebop                  |
			| 86      | Latin                  |
			| 87      | Revival                |
			| 88      | Celtic                 |
			| 89      | Bluegrass              |
			| 90      | Avantgarde             |
			| 91      | Gothic Rock            |
			| 92      | Progressive Rock       |
			| 93      | Psychedelic Rock       |
			| 94      | Symphonic Rock         |
			| 95      | Slow rock              |
			| 96      | Big Band               |
			| 97      | Chorus                 |
			| 98      | Easy Listening         |
			| 99      | Acoustic               |
			| 100     | Humour                 |
			| 101     | Speech                 |
			| 102     | Chanson                |
			| 103     | Opera                  |
			| 104     | Chamber music          |
			| 105     | Sonata                 |
			| 106     | Symphony               |
			| 107     | Booty bass             |
			| 108     | Primus                 |
			| 109     | Porn groove            |
			| 110     | Satire                 |
			| 111     | Slow jam               |
			| 112     | Club                   |
			| 113     | Tango                  |
			| 114     | Samba                  |
			| 115     | Folklore               |
			| 116     | Ballad                 |
			| 117     | Power ballad           |
			| 118     | Rhythmic Soul          |
			| 119     | Freestyle              |
			| 120     | Duet                   |
			| 121     | Punk Rock              |
			| 122     | Drum solo              |
			| 123     | A cappella             |
			| 124     | Euro-House             |
			| 125     | Dancehall              |
			| 126     | Goa                    |
			| 127     | Drum & Bass            |
			| 128     | Club-House             |
			| 129     | Hardcore Techno        |
			| 130     | Terror                 |
			| 131     | Indie                  |
			| 132     | BritPop                |
			| 133     | Negerpunk              |
			| 134     | Polsk Punk             |
			| 135     | Beat                   |
			| 136     | Christian Gangsta Rap  |
			| 137     | Heavy Metal            |
			| 138     | Black Metal            |
			| 139     | Crossover              |
			| 140     | Contemporary Christian |
			| 141     | Christian rock         |
			| 142     | Merengue               |
			| 143     | Salsa                  |
			| 144     | Thrash Metal           |
			| 145     | Anime                  |
			| 146     | Jpop                   |
			| 147     | Synthpop               |
			| 148     | Abstract               |
			| 149     | Art Rock               |
			| 150     | Baroque                |
			| 151     | Bhangra                |
			| 152     | Big beat               |
			| 153     | Breakbeat              |
			| 154     | Chillout               |
			| 155     | Downtempo              |
			| 156     | Dub                    |
			| 157     | EBM                    |
			| 158     | Eclectic               |
			| 159     | Electro                |
			| 160     | Electroclash           |
			| 161     | Emo                    |
			| 162     | Experimental           |
			| 163     | Garage                 |
			| 164     | Global                 |
			| 165     | IDM                    |
			| 166     | Illbient               |
			| 167     | Industro-Goth          |
			| 168     | Jam Band               |
			| 169     | Krautrock              |
			| 170     | Leftfield              |
			| 171     | Lounge                 |
			| 172     | Math Rock              |
			| 173     | New Romantic           |
			| 174     | Nu-Breakz              |
			| 175     | Post-Punk              |
			| 176     | Post-Rock              |
			| 177     | Psytrance              |
			| 178     | Shoegaze               |
			| 179     | Space Rock             |
			| 180     | Trop Rock              |
			| 181     | World Music            |
			| 182     | Neoclassical           |
			| 183     | Audiobook              |
			| 184     | Audio theatre          |
			| 185     | Neue Deutsche Welle    |
			| 186     | Podcast                |
			| 187     | Indie-Rock             |
			| 188     | G-Funk                 |
			| 189     | Dubstep                |
			| 190     | Garage Rock            |
			| 191     | Psybient               |
			+---------+------------------------+

#define exif::: //(0x0000019e)➞\
I  _____  _____ ___  \
I | __\ \/ /_ _| __| \
I | _| >  < | || _|  \
I |___/_/\_\___|_|   I
    >"EXchangeable Image File format"
    >widely used
    -used for storing:
        >camera information and settings
        >date
        >location
        >thumbnail
        >notes
        >copyright
    -only defined to be applicable to a handful of formats:
        >jpeg
        >png
        >webp
        >tiff
        >wav (and variations)
    >tools (usually) refuse to operate on non-standard compatible filetypes

    Programgs:
        exif
        exiftool
        imageMagik

#define audio:: //(0x0000019f)➞\
I---------------------------------\
I                     _ _         \
I      /\            | (_)        \
I     /  \  _   _  __| |_  ___    \
I    / /\ \| | | |/ _` | |/ _ \   \
I   / ____ \ |_| | (_| | | (_) |  \
I  /_/    \_\__,_|\__,_|_|\___/   \
I---------------------------------I
#define mp3::: //(0x000001a0)➞\
 __  __ ___ ____ \
|  \/  | _ \__ / \
| |\/| |  _/|_ \ \
|_|  |_|_| |___/ I
	>compressed
	>quality is largely dependent on bit rate
	-common bit rates:
		128
		160
		192
		256
	>metadata: ID3

#define flac\
 ___ _      _   ___  \
| __| |    /_\ / __| \
| _|| |__ / _ \ (__  \
|_| |____/_/ \_\___| I
	>"Free Lossless Audio Codec"
	>lossless

#define m4a\
 __  __ _ _   _    \
|  \/  | | | /_\   \
| |\/| |_  _/ _ \  \
|_|  |_| |_/_/ \_\ I



#define m4a\
__      _____   __ \
\ \    / /_\ \ / / \
 \ \/\/ / _ \ V /  \
  \_/\_/_/ \_\_/   I
	>"WAVeform audio file"

#define wma\
__      ____  __   _    \
\ \    / /  \/  | /_\   \
 \ \/\/ /| |\/| |/ _ \  \
  \_/\_/ |_|  |_/_/ \_\ I
	>"Windows Media Audio"

#define aac\
   _      _   ___  \
  /_\    /_\ / __| \
 / _ \  / _ \ (__  \
/_/ \_\/_/ \_\___| I
	>"Advanced Audio Coding"

#define image:: //(0x000001a1)➞\
I--------------------------------------\
I   _____                              \
I  |_   _|                             \
I    | |  _ __ ___   __ _  __ _  ___   \
I    | | | '_ ` _ \ / _` |/ _` |/ _ \  \
I   _| |_| | | | | | (_| | (_| |  __/  \
I  |_____|_| |_| |_|\__,_|\__, |\___|  \
I                          __/ |       \
I                         |___/        \
I--------------------------------------I
#define bmp::: //(0x000001a2)➞\
 ___ __  __ ___  \
| _ )  \/  | _ \ \
| _ \ |\/| |  _/ \
|___/_|  |_|_|   I
    >"BitMaP"
    >stores images as an uncompressed array of pixel values
    >alpha capable

    Pros:
        >lossless
        >very widely supported
        >implementations are simple
        >no decompression -> speed
        >ideal for performance sensitive tasks (games)
          (exception: ultra HD graphics where even the compressed textures
            will take 100s of GiBs to store)
    Cons:
        >very large image sizes

#define gif::: //(0x000001a3)➞\
  ___ ___ ___  \
 / __|_ _| __| \
| (_ || || _|  \
 \___|___|_|   I
    >"Graphic Interchange Format"
    >each pixel value is stored as a reference (index value) to a color table
    >supports animation
    >known as THE animated image format
    >only 256 different colors are allowed at any frame
    >its techically lossless, but fucks up the colors
    ¤processing
        convert to YCbCr ->
        segment          ->
        -127             ->
        DCT              ->
        huffman          ->
        quantification

    Pros:
        >widely supported
        >reasonable implementation comprexity
        >reasonable sizes
        >reasonable decoding times
        >ideal for transfering unimportant images (memes) over slow connections (early internet)
          for slow machines (early PCs)
    Cons:
        >mangles colors ruin the image quality
        >not ideal for long term storage

#define png::: //(0x000001a4)➞\
 ___ _  _  ___  \
| _ \ \| |/ __| \
|  _/ .` | (_ | \
|_| |_|\_|\___| I
    >"Portable Network Graphics"/"PNG is Not GIF"
    >RGB only

    Pros:
        >lossless
    Cons:
        >mildly difficult implementation
        >mildly expensive encoding

#define jpg\
#define jpeg::: //(0x000001a5)➞\
    _ ___ ___ ___  \
 _ | | _ \ __/ __| \
| || |  _/ _| (_ | \
 \__/|_| |___\___| I
    >"Joint (P)hotographic Experts Group"

    >8x8 blocks
    >3 channels
    >YUV

    Pros:
        >compresses well
    Cons:
        >lossy (NOTE: lossless variant is available)

    JP2:
        >"JPeg 2000"
        >no blocks
        >exif metadata swapped out for XML
        >256 channels
        >EBCOT compression
        Pros:
            >it is possible to store different parts of the same picture using different quality
            >decodable multiple resolutions (saving computational time {for thumbnails})
        Cons:
            >high implementation complex
            >high decoding times
            >terrible support (i dont think i saw one in my life)   // 2024

#define asm\
#define assembly: //(0x000001a6)➞\
I-----------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------\
I			  /$$$$$$                                             /$$       /$$          			  \
I			 /$$__  $$                                           | $$      | $$          			  \
I			| $$  \ $$  /$$$$$$$ /$$$$$$$  /$$$$$$  /$$$$$$/$$$$ | $$$$$$$ | $$ /$$   /$$			  \
I			| $$$$$$$$ /$$_____//$$_____/ /$$__  $$| $$_  $$_  $$| $$__  $$| $$| $$  | $$			  \
I			| $$__  $$|  $$$$$$|  $$$$$$ | $$$$$$$$| $$ \ $$ \ $$| $$  \ $$| $$| $$  | $$			  \
I			| $$  | $$ \____  $$\____  $$| $$_____/| $$ | $$ | $$| $$  | $$| $$| $$  | $$			  \
I			| $$  | $$ /$$$$$$$//$$$$$$$/|  $$$$$$$| $$ | $$ | $$| $$$$$$$/| $$|  $$$$$$$			  \
I			|__/  |__/|_______/|_______/  \_______/|__/ |__/ |__/|_______/ |__/ \____  $$			  \
I						                                                        /$$  | $$			  \
I						 (((assembly)))                                        |  $$$$$$/			  \
I				   							                                    \______/ 			  \
I-----------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------I

    -it is said that assmebly one-to-one corresponds to machine code;
      it does not; there is a bunch of redundancy:
        >common operations may have their own instruction codes
        >instructions may ignore certain bits
        >prefixes may be senselessly applied to absurdity
        >different assembly instructions may be implemented as the same machine instruction
        >assemblers may choose a different logically equivalent operations if its shorter
        >assemblers may evaluate what should be illegal machine code at build time,
          resulting in valid machine code

	>NOTE: most of the following are from various Intel sources, 
	        so the syntaxes will be Intel assembler specific;
            syntaxes are discussed in greater detail later on

    >NOTE: abstract hardware concepts come here too
        

	MEMORY: //(0x000001a7)➞
		Measurement:
			+-----------------+----------+-----------------------------------+
			|       Name      | Equation |             In bytes              |
			+-----------------+----------+-----------------------------------+
			| bit (b)         | N/A      | 1/8                               |
			| byte (B)        | 8 bits   | 1                                 |
			| kilobyte (KB)   | 1000^1   | 1.000                             |
			| kibibyte (KiB)  | 1024^1   | 1.024                             |
			| megabyte (MB)   | 1000^2   | 1.000.000                         |
			| mebibyte (MiB)  | 1024^2   | 1.048.576                         |
			| gigabyte (GB)   | 1000^3   | 1.000.000.000                     |
			| gibibyte (GiB)  | 1024^2   | 1.073.741.824					 |
			| terabyte (TB)   | 1000^4   | 1.000.000.000.000                 |
			| tebibyte (TiB)  | 1024^4   | 1.099.511.627.776				 |
			| petabyte (PB)   | 1000^5   | 1.000.000.000.000.000             |
			| pebibyte (PiB)  | 1024^5   | 1.125.899.906.842.624			 |
			| exabyte  (EB)   | 1000^6   | 1.000.000.000.000.000.000         |
			| exbibyte (EiB)  | 1024^6   | 1.152.921.504.606.846.976		 |
			| zettabyte (ZB)  | 1000^7   | 1.000.000.000.000.000.000.000     |
			| zebibyte  (ZiB) | 1024^7   | 1.180.591.620.717.411.303.424	 |
			| yottabyte (YB)  | 1000^8   | 1.000.000.000.000.000.000.000.000 |
			| yobibyte  (YiB) | 1024^8   | 1.208.925.819.614.629.174.706.176 |
			+-----------------+----------+-----------------------------------+
				¤when not specified otherwise the equations are byte based
		Alignment:
			>hardware accesses data in blocks; these blocks are sized 2^N bytes and have boundaries between them
			  to access data cross boundaries multiple instructions are necessary, therefor it is faster to access properly aligned data
			  ie data crossing the least amount of boundaries
					------------------------------------------------
					| 		    Optimal Data Alignments			   |
					+-------------+---------------+----------------+
					|  Data Type  |  32-bit CPUs  |  64-bit CPUs   |
					|			  |   (in bytes)  |   (in bytes)   |
					------------------------------------------------
					| char        |             1 |              1 |
					| short       |             2 |              2 |
					| int         |             4 |              4 |
					| long        |             8 |              8 |
					| float       |             4 |              4 |
					| double      |             8 |              8 |
					| long long   |             8 |              8 |
					| long double |             4 |             16 |
					| Any pointer |             4 |              8 |
					------------------------------------------------
			>to align every piece of data, compilers self-align, ie. use padding (unused space) between data
			>padding is not guaranteed to be zeroed
			>reordering variable declarations can save memory
			>C structures have as much padding after them that ensures the next variable will be aligned the same as the struct
			>C++ is C-like, except that classes that look like struct-s may ignore the rule that the address of a struct is the address of its first member! 
			  whether they do or not depends on how base classes and virtual member functions are implemented, and also varies by compiler;
			  otherwise everything here observed about C applies
        Endianness:
            >named after the trope in "Gulliver's Travels" where the citizens of Liliput
              start a civil war over which end to start eating a hard boiled eggs from
            >specifies the order in which bytes are arraged inside a ĐĐprocessor wordĐĐ
            >any ordering works until its consistent
            >developers prefer big-endian because the memory dumps are more readable
            >hardware manufacturers prefer little-endian because values can be
              addressed consistently on narrower schemes
            ¤the two most common endianesses are
                >little-endian (more common)
                >big-endian

                                  | 1. | 2. | 4. | 3. | 5. | 6. | 7. | 8. |
                                  +----+----+----+----+----+----+----+----+
            0x0000000000000001 -> | 00 | 00 | 00 | 00 | 00 | 00 | 00 | 01 | Big-Endian
            0x0000000000000001 -> | 10 | 00 | 00 | 00 | 00 | 00 | 00 | 00 | Little-Endian

            {
                // Assume a 16 bit little-endian system 
                char msg[] = "heyo";
                // Inspect the memory
                msg: | 'e' 'h' | 'o' 'y' |
            }

	STACK: //(0x000001a8)➞
		>LIFO; Last In First Out
		>stored in the ram in a contiguous block of memory
		>(in most architectures) implemented growing DOWNWARD in memory (see illustration way BELOW)
		>when a function is called a stack frame is created
		¤stack frame parts:
			>return value
			>arguments
			>return address
			>saved frame pointer
			>local variables

	HEAP: //(0x000001a9)➞
		>(in most architectures) implemented growing UPWARD in memory (see illustration way BELOW)
		>used for storing gigantic data (compared to stack) or when a variable must outlive its scope
		NOTE: Of course, if the stack and heap meet, the program will crash. If that occurs, there is no memory available.

	MEMORY_USAGE: //(0x000001aa)➞
        >NOTE: nowadays, on modern kernels its virtualized to the point where each process has its own memory
                and the heap and the stack cannot touch due to overflowing
			/-------------------\....High address (0xFFFF)     	
			| command line args |                              	
			|-------------------|                              	
			|        Stack      |                              	
			|          |        |                              
			|          V        |                              	
			+-------------------+                              	
			|  ###  unused  ### |                              	
			+-------------------+                              
			|          A        |                              	
			|          |        |                              	
			|        Heap       |                              	
			|-------------------|                              	
			|        .bss       |                              	
			|-------------------|                              	
			|        .data      |                              	
			|-------------------|                              	
			|        .text      |                              	
			\-------------------/....Low address (0x0000)      	


	REGISTERS: //(0x000001ab)➞														
		----------------------------------------------------------------------------------------------------------	
		| 					  				 General Purpose Registers (16)										 |
		----------------------------------------------------------------------------------------------------------
		| 64-bit register | Lowest 32-bits | Lowest 16-bits | Higher 8-bits | Lowest 8-bits | 		 Name		 |
		----------------------------------------------------------------------------------------------------------
		|			  rax | 		   eax | 			 ax | 			 ah	|			 al |		 Accumulator | 		
		|	  	      rbx | 		   ebx | 			 bx | 			 bh	|			 bl |		   		Base |	
		|			  rcx | 		   ecx | 			 cx | 			 ch	|			 cl |			 Counter |	
		|			  rdx | 		   edx | 			 dx | 			 dh	|			 dl |		   	    Data |	
		|			  rsi | 		   esi | 			 si | 			N/A	|			sil |  		Source index |	
		|			  rdi | 		   edi | 			 di |			N/A	|			dil |  Destination index |	
		|			  rbp | 		   ebp | 			 bp | 			N/A	|			bpl |	    Base Pointer |	
		|			  rsp | 		   esp | 			 sp | 			N/A	|			spl |	   Stack Pointer |	
		|			   r8 | 		   r8d | 			r8w | 			N/A	|			r8b |				 N/A |	
		|			   r9 | 		   r9d | 			r9w | 			N/A	|			r9b |				 N/A |	
		|			  r10 | 		  r10d | 		   r10w | 			N/A	|		   r10b |				 N/A |	
		|			  r11 | 		  r11d | 		   r11w | 			N/A	|		   r11b |				 N/A |	
		|			  r12 | 		  r12d | 		   r12w | 			N/A	|		   r12b |				 N/A |	
		|			  r13 | 		  r13d | 		   r13w | 			N/A	|		   r13b |				 N/A |	
		|			  r14 | 		  r14d | 		   r14w | 			N/A	|		   r14b |				 N/A |
		|			  r15 | 		  r15d | 		   r15w | 			N/A	|		   r15b |				 N/A |	
		----------------------------------------------------------------------------------------------------------
		¤naming:
			e[char]x:
				>'e' stands for extended
				>[char] stands for the register's name, goes alphabetically
				>'x' also stands for extended, but for a different extension
			-Accumulator Register (RAX)
				>has a special role in some calculations (div, mul...)
				>has special role in storing strings
				>stores return values
			-Counter Register (RCX)
			-Destination Index Register (RDI)
				>points to memory where results of sting operations shall be placed
			-Base Pointer Register (RBP)(/ Frame Pointer (RFP))				
				>base pointer during function calls
				>should not be used for data or other uses
			-Stack Pointer Register (RSP)										
				>points to the current top of the stack						
				>should not be used for data or other uses
				>on Linux the first 128-bytes after the stack pointer are reserved
			-Instruction Pointer Register (RIP)
				>points to the next instruction to be executed
				>the instruction in RIP has never been executed yet
			-Flags Register (rFlags || eFlags || Flags)
				>stores status information about the instruction that was just executed
				-Flags status bits:
					---------------------------------------------------------------------
					|    Name	  | Symbol | Bit | 				Use						|
					---------------------------------------------------------------------
					| Carry 	  | CF 	   | 0 	 | Used to indicate if the previous 	|
					|			  |        |     | 	  operation resulted in a carry.	|
					| Parity 	  | PF 	   | 2 	 | Used to indicate if the last byte 	|
					|             |        |     | 	  has an even number of 1's 		|
					|             |        |     |    (i.e., even parity).				|
					| Adjust 	  | AF 	   | 4   | Used to support Binary Coded 		|
					|             |        |     |    Decimal operations.				|
					| Zero		  | ZF 	   | 6   | Used to indicate if the previous 	|
					|             |        |     | 	  operation resulted in a 			|
					|             |        |     |    zero result.						|
					| Sign	 	  | SF 	   | 7   | Used to indicate if the result 		|
					|             |        |     |    of the previous operation 		|
					|             |        |     |    resulted in a 1 in the most 		|
					|             |        |     |    significant bit (indicating 		|
					|             |        |     |    negative in the context of 		|
					|             |        |     |    signed data).						|
					| Direction   | DF 	   | 10  | Used to specify the direction 		|
					|             |        |     |    (increment or decrement) 			|
					|             |        |     |    for some string operations.		|
					| Overflow	  | OF 	   | 11  | Used to indicate if the previous 	|
					|             |        |     |    operation resulted in an 			|
					|             |        |     |    overflow.							|
					---------------------------------------------------------------------
		-Debugg registers:
			><dr0-dr7>
			¤<dr0-3>
				>contain breakpoint addresses
			¤<dr6>
				>permits the debuger to determine which debug conditions have occurred
			¤<dr7>			
				-----------------------------------
				|  Bit   |      Description       |
				-----------------------------------
				| 0      | Local DR0 Breakpoint   |
				| 1      | Global DR0 Breakpoint  |
				| 2      | Local DR1 Breakpoint   |
				| 3      | Global DR1 Breakpoint  |
				| 4      | Local DR2 Breakpoint   |
				| 5      | Global DR2 Breakpoint  |
				| 6      | Local DR3 Breakpoint   |
				| 7      | Global DR3 Breakpoint  |
				| 16-17  | Conditions for DR0     |
				| 18-19  | Size of DR0 Breakpoint |
				| 20-21  | Conditions for DR1     |
				| 22-23  | Size of DR1 Breakpoint |
				| 24-25  | Conditions for DR2     |
				| 26-27  | Size of DR2 Breakpoint |
				| 28-29  | Conditions for DR3     |
				| 30-31  | Size of DR3 Breakpoint |
				-----------------------------------
		-Floating point registers:
			>128-bit
			><xmm0-15>
			>only used for operations, they cant access memory
			>the first eight floating-point arguments are passed in floating-point registers <xmm0>–<xmm7>
				-------------------
				| Float registes: |
				-------------------
				|       xmm0 	  |
				|       xmm1 	  |
				|       xmm2 	  |
				|       xmm3 	  |
				|       xmm4 	  |
				|       xmm5 	  |
				|       xmm6 	  |
				|       xmm7 	  |
				|       xmm8 	  |
				|       xmm9 	  |
				| 	   xmm10      |
				| 	   xmm11      |
				| 	   xmm12      |
				| 	   xmm13      |
				| 	   xmm14      |
				| 	   xmm15      |
				-------------------
		-Floating-point Control and Status Register (MXCSR)
			¤status bits:
				--------------------------------------------
				|          Name           | Symbol |  Bit  |
				--------------------------------------------
				| Invalid Operation flag  | IE     | 0     |
				| Denormal flag           | DE     | 1     |
				| Divide-by-Zero flag     | ZE     | 2     |
				| Overflow flag           | OE     | 3     |
				| Underflow flag          | UE     | 4     |
				| Precision Flag          | PE     | 5     |
				| Denormals Are Zeros     | DAZ    | 6     |
				| Invalid Operation mask  | IM     | 7     |
				| Denormal Operation mask | DM     | 8     |
				| Divide-by-Zero mask     | ZM     | 9     |
				| Overflow mask           | OM     | 10    |
				| Underflow mask          | UM     | 11    |
				| Precision mask          | PM     | 12    |
				| Rounding Control        | RC     | 13-14 |
				| Flush To Zero           | FTZ    | 15    |
				| RESERVED                | N/A    | 16-31 |
				--------------------------------------------
		-Floating-Point Unit (FPU)
			-Control register
				------------------------------------------------
				|            Name          	 | Symbol  |  Bit  |
				------------------------------------------------
				| Invalid operation Mask	 | IM	   | 0	   |
				| Denormalized operand Mask	 | DM	   | 1	   |
				| Zero divide Mask		 	 | ZM	   | 2	   |
				| Overflow Mask			 	 | OM	   | 3	   |
				| Underflow Mask		 	 | UM	   | 4	   |
				| Percision Mask		 	 | PM	   | 5	   |
				| RESERVED				 	 | N/A	   | 6	   |
				| Interupt Enable Mask	 	 | IEM	   | 7	   |
				| Percision Control		 	 | PC	   | 8-9   |
				| Rounding Control		 	 | RC	   | 10-11 |
				| Infinity Control		 	 | IC	   | 12	   |
				| RESERVED				 	 | N/A	   | 13-15 |
				------------------------------------------------
				¤Interupt Enable Mask:
					>whether to interupt interupt masks
					>interupt masks being the first 6 (0-5) bits
					false	: enable masks
					true	: disable masks
				¤Percision Control:
					00		: 24-bit (REAL4?!)
					01		: not used
					10		: 53-bit (REAL8?!)
					11		: 64-bit (REAL10?!)
				¤Rounding Control:
					00		: round towards nearest or even if equidistant
					01		: round towards -infinity
					10		: round towards +infinity
					11		: round towards zero
				¤Infinity Control:
					false	: do not differentiate between negative and positive infinity, both are treated unsigned
					true	: respect negative and positive infinity
			-Status register
				---------------------------------------------------------
				|            Name          	 	   | Symbol |    Bit    |
				---------------------------------------------------------
				| Invalid Operation exception flag | I	    | 0			|
				| Denormalized exceptioni flag	   | D	    | 1		    |
				| Zero divide exception	flag	   | Z	    | 2		    |
				| Overflow exception flag		   | O	    | 3		    |
				| Underflow exception flag		   | U	    | 4		    |
				| Percision	exception flag		   | P	    | 5		    |
				| Stack Fault exception flag 	   | ST	    | 6		    |
				| Interrupt Request			 	   | IR	    | 7		    |
				| Condition fields				   | C[0-3] | 8-10 & 14 |
				| TOP							   | TOP    | 11-13	    |
				| Busy field					   | B	    | 15	    |
				---------------------------------------------------------
				¤exception flags:
					>whether [exception] exception is raised
				¤Interrupt Request:
					>whether an exception is being handled
					>never set while using a debugger
				¤Condition field:
					>contain result of some operations {comparisons}
				¤TOP:
					>used for keeping track of whick register is at slot 0
				¤Busy flield:
					>whether the FPU is executing an exception
			-Tag register
				>8, 2-bit, nameless tag fields
				>each tag field "little endianly" correspond to a 80-bit register (see BELOW)
				¤Correspondance:
					---------------------------
					| Field | Bits | Register |
					---------------------------
					| 0		| 0-1   | 7		  |
					| 1		| 2-3   | 6		  |
					| 2		| 4-5   | 5		  |
					| 3		| 6-7   | 4		  |
					| 4		| 8-9   | 3		  |
					| 5		| 10-11 | 2		  |
					| 6		| 12-13 | 1		  |
					| 7		| 14-15 | 0		  |
					---------------------------
				¤meaning of contents of a tag field:
					00		: valid, non-zero value
					01		: zero
					10		: special value (NAN, infinity or denormal)
					11		: empty
			-Internal flags register
				>maniged by the FPU
				>can not be accessed
			-8, 80-bit registers
				>LIFO (Last In First Out)
				>a limited stack
				>loading and popping; however registers can be operated on (artimetrics for example)
				  while not at the top
				>a rolling barrel is a good visualization
				>on each load the barrel rotates
				>over writing a register already holding a value will result in a junk value
				>slots are name as:
					st(<int>)
				  the word "slot" shall not be mistaken to carry the same meaning as register,
				  as regardless of the rotation of the registers the slot names stay the same;
				  therefor its the programmers responsibility to remember the position of his values
								   ooo OOO OOO ooo
							   oOO       ---       OOo
						   oOO         ;     ;         OOo
						oOO    ---    |   0   |    ---    OOo
					  oOO    ;     ;   ;     ;   ;     ;    OOo
					oOO     |   7   |    ---    |   1   |     OOo
				   oOO       ;     ;             ;     ;       OOo
				  oOO          ---                 ---          OOo
				 oOO     ---                             ---     OOo
				 oOO   ;     ;                         ;     ;   OOo
				 oOO  |   6   |           X           |   2   |  OOo
				 oOO   ;     ;                         ;     ;   OOo
				 oOO     ---                             ---     OOo
				  oOO          ---                 ---          OOo
				   oOO       ;     ;             ;     ;       OOo
					oOO     |   5   |    ---    |   3   |     OOo
					  oOO    ;     ;   ;     ;   ;     ;    OOo
						oO     ---    |   4   |    ---    OOo
						   oOO         ;     ;         OOo
							   oOO       ---       OOo
								   ooo OOO OOO ooo

	EXTENSIONS: //(0x000001ac)➞
		.S		: extension to represent hand written assembly files
		.s		: extension used by gcc/g++ for assembly files
		.asm	: windows extension for assembly files
	
	COMMENTING: //(0x000001ad)➞
		; [stuff]					: single line only
		# [stuff] || /*[stuff]*/	: behaves as you would expect; GAS specific(!)

	DATATYPES:			/*(0x000000e6)➞*/		res (array) typenames:					
		---------------------------------		---------------------------------
		| Declaration |	 Variable size	|		| Declaration |	 Variable size	|
		---------------------------------		---------------------------------
		| db 		  |	8-bit 			|		| resb 		  |	8-bit 			|
		| dw 		  | 16-bit 			|		| resw		  | 16-bit 			|
		| dd          | 32-bit 			|		| resd        | 32-bit 			|
		| dq 		  | 64-bit 			|		| resq		  | 64-bit 			|
		| ddq         | 128-bit integer	|		| resdq       | 128-bit 		|
		| dt 		  | 128-bit float	|		---------------------------------
		---------------------------------

    SEGMENTATION: //(0x000001ae)➞
		>segments are movable relative to each other, ie. their order is irrelevant
		>can be split in asm
        >their offset in the binary is stored in a table
        >their names are encoded literally in the executable
        -has one or more of the following access rights:
            >read
            >write
            >execute
        -main conventional segments:
            >NOTE: these are often refered to as "sections"; conventionally they are equivalent,
                    however there is a meaningful distinction here to make
            >these sections are utalized by tools to figure out whats going on
            -block starting symbol:
                >".bss"
                >used for declaring reserved 0 initialized variables (arrays)
                >C static vars live here
            -data:
                >".data"
                >uninitialized
                if not exists(rdata)
                    >read only
                    >used for const-s
                else
                    -rdata
                        >".rdata"
                        >.data, but especially for read only
            -text:
                >".text"
                >code lives here

	LABELS: //(0x000001af)➞
		<string>:				: creates label named <string>
		>a label is a location to jump to

    INTERUPTS:
        >"trap"
        >hardware supported
        >crutial to debuggers (breakpoints)
        -uppon an interupt:
            1. execution is suspended
            2. state is saved
            3. an interupt handler is executed
            4. state is restored
        IDT:
            >"Interupt Description Table"
            >an array of code addresses to dispatch uppon an interupt or exception
            >the type of the interupt indexes this table
            >operating system uses it for system calls

    RINGS:
        >hardware support for implementing OS privelage separtion

	LANGUAGE_STATEMENTS: //(0x000001b0)➞
		Notations: //(0x000001b1)➞
			[label]					: program label
			[reg]					: register operand; The operand must be a register;
			[src] 					: source operand; operand value is unchanged after the instruction
			[im] 					: immediate value; may be specified in decimal, hex, octal, or binary
			[mem] 					: memory location; May be a variable name or an indirect reference
			[op]					: operand, register or memory;
			[dest] 					: destination operand; The operand may be a register or
									 memory; the contents will be overwritten with the new result
			ARC						: int, dependent on architecture; (x64 -> 64 || 32, x86 -> 32)
			//overload with "RX" -> float register
			//overload with "<int>" -> required size

		Instructions: //(0x000001b2)➞
			>everything BELOW uses the Intel syntax
			move:
				mov [dest], [src]				: copies [src]'s value to [dest]
				lea [reg[64]], [mem]			: copies [mem]'s value to [reg[64]]; short for "Load Effective Address"
				movss [dest], [src[32]]			: copies [src]'s float value to [dest]
				movsd [dest], [src[64]]			: copies [src]'s double value to [dest]
			widening:
				movzx [dest], [src]				: copies [src]'s unsigned value to a larger register (16||8 -> 64; 16||8 -> 32; 8 -> 16 (bits))
				movsx [dest], [src]				: copies [src]'s signed value to a largel register (16||8 -> 64; 16||8 -> 32; 8 -> 16 (bits))
				movsxd [dest[64]], [scr[32]]	: copies [src]'s signed 32 bit value to a 64 bit register
				cbw								: converts and copies <al>'s signed value to <ax>
				cwd								: converts and extends <ax>'s signed value to <dx:ax>
				cwde							: converts and copies <ax>'s signed value to <eax>
				cdq								: converts and extends <eax>'s signed value to <edx:eax>
				cdqe							: converts and copies <eax>'s signed value to <rax>
				cqo								: converts and extends <rax>'s signed value to <rdx:rax>
				cvtss2sd [RXdest], [src[32]]	: converts [src[32]]'s FLOAT value to FLOAT 64 and copies to [RXdest]
			shrinking:
				cvtsd2ss [RXdest], [src[64]]	: converts [src[64]]'s FLOAT value to FLOAT 32 and copies to [RXdest]
			conversion:
				cvtss2si [reg[32]], [src]		: converts [src]'s FLOAT 32 value to INT 32 and copies to [reg[32]]
				cvtsd2si [reg[32]], [src]		: converts [src]'s FLOAT 64 value to INT 32 and copies to [reg[32]]
				cvtsi2ss [reg[32]], [src]		: converts [src]'s INT 32 value to FLOAT 32 and copies to [reg[32]]
				cvtsi2sd [reg[64]], [src]		: converts [src]'s INT 64 value to FLOAT 64 and copies to [reg[64]]
			arimetric:
				add [dest], [src]		: adds [src] to [dest]'s original value; ([dest] = [dest] + [src])
				addss [RXdest], [src]	: adds [src]'s FLOAT 32 value to [dest]'s original FLOAT 32 value; ([RXdest] = [RXdest] + [src])
				addss [RXdest], [src]	: adds [src]'s FLOAT 64 value to [dest]'s original FLOAT 64 value; ([RXdest] = [RXdest] + [src])
				inc [dest]				: adds one to [dest]'s original value (++[dest])
				adc [dest], [src]		: adds [src] and <Flags>'s Carry to [dest]'s original value ([dest] = [dest] + [src] + <CF>)
				sub [dest], [src]		: subtracts [src] from [dest]s original value ([dest] = [dest] - [src])
				subss [RXdest], [src]	: subtracts [src]'s FLOAT 32 value from [dest]s original FLOAT 32 value; ([RXdest] = [RXdest] - [src])
				subsd [RXdest], [src]	: subtracts [src]'s FLOAT 64 value from [dest]s original FLOAT 64 value; ([RXdest] = [RXdest] - [src])
				dec	[dest]				: subtracts one from [dest]s original value (--[dest])
				mul	[src]				: multiplies [src]' UNSIGNED value with <*a*>'s value and store it in <*a*:*d*>; (<ax:dx> = <ax> * <cx>)
				mulss [RXdest], [src]	: multiplies [src]'s FLOAT 32 value with [RXdest]'s FLAOT 32 value; ([RXdest] = [src] * [RXdest])
				mulsd [RXdest], [src]	: multiplies [src]'s FLOAT 64 value with [RXdest]'s FLAOT 64 value; ([RXdest] = [src] * [RXdest])
				imul [src]				: multiplies [src]'s SIGNED value with <*a*>'s value and store it in <*a*:*d*>; (<ax:dx> = <ax> * <cx>)
				imul [dest], [src]		: multiplies [src]'s SIGNED value with [dest]'s value and store it in [dest]:???
				imul [dest], [src], [im]: multiplies [src]'s SIGNED value with [im]'s value and store it in [dest]:???
				div	[src]				: divides <*a*> with [src]'s UNSIGNED value; see "Div table" BELOW
				divss [RXdest], [src]	: divides [RXdest]'s FLOAT 32 value with [src]'s FLOAT 32 value and store it in [RXdest]; ([RXdest] = [RXdest] / [src])
				divsd [RXdest], [src]	: divides [RXdest]'s FLOAT 64 value with [src]'s FLOAT 64 value and store it in [RXdest]; ([RXdest] = [RXdest] / [src])
				idiv [src]				: divide <*a*> with [src]'s SIGNED value; see "Div table" BELOW
				sqrtss [RXdest], [src]	: takes the square root of [src]'s FLOAT 32 value and store it in [RXdest]
				sqrtss [RXdest], [src]	: takes the square root of [src]'s FLOAT 64 value and store it in [RXdest]
			string:
				>operate on contiguous memory
				stosb						: store byte; stores <al>'s value where <rdi> is pointing to and incoments <rdi> by 1 byte
				stosw						: store word; stores <ax>'s value where <rdi> is pointing to and incoments <rdi> by 2 byte
				stosd						: store double-word; stores <eax>'s value where <rdi> is pointing to and incoments <rdi> by 4 byte
				stosq						: store quad-word; stores <rax>'s value where <rdi> is pointing to and incoments <rdi> by 8 byte
				rep [string operation]		: while <rcx> is not 0 perform [string operation] and decrease <rcx>
			logic:
				and [src1], [src2]	: see logical table BELOW; places result into [src1]; applied bit by bit	//tho its pretty logical
				or [src1], [src2]	: see logical table BELOW; places result into [src1]; applied bit by bit
				xor [src1], [src2]	: see logical table BELOW; places result into [src1]; applied bit by bit
				not [op]			: 0->1; 1->0; applied bit by bit
				shl [op], [src]		: shifts [op]'s bits to the LEFT by [src]'s value; will result in [dest]*2^[src]; 
									   bits shifted beyond [op] are first shifted into <CF>; the new bits shifted in are all 0s
				shr	[op], [src]		: shifts [op]'s bits to the RIGHT by [src]'s value; will result in [dest]/2^[src];
									   bits shifted beyond [op] are first shifted into <CF>; the new bits shifted in are all 0s
				sal	[op], [src]		: artimetric shift left; literally the same as shl
				sar	[op], [src]		: artimetric shift right; almost shr BUT the new bits shifted in are all whatever the sign (most significant) bit contained
				rol	[op], [src]		: rotate LEFT; (shift left, but the bits pussed out are getting pussed back on the other side)
				ror	[op], [src]		: rotate RIGHT; (shift left, but the bits pussed out are getting pussed back on the other side)
			control:
				cmp [opt1], [opt2]		: compare the [opts]; results are stored in <rFlags>
				ucomiss [Rxsrc], [src]	: compare two FLOAT 32 values; results are stored in <rFlags>
				ucomisd [Rxsrc], [src]	: compare two FLOAT 64 values; results are stored in <rFlags>
				jmp [label]				: execution jumps to [label]; (see ABOVE what a label is)
				>jmp is not limited by range; the label can be whereever
				>conditional jumps can only perform "short-jumps" ie, the label must be within -128 or +127 instuctions aways
				>to solve this, use a conditional jump to jump over a jmp;									| Flags and what they are tested for: |
				je [label]				: jumps to [label] if equal;  							-			    <ZF> == 1,
		  		jne [label]				: jumps to [label] if not equal;			 			-				<ZF> == 0,
	SINGED:		jg [label]				: jumps to [label] if greater;							-				<ZF> == 0 && <SF> == <OF>,
		  #		jge	[label]				: jumps to [label] if greater or equal;					-				<SF> == <OF>,
		  #		jl [label]				: jumps to [label] if less; 							-				<SF> != <OF>,
		  #		jle	[label]				: jumps to [label] if less or equal;					-				<ZF> == 1 || <SF> != <OF>,
	UNSIGNED:	ja [label]				: jumps to [label] if above;							-				<CF> == 0 && <ZF> == 0,
		  #		jae [label]				: jumps to [label] if above or equal;					-				<CF> == 0,
		  #	    jb [label]				: jumps to [label] if below;							- 				<CF> == 1,
		  #	    jbe [label]				: jumps to [label] if below or equal;					-				<CF> == 1 || <ZF> == 1
				¤naming convention:													  //THERE ARE WAY MORE
					j	: jump				l	: less
					a	: above				n	: not
					b	: below				o	: overflow
					c	: carry				p	: parity
					e	: equal				s	: sign
					g	: greater			z	: zero
			stack:
				push [op]				: push [op] to the top of the stack
				pop [op]				: pop the top of the stack into [op]
			function related:
				call [function_name]	: calls [function_name]; (push <rip> and jump to [function_name])
				ret						: return; (pop the stack into <rip> effecting in a jump to the line after the call)
			misc:
				syscall				: calls the system
				nop					: no operation; do nothing (0x90)
		macros:
			>macro definitions should be placed in the source file before the data and code sections
			>it works like C macros

		functions:							//I'm surprised they actually exist at this level
			>cannot be nested					// I'm surprised to learn that they can be in C

		system calls(/functions):
			------------------------
			| Register |   Usage   |
			------------------------
			| 	   rax | Call code |
			| 	   rdi |   1st arg |	//arguments are not always mandatory (duh)
			| 	   rsi |   2nd arg |
			| 	   rdx |   3rd arg |
			| 	   r10 |   4th arg |
			| 	   r8  |   5th arg |
			| 	   r9  |   6th arg |
			------------------------
				>put the desired information into the right registers and initiate a {syscall}
				>tho i symbolically use C style function calls below; that's obviously not how you call them...
			Linux:
					0([location], [dest], [size])					: read; reads [size] bytes from [location] into [dest]
							[locations]:
								0			: STDIN
								[file]		: reads [file]; ([file] must be a descriptor of an open file)
					1([location], [message], [message.size()])		: write; writes [message] to [location]
								1			: STDOUT
								[file]		: writes [file]; ([file] must be a descriptor of an open file)
					2(<string>, [access flag])						: open; open <string> file
					59(<string>, [argv], [?!])						: execve; run <string> program
					60([value])										: exit; exit with [value]
					85(<string>, [acces flag])						: creat; creates/overwrites file

	Div table:
		--------------------------------------------------
		| Divisor Size | Dividend | Quotient | Remainder |
		--------------------------------------------------
		|         byte |       AX |       AL |        AH |
		|         word |    DX:AX |       AX |        DX |
		|   doubleword |  EDX:EAX |      EAX |       EDX |
		|     quadword |  RDX:RAX |      RAX |       RDX |
		--------------------------------------------------
	Logical table:
   	    -----------------------------------------
   	    |#########|   and   |    or   |   xor   |
		-----------------------------------------
		| [src1]  | 0 1 0 1 | 0 1 0 1 | 0 1 0 1 |
		| [src2]  | 0 0 1 1 | 0 0 1 1 | 0 0 1 1 |
		----------|---------|---------|---------|
		| results | 0 0 0 1 | 0 1 1 1 | 0 1 1 0 |
		----------|---------|---------|---------|
	
	
	_start:						: starts execution


    Programs: //(0x000001b3)➞
		AT&T:
			>prefix constants with a dollar sign { $0x90 }
			>prefix registers with a percentage sign { %rax }
			>source first, destination second in all operations { mov $3, eax }
        GAS:
            >"Gnu ASsembler"
            >used internally by gcc/g++
            Prefixes:
                % - register
                $ - constant
            Operation suffixes:
                b - byte (8 bit)
                s - single (32-bit floating point)
                w - word (16 bit)
                l - long (32 bit integer or 64-bit floating point)
                q - quad (64 bit)
                t - ten bytes (80-bit floating point)
        High_level_assembly:
            >"HLA"
            >rough concept of a language higher than pure assembly,
              but still basically assembly
            >modern assemblers are all technically high level assemblers
              due to their macro systems, but that renders the distinction
              redundant, so the concept has to shift upwards
            ¤high level assemblers
                -Public Domain HLA:
                    YYY:
                        https://www.plantation-productions.com/Webster/HighLevelAsm/index.html
                        https://sourceforge.net/p/hlav1/code/HEAD/tree/
                    >looks fun
                    >million compile errors with modern tools
                    >self-dependency with a binary dll; uncompileable under *nix
                    >the code base is hilariously bad for v1;
                      v3 is implemented in PD HLA...
                    >the solo dev is dead (as of 2024); his memeware may rest in piece with him
                -IBM HLA:
                    >for z/OS
                    >a bit like as if young Fortran and COBOL had an accidental kid,
                      who was retarded, but the family prefered the expression
                      "low level" to describe his difficulties
                -X#:
                    >C# based; windows oriented
                    >focuses on higher level abstractions

#define ada: //(0x000001b4)➞\
I------------------------------------------------------\
I------------------------------------------------------\
I------------------------------------------------------\
I                                                      \
I              /$$$$$$        /$$                      \
I             /$$__  $$      | $$                      \
I            | $$  \ $$  /$$$$$$$  /$$$$$$             \
I            | $$$$$$$$ /$$__  $$ |____  $$            \
I            | $$__  $$| $$  | $$  /$$$$$$$            \
I            | $$  | $$| $$  | $$ /$$__  $$            \
I            | $$  | $$|  $$$$$$$|  $$$$$$$            \
I            |__/  |__/ \_______/ \_______/            \
I------------------------------------------------------\
I------------------------------------------------------\
I------------------------------------------------------\

    >verbose
    >safe-ish
    >VERY strongly typed
    >designed with garbage collection in mind,
      however "An implementation need not support garbage collection ...",
      due to historic speed concerns, dynamic memory is therefor usually manage by hand
    >semicolonful

    YYY:
        https://www.cs.uni.edu/~mccormic/4740/guide-c2ada.pdf

	Files:
		.ads        : "ADa Specification"; decleration source file (~.h)
		.adb        : "ADa Body"; definition source file (~.c)
        .ali        : "Ada Library Information"; metadata file generated for a compialation unit
        .o          : object file

    Programs:
        gnat        : GNU Ada compiler
        gnat-make   

    Comments:
        -- single line comment

    Case:
        >the language is case insensitive

	Types:
        >exceptionally strong typing system
		Builtin:
            Boolean:
                type Boolean is (FALSE, TRUE);
			Integer
			Ordinary
			Float
			Decimal
			Character
			Strings:
                >NOTE: only String is an actual builtin, the rest belong to their respective
                        standard packages
				|--------------|---------------------|--------------------------|-------------------------------|
				| ############ | Character           | Wide_Character           | Wide_Wide_Character           |
				|--------------|---------------------|--------------------------|-------------------------------|
				| Fixed        |              String |        Fixed_Wide_String |        Fixed_Wide_Wide_String |
				| Bounded      |      Bounded_String |      Bounded_Wide_String |      Bounded_Wide_Wide_String |
				| SuperBounded | SuperBounded_String | SuperBounded_Wide_String | SuperBounded_Wide_Wide_String |
				| Unbounded    |    Unbounded_String |    Unbounded_Wide_String |    Unbounded_Wide_Wide_String |
				|--------------|---------------------|--------------------------|-------------------------------|
			Array
		User:
            Types:
                >user types are threated new types
                >conversions will be required
                type <name> is <type_specifier>;
                    <list>                          : enum
                    mod <int>                       : modulus type; over-/underflows cycle
                    range <int-1> .. <int-2>        : the valid value range is between <int-1> and <int-2>
                    delta <float>                   : the step between values is float
                    digits <int>                    : the number of valid digits is (+/-)<int>
                    record <elements> end record    : struct
                    access <type>                   : pointer like
            Subtypes:
                >user subtypes "inherit" from an existing type
                >conversion between and a type and a subtype is weak
                subtype <name> is <...>
        Type_qualifiers:
            constant
        Definitions:
            <name> : <type_qualifiers> <type> := <value>
        Attributes:
            >attributes are static values or const functions of a type
            <type>'<attribute>
            Enum:
                >NOTE: enum marks an enumeration value BELOW
                <enum> Succ(<enum>)    : value after <value>
                <enum> Pred(<enum>)    : value before <value>
                <enum> Val(<int>)      : <int>th value of the enumeration; reverse of 'Pos()
                <int>  Pos(<enum>)     : position of <enum>; reverse of 'Val()
            Range:
                <int> First
                <int> Last
                <int> Length
                <int> Range(<int>)
                {@begin=ada@
                    type My_Range is 0 .. 100;
                    My_Range'First             -- 0
                    My_Range'Last              -- 100
                    My_Range'Length            -- 101
                @end=ada@}
            Modular:
                <modular> Mod(<int>)
        Casting:
            <type>(<value>)

    Operators:
        +-----------------+-------+-----+
        | Operator        | C/C++ | Ada |
        +-----------------+-------+-----+
        | assignment      |   =   |  := |
        | equality        |   ==  |   = |
        | non-equality    |   !=  |  /= |
        | plus equals     |   +=  |     |
        | subtract equals |   -=  |     |
        | multiply equals |   *=  |     |
        | division equals |   /=  |     |
        | or equals       |   |=  |     |
        | and equals      |   &=  |     |
        | modulus         |   %   | mod |
        | remainder       |       | rem |
        | absolute value  |       | abs |
        | exponentiation  |       |  ** |
        | range           |       |  .. |
        +-----------------+-------+-----+

	Control:
        Logic:
            if <conidtion> then
                -- ...
            elsif <condition> then
                -- ...
            else
                -- ...
            end if;
            case <value> is
                when <value> => -- ...
                when others  => -- ...
            end case;
		loops:
			{
				(<limit>) loop
					<...>
				end loop;
			}
			<limit>
				while <bool>
				for <var> in <range>
        Labels:
            <name>:     : creates a label named <name>
            goto <name> : jumps to label named <name>

    Exceptions:
        raise <value>
        exception
            when <value> => -- ...
            when others  => -- ...

	Subroutines:
		{
			<routine_type> <name> (return <typename>) is
			<body>
		}
		<routine_type>
			function	: returns an Integer
			procedure	: does not return a value
		<body>
			{
					<declarations>
				begin
					<...>
				end <name>;
			}
		Operator_overloading:
			{
				function "<operator>"(<...>) is
				<body>
			}
        Entry:
            >the entry point of the program is considered the procedure named
              after the file being compiled

    Packages:
        package <package-name> is
            <delcarations>
        end <package-name>
        package body <package-name> is
            <definitions>
        end <package-name>
        with <package-name>         : import-s a package
        use  <package-name>         : removes the need to refer to package contents as
                                       <package-name>.<thing>; similar to C++ namespace using-s

    Renaming:
        <...-1> renames <...-2>     : defines an alias

	Generics:
		pass

    Tasks:
        >language based multi-processing model
            task <task-name> is
                -- ...
            end <task-name>
            task body <task-name> is
                -- ...
            end <task-name>

    Interfacing:
        ¤supported langauges:
            >C/C++
            >Cobol
            >Fortran

    Standard_packages:
        Text_IO:
            Put()
            Put_Line()

#define c_family\
#define c_language_family: //(0x000001b5)➞\
II-------------------------------------------------------------------------------\\
II-------------------------------------------------------------------------------\\
II                        ,...                           ,,    ,,                \\
II      .g8"""bgd       .d' ""                           db  `7MM                \\
II    .dP'     `M       dM`                                    MM                \\
II    dM'       `      mMMmm ,6"Yb.  `7MMpMMMb.pMMMb.  `7MM    MM `7M'   `MF'    \\
II    MM                MM  8)   MM    MM    MM    MM    MM    MM   VA   ,V      \\
II    MM.               MM   ,pm9MM    MM    MM    MM    MM    MM    VA ,V       \\
II    `Mb.     ,'       MM  8M   MM    MM    MM    MM    MM    MM     VVV        \\
II      `"bmmmd'      .JMML.`Moo9^Yo..JMML  JMML  JMML..JMML..JMML.   ,V         \\
II                                               (C language family) ,V          \\
II                                                                OOb"           \\
II-------------------------------------------------------------------------------\\
II-------------------------------------------------------------------------------\I

    >a large number of language which descend from C and
      retain much of the syntax and features

	FILES: //(0x000001b6)➞
		Extensions:
			c			: C source file
			cc			: C++ source file
			C			: -||-
			cp			: -||-
			cpp			: -||-
			cxx			: -||-
			c++			: -||-
			HC			: Holy C source code
			i			: C source code which must not be preprocessed
			ii			: C++ source code which must not be preprocessed
			inc			: C or C++ source code which is made to be #include-ed
			h			: header (not to be compiled or linked)
			hpp			: C++ specific header (not to be compiled or linked)
			o			: object file
			gch			: "GNU Compiled Header"; gcc style precompiled header file
			pch			: clang style precompiled header
		Source_files:
			>plain text files
		Object_files:
			>assembled machine code
			>NOT linked (yet)

#define c__lang
#define C:: //(0x000001b7)➞\
    I--------------------------\
    I--------------------------\
    I                          \
    I          /$$$$$$         \
    I         /$$__  $$        \
    I        | $$  \__/        \
    I        | $$              \
    I        | $$              \
    I        | $$    $$        \
    I        |  $$$$$$/        \
    I         \______/         \
    I                          \
    I--------------------------\
    I--------------------------I

    >the forefather
    >technically descends from B, but nobody remembers or likes B,
      its C that became highly influential and for a good reason

	PROGRAMS: //(0x000001b8)➞
		Preprocessors:
            >most preprocessors are tightly integrated into compilers
			fcpp:
				>stand-alone ANSI compliant preprocessor
				>from the mastermind of CURL
				>due to not taking extra steps during translation such as GCC,
				  it can easily be used to preprocess different files (e.g. html, txt)
				{
					$ bat pp.txt
					───────┬───────────────────────────────────
						   │ File: pp.txt
					───────┼───────────────────────────────────
					   1   │ #define MyMACRO "Hello World"
					   2   │ puts(MyMACRO);
					   3   │ #ifndef MyMACRO
					   4   │ exit(1);
					   5   │ #endif
					   6   │ #include </etc/os-release>
					───────┴───────────────────────────────────
					$ fcpp -V pp.txt
					#line 1 "pp.txt"

					puts("Hello World");
					#line 1 "/etc/os-release"
					NAME=Gentoo
					ID=gentoo
					PRETTY_NAME="Gentoo Linux"
					ANSI_COLOR="1;32"
					HOME_URL="https://www.gentoo.org/"
					SUPPORT_URL="https://www.gentoo.org/support/"
					BUG_REPORT_URL="https://bugs.gentoo.org/"
					VERSION_ID="2.14"
				}
		Implementations:
            -------------------------------------------------------------------------------------------------------------------------
            |                                         COMPILERS                                                                      |
			-------------------------------------------------------------------------------------------------------------------------
			|  Name  |     Owner     | C | C++ | NOTE                                                                                |
			-------------------------------------------------------------------------------------------------------------------------
			| GCC    | GNU Project   | X |  X  | default to this if starting out on Linux                                            |
			| Visual | Microsoft     |   |  X  | default to this if starting out on Windows                                          |
			| Intel  | Intel         |   |  X  |                                                                                     |
			| AOCC	 | AMD           | X |  X  |                                                                                     |
			| PGC++	 | Nvidia        | X |  X  |                                                                                     |
			| Clang	 | LLVM Project  | X |  X  |                                                                                     |
			| Zapcc	 | The Jews      |   |  X  |                                                                                     |
			| TCC	 | Fabrice B.    | X |     | "Tiny C Compiler"; used on low power systems; also an interpreter                   |
			-------------------------------------------------------------------------------------------------------------------------
            |                                         INTERPRETERS                                                                   |
            -------------------------------------------------------------------------------------------------------------------------
			| CINT   | some guy      | X |  X  |                                                                                     |
			| TCC    | Fabrice B.    | X |     | with the -run option                                                                |
            -------------------------------------------------------------------------------------------------------------------------
			TCC:
                { // TCC script
                    #!/usr/bin/tcc -run
                    signed main() { return 17; }
                }
		Debuggers:
			------------------------------------------------
			|      Name      |    Owner    |  see more AT  |
			------------------------------------------------
			| GDB            | GNU Project | /GNU/gdb      |
			| Visual Studio  | Microsoft   | N/A		   |	// Visual Studio is an IDE with a built in debugger; for all i know it could technically be using gdb under the hood, but that sounds highly illegal
			------------------------------------------------
		Profilers:
			-----------------------------------------------------------------------------------
			|   Name   | see more AT | Description                                            |
			-----------------------------------------------------------------------------------
			| gprof    | /GNU/gprof  | Function call profiler with comprehensible statistics. |
			| valgrind | ?!          | General purpose modular execution virtualizer.         |
			|          |             |  Mostly used for memory profiling.                     |
			-----------------------------------------------------------------------------------
		Build_systems:
            >make
            >pkg-config
            >autoconf
			>conan
			>cmake
            pkg-config  // move; ?!
                --libs
                --cflags



	COMMENTING: //(0x000001b9)➞
		// [...]		: single line comment
		/* [...] */		: multi line comment



	SEMICOLONS: //(0x000001ba)➞
		>every statement must end with a ';' { declaration; assignments; calls }
Purple(	>a ';' by it self or directly after an other one will result in a nop (see AT assembly)
        /*seems to have been a compiler specific thing,
          and i dont even know which one,
          please use inline assembly instead    */


	LITERALS: //(0x000001bb)➞
		>a fix, const value known and specified at compile time
		'[char]'	: single (ASCII) char
		<int>		: decimal num (as in base 10, not decimal fraction)
		0<int>		: octal num
		0x<int>		: hex num
		0b<int>		: binary num
		<int>.<int>	: double float
        Postfixes:
            >explicit-ly signals the storage type (size) of an numeric literal
            // ?!
		String:
			"[...]"	: char string
            >NULL terminated
			>an implicit '\00' is always concatenated (see AT "../Variables/Strings")
			>adjacent string literals are concatenated auto-matically and without warning
				{ cout << "cat" "bat"; /* catbat */ }
            escape_sequences: //(0x000001bc)➞
                >char combinations holding special meaning inside literals
                >allows for easy readable/writable special char-s
                \a 		: beeps
                \b 		: backspace
                \f		: form feed; new page; VERY outdated; nowadays behaves all over the places on different terminal emulators
                \n 		: endline
                \r		: carriage return; moves the cursor to the first position of the current line
                \t 		: tab character
                \v 		: vertical tab
                \e 		: delete
                \" 		: " (!!!)
                \' 		: '
                \\ 		: \
                \? 		: ?
                \0 		: null
                \[d][d][d]		: define char with octals
                \x[d][d]		: define char with hex; NOTE: in practice digits are read for as long as possible {"\x05five" => "_ive"}
                \u[d][d][d][d]	: unicode char code (0-65535)
                \U[d][d][d][d][d][d][d][d]	: unicode char code (0-4294967295)


	VARIABLES: //(0x000001bd)➞
		[specifiers] [type] [name]			: declares a variable
		{
				int i;
				int h;
				bool b;
		}
		>after plain declaration the variables value is undefined;
		  every large compiler is implemented to simply hand over memory,
		  therefor the value is going to be (a part of) whatever was previously allocated
		>NOTE: declared, but not assigned variables can technically be used as very shitty random numbers
		Types:
			-bool:
				>"boolean"
				>binary: true or false.
				> 0 == false
				> !0 == true
			-int: 
				>"integer"
				>whole number
				> short <= int <= long <= long long
			-chars: 
				>"character"
				>char: single byte integer representing a letter or symbol in ascii
				>wchar_t: wide character type; 2^N (typically 4) byte integer representing a letter or symbol in unicode
				>char16_t: 16 bit wide character
				>char32_t: 32 bit wide character
			-string:
				>an array of chars terminated by '\00'
				>functions taking a char* with out taking length explicit-ly will expect a string
			-floating point numbers:
				>float: fraction; up to 7 decimals
				>double: double-precision floating point value; fraction; up to 15 decimals
				>long double
			>void: nothing/doesnt return anything
			-----------------------------------------------------------------
			| C/C++ Declaration | Storage     | Size (bits)  | Size (bytes) |
			-----------------------------------------------------------------
			| bool				| Byte		  | 8-bits 	 	 | 1 byte	  	|
			| char 			  	| Byte 		  | 8-bits 	 	 | 1 byte	  	|
			| short 		  	| Word 		  | 16-bits		 | 2 bytes    	|
			| int 			  	| Double-word | 32-bits		 | 4 bytes	  	|
			| unsigned int 	  	| Double-word | 32-bits		 | 4 bytes    	|
			| long 			  	| Quadword 	  | 64-bits	  	 | 8 bytes    	|
			| long long		  	| Quadword 	  | 64-bits	  	 | 8 bytes    	|
			| char*  		  	| Quadword 	  | 64-bits	  	 | 8 bytes    	|
			| int* 			  	| Quadword 	  | 64-bits	  	 | 8 bytes    	|
			| float 		  	| Double-word | 32-bits	  	 | 4 bytes    	|
			| double 		  	| Quadword 	  | 64-bits	  	 | 8 bytes    	|
			-----------------------------------------------------------------
				(Traditionally the term "word" refers to the size of the processors registers and main data path. 
				  By that definition a "word" would be 32 bit on your 32-bit system and 64-bit on your 64-bit system.
				  However when processor families were extended to add wider registers/operating modes 
				  the manufacturers and users of those processors sometimes continued to use "word" 
				  to refer to the word size of the original processor.
				  Intel documentation uses the term "word" to refer to a 16 bit quantity.
				)
		Assinging:
			[variable] = [value]
			[value]:
				>other variable or literal (see ABOVE) with the same type
			{
				int i
				i = 0;
				int h;
				h = i;
				bool b
				b = true;
			}
		Initialization:
			[specifier] [type] [name] = [value]
			>declaration and assignment in the same line
			>most frequently used as a short-hand form
			-NOTE: its technically not equal with declaring and assigning afterwards
				>with goto one can jump over a declaration and assignment (or none), but cannot
				  jump over an initialization
				{ // legal
					goto MY_LABEL;
						int i;
						i = 1;
					MY_LABEL:
					;
				  // not legal
					goto MY_LABEL;
						int i = 1;
					MY_LABEL:
					;
				}
		Auto:
			auto [name] = [...]			: [name] will have the type of what ever is on the right;
										   see specifics AT "/C++/?!"		//type deduction
		Special_values:
			nan  - not a number
			inf  - infinity
			npos - wasn't found { unsigned == -1 }
		Type_defining:
			typedef [variable declaration] [name]		: declares complex variable called [name]
			>makes a short hand alias of another type
			{ typedef signed long long sll; }
		Arrays:
			<typename> [name][<int>](<int>...)			: initializes array
			[name][<int>]									: refer to <int>th element of [name]; (0 indexed)
			<int>[[name]]									: same as ABOVE; more of a bug then a feature
			>array types are considered to have the same const/volatile-qualification as their elements type
			>char arrays are NULL byte terminated
			>char arrays should only hold <int>-1 chars (for the ABOVE reason)
		Specifiers:
			signed		: the most significant bit indicates whether the value is positive(0) or negative(1)
			unsigned	: the most significant bit is handled as a digit, therefor can never be negative
			const		: its value is immutable, ie. on paper cannot be changed;
				   		   if possible the compiler is going to replace mentions of a const with its value on compile-time,
				   		   it however wont replace (derefrenced) pointers pointing to its address; see AT "C++/Casting/Const cast"
			extern		: used to signal that the [type] is defined in an other translation unit;
						   modern linkers are in many cases are smart enough to know that by themselves;
						   good practice anyways; do not assign for Gods sake
			register	: a signal to the compiler that this variable should be kept in cpu register whenever possible;
						   used for optimization purposes; NOTE: override-n in different contexts
			static		: NOTE: heavily override-n in different contexts
							-when used globally it means that the variable is used in multiple translation units
								YYY:
									"Linker"
									"Files/Object_files"
									"Data_groups_and_objects/Static_members"
									"../extern"
							-when used inside a function body it specifies that functions life time exceeds the
							  scope; this is accomplished by the var actually being located on the heap;
							  effectively this means that the var preserves its value for the next calls to come
							  	YYY:
									"Functions"

	CASTING: //(0x000001be)➞
		>casting is the process of interpreting a var as a different type
		>not proper conversation on incompatible types
		(<typename>)[variable]	: returns [variable] converted to <typename>;
		                           but a different way, [variable] will be literally,
								   byte-by-byte interpreted as <typename>



	POINTERS: //(0x000001bf)➞
		>holds only a memory address
		>since its all memory address are the same size, can be casted (see ABOVE) the shit out of "safely" (from the pointers view); dont tho
		>the address of a variable can be obtained by preceding the name of a variable with an ampersand sign (&), known as address-of operator
		<typename> * (const) [name]			: declares a pointer
			>the asterisk can go anywhere between the type and the name
			>can be assigned to any variable with matching [datatpye]
			>that extra const is added by no mistake, specifying it will result in the pointer becoming read-only, ie. unreassignable
		Function_pointers:
			<typename> (*[name])([args]) 	: declares a function pointer (see AT "../Functions") <typename> is the return type
				>can be assigned to any function with matching [args]
				>the parentheses around the asterisk and [name] are necessary;
				  otherwise we would be declaring a function with a return type of some kind of variable pointer
				>call it as follows:
					(*[name])([arguments to pass])			//or
					[name]([arguments to pass])
			>dereference a pointer with an '*' to access the value in that memory directly
		Artimetrics:
			>behaves differently that standard ints
			[pointer] (+ || -) <int>	: returns [pointer]s increased or decreased by <int> sizeof(*[pointer])s
			[pointer] - [pointer]		: returns the number if chars between the two memory locations; sign is respected
			-summary:
				pointer + int     = pointer
				pointer - int     = pointer
				pointer + pointer = N/A
				pointer - pointer = int


	COMPILING: //(0x000001c0)➞
		>alias building
		>compiling is done by a ĐĐcompilerĐĐ program
		Compiling_process:
		+-------------+          +--------------+           +-----------+           +------------+          +---------+
		| Source Code | -------> | Preprocessor | --------> | Compiling | ------->  | Assembling | -------> | Linking |
		+-------------+          +--------------+           +-----------+           +------------+          +---------+
			source_code:
				>plain text written by a programmer
			preprocessor:
				>directives specified by the programmer are executed {macros are expanded}
				>steps are taken to make the code easier to analyze
				>the result is a transformed, but still recognizable source code
			compiling:
				>NOTE: you have probably noticed that the process of compiling contains a step called compiling; hence the term is ambiguous
				>the process of translating into assembly (see AT "/Assembly")
			assembling:
				>the process of translating assembly into machine code (ie. 0-s and 1-s)
			linking:	// ?!; write tis one too
				pass
		>compiling can be automated by ĐĐmakeĐĐ utilities;
		  see more detail on GNU make AT "/GNU/make"
		Jumbo_builds: //(0x000001c1)➞
			>alias unity build
			>an attempt to make builds faster by grouping multiple translation units into one
			>done by including (see AT "../Preprocessor") C source files (not headers)
			Pros:
				>eliminates the overhead of processing header files multiple times and having to access many small files
			Cons:
				>heavier memory usage because of the increased sized of a single translation unit
				>more unchanged code is being rebuilt, adding overhead
			NOTE: best used on large project which are heavily modified between builds


	PREPROCESSOR: //(0x000001c2)➞
		>the same is used for C, C++ and Objective-C
		>all done compile time
		>pre-assembling
		>preprocessor directives must be alone in a line
		>make it multi line by placing a '\\' before a new line { \[new line] }
		¤DIRECTIVES
			#include					: include external source file; (see BELOW)
			#define [NAME]	[...]		: defines macro; [NAME] will be replaced by [...] (unless inside qoutes); recomended to make [NAME] all caps
			#undef [NAME]				: undefines macro
			#line <int> "[name]"		: sets the line number and source file name for the following line/lines (implementation specific)
										   (only) used by predefined macros and when giving compile time errors/warnings
			#error "[str]"				: abort compilation and display this line as an error (its not interpreted inside a false preprocessor logical statement)
			#pragma	[pdirective]		: made to be impementation specific; if the compiler does not support a specific argument for #pragma, it is ignored			
			#if	[const]					: ignore the contence of the statement unless [const] is true				//this section is not very well worded
			#ifdef [NAME]				: ignore the contence of the statement unless macro [NAME] IS defined
			#ifndef						: ignore the contence of the statement unless macro [NAME] IS NOT defined
			#else						: do not ignore the contence of the statement if previous preprocessor logic failed
			#elif [const]				: do not ignore the contence of the statement if previous preprocessor logic failed and [const] is true
			#endif						: end preprocessor logical statement
			##							: can only be used inside a macro definition; eliminates the white spaces around itself; expanded after surrounding marcos are expended
		-Logic:
			-starts with and if:
				>#if
				>#ifdef
				>#ifndef
			-optionally contains elses:
				>#else
				>#elif				
			-has one "#endif" at its end
		-Including:
			#include [%c][...][%c]
			¤[%c]
				>use <[lib]> to include an installed library
				>use "[file]" to include local files
			>literally copies the code from the included file
			NOTE:
				#include_next <...>
				>very widely supported extension
				>every dir leading to the file containing the directive is omitted from the search path
				>"file" and <file> behave the same under it
		-HEADER GUARDS:
			>prevent headers from being included multiple times
			¤
				#pragma once				//not recommended
			¤
				#ifndef [name]				//recommended
				#define [name]
					[...]
				#endif
		Predefined_macros:
			__FILE__		: string constant representing the full path and file name of the current input file
			__LINE__		: current line
			__DATE__		: current date; "mmm dd yyyy", where dd is padded with a ' ' if less than 10
			__STDC__		: bool value signaling whether the compiler conforms to ISO C standard
			__STDC_VERSION__: long representing the C standard version; "yyyymmL"
			__STDC_HOSTED__ : bool value signaling whether the compilers target is a hosted environment
			__cplusplus		: if defined it signals that C++ is being preprocessed
			__OBJC__		: if defined it signals that Objective-C is being preprocessed
			__ASSEMBLER__	: if defined it signals that Assembly is being preprocessed

    HEADER_FILES:
                                                  ┏━━━━━━━━━━━━━━━━━━━━━┓        ┏━━━━━━━━━━━━━━━━━━━━━┓
                                                  ┃       stuff.h       ┃        ┃      stuff2.h       ┃
                                                  ┣━━━━━━━━━━━━━━━━━━━━━┫        ┣━━━━━━━━━━━━━━━━━━━━━┫
                                                  │ extern int myint;   │        │ extern char mychar; │
                                                  └─────────────────────┘        └─────────────────────┘
                                                           .'|                            .'|
                    .-------------------------------------'--|---------------------------'  |
                    V                                        V                              V
        ┏━━━━━━━━━━━━━━━━━━━━━━┓                  ┏━━━━━━━━━━━━━━━━━━━━━┓        ┏━━━━━━━━━━━━━━━━━━━━━━┓
        ┃        main.c        ┃                  ┃       stuff.c       ┃        ┃      stuff2.c        ┃
        ┣━━━━━━━━━━━━━━━━━━━━━━┫                  ┣━━━━━━━━━━━━━━━━━━━━━┫        ┣━━━━━━━━━━━━━━━━━━━━━━┫
        │ #include "stuff.h";  │                  │ #include "stuff.h"; │        │ #include "stuff2.h"; │
        │ #include "stuff2.h"; │                  │                     │        │                      │
        │ {    myint = 1;   }  │                  │ int myint;          │        │ char mychar;         │
        │                      │                  │                     │        │                      │
        └──────────────────────┘                  └─────────────────────┘        └──────────────────────┘



                                                                   ┏━━━━━━━━━━━━━━━━━━━━━┓
                                                                   ┃      global.h       ┃
                                                                   ┣━━━━━━━━━━━━━━━━━━━━━┫
                                                                   │ extern int myint;   │
                                                                   │ extern char mychar; │
                                                                 .'└─────────────────────┘
                                                          .-----'           .''.
                                                        .'   .-------------'    '-----------.
                   .-----------------------------------'     |                              |
                   V                                         V                              V
        ┏━━━━━━━━━━━━━━━━━━━━━┓                   ┏━━━━━━━━━━━━━━━━━━━━━━┓        ┏━━━━━━━━━━━━━━━━━━━━━━┓
        ┃        main.c       ┃                   ┃       stuff.c        ┃        ┃      stuff2.c        ┃
        ┣━━━━━━━━━━━━━━━━━━━━━┫                   ┣━━━━━━━━━━━━━━━━━━━━━━┫        ┣━━━━━━━━━━━━━━━━━━━━━━┫
        │ #include "stuff.h"; │                   │ #include "global.h"; │        │ #include "global.h"; │
        │                     │                   │                      │        │                      │
        │ {    myint = 1;     │                   │ int myint;           │        │ char mychar;         │
        │      mychar = 'a' } │                   │                      │        │                      │
        └─────────────────────┘                   └──────────────────────┘        └──────────────────────┘
            

	OBJECT_FILES: //(0x000001c3)➞
		Symbol_table:
			>a ĐĐsymbolĐĐ is either a function or a variable
			>the syntax is not literal, however when the object table is
			  being translated to human readable form (see AT "?!/Objdump")
			  *this is common syntax
			[symbol_body] [symbol_type] [symbol_name]
			¤[symbol_name]
				>in C, the literal name which the programmer has given to it (as overloading is not possible)
				>in C++, the literal name which the programmer has given to it nested in other string to make
				  overloads uniquely identifiable
			¤[symbol_type]
				T
				t
				W

	LINKER: //(0x000001c4)➞
		>combines object files and links to libraries to create an executable
		>the combination of object files is done by melting the assembly sections together
		>discards unused code (ĐĐgarbage collectorĐĐ)
		-static
			>extern libraries are copied to the assembly
			>results in outstandingly large executables
		-dynamic
			>libraries are looked up and read at run time
			>requires the user to have those libraries installed
			>saves space
			>generates overhead


	BUILD_SYSTEMS:
		>lol, youre fucked
		>a build system is collection of tools meant to automate the building process
		GNU_Make:
			>minimalistic build system
			>making it platform independent requires lots of typing
			>other build systems tend to depend on it, by creating Makefiles
			>see AT (??)
		CMAKE:
			>no
			>run
			{ // how its recommended to compile cmake projects (from the project root)
				$ mkdir build ; cd build
				$ cmake ../
			  // however, this should be more than sufficient for normal users
			    $ cmake .
			}
		Autoconf:
			./configure && make && make install
			>generates a GNU Makefile
			>also made by GNU
			>NOTE: i cannot believe anyone uses this; the tool chain is convoluted, never-ending and hard to memorize
			Files:
				configure	: Autotools signature;
							   each project has its own;
							   responsible for spitting out a make file;
							   preferably referred to as "./configure" for clarity
				configure.[ac|in|scan]
				Makefile.am
				Makefile.in
				config.h	: contains macros
			Tools:
				autoconf	: central tool;
							   responsible for spitting out the ./configure;
							   depends on Makefile.[ac|in|scan]
				autoreconf	: ?!
				automake	: ?!
				autoscan	: ?!
				alocale		: responsible for determining the locale



	OPERATORS: //(0x000001c5)➞
		Logical:
			&&		and				: and operator; {if(x<y && y<z){} if both are true}
			|| 		or				: or operator; {if(x<y || y<z){} if atleast one is true}	//"|| || or : or" would look funny
			!		not				: not operator
			^		xor				: xor operator
			==						: equals operator
			!=		not_eq			: not equals operator
.			>						: greater than operator
.			>=						: greater than or equal to operator
			<						: less than operator
			<=						: less than or equal to operator
		Artimetric:
			+					: add
			++[...]				: pre-increment; [...] = [...] + 1; faster then [...]++
			[...]++				: post-increment; [...] = [...] + 1, but only after it was operated on
			+=					: add and assign { x+=y == x=x+y }
.			-					: subtract
.			--[...]				: pre-decrease; [...] = [...] - 1; faster then [...]--
			[...]--				: post-decrease; [...] = [...] - 1, but only after it was operated on
.			-=					: subtract and assign { x-=y == x=x-y }
			*					: multiply
			*=					: multiply and assign { x-=y == x=x-y }
			/					: divide
			/=					: divide and assign { x-=y == x=x-y }
			%					: reminder
			%=					: reminder and assign { x-=y == x=x-y }
		Bitwise:
			&		bitand			: bitwise and
			| 		bitor			: bitwise inclusive or
			~ 		compl			: bitwise not
			^ 						: bitwise xor
			<< 						: shift bits left (see more BELOW)
.			>> 						: shift bits right (see more BELOW)
			,						: comma operator; used for providing more statements then expected; 
									   returns the last statement; has the lowest precedence, so always use parenthesis
									   { int a = (b++, b); }
			sizeof([exp])			: returns size of [exp] in bytes, if [exp] is an array type returns the length of the array in bytes
			>see more on shifting AT "Assembly/LANGUAGE_STATEMENT/logic/[shl && shr]"
			>shift bit operations take two operands
				[int1] [shift] [int2]
				>[int1] is the value to be shifted
				>[int2] is ALWAYS the number of bits to shift with
				{ 0b00110010 >> 1 => 0b00011001 }
			Assignment operators:
				>perform binary operation and store the result in the LEFT operand
				|= 		or_eq	: bitwise inclusive or assignment
				^= 		xor_eq	: bitwise exclusive or assignment
				<<= 			: left shift assignment
.				>>= 			: right shift assignment
		Misc:
			&						: address of (see AT "/C++/References")


	LOGIC: //(0x000001c6)➞
		operator?:
			<bool> ? <on-true> : <on-false>
            >"ternary"
			>mostly used as short syntax for a simple if statement
			><on-true> and <on-false> symbolize a value which will be returned
			{ // execute different functions dependent on compression
				(10 > userInput) ? doThis() : doThat();
			}
			>NOTE: one use it has, for which an if statement cannot be used
                    is assigning a const variable
			{ // assign constant depending on a condition
				bool running = init();
				const char* state = running ? "started" : "crashed";
			}
		If:
			if(<bool>) (<attribute>) {
				<...>
			}
			(else if(<bool>) (<attribute>) {
				<...>
			})*
			(else (<attribute>) {
				<...>
			})
			<attribute>:
				[[ likely ]]	: mark the condition as likely to be true allowing for extra compiler optimizations
				[[ unlikely ]]	: mark the condition as not likely to be true allowing for extra compiler optimizations
		Switch:
			switch([variable]){
				(case [value]:
					[...]
					(break)
				)*
				(default:
					[...]
				)
			}



	LOOPS: //(0x000001c7)➞
		while([logic]) {[code]}				: while [logic] is true execute [code]
		do { <...> } while ([condition]);	: "do" first runs then takes a look at "while"; ie. do always runs atleast once
		For:
			for([def];[logic];[inc]) {}		: (where to start;till when; how much to increment with) its weird cause the stuff in () can perform other stuff;
											   just use it as intended; //totally against convention, ?!
											   if [def], [logic] and [inc] are all empty then its an infinite loop
		break					: break out from current loop
		continue				: jump to the next loop cycle and continue execution


	DATA_GROUPS_AND_OBJECTS: //(0x000001c8)➞
		>a container of variables and functions
		>their definition is only a schematic, so called ĐĐinstancesĐĐ or ĐĐobjectsĐĐ must be created to access and modify their contents
		<object>.<member>	: accesses member
		<object*>-><member>	: accesses member of an object accessed through a pointer
        >NOTE: the distinction between "." and "->" is one of the worst features of C;
                its part of the language because of legacy compiler concerns and because ANSI is braindead;
                the problem it poses is one of encapsulation in a sense,
                while writing C you never actually care whether you are accesing a field through a pointer or not,
                that makes it slight inconvinence, however what often happens is changing a variable to a pointer
                resulting in you having to go back and change all "."s to "->"s
		Data_unions:	
			union ([name]){ [...] };			: special class type; only as big as its largest element and all elements share the same memory
				>the purpose of union is to save memory by using the same memory region for storing different objects at different times
				>alternatively they can(, but not intended to) be used for type punning(/~converting)
				>[name] is rarely used
							   same as dereferencing and then accessing normally ( (*[pointer]).[member])
		Data_structures:
			struct [s_name]{ [...] }([name]);			: declares struct; notice the ';'; [name] creates objects
														   [...] can contain variables and functions;


	FUNCTIONS: //(0x000001c9)➞
 		([[ [attribute] ]]) ([specifier]) [return typename] [name]([[arg][, [...]]]) { [...] }		: declares function
		{ // Empty, valid main function
				signed main(int argc, char** argv){
					return 0;
				}
				// The ABOVE but with the parts labeled
				   function name` ` ` ` ` ` ` ` ` ` ` `\
			  return type|        arguments             \
				  |      |   _________A_________         }-> function head
				  V      V  /                   \       /
				signed main(int argc, char** argv). . ./
				{ ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` `\
					return 0;	<-- return statement    }-> function body
				} . . . . . . . . . . . . . . . . . . ./
		}
		>the part from the beginning till the curly braces is called the ĐĐfunction headĐĐ (or "header")	// these are generic statements; ?!
		>the curly braces and their content is called the ĐĐfunction bodyĐĐ
		>the function body contains code which is going to be executed upon ĐcallingĐ the function
		[specifier]:
			static		: this function is only visible inside its own compilation unit; a very C-y way of doing private
			inline		: the compiler replaces the definition of inline functions at compile time instead of referring function definition at runtime;
						   this makes the program take up more memory, consequentially inlining very large functions increase the chance of cache misses
						   and there for could harm performance
		[return type]: 
			>any default or user defined type/group
			>the function to return the execution to the function that it was called from have to return
			>returning happens when a function executes the following statement:
					return [value]
			>[value]s typename must match the specified [return type]
			>functions declared "void" dont have to explicitly contain a return statement;
			  they return successfully whenever they reach the end of the function
		[arg]:
			>argument
			>optional
			[specifier] <typename> [name]:
				>like normal variable declarations
				>copies the values passed in
				<typename> [name] = [val]
					>assigns default value to argument
					>all arguments following an argument assigned a default value, will also have to have a default value
			[specifier] <typename> &[name]:
				>accesses the argument directly
				>modifications are not limited to the scope
			[specifier]:
				>most have the same meaning
				const	: constant only in the context of the function, meaning can not be changed inside it; safety measure;
						   good for optimisation
		Calling_functions:
			[name]([arguments])		: calls function
		Main:
			<int> main() {[...]}							: declares main
			<int> main(int argc, char** argv) {[...]}		: declares main and allows command line arguments to be accessed
			<int> main(int argc, char** argv, char** envp)	: declares main and allows command line arguments and (some) environment 
															   variables to be accessed; not universal UNIX-like system specific
			><int> can be "signed int", "int" or "signed" (as "int" and "signed" are just aliases of "signed int")
			>ĐĐargcĐĐ stands for "ARGument Count"; represents the number of command line arguments passed, ie. argvs size
			>ĐĐargvĐĐ stands for "ARGument Vector"; an array of all command line arguments passed
			>ĐargvĐ is nullptr terminated, this terminating nullptr is not represented in ĐargcĐ
			>Đargv[argc]Đ is always nullptr
			>ĐĐenvpĐĐ stands for "ENVironment Pointer"; a NULL terminated array of all environment variables available to the program
			>called on run, ie. where execution ĐstartsĐ (global variables are eval-ed beforehand)



	GOTO: //(0x000001ca)➞
		[name]:				: defines label
		goto [label];		: execution jumps to [label]
		>goto statement must be in the same function as the label it is referring
		>jumping out of scope will call the deconstructors
		>considered bad practice, but in my opinion its the practice of Gods and should be added to python


	MISC_KEYWORDS: //(0x000001cb)➞
		asm("[i1];""[...];");					: embed inline assembly code ([...]) in the program; make use to place a ';' after the instruction, 
												   but INSIDE the parenthesis; every instruction ought to have its own parenthesis
		register [variable declaration]			: a signal to the compiler that this variable should be kept in cpu register whenever possible
		register [type] [name] asm("[register]")	: assign [name] directly to [register] { rax (%rax) }


	DIGRAPH_CHARACTERS: //(0x000001cc)➞
		>later added as easier alternatives to trigraphs
		<:		:	[
		:>		:	]
		<%		:	{
		%>		:	}
		%:		:	#


	TRIGRAPH_CHARACTERS: //(0x000001cd)➞
		>allows to enter characters that are unavailable on some (practically nonexistent) platforms
		>behave like if were a macros
		??=		:	#
		??(		:	[
		??)		:	]
		??<		:	{
		??>		:	}
		??/		:	\
		??'		:	^
		??!		:	|
		??-		:	~

    EXTENSIONS:
		GNU:
			Decimals:
				>exactly what they sound like
				_Decimal32
				_Decimal64
				_Decimal128
            Case_ranges:
                case ${N}..${M}:    : the case applies for all numbers from ${N} to ${M}
        IBM:
            #include_next <...>

#define c_stl::: //(0x000001ce)➞\
I===============================================\
I===============================================\
I		  _____      _____ _____ _     			\
I		 /  __ \    /  ___|_   _| |    			\
I		 | /  \/    \ `--.  | | | |    			\
I		 | |         `--. \ | | | |    			\
I		 | \__/\    /\__/ / | | | |____			\
I		  \____/    \____/  \_/ \_____/ (C Standerd Library || C std)\
I===============================================\
I===============================================I

	>NOTE: int functions which do not return the result of some calculation,
            return error codes by convention;
            0 - success,
        non 0 - failure
    >NOTE: C might have the most fucked stl out there of all programming languages;
            its mostly a collection of random things someone wrote once
            and have been addeded to the initial standard;
            whats magickal is that it still manages to be more useful,
            its holistic over consistent

//(0x0000010d)➞
-----------------------
		<assert>
-----------------------
#include <assert.h>
//(0x0000010e)➞

	[noreturn] void assert([bool])		: if [bool] is false, calls abort() and writes a (compiler predefined) message to stderr

	NOTE:
		>it is common that the programmer wants to include a custom message next to an assert call,
		  a common way to do so is by using the comma operator
		  { assert((("custom error message"), 0)); 
				|
				V
			commaing.out: commaing.cpp:21: int my_for(int): Assertion `(("custom error message"),0)' failed.
			Aborted (core dumped)
		  }
		  however the coma operator throws a compiler warning
		  { src/commaing.c:21:78: warning: left-hand operand of comma expression has no effect [-Wunused-value]
			21 |                 assert(("custom error message", 0));
		  }
		  so instead use a logical and, which does not
		  { assert("custom error message" && 0); 
				|
				V
			commaing.out: commaing.cpp:21: int my_for(int): Assertion `(("custom error message"),0)' failed.
			Aborted (core dumped)
		  }

-------------------------
		<complex>
-------------------------
#include <complex.h>
//(0x0000010f)➞
	>for complex number handling

-----------------------
		<ctype>
-----------------------
#include <ctype.h>
//(0x00000110)➞

	>"Char TYPE"

	Functions:
		int:
			>these functions return 0 on false and non 0 on true, because bool is not a standard C typename
			int isalnum([char])		: returns whether [char] is alphanumeric (digit or alphabetic letter)
			int isalpha([char])		: returns whether [char] is alphabetic letter
			int islower([char])		: returns whether [char] is a lowercase letter
			int isupper([char])		: returns whether [char] is a uppercase letter
			int isdigit([char])		: returns whether [char] is a decimal digit (0-9)
			int isxdigit([char])	: returns whether [char] is hexadecimal digit (0-9, a-f, A-F)			//im so upset over the name of this function						//look at the length bruh
			int isprint([char])		: returns whether [char] is printable
			int iscntrl([char])		: returns whether [char] is a control character; (every nonprintable char)
			int isblank([char])		: returns whether [char] is blank (space or tab)
			int isspace([char])		: returns whether [char] is whitespace (' ', '\t', '\n', '\v', '\f' or 'r')
			int isgraph([char])		: returns whether [char] has graphical representation (all printable chars except space and tab)
			int ispunct([char])		: returns whether [char] is punctuation character (all graphical chars that are not alphanumeric (see ABOVE))
		manipulation:
			int tolower([char])		: returns lower case equivalent of [char]
			int toupper([char])		: returns upper case equivalent of [char]
		
-----------------------
		<errno>
-----------------------
#include <errno.h>
//(0x00000111)➞

	int errno	: global integer; 0 on startup; its value ĐĐshouldĐĐ change whenever an error is encountered; 
				   the meaning of values is implementation and library specific also not very well documented; 

----------------------
		<fenv>
----------------------
#include <fenv.h>
//(0x00000112)➞

	Pragmas:
		#pragma STDC FENV_ACCESS on		: allow floating-point envirement access; make sure its set while using this header or expect undefined behaviour
		#pragma STDC FENV_ACCESS off	: disallow floating-point envirement access

	Functions:
		[rounding] fegetround()						: returns currently applied [rounding]
		int fesetround([rounding])					: applies [rounding]
		int feclearexcept([excepts])				: clears [excepts] exceptions
		int feraiseexcept([excepts])				: raises [excepts] exceptions
		int fegetexceptflag([fexcept*], [except])	: stores [excepts] in *[fexcept*]
		int fesetexceptflag([fexcept*], [except])	: sets [except] status bits to the states in [fexcept*]
		int fetestexcept([excepts])					: returns what exceptions out of [excepts] are set, thus returning 0 if none
		int fegetenv([fenv_t*])						: stores current floating-point environment in [fenv_t*]
		int fesetenv([fenv_t*])						: sets the current floating-point environment to [fenv_t*]
		int feholdexcept([fenv_t*])					: stores current floating-point environment in [fenv_t*] and resets it
		int feupdateenv([fenv_t*])					: sets the current floating-point environment to [fenv_t*] and 
														   raise the exceptions that were set before the call

	Typedefs:
		fexcept_t	: unsigned short int; stores exception flags
		
	Structs:
		fenv_t		: stores floating-point environment
			FE_DFL_ENV		: expands to default floating-point environment

	[excepts]:
		FE_DIVBYZERO	: pole error exception; raised on division by 0 or log(0.0)
		FE_INEXACT		: inexact result exception; raised when the result can not be expressed exactly {1/3}
		FE_INVALID		: invalid argument exception {sqrt(-1.0)}
		FE_OVERFLOW		: overflow exception; raised when the result is too large to be represented in the return type
		FE_UNDERFLOW	: underflow exception; raised when the result is too small to be represented in the return type
		FE_ALL_EXCEPT	: all of the above exceptions

	[rounding]:		//i think the names are self-explanatory
		FE_DOWNWARD
		FE_UPWARD
		FE_TONEAREST
		FE_TOWARDZERO

------------------------
		<floats>
------------------------
#include <float.h>
//(0x00000113)➞

	Macros:
		FLT_RADIX		: base of floats
		FLT_MANT_DIG	: length of mantissa for floats
		DBL_MANT_DIG	: length of mantissa for doubles
		LDBL_MANT_DIG	: length of mantissa for long doubles
		DECIMAL_DIG		: number of decimal digits that can be rounded into a floating-point and back without loss of precision
		FLT_DIG			: number of decimal digits that can be rounded into a floating-point and back without change in the number of decimal for floats
		DBL_DIG			: number of decimal digits that can be rounded into a floating-point and back without change in the number of decimal for doubles
		LDBL_DIG		: number of decimal digits that can be rounded into a floating-point and back without change in the number of decimal for long doubles
		FLT_MIN_EXP		: minimum value for the exponent that generates a normalized float
		DBL_MIN_EXP		: minimum value for the exponent that generates a normalized double
		LDBL_MIN_EXP	: minimum value for the exponent that generates a normalized long double
		FLT_MIN_10_EXP	: minimum value for the exponent of base 10 that generates a normalized float
		DBL_MIN_10_EXP	: minimum value for the exponent of base 10 that generates a normalized double
		LDBL_MIN_10_EXP : minimum value for the exponent of base 10 that generates a normalized long double
		FLT_MAX_EXP		: maximum value for the exponent that generates a normalized float
		DBL_MAX_EXP		: maximum value for the exponent that generates a normalized double
		LDBL_MAX_EXP	: maximum value for the exponent that generates a normalized long double
		FLT_MAX_10_EXP	: maximum value for the exponent of base 10 that generates a normalized float
		DBL_MAX_10_EXP	: maximum value for the exponent of base 10 that generates a normalized double
		LDBL_MAX_10_EXP : maximum value for the exponent of base 10 that generates a normalized long double
		FLT_MAX			: largest representable number with floats
		DBL_MAX			: largest representable number with doubles
		LDBL_MAX		: largest representable number with long doubles
		FLT_EPSILON		: difference between 1 and the next representable value with floats
		DBL_EPSILON		: difference between 1 and the next representable value with doubles
		LDBL_EPSILON	: difference between 1 and the next representable value with long doubles
		FLT_MIN			: smallest representable number with floats (toward 0)
		DBL_MIN			: smallest representable number with doubles (toward 0)
		LDBL_MIN		: smallest representable number with long doubles (toward 0)
		FLT_ROUNDS		: rounding behaviour; possible values = ([-1, undetermined], [0, toward zero], [1, to nearest], 
						   [2, toward positive infinity], [3, toward negative infinity])
		FLT_EVAL_METHOD : evaluation format; possible values = ([-1, undetermined], [0, evaluate just to the range and precision of the type],
						   [1, evaluate float and double as double, and long double as long double], [2 evaluate all as long double], 
						   [-[num], indicate an implementation-defined behavior])

--------------------------
		<inttypes>
--------------------------
#include <inttypes.h>
//(0x00000114)➞

	Macros:
		>they extend to: "[length][specifier]" respectively of their size
		>as both the name as the syntax suggests they are used meant to be used inside printf() and scanf() calls
		><int> == 8 || 16 || 32 || 64; responsible for [length] (see AT "C++/C std/<stdio.h>")
		>[specifier] == d || i || o || u || x (see AT "C++/C std/<stdio.h>")
		PRI[specifier]MAX
		PRI[specifier]<int>
		PRI[specifier]LEAST<int>
		PRI[specifier]FAST<int>
		PRI[specifier]PTR
		SCN[specifier]MAX
		SCN[specifier]<int>
		SCN[specifier]LEAST<int>
		SCN[specifier]FAST<int>
		SCN[specifier]PTR

	Functions:
		>all these functions have a corresponding function mentioned, those all can be found AT "/C++/C std/<stdlib>"
		intmax_t imaxabs([intmax_t])						: returns absolute value; (distance from 0);
															   corresponds to abs()
		imaxdiv_t imaxdiv([intmax_t1], [intmax_t2])			: returns a imaxdiv_t struct containing [int1]/[int2] and the remainder;
															   corresponds to div()
		intmax_t strtoimax([char*], [char**], <int>)		: returns [char*] converted to intmax_t and sets [char**] to 
															   the position after where the last digit was read from;
															   [char**] can be NULL; <int> is the numerical base;
															   corresponds to strtol()
		uintmax_t strtoumax([char*], [char**], <int>)		: same as ABOVE, but with uintmax_t
		intmax_t wcstoimax([wchar_t*], [wchar_t**], <int>)	: returns [wchar_t*] converted to intmax_t and sets [char**] to
															   the position after where the last digit was read from;
															   [wchar_t**] can be NULL; <int> is the numerical base;
															   corresponds to wcstol()
		uintmax_t wcstoumax([wchar_t*], [wchar_t**], <int>)	: same as ABOVE, but with uintmax_t

	Structs:
		imaxdiv_t	: holds the results of a imaxdiv(); has two members quot(ient) and rem(inder)

------------------------
		<iso646>
------------------------
#include <iso646.h>
//(0x00000115)➞
	>adds macro aliases for operators
    and
    or
    not
    bitand
    bitor

    >NOTE: this allows you to use bitand for address-of, which is very funny

------------------------
		<limits>
------------------------
#include <limits.h>
//(0x00000116)➞

	Macros:
		CHAR_BIT	: number of bits in a char
		SCHAR_MIN	: smallest possible value for a signed char
		SCHAR_MAX	: largest possible value for a signed char
		UCHAR_MAX	: largest possible value for a unsigned char
		CHAR_MIN	: smallest possible value for a char (SCHAR_MIN || 0)
		CHAR_MAX	: largest possible value for a char (UCHAR_MAX || SCHAR_MAX)
		MB_LEN_MAX	: maximum number of bytes in a multibyte char
		SHRT_MIN	: smallest possible value for a short int
		SHRT_MAX	: largest possible value for a short int
		USHRT_MAX	: largest possible value for an unsigned short int		
		INT_MIN		: smallest possible value for an int
		INT_MAX		: largest possible value for an int
		UINT_MAX	: largest possible value for an unsigned int
		LONG_MIN	: smallest possible value for a long
		LONG_MAX	: largest possible value for a long
		ULONG_MAX	: largest possible value for a unsigned long
		LLONG_MIN	: smallest possible value for a long long
		LLONG_MAX	: largest possible value for a long long
		ULLONG_MAX	: largest possible value for a unsigned long long

------------------------
		<locale>
------------------------
#include <locale.h>
//(0x00000117)➞

	Structs:
		lconv	: struct that holds local information; meant to be used to extract current locale of the program
			char *decimal_point		: decimal point symbol
			char *thousands_sep		: thousands separator
			char *grouping			: where to put thousands_sep-s; { "\3\3\2" -> 1.000.000.00 }
			char *int_curr_symbol	: international currency symbol; { HUF }
			char *currency_symbol	: local currency symbol; { $ }
			char *mon_thousands_sep	: monetary thousands separator
			char *mon_grouping		: where to put thousands_sep-s in monetary values (see ABOVE)
			char *positive_sign		: positive sign
			char *negative_sign		: negative sign
			char frac_digits		: number of fractional digits to be written
			char p_cs_precedes		: 1 if the curreny_symbol precedes positive values, 0 if succeeds
			char int_p_cs_precedes
			char p_sep_by_space		: 1 if a space separates currency_symbol from positive values		//theres a typo in the gnu locale.h here ("iff")
			char int_p_sep_by_space
			char n_cs_precedes		: 1 if the curreny_symbol precedes negative values, 0 if succeeds
			char int_n_cs_precedes
			char n_sep_by_space		: 1 if a space separates currency_symbol from negative values		//it was also copy pasted			
			char int_n_sep_by_space
			char p_sign_posn		: sign position:
			char n_sign_posn		 	0  -  parentheses surround the quantity and currency_symbol
  			char int_p_sign_posn		1  -  the sign string precedes the quantity and currency_symbol
			char int_n_sign_posn 		2  -  the sign string follows the quantity and currency_symbol
										3  -  the sign string immediately precedes the currency_symbol
										4  -  the sign string immediately follows the currency_symbol

	Functions:
		char* setlocale([category], [locale])		: sets [category] to [locale] for the program; returns char* to current locale
			[category]:
				LC_ALL		: the entire locale
				LC_COLLATE	: char set order; affects the behavior of strcoll and strxfrm
				LC_CTYPE	: affects all functions of <cctype>, except isdigit and isxdigit, and the multibyte and wide character functions
				LC_MONETARY	: affects monetary formatting information returned by localeconv
				LC_NUMERIC	: affects the decimal-point formatting and information returned by localeconv
				LC_TIME		: affects the behavior of strftime
			[locale]:
				"C"		: C locale
				""		: environment default locale
		lconv* localeconv()			: returns lconv with currently applied locales for the program

----------------
----------------------
		<math>
----------------------
#include <math.h>
//(0x00000118)➞

	Functions:
		Trigonometry:
			double atan2([num1],[num2])	: returns the arc tangent of [num1]/[num2] in radians; to compute the value, 
										   the function takes into account the sign of both arguments in order to determine the quadrant
			>Each One Of The BELOW has a correspondind hyperbolic version, postfix them with an 'h' to call them { cosh() }
			double cos([num])				: returns the cosine of [num] radians
			double sin([num])				: returns the sine of [num] radians
			double tan([num])				: returns the tangent of [num] radians
			double acos([±1])				: returns the cosine of [+-1] in radians; if [+-1] is not between -1 and 1 [nan] is returned
			double asin([±1])				: returns the sine of [+-1] in radians; if [+-1] is not between -1 and 1 [nan] is returned
			double atan([num])				: returns the tangent of [num] in radians
		Logarithmic:	//?!
			exp
			frexp
			ldexp
			log
			log10
			modf
			exp2
			expm1
			ilogb
			log1p
			log2
			logb
			scalbn
			scalbln
		Power:
			double pow([num1], [num2])			: returns [num1]^[num2]
			double sqrt([num])					: returns square root of [num]
			num  cbrt([num])					: returns cubic root of [num]
			num  hypot([num1], [num2])			: i dont know what a hypotenuse is (?!)
		Rounding:
			>NOTE: these functions have float and long double overloads // not how it should be signalled; i need a name for [float || double || long double]; ?!
			double ceil([double])		: returns the smallest integer thats not less then [num]; the return type is the same as [num]s
			double floor([double])		: returns the largest integer thats not greater then [num]; the return type is the same as [num]s
			double round([double])		: returns the nearest integer to [num]; the return type is the same as [num]s
			double trunc([double])		: returns [num] rounded towards 0; the return type is the same as [num]s
			long lround([double])		: returns the nearest integer to [num] casted to LONG INT
			long long llround([double])	: returns the nearest integer to [num] casted to LONG LONG INT
			double rint([double])		: returns [double] rounded according to Đthe currently set roundingĐ (see AT "../<fenv>");
										   may raise FE_INEXACT (see AT "../<fenv>")
			long lrint([double])		: returns [double] rounded according to Đthe currently set roundingĐ (see AT "../<fenv>") then
										   rounded to the nearest integer and casted to long;
										   may raise FE_INEXACT (see AT "../<fenv>")
			long long llrint([double])	: returns [double] rounded according to Đthe currently set roundingĐ (see AT "../<fenv>") then
										   rounded to the nearest integer and casted to long long
										   may raise FE_INEXACT (see AT "../<fenv>")
			double nearbyint([double])	: returns [double] rounded according to Đthe currently set roundingĐ (see AT "../<fenv>");
										   will never raise FE_INEXACT (see AT "../<fenv>")
		Remainder:
			>function alternatives to the '%' operator for floating points
			double fmod([float1], [float2])		: returns of what logically would be [float1] % [float2], rounded towards 0
												   (as the '%' operator doesnt support floating points)
			double remainder([float1], 			: returns of what logically would be [float1] % [float2], rounded towards the neerest integer
								[float2])	
			double remqou([float1], [float2],	: same as ABOVE, but also stores the qoutient in [int*]
								[int*])
		Bool:
			>these functions where macros originally, but C++ converted them to functions, hence the bool return type
			bool isfinite([num])					: returns whether [num] is finite (meant for floats)
			bool isinf([num])						: returns whether [num] is (+-)infinity
			bool isnan([num])						: returns whether [num] is nan
			bool isnormal([num])					: returns whether [num] is neither infinity, nan, 0 or subnormal
			bool signbit([num])						: returns whether the sing of [num] is negative
			bool isgreater([num1], [num2])			: returns whether [num1] is greater then [num2]
			bool isgreaterequal([num1], [num2])		: returns whether [num1] is greater then or equal to [num2]
			bool isless([num1], [num2])				: returns whether [num1] is less then [num2]
			bool islessequal([num1], [num2])		: returns whether [num1] is less then or equal to [num2]
			bool islessgreater([num1], [num2])		: returns whether [num1] is less then or greater then [num2]
			bool isunordered([num1], [num2])		: ?!
		Misc:
			double nan()							: returns quite nan
			double copysign([num1], [num2])		: returns [num1] with the sign of [num2]
			double fdim([num1], [num2])			: returns x-y if x>y, and 0 otherwise
			double fmax([num1], [num2])			: returns the larger one of its arguments
			double fmin([num1], [num2])			: returns the smaller one of its arguments
			double nextafter([num1], [num2])	: returns the next representable value between [num1] and [num2]
			double nexttoward([num1], [num2])	: returns the previous representable value between [num2] and [num1]
			int fpclassify([num])				: returns an int indicating what type of value [num] is (see BELOW)
					FP_INFINITE		-	Positive or negative infinity (overflow)
					FP_NAN			-	Not-A-Number
					FP_ZERO			-	Value of zero
					FP_SUBNORMAL	-	Sub-normal value (underflow)
					FP_NORMAL		-	Normal value (none of the above)

------------------------
		<setjmp>
------------------------
#include <setjmp.h>
//(0x00000119)➞
	
	>basically an inter-function goto
	>the C way of doing throw - catch
	>NOTE: values of variables wont change back, the values of register variables however are undefined behaviour

	Typedefs:
		jmp_buf		: type aimed at saving the stack pointers for later restoration
	
	Functions:
		int setjmp([jmp_buf])							: saves current stack to [jmp_buf]; returns with 0 unless
														   it returned from longjmp() (see BELOW), in that case returns longjmp()s <int> argument
		[[ noreturn ]] int longjmp([jmp_buf], <int>)	: loads [jmp_buf], ie. jumps to it and makes setjmp() (see ABOVE) return <int>

	{
		#include <stdio.h>
		#include <setjmp.h>

		void f(int* a, int* b){
			*a += 3;
			*b += 5;
		}

		signed main(){
			int* heap_var = new int(1);
			int stack_var = 2;

			jmp_buf buf;
			
			int j = setjmp(buf);

			printf("heap: %d\n"
					"stack: %d\n"
					"---\n",
					*heap_var,
					stack_var
			);

			if(j){
				return 0;
			}

			f(heap_var, &stack_var);

			longjmp(buf, 1);
		}
	}

------------------------
		<signal>
------------------------
#include <signal.h>
//(0x0000011a)➞

	typedef void (*FUNC)(int);

	Functions:
		void signal([signal], [FUNC])	: if [signal] is raised run [FUNC]; { signal(SIGINT, my_signal_handler); }
		int raise([signal])				: raises [signal] for current program (to be handled by signal()); returns int 0 if successful

	[signal]:
		>int macros
		SIGABRT		: signal abort; actually sent by abort()
		SIGFPE		: signal floating point exception
		SIGILL		: signal illegal instruction
		SIGINT		: signal interrupt; [Ctrl] + [c]
		SIGSEGV		: signal segmentation violation
		SIGTERM		: signal terminate

	[FUNC]:
		>generic handlers
		SIG_DFL		: default handling
		SIG_IGN		: ignore
		SIG_ERR		: indicates that an error has occurred when returned by signal(); (see ABOVE)

------------------------
		<stdarg>
------------------------
#include <stdarg.h>
//(0x0000011b)➞

	va_list [name]			: declare va_list

	Macro_functions:
		void va_start([va_list], [last named argument])	: initializes [va_list]; if [last named argument] is not the last named argument, 
														   it will result in undefined behaviour; always should have a corresponding va_end()
	Functions:
		typename va_arg([va_list], <typename>) 		: returns next argument it hasn't returned yet casted as <typename>;
													   [va_list] should be initialized
		void va_copy([va_list1], [va_list2])		: copy [va_list2] into [va_list1]; [va_list1] should be uninitialized, 
													   [va_list2] should be initialized
		void va_end([va_list])						: end using [va_list]; should always be called before returning 
													   if a va_start() was called

-------------------------
		<stdbool>
-------------------------
#include <stdbool.h>
//(0x0000011c)➞
	>adds a pseudo-bool type
    bool    : some integer (compatible) type
    true    : 1
    false   : 0

------------------------
		<stddef>
------------------------
#include <stddef.h>
//(0x0000011d)➞
	
	Typedefs:
		prtdiff_t	: long; (meant represent the result of a pointer subtraction operation)
		size_t		: unsigned int
		max_align_t	: ?!
		nullptr_t	: a distinct type which can only hold the value nullptr

	Macro_functions:
		void offsetof([data_group], [member])	: returns off set of [member] from the beginning of [data_group]; [data_group] cant have virtual members

	Macro_consts:
		NULL		: null pointer

----------------
-------------------------
		<stdint>
-------------------------
#include <stdint.h>
//(0x0000011e)➞

	Typedefs:
		----------------------------------
		|    Signed		|    Unsigned	 |
		----------------------------------
		| intmax_t		| uintmax_t		 |
		| int8_t		| uint8_t		 |
		| int16_t		| uint16_t		 |
		| int32_t		| uint32_t		 |
		| int64_t		| uint64_t		 |
		| int_least8_t	| uint_least8_t	 |
		| int_least16_t	| uint_least16_t |
		| int_least32_t	| uint_least32_t |
		| int_least64_t | uint_least64_t |
		| int_fast8_t	| uint_fast8_t	 |
		| int_fast16_t	| uint_fast16_t  |
		| int_fast32_t	| uint_fast32_t  |
		| int_fast64_t	| uint_fast64_t  |
		| intptr_t		| uintptr_t		 |
		----------------------------------

	Macros:
		+---------------------------------------------+------------------------------------------------------+----------------------------------------------+
		|                    Macro                    |                     Description                      |                	Defined as                 	|
		+---------------------------------------------+------------------------------------------------------+----------------------------------------------+
		| INTMAX_MIN                                  | Minimum value of intmax_t                            | -(263-1), or lower                        	|
		| INTMAX_MAX                                  | Maximum value of intmax_t                            | 263-1, or higher                          	|
		| UINTMAX_MAX                                 | Maximum value of uintmax_t                           | 264-1, or higher                          	|
		| INTN_MIN                                    | Minimum value of exact-width signed type             | Exactly -2(N-1)                           	|
		| INTN_MAX                                    | Maximum value of exact-width signed type             | Exactly 2(N-1)-1                          	|
		| UINTN_MAX                                   | Maximum value of exact-width unsigned type           | Exactly 2N-1                              	|
		| INT_LEASTN_MIN                              | Minimum value of minimum-width signed type           | -(2(N-1)-1), or lower                     	|
		| INT_LEASTN_MAX                              | Maximum value of minimum-width signed type           | 2(N-1)-1, or higher                       	|
		| UINT_LEASTN_MAX                             | Maximum value of minimum-width unsigned type         | 2N-1, or higher                           	|
		| INT_FASTN_MIN                               | Minimum value of fastest minimum-width signed type   | -(2(N-1)-1), or lower                     	|
		| INT_FASTN_MAX                               | Maximum value of fastest minimum-width signed type   | 2(N-1)-1, or higher                       	|
		| UINT_FASTN_MAX                              | Maximum value of fastest minimum-width unsigned type | 2N-1, or higher                           	|
		| INTPTR_MIN                                  | Minimum value of intptr_t                            | -(215-1), or lower                        	|
		| INTPTR_MAX                                  | Maximum value of intptr_t                            | 215-1, or higher                          	|
		| UINTPTR_MAX                                 | Maximum value of uintptr_t                           | 216-1, or higher                          	|
		| SIZE_MAX                                    | Maximum value of size_t                              | 264-1, or higher                          	|
		| PTRDIFF_MIN                                 | Minimum value of ptrdiff_t                           | -(216-1), or lower                        	|
		| PTRDIFF_MAX                                 | Maximum value of ptrdiff_t                           | 216-1, or higher                          	|
		| SIG_ATOMIC_MIN                              | Minimum value of sig_atomic_t                        | if sig_atomic_t is signed: -127, or lower...	|
		|               							  |                        								 |  if sig_atomic_t is unsigned: 0  			|
		| SIG_ATOMIC_MAX                              | Maximum value of sig_atomic_t                        | if sig_atomic_t is signed: 127, or higher...	|
		|  											  |                                                      |  if sig_atomic_t is unsigned: 255, or higher |                                      |
		| WCHAR_MIN                                   | Minimum value of wchar_t                             | if wchar_t is signed: -127, or lower...     	|
		|                  							  |                                                      |  if wchar_t is unsigned: 0                   |
		| WCHAR_MAX                                   | Maximum value of wchar_t                             | if wchar_t is signed: 127, or higher...     	|
		|      										  |                                                      |  if wchar_t is unsigned: 255, or higher      |
		| WINT_MIN                                    | Minimum value of wint_t                              | if wint_t is signed: -32767, or lower...    	|
		|                  							  |                                                      |  if wint_t is unsigned: 0                   	|
		| WINT_MAX                                    | Maximum value of wint_t                              | if wint_t is signed: 32767, or higher...    	|
		|    										  |                                                      |  if wint_t is unsigned: 65535, or higher   	|
		+---------------------------------------------+------------------------------------------------------+----------------------------------------------+

	Macros_functions:
		INTMAX_C(<int>)			: returns the closest representable value of intmax_t
		UINTMAX_C(<int>)		: returns the closest representable value of uintmax_t
		INT[int1]_C([int2])		: returns the closest representable value of [int2] in int_least<int>_t ([int1] == 8 || 16 || 32 || 64)
		UINT[int1]_C([int2])	: returns the closest representable value of [int2] uint_least[int1]_t ([int1] == 8 || 16 || 32 || 64)


--------------------------------
			<stdio>
--------------------------------
# define stdio
# include <stdio.h>

	>Input/Output library

	Functions:
		Generic FILE* operations:
			FILE* fopen([file], [openmode])				: returns FILE* to [file] opened in [openmode] (both args are char*-s)
			FILE* freopen([file], [openmode], [FILE*])	: opens [file] in [openmode] and associates it with [FILE*],
														   regardless off what was associated with what before
			int fclose([FILE*])							: flushes (see ABOVE), closes file and disassociates it from [FILE*]
			void setbuf([FILE*], [char*])				: associates buffer [char*] to be used with [FILE*]
														   if [char*] is NULL a buffer will get allocated automatically
			int setvbuf([FILE*], [char*], 				: specifies buffering for [FILE*]; associates it with [char*]; enforces [buffermode];
					[buffermode], [num])				   [num] is the size of the buffer in bytes (see BELOW)
			int fflush([FILE*])							: any unwritten data (see buffermode) is written to [FILE*];
														   if [FILE*] == NULL -> all open files are automatically flushed
														   when they are closed or on normal termination
			int ungetc([char], [FILE*])					: puts back char to [FILE*], but only virtually (so that it can be read again)
			int ferror([FILE*])							: returns whether error indicator is set for [FILE*]
			int feof([FILE*])							: returns whether eof indicator is set for [FILE*]
			void clearerr([FILE*])						: reset error and eof indicator for [FILE*]
			output:
				int fprintf([FILE*], [format](, [...]))		: prints [format] (see BELOW) to [FILE*] (see buffermode tho);
															   returns number of printed chars on success or a negative number on fail
				int vfprintf([FILE*], [format], [va_list])	: same as ABOVE, but instead of passing the arguments individually you 
															   pass in a [va_list] (see AT stdarg)
				int fputc([char], [FILE*]) 					: writes [char]/<int> to [FILE*] and advances position indicator by one;
					|| putc([char], [FILE*])				   putc and fputc are equivalent, except that putc may be implemented
															   as a macro in some libraries; returns char written or EOF
				int fputs([char*], [FILE*])					: writes [char*] to [FILE*] and advances position indicator accordingly;
															   the null terminating char is not copied; returns a non negative value or EOF
				size_t fwrite([pointer], [size_t1],			: writes [size_t1]*[size_t2](array) bytes, from [pointer] to [FILE*];
						[size_t2], [FILE*])					   returns size_t number of chars written
			input:		
				int fscanf([FILE*], [format](, [...]))			: reads input from [FILE*] and stores them according to [format] (see BELOW)
																   into the additionally passed in arguments
				int vfscanf([FILE*], [format], [va_list])		: same as ABOVE, but instead of passing the arguments individually you 
																   pass in a [va_list] (see AT stdarg)
				int fgetc([FILE*]) || getc([FILE*])				: returns the char currently pointed by internal file position indicator
																   of [FILE*] and advances it by one
				char* fgets([char*], <int>, [FILE*])			: copies until the next EOL or <int> chars from the currently pointed by
																   internal file position indicator of [FILE*] into [char*] and advances it accordingly
				size_t fread([pointer], [size_t1],				: reads [size_t1]*[size_t2](array) bytes, from [FILE*] and
						[site_t2], [FILE*])						   stores them at where [pointer] points to
				ssize_t getline([char**], [size_t], [FILE*])	: reads a whole line from [FILE*] and stores it in [char**];
																   [size_t] signals the size of [char**]; if the line is longer
																   getline() will call realloc() on [char**] and update [size_t];
																   appropriately; new line chars are preserved
			position_indicator:
				int fgetpos([FILE*], [fpos_t*])				: sets [fpos_t*] (see BELOW) to the current position in [FILE*]
				long ftell([FILE*])							: returns the current position in [FILE*]
				int fsetpos([FILE*], [fpos_t*])				: sets the current position in [FILE*] to [fpos_t*] (see BELOW)
				int fseek([FILE*], [long], [base])			: set the position indicator to [base] + [long]; [base]:
						SEEK_SET	: beginning
						SEEK_CUR	: current position
						SEEK_END	: end
				void rewind([FILE*])						: set position indicator to beginning
			system_operations:
				int remove([file])							: deletes [file]
				int rename([file], [name])					: renames [file] to [name]
				FILE* tmpfile()								: returns FILE* to temporary ("wb+"); this file is guaranteed to have an 
															   unique name and will be deleted on closure or on normal termination
				char* tmpnam([char *])						: returns and changes [char*]s value to a string that is guaranteed to be different from 
		stdout/stdin/stderr operations:
			int putchar([char])					: prints [char] to stdout
			int puts([char*])					: prints [char*] to stdout and appends it with a '\n'
			int printf([format](, [...]))		: prints [format] (see BELOW) to stdout returns number of printed 
												   chars on success or a negative number on fail
			int vprintf([format], [va_list])	: same as ABOVE, but instead of passing the arguments individually
													[va_list] is passed (see AT stdarg)
			int getchar()						: returns the char read from stdin
			int gets([char*])					: reads chars from stdin until '\n' is met and stores them in [char*]
			int scanf([format](, [...]))		: reads input from stdin and stores them according to [format] (see BELOW)
												   into the additionally passed in arguments
			int vscanf([format], [va_list])		: same as ABOVE, but instead of passing the arguments individually
												   [va_list] is passed (see AT stdarg)
			void perror([char*])				: prints errno (see AT "../<errno>") interpreted as an error message to stderr;
												   [char*] is a custom message to be printed before errno, if NULL is submitted,
												   no custom message is shown
		String operations:
			int sprintf([char*], [format](, [...]))		: same as printf(), but instead of printing to stdout,
										   				   it copies the resulting string into [char*];
														   NOTE: its not the pointers value that gets modified, 
														   its the memory at the pointers value,
														   therefor allocating memory is the programmers job
			int vsprintf([char*], [format], [va_list])	: same as above, but instead of passing the arguments individually 
														   [va_list] is passed (see AT stdarg)
			int snprintf([char*], [num], 				: formats string as printf, but instead of printing to stdin,
						  [format](, [...]))			   it copies the resulting first [num] chars into [char*], the rest are discarded
			int vnsprintf([char*], [num],				: same as above, but instead of passing the arguments individually
							[format], [va_list])		   [va_list] is passed (see AT stdarg)
			int sscanf([char*], [format](, [...]))		: reads data from [char*] and stores them according to [format] (see BELOW)
														   into the additionally passed in arguments
			int vsscnaf([char*], [format], [va_list])	: same as above, but instead of passing the arguments individually you pass in a [va_list] (see AT stdarg)

	Typedefs:
		fpos_f		: used to specify a position within a file, not meant to be read directly

	Structs:
		FILE		: object that contains informations to control a stream; has a internal position indicator, pointing somewhere its contents,
					   its knowing where to read from or write to; you should always declare pointers and assign them to the return 
					   value of fopen() or tmpfile() (see ABOVE); on including <stdio> three instances are automatically created: stdin, stdout, stderr
	
	Globals:
		stdin	: standard input stream
		stdout	: standard output stream
		stderr	: standard error stream
	
	Macros:
		NULL			: expands to null pointer constant
		EOF				: expands to a negative int representing the eof
		FILE_NAME_MAX	: expands to the maximum amount of chars to represent a file name
		FOPEN_MAX		: expands to the maximum number of files that can be opened at once
		TMP_MAX			: expands to the number of unique temporary file names that are guaranteed to be possible
		L_tmpnam		: expands to the length of the filename tmpnam() (see ABOVE) generates
		BUFIS			: expands to the maximum buffer size usable with setvbuff() (see ABOVE)

	[Openmode] flags:		//(char*)
		"r"		: read
		"w"		: write
		"a"		: append
		"r+"	: read/write; the file must exist
		"w+"	: read/write; a new file will be created
		"a+"	: read/append; a new file is created if it doesnt exist already
		"b"		: binary (flag must be appended to another flags)

	[Buffermode] (flags):
		_IOFBF		: full buffering; data is written to [FILE*] when the buffer is full or fflush()-ed
		_IOLBF		: line buffering; data is written to [FILE*] once a newline char is found or when the buffer is full or fflush()-ed
		_IONBF		: no buffering; everything is written as soon as possible

	Formaters:
		typedef char* [format]
		>"%%" -> '%'
		printf && fprintf  ->  %[flags][width][precision][length]<specifier>
		scanf && fscanf	   ->  %(*)[max][length]<specifier>
									*		: ignore (not (You), the function discards inputted data)
		specifiers:
			d || i	: decimal int
			u		: unsigned decimal int
			o		: unsigned octal int
			x		: unsigned hex int, lower case (1af)
			X		: unsigned hex int, upper case (1AF)
			f		: decimal float
			a		: hex float, lower case (0xb.f)
			A		: hex float, upper case (0xB.F)
			e		: scientific num, lower case (1.2e+2)
			E		: scientific num, upper case (1.2E+2)
			c		: char
			s		: C string
			p		: (pointer) address
			n		: store the number of characters in an unsigned int passed in	//!
			g		: shortest representation, lower case (e or f)
			G		: shortest representation, upper case (E or F)
		flags:
			+			: always display sign
			[space]		: never display sign
			#			: prefix: o->0, x->0x, X->0X || always display decimal point with: a, A, e, E, f, F, g, G,
			-			: left-justify within [width]
			0			: pad with '0'-s instead of spaces (see BELOW)
		width:	
			>specifies the minimum width, pads with spaces by default
			[num]			: width
			*				: pass in the width as an argument of the printf(); must be passed in BEFORE the value to be printed
		percision:
			>specifies the minimum number of digits to be printed, to achieve this, numbers will get prefixed with '0'-s (d, i, o, u, x, X)
			  OR specifies the number of digits to be written after the decimal point (g, G)
			  OR specifies the number of chars to be printed (s)
			.[num]			: precision
			.*				: pass in the precision as an argument of the printf(); must be passed in BEFORE the value to be printed
		max:
			>the maximum amount of chars to write into the corresponding variable
		length:	
			>alters the expected typename
			>h, hh, l, ll, j, z, t, L,
			-----------------------------------------------------------------------------------------------------------
			|		 |										specifiers												  |
			| length |------------------------------------------------------------------------------------------------|
			|  		 | d, i,          | u, o, x,                | f, e, g, a,  |   c, s,    |    p   |       n        |
			+---------------------------------------------------------------------------------------------------------+
			| (none) | int*           | unsigned int*           | float*       | char*      | void** | int*           |
			| hh     | signed char*   | unsigned char*          |              |            |        | signed char*   |
			| h      | short int*     | unsigned short int*     |              |            |        | short int*     |
			| l      | long int*      | unsigned long int*      | double*      | wchar_t*   |        | long int*      |
			| ll     | long long int* | unsigned long long int* |              |            |        | long long int* |
			| j      | intmax_t*      | uintmax_t*              |              |            |        | intmax_t*      |
			| z      | size_t*        | size_t*                 |              |            |        | size_t*        |
			| t      | ptrdiff_t*     | ptrdiff_t*              |              |            |        | ptrdiff_t*     |
			| L      |                |                         | long double* |            |        |                |
			+---------------------------------------------------------------------------------------------------------+

--------------------------------
			<stdlib>
--------------------------------
#include <stdlib.h>
//(0x00000120)➞

	Functions:
		-memory management:
			void* calloc([size_t1], [size_t2])	: returns a pointer to [size_t1]*[size_t2] bytes of 0 initialized free memory block; 
												   ([size_t1] meant to be the length for an array and [size_t2] meant to be the member size)
			void free([pointer])				: frees up memory at [pointer] which previously was returned by calloc(), malloc() or realloc 
												   (otherwise it causes undefined behaviour)
			void* malloc([size_t])				: returns a pointer to [size_t] bytes of free memory; NOT 0 initialized
			void* realloc([pointer], [size_t])	: resized [pointer] to [size_t]; if needed the contents of *[pointer] is moved to a new location, which is returned
		-string conversion:
			double atof([char*])						: returns [char*] converted to double
			int atoi([char*])							: returns [char*] converted to int
			long atol([char*])							: returns [char*] converted to long
			long long atoll([char*])					: returns [char*] converted to long long
			double strtod([char*], [char**])			: returns [char*] converted to double and sets [char**] to the position 
														   after where the last digit was read from; [char**] can be NULL
			float strtof([char*], [char**])				: returns [char*] converted to float and sets [char**] to the position 
														   after where the last digit was read from; [char**] can be NULL
			long double  strtold([char*], [char**])		: returns [char*] converted to long double and sets [char**] to the position 
														   after where the last digit was read from; [char**] can be NULL
			unsigned long strtoul([char*], [char**], 	: returns [char*] converted to unsigned long and sets [char**] to the position 
									<int>)				   after where the last digit was read from; [char**] can be NULL; <int> is the numerical base
			long strtol([char*], [char**], <int>)		: returns [char*] converted to long and sets [char**] to the position 
														   after where the last digit was read from; [char**] can be NULL; <int> is the numerical base
			unsigned long long strtoull([char*], 		: returns [char*] converted to unsigned long long and sets [char**] to the position 
										[char**], <int>)   after where the last digit was read from; [char**] can be NULL; <int> is the numerical base
			long long strtoll([char*], [char**], <int>)	: returns [char*] converted to long long and sets [char**] to the position
														   after where the last digit was read from; [char**] can be NULL; <int> is the numerical base
		random:
			void srand([unsigned int])	: set seed for pseudo-random number generator
			int rand()					: returns a pseudo-random number between 0 and RAND_MAX
		envirement:
			void abort()					: aborts the program, producing an abnormal termination
			void _EXIT(<int>)				: terminates program "normally" with <int> exit code; doesnt perform any clean up however
			void quick_exit(<int>)			: terminates program "normally" with <int> exit code; doesnt perform any clean up however, but does call
											   the functions specified by at_quick_exit()s (see BELOW)
			void exit(<int>)				: terminates program normally with <int> exit code
			int atexit([void func])			: calls [void func] without arguments automatically on normal termination; if multiple atexit() functions were
										   	   called their [void func]s get executed in FIFO order
			int at_quit_exit([void func])	: calls [void func] without arguments automatically on quick exit (see ABOVE); if multiple atexit() functions were
										       called their [void func]s get executed in FIFO order
			char* getenv([char*])			: returns the value of environmental variable named [char*]; (or NULL)
			int system([char*])				: executes [char*] system command (or atleast tries to)
		math:	
			num abs([num])								: returns absolute value; (distance from 0)
			long labs([long])							: as above, but with longs
			long long llabs([long long], [long long]) 	: as above, but with long longs
			div_t div([int1], [int2])					: returns a div_t struct containing [int1]/[int2] and the remainder
			ldiv_t ldiv([long], [long])					: as above, but with longs
			lldiv_t lldiv([long long], [long long]) 	: as above, but with long longs
		char:
			int mblen([char*], [size_t])					: returns length of multibyte char [char*], examining a maximum of [size_t] bytes
			int mbtowc([wchar_t*], [char*], [size_t])		: converts a maximum of [size_t] bytes of multibyte char [char*] to wchar_t and places it to [wchar_t*]
			int wctomb([char*], [wchar_t])					: converts [wchar_t] to multibyte char and places it into [char*]
			size_t mbstowcs([wchar_t*], [char*], [size_t])	: converts multibyte string [char*] to a maximum of [size_t] wchar_t chars and places it to [wchar_t*]
			size_t wcstombs([char*], [wchar_t*], [size_t])	: converts wide char string [wchar_t*] to a maximum of [size_t] bytes of multibyte chars and places it
															   to [char*]
		misc:
			void* bsearch([pointer1], [pointer2], : returns a pointer to an element of equal to [pointer1] from the memory block 
					[size_t1], [size_t2],			 from [pointer2] to [pointer2]+([size_t1]*[size_t2]); [pointer2] being the first element in an array to
					[FUNC])							 exemine, [size_t1] being the number of elements to exemine, [size_t2] being the size of the elemets in
													 bytes and [FUNC] being the function to which exemine by;
													 the returned element is not guaranteed to be the first in the array;
													 [FUNC] shall have the following prototype: int [name](const void* [key_name], const void* [elem_name]);
													 [FUNC] shall return 0 if the key and the elem match;
			void qsort([pointer], [size_t1],	  : sorts the elements of an array using [FUNC]; [pointer] being the first element of the array to be sorted,
					[size_t2], [FUNC])			     [size_t1] being the number of elements, [size_t2] being the size of the elements in bytes and [FUNC]
												     being the function to sort by;
												     [FUNC] shall have the following prototype: int [name](const void* [arg1], const void* [arg2])
												     [FUNC] shall return:
														<0    -    [arg1] goes BEFORE [arg2]
														 0	  -	   [arg1] and [arg2] are equilent
														>0	  -	   [arg1] goes AFTER  [arg2]

	Structs:
		div_t		: holds the results of a div(); has two members quot(ient) and rem(inder)
		ldiv_t		: as above, but with ldiv()
		lldiv_t		: as above, but with lldiv()

	Macros:
		EXIT_FAILURE	: expands to system dependent exit code signaling failure
		EXIT_SUCCESS	: expands to system dependent exit code signaling success
		MB_CUR_MAX		: expands to maximum number of bytes in a multibyte char
		RAND_MAX		: expands to the maximum value returned by rand()


------------------------
		<string>
------------------------
#include <string.h>
//(0x00000121)➞

	Functions:
		Copy:
			>direct copies overlapping should be taken into account
			void* memset([pointer], [char], [size_t])			: set first [size_t] bytes from [pointer] to [char]
			void* memcpy([pointer1], [pointer2], [size_t])		: copies [size_t] (see AT <stddef>) bytes from [pointer2] to [pointer1] directly
			void* memmove([pointer1], [pointer2], [size_t])		: copies [size_t] (see AT <stddef>) bytes from [pointer2] to [pointer1] with an intermediate buffer
			char* strcpy([char1*], [char2*])					: copies [char2*] to [char1*] directly; the NULL byte also gets copied
			char* strncpy([char1*], [char2*], [size_t])			: copies [size_t] (see AT <stddef>) bytes from [char2*] to [char1*] directly; 
																   if the NULL byte is reached before [size_t] bytes were copied [char1*] is padded with 0s; 
																   a NULL byte will also be appended to [char1*]
			char* strcat([char1*], [char2*])					: append [char1*] with [char2*] directly; the NULL byte of [char1*] will get replaced with 
																   [char2*]'s 0th char
			char* strncat([char1*], [char2*], [size_t])			: append [char1*] with [char2*] first [size_t] and a NULL byte directly (does not pad with 0s)
		Comparison:
			int memcmp([pointer1], [pointer2], [size_t])	: compares the first [size_t] bytes of [pointer1] and [pointer2];
															   <0 -> the first non-matching byte has a lower value in [pointer1]; 
															   >0 -> the first non-matching byte has a higher in [pointer1];
															    0 -> the two are equal
			int strcmp([char1*], [char2*])					: same as above, except no [size_t] is provided as the function stops on the first (string terminating) '\00'
			int strcoll([char1*], [char2*])					: same as above, but the function uses the locale character set order (see AT setlocale())
			int strncmp([char1*], [char2*], [size_t])		: same as memcmp() (see ABOVE), but if it stops if a NULL byte is hit
			int strxfrm([char1*], [char2*], [size_t])		: transforms [char2*] and places its first [char1*] in such a way that it returns the same
															   results with strcmp() and strcoll() (see ABOVE)
		Searching:
			void* memchr([pointer], [char], [size_t])	: returns a pointer to the where [char] is found in the first [size_t] bytes of [pointer] or NULL
			char* strchr([char*], [char])				: returns a char* to where [char] is FIRST found in [char*] or NULL
			char* strrchr([char*], [char])				: returns a char* to where [char] is LAST found in [char*] or NULL
			char* strstr([char1*], [char2*])			: returns a char* to where [char2*] is found in [char1*] or NULL
			size_t strcspn([char1*], [char2*])			: returns the number of chars BEFORE any of [char2*]s chars were found in [char1*] or [char1*]s length
			char* strpbrk([char1*], [char2*])			: returns the number of chars BEFORE any of [char2*]s chars were found in [char1*] or NULL
			size_t strspn([char1*], [char2*])			: returns the number of chars in [char1*] that match any of [char2*]s chars
		Misc:
			char* strerror(<int>)				: returns a string containing an error message generated from <int>
			size_t strlen([char*])				: returns the length of [char*] as size_t (NULL termination not included)
			char* strtok([char1*], [char2*])	: returns a segment of [char1*] until delimeter [char2*] is found or NULL; the delimeter is not included;
												   alternatively on passing in NULL as [char1*] the function continues to split the last char* passed 
			
------------------------
		<tgmath>
------------------------
#include <tgmath.h>
//(0x00000122)➞
	>provides macro over loads of <math.h> and <complex.h>

-----------------------
		<time>
-----------------------
#include <time.h>
//(0x00000123)➞

	Functions:
		clock_t clock()							: returns ticks passed since the launch of the program in clock_t
		double difftime([time_t1], [time_t2])	: returns [time_t1] - [time_t2] in double
		tm* gmtime([time_t*])					: returns [time_t] converted to tm*, representing GMT (UTC)
		tm* localtime([time_t*])				: returns [time_t] converted to tm*, representing the local timezone
		time_t mktime([tm*])					: returns [tm*] converted to time_t
		time_t time([time_t*])					: returns number of seconds since epoch in time_t and also sets [time_t]
												   to that value (unless NULL was passed in)
		char* ctime([time_t*])					: returns [time_t*] converted to human-readable string; "Www Mmm dd hh:mm:ss yyyy" 
		char* asctime([tm*])					: returns [tm*]	converted to human-readable string; "Www Mmm dd hh:mm:ss yyyy" 
		size_t strftime([char*], [size_t],		: copies [tm*] by the parameters of [format] (see BELOW) [size_t] chars (ie its max) to [char*]
						 [format], [tm*])

	Structs:
		tm		: contains various time datas, all of which are ints
			------------------------------------------------
			|  Member  |          Meaning          | Range |
			------------------------------------------------
			| tm_sec   | seconds after the minute  | 0-61  |	//for leap seconds
			| tm_min   | minutes after the hour    | 0-59  |
			| tm_hour  | hours since midnight      | 0-23  |
			| tm_mday  | day of the month          | 1-31  |
			| tm_mon   | months since January      | 0-11  |
			| tm_year  | years since 1900          | N/A   |
			| tm_wday  | days since Sunday         | 0-6   |
			| tm_yday  | days since January 1      | 0-365 |
			| tm_isdst | Daylight Saving Time flag | N/A   |
			------------------------------------------------

	Typedefs:
		time_t		: long
		clock_t		: long

	Macros:
		CLOCKS_PER_SEC : expands to clock ticks per second

	[format]:
		%([modifier])[specifier]
		>[format] is a char*
		>'%' -> "%%"
		[modifiers]:
			E	: uses locales alternative representation (usable with: c, C, x, X, y, Y)
			O	: uses locales alternative numeric symbols (usable with d, e, H, I, m, M, S, u, U, V, w, W, y)
		[specifiers]:
			>the specifiers marked with '°' are locale dependent (see AT <locale>)
°			a	: short weekday name
°			A	: full weekday name
°			b	: short month name
°			B	: full month name
°			c	: date and time ("Www Mmm dd hh:mm:ss yyyy")
			C	: year (integer) divided by 100
			d	: day of the month; 0 padded {"09"}
			D	: short date ("MM/DD/YY")
			e	: day of the month; space padded {" 9"}
			F	: short date ("YYYY-MM-DD")
			g	: week-based year, last two digits (every year starts from Monday and months are irrelevant)
			G	: week-based year
°			h	: same as b
			H	: hour in 24h format {18}
			I	: hour in 12h format {06}; 0 padded
			j	: day of the year; 0 padded {098}
			m	: month in decimal; 0 padded {04}
			M	: minutes; 0 padded {03}
			n	: new line
			p	: AM/PM
°			r	: 12h time {12:38:21 PM}
			R	: 24h time ("HH:MM")
			S	: seconds; 0 padded {04}
			t	: horizontal tab
			T	: ISO 8601 time format ("HH:MM:SS")
			u	: ISO 8601 decimal week day weekday (1-7)
			U	: week number; the first Sunday is the first day of week 1; 0 padded
			V	: ISO 8601 week number (0 padded)
			w	: week day in decimal; Sunday == 0
			W	: week number; the first Monday is the first day of week 1; 0 padded
°			x	: date
°			X	: time
			y	: last two digits of year; 0 padded {02}
			Y	: year
			z	: ISO 8601 offset from GMT (UTC) (1m == 1, 1h == 100)
°			Z	: timezone name

-----------------------
		<uchar>
-----------------------
#include <uchar.h>
//(0x00000124)➞
	>"Unicode CHAR"

	Functions:
		size_t c16rtomb([char*], [char16_t], [mbstate_t])	: converts [char16_t] to multibyte char using [mbstate_t] and places it to [char*]
		size_t 16rtomb([char*], [char32_t], [mbstate_t])	: converts [char32_t] to multibyte char using [mbstate_t] and places it to [char*]
		size_t brtoc16([char16_t], [char*], [mbstate_t])	: converts multibyte char [char*] to char16_t using [mbstate_t] and places it to [char16_t]
		size_t brtoc16([char32_t], [char*], [mbstate_t])	: converts multibyte char [char*] to char32_t using [mbstate_t] and places it to [char32_t]

	Macros:
	  __STD_UTF_16__	: if defined char16_t has UTF-16 encoding
	  __STD_UTF_32__	: if defined char32_t has UTF-32 encoding

-----------------------
		<wchar>
-----------------------
#include <wchar.h>
//(0x00000125)➞

	Functions:
		Same as similarly named functions, but with wchar_t; (the arguments are not written out, but exist):
			-stdio (mostly):
				>try removing the 'w' to find the corresponding function
				fgetwc()
				fgetws()
				fputwc()
				fputws()
				fwprintf()
				fwscanf()
				getwc()
				getwchar()
				putwc()
				putwchar()
				swprintf()
				swscanf()
				ungetwc()
				vfwprintf()
				vfwscanf()
				vswprintf()
				vswscanf()
				vwprintf()
				vwscanf()
				wprintf()
				wscanf()
			-stdlib:
				>try replacing the "wc" with "str" to find the corresponding function
				wcstod()
				wcstof()
				wcstol()
				wcstold()
				wcstoll()
				wcstoul()
				wcstoull()
			-string
				>try replacing the "wcs" with "str" to find the corresponding function	
				wcscat()
				wcschr()
				wcscmp()
				wcscoll()
				kjscpy()
				wcscspn()
				wcslen()
				wcsncat()
				wcsncmp()
				wcsncpy()
				wcspbrk()
				wcsrchr()
				wcsspn()
				wcsstr()
				wcstok()
				wcsxfrm()
				wmemchr()
				wmemcmp()
				wmemcpy()
				wmemmove()
				wmemset()
			-time
				>try replacing the "wc" with "str" to find the corresponding function
				wcstime()
		Other:
			wint_t btowc([char])							: returns [char] converted to wchar_t
			int wctob([wint_t])								: returns [wint_t] converted to char or EOF
			size_t mbrtowc([wchar_t*], [char*],				: interprets [size_t] bytes at [char*] as a multibyte char and converts it 
					[size_t], [mbstate_t])					   to wide char using [mbstate_t] and stores it in [wchar_t*]
			size_t wcrtomb([char*], [wchar_t], [mbstate_t])	: converts wide char [wchar_t] to multibyte char using [mbstate_t] and places it to [char*]
			size_t mbsrtowcs([wchar_t*], [char**],			: converts multibyte string [char**] to a maximum of [size_t] wide chars
					[size_t], [mbstate_t])					   using [mbstate_t] and places it to [wchar_t*]
			size_t wcstrtombs([char*], [wchar_t**],			: converts wide char sting [wchar_t**] to a maximum of [size_t] bytes long multi byte string	
					[size_t], [mbstate_t*])					   using [mbstate_t] and places it to [char*]
			int mbsinit([mbstate_t*])						: returns whether [mbstate_t*] points to a valid mbstate_t object

	Types:
		wchar_t		: C style wide character; distinct basic type in C++ therefor not actually defined in any header
		wint_t		: int capable of representing any wchar_t that is a member of the extended char set

	Structs:
		mbstate_t	: hold the information required to transform multibyte chars to wchar_t; sometimes just an int or a union	

	Macros:
		WCHAR_MAX	: expands to the largest possible value of wchar_t
		WCHAR_MIN	: expands to the smallest possible value of wchar_t (== (WCHAR_MAX * -1) -1)
		WEOF		: wint_t EOF

------------------------
		<wctype>
------------------------
#include <wctype.h>
//(0x00000126)➞

	Functions:
		Same as similarly named functions in <ctype.h>, but with wint_t; (the arguments are not written out, but exist):
			iswalnum()
			iswalpha()
			iswblank()
			iswcntrl()
			iswdigit()
			iswgraph()
			iswlower()
			iswprint()
			iswpunct()
			iswspace()
			iswupper()
			iswxdigit()
			towlower()
			towupper()
		Other:
			iswctype([wint_t], [wctype_t])	: returns whether [wint_t] is [wctype]
			towctrans([wint_t], [wctrans_t]): returns [wint_t] converted to what [wctrans_t] specifies
			wctrans([char*])				: returns a wctrans_t specified by [char*] { wctrans_t c = wctrans("toupper"); }
			wctype([char*])					: returns a wctype_t specified by [char*] { wctype_t d = wctype("digit"); }

	Typedefs:
		[wctype_t]:
			>unsigned long
			"alnum"		== iswalnum()
			"alpha"		== iswalpha()
			"blank"		== iswblank()
			"cntrl"		== iswcntrl()
			"digit"		== iswdigit()
			"graph"		== iswgraph()
			"lower"		== iswlower()
			"print"		== iswprint()
			"punct"		== iswpunct()
			"space"		== iswspace()
			"upper"		== iswupper()
			"xdigit"	== iswxdigit()
		[wctrans_t]:
			>const int_least32_t
			"tolower"	== towlower()
			"toupper"	== towupper()

-----------------
===============================================
#define unix_std::: //(0x000001cf)➞\
I====================================================================================================================\
I====================================================================================================================\
I     _   _       _           _____ _                  _               _      _     _ _                              \
I    | | | |     (_)         /  ___| |                | |             | |    | |   (_) |                             \
I    | | | |_ __  ___  __    \ `--.| |_ __ _ _ __   __| | __ _ _ __ __| |    | |    _| |__  _ __ __ _ _ __ _   _     \
I    | | | | '_ \| \ \/ /     `--. \ __/ _` | '_ \ / _` |/ _` | '__/ _` |    | |   | | '_ \| '__/ _` | '__| | | |    \
I    | |_| | | | | |>  <     /\__/ / || (_| | | | | (_| | (_| | | | (_| |    | |___| | |_) | | | (_| | |  | |_| |    \
I     \___/|_| |_|_/_/\_\    \____/ \__\__,_|_| |_|\__,_|\__,_|_|  \__,_|    \_____/_|_.__/|_|  \__,_|_|   \__, |    \
I                                                                                                           __/ |    \
I                                                                                                          |___/     \
I====================================================================================================================\
I====================================================================================================================I
------------------
	<unistd.h>
------------------
#include <unistd.h>

	>"UNIx STanDard library"

	Functions:
		int chdir([char*])
		int sleep(<int>)		: block execution for <int> seconds
		int fork()				: creates an identical copy of the program;
									returns:
									  1-30000  -  inside the original; the PID of the forked process
									        0  -  inside the forked process
									       -1  -  on failure
		execvpe(<char*>, char**-1, char**-2)	

	~~~~~~~~~
	 getopt:
	~~~~~~~~~
	   int getopt(int argc, char *const argv[],
				  const char *optstring);

	   extern char *optarg;
	   extern int optind, opterr, optopt;

	   #include <getopt.h>

	   int getopt_long(int argc, char *const argv[],
				  const char *optstring,
				  const struct option *longopts, int *longindex);
	   int getopt_long_only(int argc, char *const argv[],
				  const char *optstring,
				  const struct option *longopts, int *longindex);

------------------
	<fcntl.h>
------------------
#include <fcntl.h>

	Function:
		int open([char*], [O_FLAGS], ...)	: returns the lowest file descriptor not in use opened according to [O_FLAGS];
											   the variadic arguments are dependent on [O_FLAGS]
											   NOTE: this beauty allows one to open a file as stdin/stdout/stderr

	Macros:
		[O_FLAGS]:
			O_RDONLY	: "ReaD ONLY"
			O_WRONLY	: "WRite ONLY"
			O_RDWR		: "ReaD WRite"
			O_APPEND	: "Append"
			O_CREAT		: "CREATe"; create if file doesnt exists; requires a extra int argument specifying the permissions
						    NOTE: dont forget to use an octal literal, chud

----------------
	<stat.h>
----------------
#include <sys/stat.h>

	YYY:
		man 2 stat

	struct-s:
		stat
	
	Functions:
		int  stat(const char *restrict pathname,
		           struct stat *restrict statbuf)


#define c_3th_party_libs\
#define 3th_party_c_libs::: //(0x000001d0)➞\
I==================================================================================================\
I==================================================================================================\
I     _____   _   _       ______          _           _     _ _                    _               \
I    |____ | | | | |      | ___ \        | |         | |   (_) |                  (_)              \
I       _/ / | |_| |__    | |_/ /_ _ _ __| |_ _   _  | |    _| |__  _ __ __ _ _ __ _  ___  ___     \
I      :__ \ | __| '_ \   |  __/ _` | '__| __| | | | | |   | | '_ \| '__/ _` | '__| |/ _ \/ __|    \
I    .___/ / | |_| | | |  | | | (_| | |  | |_| |_| | | |___| | |_) | | | (_| | |  | |  __/\__ \    \
I    \____/   \__|_| |_|  \_|  \__,_|_|   \__|\__, | \_____/_|_.__/|_|  \__,_|_|  |_|\___||___/    \
I                                              __/ | (C++ 3th Party Libraries)                     \
I                                             |___/                                                \
I==================================================================================================\
I==================================================================================================I

	>when searching for new libraries, the check the pages of library managers, even if you dont use the particular manager	//generic information; move ?!

	CPP_package_managers:
		>conan
		>vcpkg
		>hunter
		>Buckaroo

----------------
	dirent.h
----------------
#include <dirent>
	DIR *[name] : pointer to directory
	
	readdir([pointer to dirctory])


---------------
    magic.h
---------------
    YYY:
        man libmagic

    >used for determining mimetypes

    ### How to get the mimetype of a file in C ###  //₩
        // @BAKE gcc $@ -o $*.out -lmagic
        #include <magic.h>
        #include <stddef.h> // for NULL

        magic_t my_mimetype_reader;

        signed main(int argc, char * argv[]) {
            if (argc != 2) {
                printf("%s <file>\n", argv[0]);
                return 1;
            }

            my_mimetype_reader = magic_open(MAGIC_MIME_TYPE);
            if (magic_load(my_mimetype_reader, NULL) == -1) { return 1; }

            // It *is* a const char *; do not try to free it; copy it if you have to
            const char * filename = magic_file(my_mimetype_reader, argv[1]);
            if (filename == NULL) { return 1; }

            puts(filename);

            magic_close(my_mimetype_reader);
            return 0;
        }
    #


-----------
    sds
-----------
    >string library
    >NOTE: the header is reasonably readable, consult it
    >NOTE: recommended

    sds_strings:
        >their size
        >compatible with functions taking const char *
        >can preallocate
        >can ĐstoreĐ '\0's

    struct-s:
        sds

    Most_important_functions:
        sds sdsnew(const char *)
        void sdsfree(sds)

        size_t sdslen(sds)

        sds sdscat(sds, const char *)
        sds sdscatsds(sds, sds)

        void sdsclear(sds);

---------------------------------------------------------
========================================
#define readline\
#define gnu_history\
#define gnu_readline:::: //(0x000001d1)➞\
I   ___             _ _    _            ___  _ _    _                  \
I  | _ \___ __ _ __| | |  (_)_ _  ___  / / || (_)__| |_ ___ _ _ _  _   \
I  |   / -_| _` / _` | |__| | ' \/ -_|/ /| __ | (_-<  _/ _ \ '_| || |  \
I  |_|_\___\__,_\__,_|____|_|_||_\___/_/ |_||_|_/__/\__\___/_|  \_, |  \
I                                                               |__/   I
{
#include <stdio.h> 
	or		// C/C++ dependent, but most definitively necessary
#include <cstdio>
}
#include <readline/readline.h>
#include <readline/history.h>

	GNU Readline library
	
	>de facto standard for ordinary commandline applications
	>makes handling meta chars { arrows; backspace; delete; tab } a piece of cake
	>widely used { bash }
	>the two headers ĐcanĐ be used independently

	Files:
		history:
			~/.history		: where user command history is saved and read from
		readline:
			${INPUTRC}		: environment variable naming a file to read config from
			~/.inputrc		: personal config file; only read if ${INPUTRC} is not set
			/etc/.inputrc	: system-wide config file; only read if ~/.inputrc doesnt exist or cant be read

	Readline_Config:
		>done throught a config file
		>all directives must have their own line
		>empty lines are ignored
		#[...]
		[shortcut]: [universal-argument]	: sets a key binding [shortcut] for executing [universal argument]
		set [variable] [value]				: sets [variable] to [value]
		¤[shortcut]
			>a list of key separated by '-'s or GNU Emacs style syntax between quotes
			{ C-Control-u: [...]
			  "\C-u": [...]
			}
			-symbolic char names:
				DEL
				ESC
				ESCAPE
				LFD
				NEWLINE
				RET
				RETURN
				RUBOUT
				SPACE
		    	SPC
				TAB
		¤[universal-argument]
			beginning-of-line (C-a)
			end-of-line (C-e)
			forward-char (C-f)
			backward-char (C-b)
			forward-word (M-f)
			backward-word (M-b)
			previous-screen-line
			next-screen-line
			clear-display (M-C-l)
			clear-screen (C-l)
			redraw-current-line
			accept-line (Newline, Return)
			previous-history (C-p)
			next-history (C-n)
			beginning-of-history (M-<)
			end-of-history (M->)
			reverse-search-history (C-r)
			forward-search-history (C-s)
			non-incremental-reverse-search-history (M-p)
			non-incremental-forward-search-history (M-n)
			history-search-backward
			history-search-forward
			history-substring-search-backward
			history-substring-search-forward
			yank-nth-arg (M-C-y)
			yank-last-arg (M-., M-_)
			operate-and-get-next (C-o)
			end-of-file (usually C-d)
			delete-char (C-d)
			backward-delete-char (Rubout)
			forward-backward-delete-char
			quoted-insert (C-q, C-v)
			tab-insert (M-TAB)
			self-insert (a, b, A, 1, !, ...)
			transpose-chars (C-t)
			transpose-words (M-t)
			upcase-word (M-u)
			downcase-word (M-l)
			capitalize-word (M-c)
			overwrite-mode
			kill-line (C-k)
			backward-kill-line (C-x Rubout)
			unix-line-discard (C-u)
			kill-whole-line
			kill-word (M-d)
			backward-kill-word (M-Rubout)
			unix-word-rubout (C-w)
			unix-filename-rubout
			delete-horizontal-space (M-\)
			kill-region
			copy-region-as-kill
			copy-backward-word
			copy-forward-word
			yank (C-y)
			yank-pop (M-y)
			digit-argument (M-0, M-1, ..., M--)
			universal-argument
			complete (TAB)
			possible-completions (M-?)
			insert-completions (M-*)
			menu-complete
			menu-complete-backward
			delete-char-or-list
			start-kbd-macro (C-x ()
			end-kbd-macro (C-x ))
			call-last-kbd-macro (C-x e)
			print-last-kbd-macro ()
			re-read-init-file (C-x C-r)
			abort (C-g)
			do-lowercase-version (M-A, M-B, M-x, ...)
			prefix-meta (ESC)
			undo (C-_, C-x C-u)
			revert-line (M-r)
			tilde-expand (M-&)
			set-mark (C-@, M-<space>)
			exchange-point-and-mark (C-x C-x)
			character-search (C-])
			character-search-backward (M-C-])
			skip-csi-sequence
			insert-comment (M-#)
			dump-functions
			dump-variables
			dump-macros
			emacs-editing-mode (C-e)
			vi-editing-mode (M-C-j)
		¤[variable]
			bell-style			: decides what happens when an application tries to ring the bell
				none   - do nothing
				visible - flash the screen
				audiable - give off sound; default
			bind-tty-special-chars	: whether to attempt binding control chars
				[bool]	- on default
			blink-matching-paren	: whether to highlight the corresponding parenthesis 
				[bool] - off default   (by briefly moving the cursor) when a corresponding one
									   is inserted
			colored-copletion-refix	: whether to color auto completion common prefix appropriate to filetype; 
				[bool] - off default   dependent on ${LS_COLOR} environment variable
			colored-stats			: whether to color auto completion suggestions appropriate to filetype;
				[bool] - off default   dependent on ${LS_COLOR} environment variable
			comment-begin [string = "#"]		: the string that is inserted in vi mode when the insert-comment command is executed
			completion-display-width [int = -1]	: the number of column to be used for auto suggestion; a negative number signals unlimited
			completion-ignore-case 	: whether to make auto completion case insensitive
				[bool] - off default
			completion-map-case		: whether to make '-' == '_' when completion-ignore-case is on
				[bool] - off default
			completion-prefix-display-length [int = 0] : number of chars to display from common prefixes 
														  without replacing with "..." on auto completion
			disable-completion		: whether to disable auto completion altogether
				[bool] - off default
			echo-control-characters : whether to echo control chars { ^C }
				[bool] - on default
			editing-mode			: sets short-cut style
				emacs - GNU Emacs; default
				vi    - Vi (see AT /Programs/Text/Vim)
			enable-bracketed-paste  : whether to buffer pastes; prevents pastes from being interpreted as control chars
				[bool] - on default
			expand-tilde			: whether to expand tildes when auto completing
			history-preserve-point	: ?!
			history-size <int>		: maximum history size; not set by default
			visible-stats			: whether to display GNU file (the program; see AT /Linux/File_managing/file)
									   information when listing possible auto completions
		¤[bool]
			on/On
			off/Off
		Conditional_instructions:
			>modelled after C preprocessor directives, therefor no in-depth explanation is included here; see AT "C++/Preprocessor"
			$if [condition]
			$else
			$endif
			$include [file]
			¤[condition]:
				mode=[m]
					emacs
					vi
				term=<string>	: where <string> the name of a specific terminal emulator(s executable);
								   the name is tested till hyphens and the full word
								   { "sun" matches both "sun" and "sun-cmd" }
				[application]	: set by the application { Bash }

	Shortcuts:
		>default-s
		[alt]  + <int>				: specifies repeat count (for next shortcut)
		[ctrl] + [l]				: flushes terminal
		[ctrl] + [r]				: reverse search command history from current position
		[Up arrow] || [ctrl] + [p]	: previous command in history
		[Down arrow] || [ctrl] + [n]: next command in history
		[ctrl] + [z]				: moves current foreground process to the back
		Movement:
			[ctrl] + [b]				: "back"; moves backwards one char
			[ctrl] + [f]				: "forward"; moves forwards one char
			[alt]  + [b]				: "word back"; moves backwards one word
			[alt]  + [f]				: "word forward"; moves forwards one word
			[ctrl] + [a]				: == [home]
			[ctrl] + [e]				: == [end]
		Editing:
			[ctrl] + [d]				: "delete"; delete-s char under the cursor
			[alt]  + [d]				: "word delete"; delete-s until the end of the current word
			[ctrl] + [k]				: "kill"; cuts all text from right of the cursor
			[ctrl] + [u]				: cuts all text from left of the cursor	
			[ctrl] + [w]				: cuts till the first space from left of the cursor
			[ctrl] + [y]				: "yank"; pastes whatever was cut most recently with [ctrl] + [k] || [ctrl] + [u] || [ctrl] + [w]
			[alt]  + [.]				: pastes the last argument of the last command run

	Macros:
		#define rl_ivoidfunc_t rl_hook_func_t
			>see AT "./Typedef"
		RL_STATE_NONE			: readline has not yet been called, nor has it begun to initialize
		RL_STATE_INITIALIZING	: readline is initializing its internal data structures
		RL_STATE_INITIALIZED	: readline has completed its initialization
		RL_STATE_TERMPREPPED	: readline has modified the terminal modes to do its own input and redisplay
		RL_STATE_READCMD		: readline is reading a command from the keyboard
		RL_STATE_METANEXT		: readline is reading more input after reading the meta-prefix character
		RL_STATE_DISPATCHING	: readline is dispatching to a command
		RL_STATE_MOREINPUT		: readline is reading more input while executing an editing command
		RL_STATE_ISEARCH		: readline is performing an incremental history search
		RL_STATE_NSEARCH		: readline is performing a non-incremental history search
		RL_STATE_SEARCH			: readline is searching backward or forward through the history for a string
		RL_STATE_NUMERICARG		: readline is reading a numeric argument
		RL_STATE_MACROINPUT		: readline is currently getting its input from a previously-defined keyboard macro
		RL_STATE_MACRODEF		: readline is currently reading characters defining a keyboard macro
		RL_STATE_OVERWRITE		: readline is in overwrite mode
		RL_STATE_COMPLETING		: readline is performing word completion
		RL_STATE_SIGHANDLER		: readline is currently executing the readline signal handler
		RL_STATE_UNDOING		: readline is performing an undo
		RL_STATE_INPUTPENDING	: readline has input pending due to a call to rl_execute_next()
		RL_STATE_TTYCSAVED		: readline has saved the values of the terminal’s special characters
		RL_STATE_CALLBACK		: readline is currently using the alternate (callback) interface
		RL_STATE_VIMOTION		: readline is reading the argument to a vi-mode "motion" command
		RL_STATE_MULTIKEY		: readline is reading a multiple-keystroke command
		RL_STATE_VICMDONCE		: readline has entered vi command (movement) mode at least one time during the current call to readline()
		RL_STATE_DONE			: readline has read a key sequence bound to accept-line and is about to return the line to the caller

	Globals:
		char* rl_line_buffer			: the line typed so far
		int rl_point					: cursor position inside rl_line_buffer
		int rl_end						: size of rl_line_buffer
		int rl_mark						: 
		int rl_done						: setting this to non-zero causes readline to return the line immediately
		int rl_num_chars_to_read		: the maximum number of chars to read before returning
		int rl_pending_input			: set to add a single char to the input stream
		int rl_dispatching				: non-zero if a function was called with a keybinding (meant to be tested)
		int rl_erase_empty_line			: 
		char* rl_prompt					: the prompt readline() uses and set by its argument; do not modify directly
		char* rl_display_prompt			: the string displayed as the prompt; usually *this == rl_prompt unless a function { incremental search }
										   modifies it temporarily
		int rl_already_prompted			: ?!
		const char* rl_library_version	: int encoding of the current version of the library as 0xMMmm where MM 
										   is the major version number and mm is the minor version number
		int rl_gnu_readline_p			: always set to 1, denoting that this is gnu readline rather than some emulation
		const char* rl_terminal_name	: terminal ĐĐ_type_ĐĐ { xterm-256color }
		const char * rl_readline_name	: 
		FILE* rl_instream				: FILE to read input from; if NULL stdin is default-ed
		FILE* rl_outstream				: FILE to write output to; if NULL stdout is default-ed
		int rl_prefer_env_winsize		: if non-zero, readline gives values found in the ${LINES} and ${COLUMNS} 
										   environment variables greater precedence than values fetched from the kernel
										   when computing the screen dimensions
		char* rl_executing_macro		:
		int rl_explicit_arg				:
		int rl_numeric_arg				:
		int rl_editing_mode				: editing mode
			0 = Vi
			1 = Emacs
		Keymap rl_executing_keymap		: current keymap
		Keymap rl_binding_keymap		: keymap in which last key binding occurred
		Function_pointes:
			rl_command_func_t* rl_last_func			: the last command function readline() has executed
			rl_hook_func_t* rl_startup_hook			: function to call before readline() prints the prompt (invoked on every call)
			rl_hook_func_t* rl_pre_input_hook		: function to call after readline() has printed to prompt,
													   but before input is being read (invoked on every call)
			rl_hook_func_t* rl_event_hook			: function to call repeatedly when readline() is waiting for input;
													   by default, called max 10 times a second
			rl_getc_func_t* rl_getc_function		:
			rl_voidfunc_t* rl_redisplay_function	:
			rl_vintfunc_t* rl_prep_term_function	:
			rl_voidfunc_t* rl_deprep_term_function	:

	Structs:
		Keymap

	Functions:
		History:
		Readline:
			char* readline([char*])	: prompts user with [char*], lets him input a line than returns it;
								   the return-ed value is malloc-ed; its the users responsibility to
								   free it
			int rl_add_defun([const char*],	: adds a Đnamed functionalityĐ to readline();
				[rl_command_func_t], <int>)	   ie. (if <int> != -1 &&) if [const char*] is present in the ĐinputrcĐ as a [universal-argument]
											   its binding detected by readline() will always call [rl_command_func_t]
			rl_redisplay()					: display rl_line_buffer if the screen doesnt reflect its value
			rl_forced_update_display()		: display rl_line_buffer
			Init:
				rl_bind_key([char], [func*])	: calls [func*] if [char] is inserted to readline();
												   binding '\t' to rl_insert() makes TAB insert itself
				Sush:
					rl_catch_signals = 0;
					rl_catch_sigwinch = 0;
					rl_prep_term_function = NULL;
					rl_deprep_term_function = NULL;
					rl_change_environment = 0;

	Typedef:
		typedef int rl_command_func_t (int, int);
		typedef char *rl_compentry_func_t (const char *, int);
		typedef char **rl_completion_func_t (const char *, int, int);
		typedef char *rl_quote_func_t (char *, int, char *);
		typedef char *rl_dequote_func_t (char *, int);
		typedef int rl_compignore_func_t (char **);
		typedef void rl_compdisp_func_t (char **, int, int);
		typedef int rl_hook_func_t (void);
		typedef int rl_getc_func_t (FILE *);
		typedef int rl_linebuf_func_t (char *, int);
		typedef int rl_intfunc_t (int);
		typedef int rl_icpfunc_t (char *);
		typedef int rl_icppfunc_t (char **);
		typedef void rl_voidfunc_t (void);
		typedef void rl_vintfunc_t (int);
		typedef void rl_vcpfunc_t (char *);
		typedef void rl_vcppfunc_t (char **);

#define curses\
#define ncurses:::: //(0x000001d2)➞\
I------------------------------------------------------------------------------------------\
I					  _   _ _____ _   _______  _____ _____ _____ 						   \
I					 | \ | /  __ \ | | | ___ \/  ___|  ___/  ___|						   \
I					 |  \| | /  \/ | | | |_/ /\ `--.| |__ \ `--. 						   \
I					 | . ` | |   | | | |    /  `--. \  __| `--. \						   \
I					 | |\  | \__/\ |_| | |\ \ /\__/ / |___/\__/ /						   \
I					 \_| \_/\____/\___/\_| \_|\____/\____/\____/ 	(ncurses)              \
I------------------------------------------------------------------------------------------I
#include <ncurses.h>
	
	>the de facto standard for creating TUIs/pseudo-GUIs
	>NOTE: since terminals are line oriented,
            Ncurses always has the y coordinate before
            the x coordinate
    >NOTE: has a wide char version and a multi-threaded version

	The_NCurses_Universe:
	  (0;0)                                                X
		+-------- Ether --------------------------------------->
		|┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
		|┃               Screen               ┃
		|┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
		|┃┌──────────────────────────────────┐┃
		|┃│              stdscr              │┃
		|┃├──────────────────────────────────┤┃
		|┃│                                  │┃
		|┃│        ┌──────────┐              │┃
		|┃│        │ Window 1 │              │┃       ...
		|┃│        ├──────────┤              │┃
		|┃│        │          │              │┃
		|┃│        │          │              │┃
		|┃│        └──────────┘              │┃       ┌──────────┐
		|┃│                                  │┃       │ Window 2 │
		|┃│                                  │┃       ├──────────┤
		|┃└──────────────────────────────────┘┃       │          │
		|┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛       │          │
		|                                             └──────────┘
		|
		|
		|
		|       ...
		|
	 Y  |
		|
		V

 	Under_a_microscope:
		           +         +
		   cchar_t | cchar_t | cchar_t
.		-+---------+---------+---------+-
		   cchar_t | cchar_t | cchar_t
.		-+---------+---------+---------+-
		   cchar_t | cchar_t | cchar_t
		           +         +

		cchar_t				: the atom of the ncurses universe;
							   a char + meta data {color; boldness}
		Yellow( Ether )     : is the valid playground of ncurses;
							   it's visually comprehensible dimension maps to a coordinate system
							   which starts at the top left corner (with 0;0) and continue-s to infinity;
							   each coordinate maps to a cchar_t;
							   negative and fractional coordinates are defined to be non-existent/invalid
		Purple( Screen )    : is the physical view port; the part of the ĐEtherĐ that the user see;
							   by changing the terminals size (or zoom), the size of the screen can change,
							   but it never moves from the upper left corner
		ĐĐ_WINDOW_ĐĐ		: is a high level concept defined by ncurses; it is implemented as struct;
							   WINDOWs have:
									>virtual screen of NxM
									>virtual cursor
									>position on the screen
							   Basic usage:
							  		>modify the virtual screen arbitrary
									>issue a ĐrefreshĐ, to copy the virtual screen to the WINDOW's position in the screen
							   WINDOWs allow for:
							   		>relative coordinate referencing
									>writing to different places of the screen without
                                      having to worry about the changed cursor position
									>writing only a part of the screen (for performance)
 		Green( stdscr )     : "STandard SCReen"; WINDOW* created on library initialization;
							    corresponds to the ĐScreenĐ (in size and position), hence the name;
								changes its size alongside the screen automatically
		Blue( Window 1 )	: is theoretical USER CREATED window; it could be used, say,
                               to render an ascii converted GIF of a MAGESTIC FUCKING HORSE
		Red( Window 2 )		: is also theoretical USER CREATED window;
                               it is outside of the ĐScreenĐ, but is completely valid;
							   if the ĐScreenĐ were to be resized so it fits inside, it would show up normally


		Querying:
		  getbegyx(WINDOW*, int, int)
		     x──────────┐
		     │  Window  │
		     ├──────────┤
		     │text█     │ getyx(WINDOW*, int, int)
		     │          │
		     └──────────x
		          getmaxyx(WINDOW*, int, int)
            NOTE: you dont have to query stdscr's size,
                   COLS and LINES already hold those values you want
		Refreshing:
			>the act of copying the contents of a WINDOWs virtual screen to the terminal representation
			>it make sense so atomic text copying dont waste cycles displaying partial states
			   Visible                  Virtual
			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			 ┌──────────┐             ┌──────────┐
			 │  stdscr  │             │  stdscr  │
			 ├──────────┤             ├──────────┤
			 │          │             │          │
			 │          │             │          │
			 └──────────┘             └──────────┘

			 			addstr("Quoka");

			 ┌──────────┐             ┌──────────┐
			 │  stdscr  │             │  stdscr  │
			 ├──────────┤             ├──────────┤
			 │          │             │Quoka     │
			 │          │             │          │
			 └──────────┘             └──────────┘

			 			refresh("Quoka");

			 ┌──────────┐             ┌──────────┐
			 │  stdscr  │             │  stdscr  │
			 ├──────────┤             ├──────────┤
			 │Quoka     │             │Quoka     │
			 │          │             │          │
			 └──────────┘             └──────────┘
	
	Subwindows:
		>subwindows share memory with their parent windows
		>they seem to be only legal inside the their parent windows
		>the idea is to grant relative addressing to a part of a window with minimal memory overhead
        >have to be deleted before their parents
        rant:
            >i ĐthinkĐ they should make implementing scrolling easy too
            >ncurses came out in 1993, yet they are buggy as shit
            >the problem seems to be that whoever defined them did it very poorly,
              so implementing them is a shot in the dark even if all guide lines are followed;
    .		  see:
                $ man 3 subwin
                "\
                The subwindow  functions  (subwin,  derwin,  mvderwin,  wsyncup,  wsyncdown, \
                wcursyncup,  syncok) are flaky, incompletely implemented, and not well test‐ \
                ed.                                                                          \
                                                                                             \
                The System V curses documentation is very unclear  about  what  wsyncup  and \
                wsyncdown  actually  do.   It  seems to imply that they are only supposed to \
                touch exactly those lines that are affected by ancestor changes.   The  lan‐ \
                guage  here,  and the behavior of the curses implementation, is patterned on \
                the XPG4 curses standard.  The weaker XPG4 spec may  result  in  slower  up‐ \
                dates.                                                                       \
                "
            >NOTE: do not waste your time with anything, but the most basic of usages:
                new, update, refresh, delete



	FUNCTIONS:
		ĐĐPREFIXESĐĐ:
			w : adding the 'w' prefix will apply the function to a specific window;
			    which must be passed in as an argument preceding the originals
		Initialization:
			>NOTE: input taking modes are inherited, ie. doesnt reset on program start up,
			  there for one of the input mode setting functions (cbreak(); nocbreak(); raw(); noraw())
			  shall be called explicitly before the first input is taken
			>NOTE: ncurses uses the locale of the calling program by default;
			  to change this behaviour setlocale() (see AT "/C++/C std/<locale.h>")
			initscr()						: initialize screen; must be called to be able to use screen manipulation functions
			start_color()					: initialize colors; must be called to be able to use color manipulation functions
			endwin()						: frees memory; quits curses
			input:
				cbreak()						: dont wait for enter;
												   makes characters typed by the user
												   immediately available to the program;
												   control chars are unaffected
				nocbreak()						: disables cbreak mode
				raw()							: dont wait for enter;
												   makes characters typed by the user
												   immediately available to the program;
												   control chars are also taken uninterpreted
				noraw()							: disables raw mode
				halfdelay(<int>)				: like cbreak, but if no input is provided,
												   it returns ERR after <int> tenths of seconds;
												   <int> must be between 1 and 255
				curs_set(<int>)					: sets cursor visibility; return previous cursor visibility
														0 - invisible
														1 - visible
														2 - very visible
				echo()							: echo user input
				noecho()						: do not echo user input
				keypad([window],[bool])			: makes function keys {arrow key} return a single value 
				nodelay([window], 				: whether getch() should not wait for input; if TRUE, on no input provide getch() will return an error
							[TRUE|FALSE])
				nl()							: translate '\n' to "\n\r"; windows default
				nonl()							: do not translate '\n' to "\n\r"; *nix default
				intrflush([WINDOW*], [bool])	: flush on interrupt; "giving the effect of faster response to the interrupt,\
												   but causing curses to have the wrong idea of what is on the screen"

		Output:
			refresh()									: updates main screen to represent window layout; typically called after each newwin() and delwin()
			wrefresh([WINDOW*])							: updates the [WINDOW*] window part of the screen to represent the window buffer
			(w)addch([char])							: prints [char]
			(w)echochar([char])							: equivalent to: { addch([char]); refresh(); }, but faster
			(w)add_wch([cchar_t])						: prints [cchar_t]
			(w)echo_wchar([cchar_t])					: equivalent to: { add_wch([cchar_t]); refresh(); }, but faster
			(w)addstr([char*])							: prints C-string [char*]
			(w)addwstr([wchar_t*])						: prints wide C-string [wchar_t*]
			(w)move([int1], [int2])						: moves cursor to the supplied coordinates
			(w)printw([format](, [...]))				: prints [format]; be haves identical to printf(), see AT "/C++/C std/stdio.h"
			mv[print function]([row],[col],[...])		: prints [...] to [row][col]; (overwrites what was there before)
			Deletion:
				(w)erase()									: copies blanks to every position in the window, clearing the screen
				(w)clear()
				(w)clrtoeol()
		Input:
			char (w)getch()								: returns char
			getstr()									: gets string; resets halfdelay(), which is logical considering its a series of getch() calls,
														   but why the fuck isnt that documented anywhere?
			(w)scanw([format](, [...]))					: reads format; analogous to scanf (see AT "C++/C_Standard_Library/stdio.h")
		Cchar:
			>(w)add_wch() (see AT "../Output")
			>(w)echo_wchar() (see AT "../Output")
			getcchar([cchar_t*], [wchar_t*], [attr_t*],	: reads the internal state of [cchar_t*] and stores it in the rest of the arguments;
					[short*], [void*])					   [wchar_t*] is for text; [attr_t*] is for text attributes;
														   [short*] is for color pair information; [void*] is implementation defined
			setcchar([cchar_t*], [wchar_t*], [attr_t*],	: writes the internal state of [cchar_t*], so it reflects the rest of the arguments;
					[short*], [void*])					   [wchar_t*] is for text; [attr_t*] is for text attributes;
														   [short*] is for color pair information; [void*] is implementation defined
		Window:
			-ĐĐbackgroundĐĐ:
				>every window has one
				>resebled by a [chtype]
				>this [chtype]s will be displayed one very blank position
				  and its attributes part will be displayed on every non-blank position
			newwin([int1], [int2], [int3], [int4])		: returns WINDOW* starting at [int3], [int4] and with [int1] lines and [int2] cols
			delwin([WINDOW*])							: deletes [WINDOW*]
			box([WINDOW*], [char1], [char2])			: draws the appropriate chars to the outer borders of [win]; 
														   wrapper function of wborder([WINDOW*], [char1], [char1], [char2], [char2],
														   								'┌', '┐', '└',  '┘')
														   if 0s are passed in it becomes wborder([WINDOW*], '|', '-', '┌', '┐', '└',  '┘')
			wborder([WINDOW*], [char1], [char1],		: draws the appropriate chars to the outer borders of [win];
				[char3], [char4], [char5], [char6],		   [char1] corresponding to the left line,
				[char7], [char8])						   [char2] corresponding to the right line,
														   [char3] corresponding to the top line,
														   [char4] corresponding to the bottom line,
														   and [char5]-[char8] corresponding to the corners in a 
														   left to right, top to bottom manner
			bkgd([chtype])								: sets stdscrs ĐbackgroundĐ to [chtype]
			wbkgd([WINDOW*], [chtype])					: sets [WINDOW*]s ĐbackgroundĐ to [chtype]
			bkgdset([chtype])							: sets stdscrs ĐbackgroundĐ to [chtype]; [chtype]s attributes will become
														   the attributes of any given non-blank char (instead of just being displayed on the same position)
			wbkgdset([WINDOW*], [chtype])				: sets [WINDOW*]s ĐbackgroundĐ to [chtype]; [chtype]s attributes will become
														   the attributes of any given non-blank char (instead of just being displayed on the same position)
			getyx([WINDOW*], &[int1], &[int2])			: modifies [int1]'s and [int2]'s value to resemble the starting coordinates of [WINDOW*]'s cursor
			getbegyx([WINDOW*], &[int1], &[int2])		: modifies [int1]'s and [int2]'s value to resemble the starting coordinates of [WINDOW*]
			getmaxyx([WINDOW*], &[int1], &[int2])		: modifies [int1]'s and [int2]'s value to resemble the ending coordinates of [WINDOW*]
		Attribute:
			>see ĐattributeĐ values AT ../Masks/Attributes
			(w)attron([attribute])					: turns ON [attribute] with out affecting other attributes
			(w)attroff([attribute])					: turns OFF [attribute] with out affecting other attributes
			(w)attrset([attribute])					: turns OFF all attributes then turns ON [attribute]
			(w)attr_get()							: ?!
			init_pair(<int>, [COLOR1], [COLOR2])	: declares a color pair with the id number <int>; [COLOR<int>] is a predefined mask,
													   see AT ../Masks/Colors; [COLOR1] is the foreground (text) color, [COLOR2] is the background color

	Structs:
		WINDOW		: a window; each cell (row/column) in a WINDOW is stored as a cchar_t (see BELOW)
		cchar_t		: a special wide char type with extra information

	Objects:
		stdscr		: standard screen; WINDOW*

	Masks:
		Attributes:
			ĐĐPREFIXESĐĐ:
				W : makes attribute apply to wide chars
					NOTE: WA_* and A_* attributes shall NOT be mixed_up/or-ed
			(W)A_NORMAL			: Normal display (no highlight)
			(W)A_STANDOUT			: Best highlighting mode of the terminal.
			(W)A_UNDERLINE			: Underlining
			(W)A_REVERSE			: Reverse video
			(W)A_BLINK				: Blinking
			(W)A_DIM				: Half bright
			(W)A_BOLD				: Extra bright or bold
			(W)A_PROTECT			: Protected mode
			(W)A_INVIS				: Invisible or blank mode
			(W)A_ALTCHARSET		: Alternate character set
			(W)A_CHARTEXT			: Bitmask to extract a character
			COLOR_PAIR(<int>)	: Color−pair id number <int>; for color-pairs see AT init_pair()
		Colors:
			COLOR_BLACK
			COLOR_RED
			COLOR_GREEN
			COLOR_YELLOW
			COLOR_BLUE
			COLOR_MAGENTA
			COLOR_CYAN
			COLOR_WHITE
		Keys:
Green(			Name           Key name                                  )
			──────────────────────────────────────────────────────────────
			KEY_BREAK       Break key
			KEY_DOWN        The four arrow keys ...
			KEY_UP
			KEY_LEFT
			KEY_RIGHT
			KEY_HOME        Home key (upward+left arrow)
			KEY_BACKSPACE   Backspace
			KEY_F0          Function keys; space for 64 keys is reserved.
			KEY_F(n)        For 0 ≤ n ≤ 63
			KEY_DL          Delete line
			KEY_IL          Insert line
			KEY_DC          Delete character
			KEY_IC          Insert char or enter insert mode
			KEY_EIC         Exit insert char mode
			KEY_CLEAR       Clear screen
			KEY_EOS         Clear to end of screen
			KEY_EOL         Clear to end of line
			KEY_SF          Scroll 1 line forward
			KEY_SR          Scroll 1 line backward (reverse)
			KEY_NPAGE       Next page
			KEY_PPAGE       Previous page
			KEY_STAB        Set tab
			KEY_CTAB        Clear tab
			KEY_CATAB       Clear all tabs
			KEY_ENTER       Enter or send
			KEY_SRESET      Soft (partial) reset
			KEY_RESET       Reset or hard reset
			KEY_PRINT       Print or copy
			KEY_LL          Home down or bottom (lower left)
			KEY_A1          Upper left of keypad
			KEY_A3          Upper right of keypad
			KEY_B2          Center of keypad
			KEY_C1          Lower left of keypad
			KEY_C3          Lower right of keypad
			KEY_BTAB        Back tab key
			KEY_BEG         Beg(inning) key
			KEY_CANCEL      Cancel key
			KEY_CLOSE       Close key
			KEY_COMMAND     Cmd (command) key
			KEY_COPY        Copy key
			KEY_CREATE      Create key
			KEY_END         End key
			KEY_EXIT        Exit key
			KEY_FIND        Find key
			KEY_HELP        Help key
			KEY_MARK        Mark key
			KEY_MESSAGE     Message key
			KEY_MOUSE       Mouse event read
			KEY_MOVE        Move key
			KEY_NEXT        Next object key
			KEY_OPEN        Open key
			KEY_OPTIONS     Options key
			KEY_PREVIOUS    Previous object key
			KEY_REDO        Redo key
			KEY_REFERENCE   Ref(erence) key
			KEY_REFRESH     Refresh key
			KEY_REPLACE     Replace key
			KEY_RESIZE      Screen resized
			KEY_RESTART     Restart key
			KEY_RESUME      Resume key
			KEY_SAVE        Save key
			KEY_SBEG        Shifted beginning key
			KEY_SCANCEL     Shifted cancel key
			KEY_SCOMMAND    Shifted command key
			KEY_SCOPY       Shifted copy key
			KEY_SCREATE     Shifted create key
			KEY_SDC         Shifted delete char key
			KEY_SDL         Shifted delete line key
			KEY_SELECT      Select key
			KEY_SEND        Shifted end key
			KEY_SEOL        Shifted clear line key
			KEY_SEXIT       Shifted exit key
			KEY_SFIND       Shifted find key
			KEY_SHELP       Shifted help key
			KEY_SHOME       Shifted home key
			KEY_SIC         Shifted input key
			KEY_SLEFT       Shifted left arrow key
			KEY_SMESSAGE    Shifted message key
			KEY_SMOVE       Shifted move key
			KEY_SNEXT       Shifted next key
			KEY_SOPTIONS    Shifted options key
			KEY_SPREVIOUS   Shifted prev key
			KEY_SPRINT      Shifted print key
			KEY_SREDO       Shifted redo key
			KEY_SREPLACE    Shifted replace key
			KEY_SRIGHT      Shifted right arrow
			KEY_SRSUME      Shifted resume key
			KEY_SSAVE       Shifted save key
			KEY_SSUSPEND    Shifted suspend key
			KEY_SUNDO       Shifted undo key
			KEY_SUSPEND     Suspend key
			KEY_UNDO        Undo key
		Wide_char_aliases:
			WACS_BLOCK		: solid square block
			WACS_BOARD		: board of squares
			WACS_BTEE		: bottom tee
			WACS_BULLET		: bullet
			WACS_CKBOARD	: checker board (stipple)
			WACS_DARROW		: arrow pointing down
			WACS_DEGREE		: degree symbol
			WACS_DIAMOND	: diamond
			WACS_GEQUAL		: greater-than-or-equal-to
			WACS_HLINE		: horizontal line
			WACS_LANTERN	: lantern symbol
			WACS_LARROW		: arrow pointing left
			WACS_LEQUAL		: less-than-or-equal-to
			WACS_LLCORNER	: lower left-hand corner
			WACS_LRCORNER	: lower right-hand corner
			WACS_LTEE		: left tee
			WACS_NEQUAL		: not-equal
			WACS_PI			: Greek pi
			WACS_PLMINUS	: plus/minus
			WACS_PLUS		: plus
			WACS_RARROW		: arrow pointing right
			WACS_RTEE		: right tee
			WACS_S1			: scan line 1
			WACS_S3			: scan line 3
			WACS_S7			: scan line 7
			WACS_S9			: scan line 9
			WACS_STERLING	: pound-sterling symbol
			WACS_TTEE		: top tee
			WACS_UARROW		: arrow pointing up
			WACS_ULCORNER	: upper left-hand corner
			WACS_URCORNER	: upper right-hand corner
			WACS_VLINE		: vertical line
			WACS_T_BTEE		: thick tee pointing up
			WACS_T_HLINE	: thick horizontal line
			WACS_T_LLCORNER	: thick lower left corner
			WACS_T_LRCORNER	: thick lower right corner
			WACS_T_LTEE		: thick tee pointing right
			WACS_T_PLUS		: thick large plus
			WACS_T_RTEE		: thick tee pointing left
			WACS_T_TTEE		: thick tee pointing down
			WACS_T_ULCORNER	: thick upper left corner
			WACS_T_URCORNER	: thick upper right corner
			WACS_T_VLINE	: thick vertical line
			WACS_D_BTEE		: double tee pointing up
			WACS_D_HLINE	: double horizontal line
			WACS_D_LLCORNER	: double lower left corner
			WACS_D_LRCORNER	: double lower right corner
			WACS_D_LTEE		: double tee pointing right
			WACS_D_PLUS		: double large plus
			WACS_D_RTEE		: double tee pointing left
			WACS_D_TTEE		: double tee pointing down
			WACS_D_ULCORNER	: double upper left corner
			WACS_D_URCORNER	: double upper right corner
			WACS_D_VLINE	: double vertical line
		chtype: 
			>stores a char and attributes
			>can be created by or-ing together a char and any number of attributes
			{ chtype interest_mark = 'A' }

	IN_PRACTICE:
		Hello_World:
			{
                // @BAKE gcc $@ -o $*.out $(pkg-config --cflags --libs ncurses)
			    #include <ncurses.h>

			    int scr_h, scr_w;
			    char greeting[] = "Hello Ncurses!";

			    signed main(){
			        initscr();
			        noecho();
			        curs_set(0);

			        getmaxyx(stdscr, scr_h, scr_w);
			        WINDOW* myWindow = newwin(3, ( sizeof(greeting)-1 ) + 4, 
			        		( scr_h / 2 ) - 1, (scr_w - ( sizeof(greeting)-1) ) / 2);
			        refresh();

			        box(myWindow, 0, 0);
			        mvwaddstr(myWindow, 1, 2, greeting);
			        wrefresh(myWindow);

			        while(1){}

			        endwin();
			        return 0;
			    }
			}
		### Resize "Hello World" in NCurses ###     //(0x00000166)➞
			>ncurses is very moody about SIGWINCH, more specifically some terminal emulators will not
			  update their terminfo correctly if its handled, while in others interrupting getch
			  causes it to return the error code ERR
			>NOTE: BELOW is NOT the correct way to do it; scroll further for the correct way
			{
				// @BAKE g++ $@ -o ncurses_faulty_resize_pufka_example.out $(pkg-config --cflags --libs ncurses)
				#include <signal.h>
				#include <ncurses.h>
		
				int scr_h, scr_w;
				WINDOW* myWindow;
				char greeting[] = "Hello Ncurses!";
		
				void display(int sig = 0){
					if(sig != 0){
						delwin(myWindow);
						endwin();
						refresh();
						clear();
					}
					getmaxyx(stdscr, scr_h, scr_w);
					myWindow = newwin(3, ( sizeof(greeting)-1 ) + 4,
							( scr_h / 2 ) - 1, (scr_w - ( sizeof(greeting)-1) ) / 2);
					refresh();
		
					box(myWindow, 0, 0);
					mvwaddstr(myWindow, 1, 2, greeting);
					wrefresh(myWindow);
				}
		
				signed main(){
					initscr();
					noecho();
					curs_set(0);
					signal(SIGWINCH, display);
		
					display();
					while(1){}
		
					endwin();
					return 0;
				}
			}
			>the correct way to do it is to handle KEY_RESIZE, which is a special input read by wgetch()
			>KEY_RESIZE does not require keypad()
			>KEY_RESIZE seems to litter the input buffer, so it is advised to flush it afterwards with flushinp();
			>NOTE: the following IS the correct way to do it; however, its still broken in some terminals
			{
				// @BAKE g++ $@ -o $*.out $(pkg-config --cflags --libs ncurses)
				#include <signal.h>
				#include <ncurses.h>

				int scr_h, scr_w;
				WINDOW* myWindow = NULL;
				char greeting[] = "Hello Ncurses!";

				void display(){
					if(myWindow){
						delwin(myWindow);
						endwin();
						erase();
						refresh();
						clear();
					}


					getmaxyx(stdscr, scr_h, scr_w);
					myWindow = newwin(3, ( sizeof(greeting)-1 ) + 4,
							( scr_h / 2 ) - 1, (scr_w - ( sizeof(greeting)-1) ) / 2);
					refresh();

					box(myWindow, 0, 0);
					mvwaddstr(myWindow, 1, 2, greeting);
					wrefresh(myWindow);
				}

				signed main(){
					initscr();
					noecho();
					curs_set(0);

					display();
					while(1){
						if(wgetch(stdscr) == KEY_RESIZE){
							display();
							flushinp();
						}
					}

					endwin();
					return 0;
				}
			}
		#
		### How to use GNU Readline with Ncurses ###    //(0x00000167)➞
            //@BAKE g++ $@ $(pkg-config --cflags --libs ncurses readline)
			#include <ncurses.h>
			#include <readline/readline.h>

			#define WINDOW_WIDTH 32
			#define WINDOW_HEIGHT 3

			int scr_h, scr_w;
			WINDOW* myWindow;

			int input_available = false;	// C style bool to track when to stop reading
			char input;						// our input; since we read char-by-char this is all the buffering we need

			inline void init(){
				// Ncurses (nothing special)
				initscr();
				noecho();
				curs_set(0);

				getmaxyx(stdscr, scr_h, scr_w);
				myWindow = newwin(WINDOW_HEIGHT, WINDOW_WIDTH, 
						( scr_h / 2 ) - 1, ( scr_w - WINDOW_WIDTH) / 2);
				refresh();

				box(myWindow, 0, 0);
				// Readline
				//   make readline shut up
				rl_bind_key('\t', rl_insert);	// make tab insert itself
				rl_catch_signals = 0;			// do not install signal handlers
				rl_catch_sigwinch = 0;			// do not care about window change signals
				rl_prep_term_function = NULL;	// do not initialize the ternimal
				rl_deprep_term_function = NULL; // do not clean up
				rl_change_environment = 0;		// ?!
				//   bind callbacks, for seemless integration
				rl_getc_function = +[](FILE* ignore){	// define how Readline is handed chars
					input_available = false; // since we read 1 char at the time we know that there will be no more available
					return (int)input;
				};
				rl_input_available_hook = +[]{	// let Readline know that it shall call it rl_getc_function
					return input_available;
				};
				rl_redisplay_function = +[]{	// instruct Readline what to do after rl_line_buffer has changed
					// echo rl_line_buffer (without using the terminals built in echo)
					wmove(myWindow, 1, 1);
					wclrtoeol(myWindow);
					box(myWindow, 0, 0);	// wclrtoeol(), screws with the box
					waddstr(myWindow, rl_line_buffer);
					wrefresh(myWindow);
					return;
				};
				rl_callback_handler_install("", +[](char *line){	// instruct Readline what to do once rl_line_buffer is submitted (enter hit)
					// print the submitted line to the top of the screen
					wmove(stdscr, 0, 0);
					wclrtoeol(stdscr);
					waddstr(stdscr, line);
					wrefresh(stdscr);
					return;
				});
			}

			signed main(){
				init();
				wrefresh(myWindow);

				while(1){
					input = wgetch(myWindow);
					input_available = true;
					rl_callback_read_char();
				}
			}
		#

		### Colors in Ncurses ###		//(0x00000168)➞
		  0. For any color operation Đstart_color()Đ must be called:
		  		start_color();
		  8-bit:
		  	For displaying 8 bit colors, Ncurses works with so called Đcolor-pairsĐ.
			Color-pairs must be defined/"initialized" before usage and then must be applied as an attribute.
			Each color-pair has a unique number (on conflict the newer over writes the old one) and which is used for addressing.
			1. Creating a color-pair:
				{  initpair(1, COLOR_MAGENTA, COLOR_GREEN);  }
			2. Turning the attibute on:
				{  wattron(myWindow, COLOR_PAIR(1));  }
			Now anything printed will appear with the set colors.
			You may turn the attribute off as you turned it on: ({  wattroff(myWindow, COLOR_PAIR(1))  })
			NOTE: naming the color pair via a define is recommended
		#
		### Wide char support in Ncurses ###		//(0x00000169)➞
		  //all credits to Ray "Bear" Dillinger
		  1. Right System Locale:
				  You have to be using a UTF-8 locale (Mine is en_US.UTF-8; I imagine others will have different choices).
				Type ‘locale’ at a shell prompt to be sure.
		  2. Right Terminal:
				 You have to have a term program that can display non-ASCII characters. 
				Most of them can handle that these days, but there are still a few holdouts. 
				rxvt-unicode and konsole, popular term programs on Linux, are both good.
		  3. Right Console Font:
				  You have to use a console font which contains glyphs for the non-ASCII characters that you use.
				Again, most default console fonts can handle that these days, but it’s still another gotcha,
				and if you routinely pick some random blambot font to use on the console you’re likely to miss out.
				 Try typing a non-ASCII character at the console prompt just to make sure you see it. 
				If you don’t know how to type non-ASCII characters from the keyboard,
				that’s beyond the scope of what’s covered here and you’ll need to go and read some documentation
				and possibly set some keyboard preferences.
				Anyway, if you see it, then you’ve got the first, second, and third things covered.
		  4. Right Ncurses Package:
				  You have to have ncurses configured to deal with wide characters. 
				For most linux distributions, that means: Your ncurses distribution is based on version 5.4 or later (mine is 5.9),
				but NOT on version 11. I have no idea where version 11 came from,
				but it’s definitely a fork based on a pre-5.4 ncurses version, and hasn’t got the Unicode extensions. 
				Also, you must have the ‘ncursesw’ versions, which are configured and compiled for wide characters.
				 How this works depends on your distribution, but for Debian, you have to get both the ‘ncursesw’ package
				to run ncurses programs that use wide characters and the ‘ncursesw-dev’ package to compile them.
				The current versions are ncursesw5 and ncursesw5-dev.
			Purple(But there’s an apparent packaging mistake where the wide-character dev package, ncursesw-dev, 
				does not contain any documentation for the wide-character functions.
				If you want the man pages for the wide-character curses functions, you must also install ncurses-dev,
				which comes with a “wrong” version of ncurses that doesn’t have the wide-character functions.
				Don’t think too much about why anyone would do this; you’ll only break your head.
				The short version of the story is that you pretty much have to install ncurses, ncurses-dev, ncursesw, and ncursesw-dev, 
				all at the same time, and then just be very very careful about not ever using the library versions
				that don’t actually have the wide character functions in them. )
		  5. Program Locale:
				  Your program has to call “setlocale” immediately after it starts up, before it starts curses or does any I/O.
				If it doesn’t call setlocale, your program will remain in the ‘C’ locale, which assumes that the terminal cannot
				display any characters outside the ASCII set. If you do any input or output, or start curses before calling setlocale,
				you will force your runtime to commit to some settings before it knows the locale,
				and then setlocale when you do call it won’t have all of the desired effects.
				Your program is likely to print ASCII transliterations for characters outside the ASCII range if this happens.
				setlocale(LC_ALL, "");
		  6. Use Specified macro:
				  You have to #define _XOPEN_SOURCE_EXTENDED in your source before any library #include statements.
				The wide character curses functions are part of a standard called the XOPEN standard,
				and preprocessing conditionals check this symbol to see whether your program expects to use that standard.
				If this symbol is found, and you’ve included the right headers (see item Seven)
				then macroexpansion will configure the headers you include to actually contain definitions
				for the documented wide-character functions. But it’s not just the ‘curses’ headers that depend on it;
				you will get bugs and linking problems with other libraries if you have this symbol defined for some includes but not others,
				so put it before all include statements.
				 Unfortunately, the XOPEN_SOURCE_EXTENDED macro is not mentioned in the man pages of many of the functions
				that won’t link if you don’t do it. You’d have to hunt through a bunch of not-very-obviously related ‘see also’ pages
				before you find one that mentions it, and then it might not be clear that it relates to the function you were interested in.
				Trust me, it does. Without this macro, you can use the right headers and still find that there are no wide-curses definitions
				in them to link to.
			Purple(7. Right Ncurses header
				  You have to include the right header file rather than the one the documentation tells you to include.
				This isn’t a joke. The man page tells you that you have to include “curses.h”
				to get any of the wide-character functions working, but the header that actually contains
				the wide-character function definitions is “ncursesw/curses.h“. I hope this gets fixed soon,
				but it’s been this way for several years so some idiot may think this isn’t a bug. )
		  8. Linking Ncurses
				  You have to use the -lncursesw compiler option (as opposed to the -lncurses option) when you’re linking your executable.
			Purple(Earlier versions of gcc contained a bug that -WError and -WAll would cause linking to fail on the ncursesw library,
				but this appears to have been fixed. )
		  9. Use Wide Char Functions
				  Use the wide-character versions of everything, not just a few things.
				This is harder than it ought to be, because the library doesn’t issue link warnings warn you about mixing functionality,
				and the documentation doesn’t specifically say which of the things it recommends won’t work correctly with wide characters.
				That means cchar_t rather than chtype, wide video attributes rather than standard video attributes,
				and setcchar rather than OR to combine attributes with character information.
		#

//-------------------------------------------
------
 Curl
------
#include <curl/curl.h>
//(0x00000175)➞

	YYY:
		https://curl.se/libcurl/c/

	>see "Linux/Networking/curl"

	-libcurl has 3 different bunch of networking utilities, for different uses:
		-easy
			>for single requests at a time
		-multi
			>for performing multiple requests at the same time
		-multi_socket
			>variation of multi
			>for performing hundreds or thousands of requests at the same time
			>event-based

	Functions:
		Easy:
			CURL* curl_easy_init()								: returns CURL
			curl_easy_cleanup([CURL])							: deletes [CURL]
			int curl_easy_setopt([CURL], [option], [...])		: sets [CURL]s [opt] option to [...] (see [option] BELOW)
			curl_easy_perform([CURL])							: performs a curl
			curl_easy_getinfo([CURL], [infopt], ...)			: stores the 
		Multi:
			curl_multi_init()									: returns CURL
			curl_multi_add_handle([CURLM*], [CURL*])			: appends [CURLM*]s easy handle list with [CURL*]
			curl_multi_remove_handle([CRULM*], [CURL*])			: removes [CURL*] from [&CURLM]s easy handle list
			curl_multi_setopt(?!)

	Structs:
		>if it werent obvious, you should only have object pointers in your program { CURL *curl = curl_easy_init(); }
		CURL	: easy handle
		CURLM	: multi handle; container for easy handles (CURLs)

	[opt]:
		CURLOPT_CUSTOMREQUEST	: http request type; [...] -> C string
		CURLOPT_URL				: the url; [...] -> C string, which shall contain the protocol
		CURLOPT_WRITEFUNCTION	: a function to write the response to; [...] -> function*; see AT ../WRITEFUNCTION;
		CURLOPT_WRITEDATA		: the custom argument to pass to CURLOPT_WRITEFUNCTION;
								   NOTE: setting NULL while CURLOPT_WRITEFUNCTION is also NULL will segfault

	[infopt]:
		CURLINFO_RESPONSE_CODE	: store the 

	WRITEFUNCTION:
		typedef size_t (*)(char*, size_t, size_t, void*) WRITE_FUNCTION;
			char*  arg1  -  data recieved in; NOTE: never NULL terminated
			size_t arg2  -  "unit"; always 1
			size_t arg3  -  "amount"; size of data given in arg2
			void*		 -	userdata; set by CURLOPT_WRITEDATA
		>on success it shall return arg2*arg3
		>setting it to NULL will cause curl to use its default which is plain copy to a FILE*

	MACROS:
		CURLE_OK

---------
 sqlite3
---------
//(0x00000176)➞
    >NOTE: its great, do use it
    >NOTE: the performace is so good that repeated INSERTs beat repeated mallocs out of the water

	YYY:
		https://www.sqlite.org/cintro.html
	
	Structs:
		pass

	Functions:
		int sqlite3_open([char*], [sqlite3*])
		int sqlite3_close([sqlite3*])
		int sqlite3_exec([sqlite3*],
							[const char*],							// statement
							[int (*)(void*, int, char**, char**)],	// callback
							[void*],								// 1st argument for callback
							[char**]
						)
				callback:
					int (*)(
						void*,		: data; 4th argument of exec
						int,		: column count
						char**		: column values (as string)
						char**		: column names
						)


	Macros:
		SQLITE_OK	: return val signaling success

--------
 libgen
--------
//(0x00000178)➞
#include <libgen.h>

	>might be part of the C std //?!
	>"LIBrary GENeral purpose"

	Functions:
		>trailing '/' chars are not counted as part of the pathname
		char* dirname(<char*>)
		char* basename(<char*>)
		?!:
			>https://web.archive.org/web/20230723143439/https://stackoverflow.com/questions/75526814/why-is-posixs-libgen-h-called-like-that
			bgets() (similar to modern getdelim())
			bufsplit()
			copylist()
			gmatch() (similar to modern fnmatch())
			isencrypt()
			mkdirp() (create directories in a path name)
			rmdirp() (remove directories in a path name)
			p2open() and p2close() (bi-directional communication with a sub-process — related to popen() and pclose())
			pathfind()
			regcmp() and regex() (regular expressions)
			strfind(), strrspn(), strtrns()
			strccpy(), strcadd(), strecpy(), streadd()


	+----------+---------+----------+
	| path     | dirname | basename |
	+----------+---------+----------+
	| /usr/lib | /usr    | lib      |
	| /usr/    | /       | usr      |
	| usr      | .       | usr      |
	| /        | /       | /        |
	| .        | .       | .        |
	| ..       | .       | ..       |
	+----------+---------+----------+
	
// ?!
#define c_and_cpp_code_generators::: //(0x000001d3)➞\
I===============================================================================================================\
I===============================================================================================================\
I   _____     _______              _____           _        _____                           _                   \
I  /  __ \   / /  __ \ _     _    /  __ \         | |      |  __ \                         | |                  \
I  | /  \/  / /| /  \/| |_ _| |_  | /  \/ ___   __| | ___  | |  \/ ___ _ __   ___ _ __ __ _| |_ ___  _ __ ___   \
I  | |     / / | |  |_   _|_   _| | |    / _ \ / _` |/ _ \ | | __ / _ \ '_ \ / _ \ '__/ _` | __/ _ \| '__/ __|  \
I  | \__/\/ /  | \__/\|_|   |_|   | \__/\ (_) | (_| |  __/ | |_\ \  __/ | | |  __/ | | (_| | || (_) | |  \__ \  \
I   \____/_/    \____/             \____/\___/ \__,_|\___|  \____/\___|_| |_|\___|_|  \__,_|\__\___/|_|  |___/  \
I===============================================================================================================\
I===============================================================================================================I
																										   
#define flex:::: //(0x000001d4)➞\
#define bison:::: //(0x000001d5)➞\
I-----------------------------------------------\
I     ___ _            _____ _                  \
I    | __| |_____ __  / / _ |_|___ ___ _ _      \
I    | _|| / -_| \ / / /| _ \ (_-</ _ \ ' \     \
I    |_| |_\___/_\_\/_/ |___/_/__/\___/_||_|    \
I                                               \
I-----------------------------------------------I
	>flex is a scanner generator
	>bison is a parser generator
	>flex+bison together are used to create compilers (or interpreters)
	>flex/bison generate C/C++ code, ie. they are meta languages integrating with C/C++
	>flex descends from lex and is backwards compatible, hence naming containg 'l'/"lex" a lot
	>bison descends from yacc and is backwards compatible, hence naming containg 'y'/"yacc" a lot
    >YACC -> "Yet Another Compiler Compiler"
    >"LEXical analysis" -> lex-(ing|er)
	>NOTE: historical speculation: bison uses the syntax '<typename>' to define / "compile time cast"
			the value of a token/rule; i believe this is where the C++ template syntax originates from

	XXX:
		>grammatics
		>automaton

    Uses:
        >flex/bison for compilers
        >(potentially) only flex for transpilers { Contra }
        >flex for simple data file format parsers { .bash_history }
        >bison for validating complex command line arguments (NOTE: truely works wonders)

	Files:
		Extentions:
			y		: bison source file
			l		: flex file
			*yy.*	: flex generated * source file
			*tab.*	: bison generated * source file

	Linking:
		>only required with wrapping enabled
		-lfl
		-ly

	Programs:
		flex [options] [file]+
			-o <path>				: output file
			--header-file=<path>	: generated header file
			--prefix=<string>       : prefix (some) generated function and variable names with [string];
									   the default prefix is yy hence the new names will follow the
									   form of: { --prefix=example -> examplelex(); };
									   the renaming is done with defines, making trying to mix
									   lexers from the same compilation unit a footgun
        bison [options] [file]+
            --header=<path>         : generated header file
            --name-prefix=<string>

	Sections:
		>both flex/bison has 3 sections
		>sections must be present in the exact same order as list-ed
		>sections cannot be broken up
		>each seactions is separated by "%%"s
		{
			// 1. Definitions
		  %%
			// 2. Rules
		  %%
			// 3. (C/C++) Code
		}
		Definitions:
			>directives tend to start with '%'
			-C code may be directly embeded:
			   {
				 %{
					 // Code...
				 %}
			   }
        Rules:
            >the meet of the file
            >"match cases" followed by corresponding C/C++ code blocks to execute
		Code:
			>literal code
			>copy pasted
			>not wrapped or otherwise modified

	FLEX:
        >flex can be useful without bison
		Theory:
			>flex scans as a state-automata
			>by default it starts from the builtin state INITIAL and starts reading
			  from its designated input
			>as it reads, it will execute the code corresponding to the longest rule that can be matched
            >the code corresponding to a rule is called a ĐĐactionĐĐ
            ¤matching
                >the rule with the longest matching input is selected
                >in case of a input length tie, the rule defined first (above) is selected
    			>if no rule can be matched the lexer "jams" and stops executing
		Regex:
            <specifier>[repetition]
                specifier:
                    .                   : any char except '\n'
                    \n                  : new line
                    ^                   : start of line
                    $                   : end of line
                    "<literal>"
                    [(^)<list>]         : braced input list
                        ^                  : negates
                        <list>
                            <literal>
                            <literal>-<literal>
                    [[:alnum:]]
                    [[:alpha:]]
                    [[:space:]]         : whitespace
                    [ ]                 : normal space
                    <<EOF>>             : end of file; pseudo; matches the end of the input,
                                          even if the input is a (non-terminated) buffer
                repetition:
                    {<n>}   : exactly <n> number of <specifier>s
                    +       : 1 or more <specifier>s
                    *       : any number of <specifier>s
                    ?       : 0 or 1 <specifier>s
			User:
				<name> <patter>
				>the definition section may contain user defined patterns
				-user patterns are accessable like:
					{<name>}
				{ // User defined "White Space" pattern
					ws			[ \t\r\v\f]
					%%
					{ws}    { puts("matched whitespace"); }
					%%
				}
		Definitions:
			%option <option>
				noyywrap            : do not define a (so called wrapper) main()
				yylineno			: auto increment yylineno whenever a '\n' is encountered
				case-insensitive	: [a-z] matches [A-Z] and vice versa
                nodefault           : do not define default rules { .   ECHO }
				noyymore			: explicitly disable yymore()
				reject				: explicitly enable REJECT
				prefix="<string>"	: define interface prefix from the code; same as --prefix=<...> from the cli
			%top { ... }		: place the code ... near the top of the generated file; before the flex definitions
			%x [state]+         : defines [state]+ as "eXclusive" states
            %s [state]+         : defines [state]+ as "incluSive" states
        States:
            >ĐĐINITIALĐĐ is the default starting state, defined by flex
            >when the scanner is in an ĐĐexclusive stateĐĐ only rules from that exact state can match
            >when the scanner is in an ĐĐinclusive stateĐĐ, rules defined without a state specified
              can also match
		Rules:
			<when> <what>   : when the state and input conditions of <where> is met, <what> is executed
			when:
				<<state>(,<state>)+><regex>      : explicit state and input
				<<state>(,<state>)+>{ <regex> }  : imply that all regexes inside the brackets belong to <state>
			what:
				{ code; }
				>regular C code
			{ // Both snippets bellow call foo() uppon encountering 'a'
				<INITIAL>a  { foo(); }
			  // --
				<INITIAL>{
				a   { foo(); }
				}
			  // The only difference is readability (which varies depending on context)
			}
            { // The snippet below calls foo() if the scanner reads 'a' in either FOO or BAR
                <FOO,BAR>{
                a   { foo(); }
                }
            }
		Functions:
		    int yylex()					: start the lexer on the (previsouly assigned) input;
										   its a coroutine, uppon return-ing (with a token)
										   and recalling yylex() flexing will continue from the
										   next char
			void yyless(<sign	ed>)	: return all matched input from the <signed>th onwards
			{
				example  { yyless(?) }
				                  |
				       +----------+----------+----------+----------+----------+----------+
				       |          |          |          |          |          |          |
				yyless(0)---------|----------|----------|----------|----------|----------|--------: Green( example )
				       |   yyless(1)---------|----------|----------|----------|----------|--------: Green( xample  )
				       |          |   yyless(2)---------|----------|----------|----------|--------: Green( ample   )
				       |          |          |   yyless(3)---------|----------|----------|--------: Green( mple    )
				       |          |          |          |   yyless(4)---------|----------|--------: Green( ple     )
				       |          |          |          |          |   yyless(5)---------|--------: Green( le      )
				       |          |          |          |          |          |   yyless(6)-------: Green( e       )
				       |          |          |          |          |          |          |
Yellow(			       +->    e   +->    x   +->    a   +->    m   +->    p   +->    l   +->   e                   )
			}
			void yymore()				: append the current token to the next in the value of yytext
			void yyrestart(<FILE*>)		: throw away buffer, override yyin with <FILE*> and
										   set up the internal state to start scanning from yyin;
										   does NOT reset the state (to INITIAL)
			YY_BUFFER_STATE yy_scan_string(<const char*>)	: set the internal buffer to a new one,
															   which contains a copy of <const char*>
															   to be scanned (with the next yylex() call);
															   the programer has the responsability to
															   free the return value
			YY_BUFFER_STATE yy_scan_bytes(<const char*, int>)	: like yy_scan_string, but the input does
																   not have to be NULL terminated and can
																   contain NULL
			YY_BUFFER_STATE yy_scan_buffer(<char*>, <yy_size_t>)	: like yy_scan_bytes(), but the passed buffer 
																	   must be terminated with 2 NULL-s, and
																	   the buffer will be modified;
																	   however, there is no extra copy involved;
																	   internally yy_scan_string() and yy_scan_bytes
																	   depend on this function
		Variables:
			char* yytext	: matched text
			int yyleng		: strlen() of yytext
			FILE* yyin		: input FILE*
			FILE* yyout		: output FILE*
			int yylineno	: current line number of the input; NOTE: dependent on %yylineno
		Macros:
			#define BEGIN <state>
				>change the scanners state into <state>
				>does not jump
				>conventionally placed as the first statement in an action
			#define REJECT
				>continue execution with the next best match to the currently matched token
				>DOES jump immediately
				>comes with a notable performance penalty
			#define ECHO fwrite(yytext, yyleng, 1, yyout)
				>print mached string
            #define YY_INPUT
                >used for override-ing how flex accuries the next char of input
                >rarely used
				>NOTE: some variables {i} may already be in use in the position
				  it is copied to, use with catution
			#define YY_USER_ACTION
				>run every time a rule is matched, after yytext and yyleng is assigned but
				  before the corresponding action is executed
        Naming:
            >state names are SCREAMING_SNAKE
            >if state names could collide with token names, an "IN_*" prefix is applied;
              NOTE: consistency is still key
              { block { BEGIN IN_BLOCK; return BLOCK; } }


	BISON:
        >bison is basically useless without flex; even tho yacc preceeds lex, there are far less
          many cases where you would want to hand define yylex (as it was done initially),
          than using yylex without a parser
        Theory:
            >bison parses as a stack-automata
            >pushing the stack and changing state is called a ĐĐshiftĐĐ
            >popping the stack and changing state is called a ĐĐreductionĐĐ
        Definitions:
            %token <[union-member]>			: defines tokens (those which are expected to be returned by flex)
			%union<union-body>				: defines the data struct yylval uses for storage
			%type <<union-member>> <token>+ : defines the type of <token>+
			%start <rule>					: override-s the default starting token with <rule>
			%left <symbol>+					: declare <symbol>+ left associative with precedence
			%right <symbol>+				: decalre <symbol>+ right associative with precedence
			%nonassoc <symbol>+				: declare <symbol>+ to be not associative
			%code [where] { ... }			: inject code source into [where]
				provides	: somewhere in the generated source and header; for export-ing to the header; default
				requires	: somewhere in the generated source and header; for playing with source internals; "the best place to define types referenced in ‘%union’"
				top			: near the absolute top of the generated source
			%initial-action { ... }			: run arbitrary code at the begining of yyparse()
			%parse-param {<arg>}+			: define extra arguments to be passed to yyparse();
											   mostly used with recursion involved
		Types:
			>only relevant if you intend to use the (conrate) symbols value
			{ // imagine we wishing to store either keywords or numerical values
				%union {
					char * strval;
					int    intval;
				}
				%token <strval> STRING
				%token <intval> NUMBER
				%type <strval> expression
			}
        Symbols:
			<left context>: <right context>
			       A             A
				   |             |
				 rule      rules/tokens to
				            produce from
			{
				myrule: TOKEN_A
					| TOKEN_B
					;
			}
            Tokens:
                %token [type] <name>+
                >caps by convention
                >enum-d
                >export-ed into the generated headerfile so the scanner may have access to the symbols
				>tokens are numbered from 258 and upwards to mitigate collisions with ascii chars (whats 257?!)
				>the token value 0 signals the end of the input;
				Empty:
					>no symbols specified means the rule matches no symbols returned
					>historically an /* empty */ comment was usually added
					>the significance of empty space was later deemed confusing,
					  the special symbol %empty was added for explicit-ly specifying validity
            Rules:
                >lower case by convention
                >NOTE: the first rule is the Đstart symbolĐ; ie. the root of the parse tree
            Values:
                $<id>	: symbol value
					$			: value of the left-hand side
					<unsigned>  : <unsigned>th symbol of the right-hand side
					<cast><neg>	: <neg>+1 symbol to the left of $1; from 0 to negative N; must be cast;
								   no compile time guarantees apply, you must have a solid clue what you
								   are trying to access and how
					{
						Red(  $$      $1    $2  )
							myrule: TOKEN TOKEN
					}
					>if there is no action specified then $$ := $1
					{ // Showcasing values
						kutya_part: HEAD BODY tail
							;        │    └─────────────────────────────────────────┐
									 └─────────────────────────────────┐            │
									                                   │            │
						tail: TAIL TAIL  { printf("%s %s %s %s\n", $<strval>-1, $<strval>0, $1, $2); }
							;  │    └────────────────────────────────────────────────────────┘   │
							   └─────────────────────────────────────────────────────────────────┘
					}
                    -symbol values can be named and refered to by name
                        {
                           exp[result]: exp[left] '+' exp[right]  { $result = $left + $right; }
                        }
                    >NOTE: values are transpiled to index the variable ĐĐyyvspĐĐ;
                            0 is always the right most token;
                            this is very useful when debugging
				@<id>	: location value 	// ?!
		Precedence:	// ?!
			%left %right %nonassoc
			>symbols in the same directive have the same precedence
			>the higher the line number of the directive, the higher the precedence
		Error_recovery:
			%token error	: implicitly defined special token that is pushed unto the stack after
							   the error recovery state is entered
			yyerror()		: enter the error recovery state
			yyerrok			: quit the error recovery state
			>in the error recovery state, if another error is encountered before successfully reading
			  3 tokens, no error token is pushed
			>bison does NOT pop the errous token
			{ // The following is an infinit loop, because we errorously expected bison to pop the B token read:
				/* @BAKE
					bison -Wcounterexamples --header=error.tab.h -o error.tab.c $@;
					gcc error.tab.c -o error;
					./error;
				   @STOP
				*/
				%{
				#include <stdlib.h>
				#include <stdio.h>
				#include "error.tab.h"
				int yylex() {
					static int i = 0;
					const int alpha[] = {B, 0};
					return alpha[i++];
				}
				void yyerror() { ; }
				%}
				%token A B
				%%
				i: A
					| error    { yyerrok; puts("We recovered!"); }
					;
				%%
				signed main() {
					yyparse();
					return 0;
				}
			  // The following is an actual recovery because we were expecting B
				/* @BAKE
					bison -Wcounterexamples --header=error.tab.h -o error.tab.c $@;
					gcc error.tab.c -o error;
					./error;
				   @STOP
				*/
				%{
				#include <stdlib.h>
				#include <stdio.h>
				#include "error.tab.h"
				int yylex() {
					static int i = 0;
					const int alpha[] = {B, 0};
					return alpha[i++];
				}
				void yyerror() { ; }
				%}
				%token A B
				%%
				i: A
					| error B    { yyerrok; puts("We recovered!"); }  /* <-- NOTE: This is the only line changed */
					;
				%%
				signed main() {
					yyparse();
					return 0;
				}
			}
		Functions:
			yyparse()			: start parsing; NOTE: this will internall invoke yylex()
			yyrestart(<FILE*>)	: parse file <FILE*>
        Variables:
            yylval              : tokens value buffer; will be copied by bison;
								   must be assigned from flex to give a value to the token
		Macros:
			#define ECHO fwrite(yytext, yyleng, 1, yyout)
				>print mached string
			#define YY_ABORT
				>return from yyparse() with a non-zero value
			#define YY_ACCEPT
				>return from yyparse() with a 0
			#define YY_ERROR
				>call yyerror() and send the parser into error recovery mode
			#define yyerrok
				>mark the current error recovered
				>cause the parser to exit error recovery mode


	Notes:
		>flex is a fucking bitch regarding its header; the only way to add it is by
		  defining yyIN_HEADER, which is borderline undocumented; // ?!; TODO
		  which -being a macro- is extraordinary painful;
		  not only that, the contents of yyIN_HEADER is not pasted into the source file
		  and unlike bison it is unable to include its own header without having a stroke;	// ?!; TODO
		  realistically your best bet is adding a purely handwritten header to the project

	### Having a std::string (or any arbitrary type) in Bisons yylval ###   //₩
		>the key is knowing that %code takes an optional location qualifier
		>"requires" will place our definition providing headers high enough,
		   that they are above the yylval union, unlike standard code blocks
		   and default %code directives
        >no, "top" would not work; how did you know?
        >this DOES mean that those includes are going in your bison generated header,
          whether you want them or not; if it bothers you, good luck macro-juggling
		{
			/* @BAKE
				bison -o string.tab.c $@
				g++ string.tab.c -o string
				./string
			   @STOP
			*/
			%code requires {
				#include <iostream>
				#include <string>
				void yyerror(...) { ; }
			}
			%union {
				std::string * strval;
			}
			%{
				int yylex() {
					yylval.strval = new std::string("There are only two hard problems in CS: cache invalidation, naming things, and off-by-one errors.");
					return STRING;
				}
			%}
			%token STRING
			%%
			string: STRING { std::cout << *(yylval.strval) << std::endl; }
			%%
			signed main() { yyparse(); }
		}
		>NOTE: that a string* must be used because, behold: %union creates an union,
				meaning we can only have trivial constructors
	#

	### Scanning a string with Flex ### //₩
		There's the stackoverflow solution,
		 using a conviniently named and easy to discover function:
		{ // Minimalistic lexer reading from a string with yy_scan_string()
			/* @BAKE
				flex -o scan_string.yy.c $@
				gcc  -o scan_string.out  scan_string.yy.c
				./scan_string.out
			   @STOP
			 */
			%option noyywrap
			%%
			%%
			signed main() {
				const char * input_str = "This is my input";
				YY_BUFFER_STATE const b = yy_scan_string(input_str);
				yylex();
				yy_delete_buffer(b);
			}
		}
		I find this quite ugly to be honest. The reason it
		 changes buffers is exactly that: it was designed with changing
		 buffers in mind. However, often times, you would like your scanner
		 to only work on (specific) strings, in which case the above code
		 is almost deceptive about what is going on / what we are intending to do.
		Another way to accomplish the same effect would be do redefine YY_INPUT,
		 like so:
		{ // Minimalistic lexer reading from a string utalizing YY_INPUT
			/* @BAKE
				flex -o string.yy.c $@
				gcc  -o string.out  string.yy.c -lfl
				./string.out
			   @STOP
			 */
			%{
				const char input_str[] = "This is my input";
				const int  len         = sizeof(input_str)-1;
					  int  offset      = len;
				#define YY_INPUT(buf, result, max_size) {                        \
					int cpi = (offset && offset > max_size) ? max_size : offset; \
					memcpy(buf, input_str+(len-offset), cpi);                    \
					result = cpi;                                                \
					offset = (cpi > offset) ? 0 : offset - cpi;                  \
				}
			%}
			%%
			%%
		}
		Now, is the change more than aesthetic? Well, theres one less heap allocation,
		 but realistically thats not even worth mentioning. There could be a much
		 stronger argument for performance if we could somehow dodge copying the input,
		 similarly to yy_scan_buffer(). Speaking of which, reading its source code reviels
		 that its magic is relatively trivial and in part assignes "b->yy_ch_buf" to the
		 buffer argument. Which could allow one to hack it into reality, however
		 section 11, in the description of yy_create_buffer() of the flex info page
		 states the following:
			"The 'YY_BUFFER_STATE' type is a pointer to an opaque 'struct yy_buffer_state'\
			  structure."
		Meaning, while yy_buffer_state is not opaque (from the perpective of the scanner),
		 its documented as such, making trying to access its members a gamble.
        Those are all the relevant facts, choose your own poison now.
	#

	### Flex on the edge ###
        // ?!; NOTE how this is technically documented behaviour
		>flex places all actions into the same function and does not error out on
          ruleless actions before the first rule
		{ // The below program """works"""
			/* @BAKE
				flex -o edge.yy.c $@
				gcc edge.yy.c -o edge.out -lfl
				./edge.out
			   @STOP
			*/
			%x HILL
			%%
					  { puts("Let me help you, Sisyphus!"); goto hill_top; }
			<HILL>.   { hill_top: puts("There you go!"); exit(0); }
			%%
		}
		>since the first braced code block managed to slip through the parsing,
		  it will be always executed
		>while the HILL should be unclimable as there are no state transitions to work
		  your way up, because of the shared function scope, goto just werks™
        >this "single function state of affairs" seems to be an implementation detail,
          however since return statements must be a valid way to yield values from
          yylex() (as documented too), there is hardly any way that this could be changed
	#

.	### // ?!?!?!	// perhaps an arti? ###
		/* Flex is one of those tools that strongly expects you to do things a specific way.
		   Something similar that comes to mind is one time I had unreadable C# code,
		    with all kinds of warnings, because I was trying to write it C style.
		   What ended up resolving the situation was introducing new classes.
		   Flex is a close paralel with it's states.
		 */
		// The following example parses a text input and filters out k&r C comments:
		%option noyywrap
		%%
		<INITIAL>\/\*([^*]|\*+[^/*])*\*+\/ { ; }
		%%
		// */ ] // <- i wish not to mess up my highlighting
		/* Now, war is ugly and microwaved kefir is not nice either,
		    but that regex...
		   Do note, that we need ALL that to prevent:
		*/
			/* */ */
		/*
		    from matching as a single comment.
		   Also note that with the default rules and -lfl, its a fully fetched,
		    complete flex program.
		   At the same time it is its own little self contained snippet,
		    so clearly, we have no reason to convert it into multiple rules
			like BELOW, right?
		*/
		%option noyywrap
		%x COMMENT
		%%
		<INITIAL>\/\*    { BEGIN COMMENT; }
		<COMMENT>{
		.    { ; }
		\*\/ { BEGIN INITIAL; }
		}
		%%
		/* Look at all that bloat!
		   And readability is objective, therefor clearly you should go with
		    the shorter version!
		   Well, not so fast, lets compile and test them first...
		*/
		flex -o pattern.yy.c pattern.l
		flex -o   state.yy.c   state.l
		gcc  -o pattern.out  pattern.yy.c -lfl -g
		gcc  -o   state.out    state.yy.c -lfl -g
		python -c '''print("/*", "".join([ "a" for i in range(0,1000000)]), "*/")''' | valgrind --tool=massif --massif-out-file=massif.out.pattern ./pattern.out
		python -c '''print("/*", "".join([ "a" for i in range(0,1000000)]), "*/")''' | valgrind --tool=massif --massif-out-file=massif.out.state   ./state.out
		ms_print massif.out.pattern
		ms_print massif.out.state
		// Partial massif diagnostics of the first, complex regex solution:
			MB
		1.005^                                                                       #
			 |                   ::::::::::::::::::::::::::::::::::::::::::::::::::::#
			 |                   :                                                   #
			 |                   :                                                   #
			 |                   :                                                   #
			 |                   :                                                   #
			 |                   :                                                   #
			 |                   :                                                   #
			 |                   :                                                   #
			 |                   :                                                   #
			 |    @@@@@@@@@@@@@@@:                                                   #
			 |    @              :                                                   #
			 |    @              :                                                   #
			 |    @              :                                                   #
			 |    @              :                                                   #
			 | :::@              :                                                   #
			 | :  @              :                                                   #
			 | :  @              :                                                   #
			 |::  @              :                                                   #
			 |::  @              :                                                   #
		   0 +----------------------------------------------------------------------->Gi
			 0                                                                   5.398
		// Partial massif diagnostics of the second, state transition solution:
			KB
		21.13^                                                                       #
			 |:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::#
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
			 |:                                                                      #
		   0 +----------------------------------------------------------------------->Mi
			 0                                                                   89.89
		/* Notice how their memory usage is in different metrics
		*/
	#

    SNIPPETS:
        ws		    [ \t\r\v\f]
        wsnl	    [ \t\r\v\f\n]
        identifier	[$_a-zA-Z][_a-zA-Z0-9]*
        #define ECHOS(s) do {                            \
            const char * const  ss = s;                  \
            fwrite(ss, strlen(ss), sizeof(char), yyout); \
        } while (0)
        #define ECHOC(c) fputc(c, yyout)

Purple(
#define re2c:::: //(0x000001d6)➞
    Review of this bullshit software called re2c 3.1:
     - the comment thing is kinda smart
       > it generates very small scanners so having them inline is not insanity
       > you can nest them in your source, without breaking your highlighting or making the lls cry
     - it can generate state transition graphs, thats kinda cool
     - neither the "free-form" or the "function-like" API seems to work;
        theres no error or acknoledgement either
     - the first example in the documentation is fucking broken
       > it uses undocumented cli flags [like some others]
       > they feed a string, but only one character is ever evaluated
     - '\00' gives a syntax error for no damn reason
     - switches it generates hurt my eye. why the fuck do they need a label and a goto for each case?,
        sure there is string/regex matching which cannot fit inside a case,
        however what if only those were to jmp?
     - the default rule ['*'] is not properly documented
     - for whatever reason fallthough is the default behaviour so you have to spam either
        continue or goto
     - the default default rule is a fallthrough too;
        not a jam, but whatever rule the transpiler decided to insert to the top
        [spoiler alert: they are not even in the order of declaration]
     - what the literal fuck is this syntax?
        `re2c:api:style`
        1] you dont need the prefix re2c, its utter bloat
        2] namespacing for 20 or so options???
        3] my bad, *should be 20 so optoins, instead we have shit like this:
             re2c:bit-vectors, re2c:flags:bit-vectors, re2c:flags:b
           to do the same fucking thing
           and just to stress this, they have namespaces, but you can just no use them.
           when? option dependent.
     - do we have comments inside re2c blocks? dunno. not documented.
     - the cli help is too verbose; useless line breaks makes it hard to grep
     - while we are at it, why do we need so many fucking options?
         $ re2c --help | grep -e '^\W*-' | sort | uniq | wc -l
         77
         $ flex --help | grep -e '^\W*-' | sort | uniq | wc -l
         46
         # and this shit is suppose to be smaller
     - -d is useless; YYDEBUG is simply not fit to tracing, since it does not tell you
       which lexer it is or the line number
     - i get duplicate output. now, it very well might be my fault,
        however i have no proper means of debugging and im not
        wasting more time on this software
)

#define cpp
#define c++:: //(0x000001d7)➞\
    I---------------------------------------\
    I---------------------------------------\
    I                                       \
    I      /$$$$$$                          \
    I     /$$__  $$     /$$       /$$       \
    I    | $$  \__/    | $$      | $$       \
    I    | $$        /$$$$$$$$ /$$$$$$$$    \
    I    | $$       |__  $$__/|__  $$__/    \
    I    | $$    $$    | $$      | $$       \
    I    |  $$$$$$/    |__/      |__/       \
    I     \______/                          \
    I                                       \
    I---------------------------------------\
    I---------------------------------------I

    Literals:
        Strings:
			-Raw:
				R"[delimeter]([...])[delimeter]"
				>escape sequences are not processed inside of it
			¤prefixes
				u8	: unicode
				L	: wchar_t
				u	: char16_t
				U	: char32_t



    PREPROCESSOR:
        #define __cplusplus     : macro defined if the current source file is being processed as C++



	CASTING: //(0x000001d8)➞
		Dynamic_cast:
			dynamic_cast<[class]>([object ptr])					: returns pointer to [object ptr] converted to [class]
			>can only be used with pointers and references to classes
			>can upcast and down cast
			>done at runtime
			>returns NULL pointer on fail
			>downcast fails if [class1] is not a valid complete object of [class2]
		Static_cast:
			static_cast<[class]>([object ptr])				 	: returns pointer to [object ptr]s target converted to [class]
			>can be used between pointers to related classes
			>can both upcast and down cast
			>done at compiletime
		Reinterpret_cast:
			reinterpret_cast<<typename>>([variable(/obj) ptr])	: returns pointer to bitwise reinterpretation of [variable ptr]s target to [type]
			>can converts any pointer type to any other pointer type
			>guaranteed ability to convert back
			>no safety nets, not recommended
		Constant_cast:
			const_cast<([const]) [type]>([variable(/obj) ptr])	: returns pointer to [variable(/obj) ptr]s target with specified constantness
			>used when a function argument's constantness doesnt match what you want to pass in
			>can be used to change constant values; be aware that's undefined behaviour and compilers usually replace mentions of a constant with its
			  value in compile time
			>casting with the same constantness with which it already is, is valid, does jackshit tho (duh)
		YYY:
			>see upcasting and downcasting AT "Data groups/Data_classes/Inheritance"
			"C\/C++/Conversions"

    POINTERS:
		Smart_Pointers:
			-auto_ptr
			-unique_ptr
			-shared_ptr
			-weak_ptr
            YYY:
			    "/C++/std/<memory>"
        

	REFERENCES: //(0x000001d9)➞
		>holds only the memory address of a variable
		>behaves very similar to pointers; however no dereferencing is ever needed
		>cant hold NULL, therefor it can be safely assumed that it always holds a valid memory address
		(const) <typename>&(&) [name]		: declares a reference
			>the const makes it read-only, ie. unreassignable (yes, that goes against the
			  logic of a read only pointer, but hey, atleast we got wholeness)
			>without the extra ampersand its an Lvalue reference, with it included its an Rvalue reference
		NOTE: see L- and Rvalues AT "/C++/Value types"
		Lvalue_refrences:
			>cannot be reassigned as it technically doesnt even exist
			>its an alias
			>can only be assigned to Lvalues, unless its declared constant { const int& a = 10; }
			>marked with "&"
		Rvalue_refrences:
			>can be reassigned
			>can only be assigned to Rvalues
			>marked with "&&"
		Universal_refrences:
			>can bind to Lvalue or Rvalue references
			>when a deduced type is marked with "&&" its an universal reference
			>on initialization its determined whether the resulting variable is gonna be an L- or Rvalue reference
			>most common as parameters to template functions
		Refrence_collapsing:
			>tho expressions that would result in reference-to-reference are illegal, it could come up when deducing types
			>for that reason, in such a cases the compiler wont trow an error but rather decide whether the resulting type
			  shall be an L- or Rvalue reference
			>an Rvalue reference to an Rvalue reference becomes an Rvalue reference, the other 3 combinations yield Lvalue references


    OPERATORS:
			<=>						: spaceship operator; (?!); (c++20)


    LOOPS: //(0x000001da)➞
		Foreach:
			for(<var> : <iteratable>) { <...> }
            >"range based for loop"
			><var> will always take up the value of the upcoming member of <iterateable>
			><iterateable> must be an iterateable object
            >NOTE: arrays and all std containers are iteratable;
                    you can define your own itertable class-es


	DATA_GROUPS_AND_OBJECTS: //(0x000001db)➞
		>redesigned to feel like (or have the ability to feel like) base C types
          and support OOP
		Member_variables:
			>classes and structs can have static members
			Static:
				static <typename> [name];
				>the variable is entirely independent of the data group, only its visibility is affected
				>if not const a definition will be needed outside of the class		// ?!; what?
					{ class a{ static int s} int s = 3; }
				>the existence of any instances is not required for the variable to be usable
				>you can refer to a static member as usual ([instance].[member]) or by:
					[class]::[member]
		Member_Functions:
			Const:
				[function head] const [function body]
				>signals the compiler that this function doesnt modify any members
				>makes all members const inside the function
				-const objects can call const member functions
					{ // ### Source 1 ###
						struct A{
							int i = 0;
							int return_inc(){
								return i + 1;
							}
						};

						signed main(){
							const A a;
							a.return_inc();
						}
					  // g++ output
						error: passing ‘const A’ as ‘this’ argument discards qualifiers [-fpermissive]
						         a.return_inc();
							// NOTE: now even tho we don't attempt to modify any member variables
							//		  the compiler has no clue whether that's true or not
					  // ### Source 2 ###
						struct A{
							int i = 0;
							int return_inc() const {	// <-- added const keyword
								return i + 1;
							}
						};

						signed main(){
							const A a;
							a.return_inc();
						}
					  // the ABOVE compiles and runs without a problem
					}
			Static:
				>independent of the function, therefor cant access non static members and cant use the "this" keyword
			Special:
				>all groups can contain special functions
				Constructor:
					[group] [name]{ [name](){} };		: declares constructor
					[name]() = delete					: forbids the default constructor to ever be called
					>runs whenever an object is created
				Destructor:
					[group] ~[name]{ [name](){} };		: declares constructor
					>runs whenever an object is deleted
				Operators:
					[return type] operator[op]([args]) { [...] }	: overloads operator [op]
					-------------------------------------------------------------------
					| 	   				   Overloadable operators					  |
					-------------------------------------------------------------------
					| +    -    *    /    =    <    >    +=   -=   *=   /=   <<   >>  |
					| <<=  >>=  ==   !=   <=   >=   ++   --   %    &    ^    !    |	  |
					| ~    &=   ^=   |=   &&   ||   %=   []   ()   ,    ->*  ->   new | 
					| delete    new[]     delete[]									  |
					-------------------------------------------------------------------
					------------------------------------------------------------------------------------------------------------
					| Expression |                   Operator                    |    Member function    | Non-member function |
					------------------------------------------------------------------------------------------------------------
					| [op]a      | + - * & ! ~ ++ --                             | A::operator[op]()     | operator[op](A)     |
					| a[op]      | ++ --                                         | A::operator[op](int)  | operator[op](A,int) |
					| a[op]b     | + - * / % ^ & | < > == != <= >= << >> && || , | A::operator[op](B)    | operator[op](A,B)   |
					| a[op]b     | = += -= *= /= %= ^= &= |= <<= >>= []          | A::operator[op](B)    | N/A                 |
					| a(b,c...)  | ()                                            | A::operator()(B,C...) | N/A                 |
					| a->b       | ->                                            | A::operator->()       | N/A                 |
					| (TYPE) a   | TYPE                                          | A::operator TYPE()    | N/A                 |
					------------------------------------------------------------------------------------------------------------
		Access:
			[access specifier]: [...]		: marks [...] [access specifier]; valid until the next specifier marker or the end of the group
			¤access specifiers:
				public							: accessible from anywhere where the object is visible
				private							: accessible only by other members of the same class (or by their "friends")
				protected						: accessible as ABOVE and by their children
			¤friendship
				friend [func prototype]		: mark [func] as a friend; use INSIDE a class
				friend class [name]			: mark [name] class as a friend; use INSIDE a class
				>friend functions and classes can access private/protected members of a group
				>friendship is not mutual
				>friendship is not inherited
			¤this
				>the "this" keyword is a pointer to the current object
				>mostly unnecessary to explicit-ly write dont its still best practice to always do so
				{ struct A{ int x; A(int x){ this->x = x; } }; }
		Bitfields:
			>can only exist inside data groups
			¤declaration:
				<typename> [name] : <int>;
			>similar to bool vectors/bitsets
			>behaviour is very compiler dependent
			>with g++ casting a bitfield with a value in the first halve of its max value gives the exact value, no surprises; 
			  however casting a bitfiled with a value in the second halve of its max value will result in:
			  ([casted types max value] - ([bitfileds max value] - [bitfields current value]))
			  { char a : 4; a = 8 [...] (unsigned int)a -> 4294967288}
        Data_stuctures:
			[s_name] [name](([args]))					: creates object of [s_name] struct named [name]
														   [([args])] is only needed if the constructor require arguments
			>all members are public unless specified otherwise
		Data_classes:
			class [s_name]{ [...] } [name];				: declares class; notice the ';'; [name] creates objects
														   [...] can contain variables and functions;
			[s_name] [name](([args])]					: creates object of [s_name] class named [name]; 
														   [([args])] is only needed if the constructor require arguments
			>all members are private unless specified otherwise
			Iheritance:
				class [name]: [access] [class](, [...]){ [...] };
				>with inheritance a class can have direct access to members of other classes
				>[class] is the name of a class that [name] shall inherit from
				[access]:
					>overload meaning
					>affects the access type of the inherited members in the derived class
					-the different keywords will result in the following; 
					  (most dominant access specifier being [access] used; 
					   left handside being the access type of the member in the base class;
					   right handside being the access type of the member in the derived class)
						public:
							public    -> public
							protected -> protected
						   (private   !! not inherited)
						protected:
							public    -> protected
							protected -> protected
						   (private   !! not inherited)
						private:
							public    -> private
							protected -> private
						   (private   !! not inherited)
				Upcast: 
					>converting from pointer-to-derived to pointer-to-base
					>safe and common
					>accomplished by offsetting on an assembly level; resulting in the upcast being technically equal to
					  the ("original") instance, but they are considered equal
					{
						class A{ int a_ };
						class B : public A { int b_ };
						[...]
						B* b = new A();
						A* a = b;
						if(a == b){ std::cout << "Equal."; }		//true; does print "Equal."
					}
				Downcast: 
					>convert from pointer-to-base to pointer-to-derived
					>not best practice, probably indicates design flaws
				Virtual_member_functions_and_Overwriting:
					>to override a function in a child, the function should be marked "virtual" in the parent
					>non-virtual members can also be redefined in derived classes, but non-virtual members of derived classes cannot be 
					  accessed through a reference of the base class
					>in the child it should be marked with "override", so that the compiler can throw an error when no such function exist in the parent
					{
						class A{ virtual int ret_int(){ return 0; } };
						class B : public A { int ret_int() override { return 1; }  };
					}
					-pure virtual function:
						>must be overriden to be called
						>used when every derived class will have one, but none will use the default
						>initialized as a variable assigned to 0
						{
							virtual draw() = 0;
						}
				Multiple_inheritnce:
					>inheriting from multiple classes is perfectly valid
					-however when a class inherits from two classless that inherit from the same class the following situation will arise:
						{
							class    Top{ public: int t; };
							class   Left : public Top { public: int l; };
							class  Right : public Top { public: int r; };
							class Bottom : public Left, public Right { public: int b; };
						}
							Top   Top
							 |	   |
							 |	   |
						   Left	 Right
							  \   /
							   \ /
								V
							 Bottom
						>now, our Bottom has two Tops therefor:
							{
								Bottom b;
								b.t = 10;
							}
						  is ambiguous and will not compile
						>to access the "grandparents" members, :: must be used
							{
								Bottom b;
								b::Left.t = 10;
							}
					-if the above shape is not desirable, ĐĐvirtual inheritenceĐĐ can be used:
						{
							class    Top{ public: int t; };
							class   Left : virtual public Top { public: int l; };
							class  Right : virtual public Top { public: int r; };
							class Bottom : public Left, public Right { public: int b; };
						}
							   Top
							    A
							   / \   
							  /	  \  
						   Left	 Right
							  \   /
							   \ /
								V
							 Bottom
						>this pseudo shape is accomplished with a virtual offset table
						>it adds overhead
						>now, Tops default constructor will get invoked unless the compiler is explicitly told otherwise

    FUNCTIONS:
 		([[ [attribute] ]]) ([specifier]) [return typename] [name]([[arg][, [...]]]) [exception specifier] { [...] }		: declares function
        {
			constexpr int return_one() noexcept {
				return 1;
			}
		  //
		  	[[ noreturn ]] void quit(){
				deinit();
				exit(0);
			}
        }
		[attribute]:
			>see more on attributes AT "?!"
			[[ noreturn ]]	: specifies that the function shall not return under any circumstances; not enforced,
							   returning from a noreturn function is undefined behaviour
			[[ nodiscard ]]	: specifies that the return value shall be saved (ie. assigned); in case it is not the compiler will warn the user
		[specifier]:
			constexpr	: states to the compiler that this function will return a constant, causing the compiler to resolve it at compile time and
						   replace all mentions with a constant value; its body can only hold a single return statement ("using"s are allowed)
		[exception specifier]:
			>probably a bad idea to use it
			>not just optional, but also no longer supported (obviously kept backward compatible tho)
			>runtime enforced
			throw([exception])		: specifies what exceptions the functions can throw; if it throws something else regardless,
									   that exception cant be catched, ie: "The compiler just guarantees to beat them senseless if they do… oh,\
									   and to beat your program senseless too, most of the time." - Herb Sutter			
			noexcept				: specifies that this function shall not trow anything; alias for "throw()"; see ABOVE; this keyword has another use;
									   see AT "../Misc keywords"
		Overloading:
			>declares the same [name], but different arguments to a function so its(/they are) more flexible to call
			>see more AT "../Templates"


	LAMBDAS: //(0x000001dc)➞
		>produces function behaviour inside a single expression
		[[c]] () [ms] ([es]())( -> [type]) { [body] }		: declares lambda
				[[c]] 			: Capture clause
					=				: captures everything in current scope by value
					&				: captures everything in current scope by reference
					=[variable]		: captures [variable] by value
					&[variable]		: captures [variable] by reference
					this			: captures current object
					>one or more may be specified, separated with a ','
				[ms] 			: Mutable specification
				[es] 			: Exception specification
				-> [type] 		: Trailing-return-type



	FUNCTORS: //(0x000001dd)➞
		>function objects; an object that behaves as a function
		>they have their operator() override-n
		>as they are objects, they can have inner states
		>as they are objects, they can be easily passed into other functions



	TEMPLATES: //(0x000001de)➞
		>"glorified macros"
		>the typename and class keywords are interchangeable in the context of template declarations declarations
		Variables:
			template<typename [name](, [...])> [name] (= <typename>([const]))	: declares ((and assigns)) variable template
			>now [name]<<typename>> behaves as a completely independent variable of type <typename>
			>template specialization is impossible
			>initializing one with a constructor is impossible as it makes the compiler think its a function template or 
			  an undefined function prototype (depending on how you try)
			>the closest you can get is the part that's visible on the right hand side of the declaration and enclosed in parentheses,
			  but do to the lack of possible parameters it only can be initialized with a const value; resulting in compiler errors if
			  a version that cannot be assigned to that const value is attempted to be referred to (obviously)
			>works fine with datagroups as long as an operator= is defined
			>feels more like a bug than a feature tbh
				{ template<class T> T var;
				  var<int> = 10;
				  var<float> = 2.65;
				  var<bool> = true;
				  cout << var<int> << endl;
				  cout << var<float> << endl;
				  cout << var<bool> << endl;
				  //-----
				  10
				  2.65
				  1
				}
		Function:
			template<typename [name](, [...])>[func]			: creates function template
				{ template<typename T> void func(T a){cout << a;} }
			[func]<[type]>([value])								: calls templated function
				{ func<string>(ss); }
			>prototype it by cutting of the body
			>[name] must be used inside the scoope of [func] or type deduction fails
			>declare variables inside [func] as type [name] to make them have whatever type passed in
			>templated functions called without "<[type]>" will use the type the compiler determines; 
			  please dont (fine, you can do it with <algorithm> if you wanna; oh, and tuples)
			Variadic_template_functions:
				template<typename [name1](, [...]), typename ... [name2]> 
					[type] [name3]([name1] [name4](, [...]), [name2] ... [name5]) { [...] [func](args ...) }
				>if a template function can take an arbitrary number of arguments its called a variadic template function
				>such an effect is accomplished by recursion ([func] symbolizes this function)
		Classes:
			template<typename [name]>[class]					: creates class template
			[class_name]<[type]> [object_name](([constructor]))	: creates object of [class_name]
			>[name1] is inside the scoope of [class]
			>declare variables inside [class] as type [name] to make them have whatever type passed in
			specialization:
				template<> class [class_name] <<typename>> [body]	: creates specialized class template
				>makes implementation with specific <typename> passed in have specialized meaning
				>essentially an overload
		¤NOTE:
			>wherever the typename keyword is used, the class keyword can also be used (for the same effect)
			>besides the template arguments that are preceded by the class or typename keywords, which represent types, 
			  templates can also have defaulted parameters, which are optional to pass, similar to those found in functions.
			{ template<typename T, int i> class MyClass{ int h = i; public: void print(){ cout << t << ':' << i << endl; } } }



	VALUE_TYPES: //(0x000001df)➞
		>the (original) naming comes from assignment operations
		Lvalue:
			>Left side value
			>a value that has a defined location in memory
			¤include:
				[type]   [name]
				[type]*  [name]
				[type]&	 [name]
				[type]&& [name]
				[Lvalue].[name]
		Rvalue:
			>Right side value
			>not an Lvalue
			PRvalue:
				¤includes:
					[literal value]
			Xvalue:
				>eXpiring value
				¤include:
					[operation]					//{[10] + [2]}
					[function]()				//the return value
					&[Rvalue]
					[Rvalue].[name]
					static_cast<[type]>([name])
			Offical_graph_for_visualization:
				Lvalue          Xvalue          Prvalue
				   x               x               x
					x             x x             x
					 x           x   x           x
					  x         x     x         x
					   x       x       x       x
						x     x         x     x
						 x   x           x   x
						  x x             x x
						   x               x
						Gvalue          Rvalue

		Gvalue:
			>Generalised value
			>a context where an Lvalue and an Xvalue behaves the same


	TYPE_DEDUCTION:
		>happens on template parameters and when using auto
		>in most cases the deduced type is the same as the passed one



	EXCEPTION_HANDLING: //(0x000001e0)➞
		try{ [...1] }catch([exception] [name]){ [...2] }		: try block if exceptions are thrown inside [...1] the "catch" part will try to handle it;
																   ie. when the exception is thrown execution will continue from [...2];
																   specifying "..." as [exception] will catch all
		throw [data]											: throw exception [data]



	NAMESPACES: //(0x000001e1)➞
		>a way to categorize
		namespace [name] { [...] }		: defines namespace
		[name]::[member]				: accesses namespace element
		using namespace [name]			: introduces namespace to current scope
		namespace [name1] = [name2]		: creates an alias for [name1] called [name2]



	MISC_KEYWORDS: //(0x000001e2)➞
		new	[typename(<int>)]					: returns a pointer to <typename> constructed  on the heap
												   use <int> to create array; every new should have a corresponding delete
		delete [pointer]						: free memory of [pointer]
		delete[] [array]						: free memory of [array]
		enum									: enumerate
			enum {[alias1], [...]};					: assigns increasing value ints (0 based) to [alias]es; these numbers are constant; 
													   every mention of an alias will get replaces compile time
			enum [name] {[alias1], [...]};			: same as ABOVE, but an object of [name] can only be assigned to [alias]es; 
													   (you can static_cast into [name] tho)
			enum class [name] {[alias1], [...]};	: same as ABOVE, but aliases are now only accessible by the "namespace" of [name] ([name]::[alias1]) and
													   [aliases] must be casted to be used as other types
		nullptr									: null pointer; ≈NULL
		decltype([value])						: expands to typename of [value] { decltype(myInt) mySecondInt; }
		noexcept([expression])					: returns true if [expression] is declared to not trow (see AT "C++/Functions/Exception specifiers")
		explicit  ([constructor] || 			: forbids the compiler to make implicit conversation 
					[conversion operator])		   { class a{ 
														int i; 
														public:  
															(explicit) a(int i_) : i(i_){}
												      };
												      void func(a your_a){
														std::cout << your_a;
													  }
													  [...]
													  func(42);			//ERROR with explicit; OK without explicit
												   }
					

	(left for describing:
		alignas; alignof; atomic_cancel; atomic_commit (TM TS); atomic_noexcept; concept; volatile; mutable; //consteval;
		//constinit; //co_await; //co_return; //co_yield; decltype; explicit; export;
		reflexpr; //requires;
		static_assert; synchronized; thread_local; typeid; typename;
	)
#define cpp_stl
#define C++_stl::: //(0x000001e3)➞\
I=========================================================\
I=========================================================\
I		  _____                 _____ _____ _     		  \
I		 /  __ \ _     _       /  ___|_   _| |    		  \
I		 | /  \/| |_ _| |_     \ `--.  | | | |    		  \
I		 | |  |_   _|_   _|     `--. \ | | | |    		  \
I		 | \__/\|_|   |_|      /\__/ / | | | |____		  \
I		  \____/               \____/  \_/ \_____/ (C++ Standard Library || C++ std)\
I=========================================================\
I========================================================I
	Left:{ 
		numeric; regex; stdexcept; system_error; typeindex; typeinfo; type_traits; 
		
	}
Red(
=====================================================
					 C  LIBRARIES
=====================================================																										)
    >every C library is available as in C
    >every C library is also available with a 'c' prefix and no extension;
     this places them in the std namespace
    >some C libraries have slightly changed affects

    #include <cassert>
    #include <ccomplex>
	    >includes <complex>
    #include <cctype>
    #include <cerrno>
    #include <cfenv>
    #include <cfloat>
    #include <cinttypes>
    #include <ciso646>
	    >C++ added all macro operator aliases as keywords,
          meaning this header is affectless when imported
    #include <climits>
    #include <clocale>
    #include <cmath>
    #include <csetjmp>
    #include <csignal>
    #include <cstdarg>
    #include <cstdbool>
        >standard in C++, making the header only contain a macro, always expanding to 1:
            __bool_true_false_are_defined
    #include <cstddef>
    #include <cstdint>
    #include <cstdio>
    #include <cstdlib>
    #include <cstring>
    #include <ctgmath>
	    >includes <cmath> and <complex>
    #include <ctime>
    #include <cuchar>
    #include <cwchar>
    #include <cwtype>

Red(
=====================================================
					I/O LIBRARIES
=====================================================																										)
//(0x00000128)➞

Hierarchy_of_the_Cpp_input_and_output_libraries:

Green(
	+---------------+               +---------------+            +------------+              +---------------+              +-------------------+
	|     <ios>     |               |   <ostream>   |            | <iostream> |              |   <fstream>   |              |     <sstream>     |
	+---------------+               +---------------+            +------------+              +---------------+              +-------------------+
	|               |               |               |            |            |              |               |              |                   |
	| ------------  |               | -----------   |            | --------   |              | ------------  |              | ----------------- |
	| | ios_base |  |      #=========>| ostream |=========#=======>| cout |   |  #============>| ifstream |  |  #============>| istringstream | |
	| ------------  |      ‖        | -----------   |     ‖      | --------   |  ‖           | ------------  |  ‖           | ----------------- |
	|    ‖          |      ‖        |      ‖        |     ‖      |            |  ‖           |               |  ‖           |                   |
	|    V          |      ‖        +------‖--------+     ‖      | --------   |  ‖           | -----------   |  ‖           | ----------------  |
	| -------       |      ‖     #=========#              #=======>| cerr |   |  ‖  #=========>| fstream |   |  ‖  #=========>| stringstream |  |
	| | ios |==============#     ‖                        ‖      | --------   |  ‖  ‖        | -----------   |  ‖  ‖        | ----------------  |
	| -------       |      ‖     ‖                        ‖      |            |  ‖  ‖        |               |  ‖  ‖        |                   |
	|               |      ‖     ‖  +---------------+     ‖      | --------   |  ‖  ‖        | ------------  |  ‖  ‖        | ----------------- |
	+---------------+      ‖     ‖  |   <istream>   |     #=======>| clog |   |  ‖  ‖  #======>| ofstream |  |  ‖  ‖  #======>| ostringstream | |
						   ‖     ‖  +---------------|     ‖      | --------   |  ‖  ‖  ‖     | ------------  |  ‖  ‖  ‖     | ----------------- |
						   ‖     ‖  |               |     ‖      |            |  ‖  ‖  ‖     |               |  ‖  ‖  ‖     |                   |
						   ‖     ‖  | -----------   |     ‖      | -------    |  ‖  ‖  ‖     | -----------   |  ‖  ‖  ‖     | ----------------- |
						   #=========>| istream |=============#===>| cin |    |  ‖  ‖  ‖  #===>| filebuf |   |  ‖  ‖  ‖  #===>| istringstream | |
								 ‖  | -----------   |     ‖   ‖  | -------    |  ‖  ‖  ‖  ‖  | -----------   |  ‖  ‖  ‖  ‖  | ----------------- |
								 ‖  |      ‖        |     ‖   ‖  |            |  ‖  ‖  ‖  ‖  |               |  ‖  ‖  ‖  ‖  |                   |
								 ‖  |      V        |     ‖   ‖  +------------+  ‖  ‖  ‖  ‖  +---------------+  ‖  ‖  ‖  ‖  +-------------------+
								 ‖  | ------------  |     ‖   #==================#==‖==‖==‖=====================#  ‖  ‖  ‖
								 #===>| iostream |==================================#==‖==‖========================#  ‖  ‖
									| ------------  |     #============================#==‖===========================#  ‖
									|               |                                     ‖                              ‖
									+---------------+                                     ‖                              ‖
																						  ‖                              ‖
																						  ‖                              ‖
																						  ‖                              ‖
									+---------------+                                     ‖                              ‖
									|  <streambuf>  |                                     ‖                              ‖
									+---------------+                                     ‖                              ‖
									|               |                                     ‖                              ‖
									| ------------- |                                     ‖                              ‖
									| | streambuf |=======================================#==============================#
									| ------------- |
									|               |
									+---------------+
)

Blue(####################################################################################################################################################)

---------------------
		<ios>
---------------------
#include <ios>
//(0x00000129)➞

	Classes:
		ios_base:
			>base class for the entire standard c++ i/o library
			>has no public constructors; ie. no objects can be declared
			Private member variables:
				>fmtflags variable
				>floating-point precision field variable
				>field width variable
				>extensible, general purpose long array
			Member_classes:
				Init [name]		: declares Init object named [name]
					Private member variables:
						init_cnt || _S_refcount		: static int; instance count; name is implementation dependent
						_S_synced_with_stdio		: static bool; whether C and C++ default streams are synchronized
					>the constructor adds one to init_cnt
					>if init_cnt is changed from 0, the standard iostream objects get initialized
					>the destructor subtracts one from init_cnt
					>if init_cnts value falls back to 0 again, the standard iostream objects are flushed (not deleted)
				failure:
					>inherits from system_error (see AT <system_error>)
			Member_typedefs:
				event_callback	: void(*)([event], [ios_base&], <int>)
				fmtflags		: bitmask type; see UNDER "Masks:/fmtflag flags"; BELOW
				iostate			: bitmask type; see UNDER "Masks:/iostate flags"; BELOW
				openmode		: bitmask type; see UNDER "Masks:/openmode flags"; BELOW
			Member_functions:
				flags()							: returns private fmtflags variable
				flags([fmtflags])				: sets private fmtflags variable to [fmtflags] and returns the old one
				setf([fmtflags])				: ors the private fmtflags variable [with] [fmtflags]
				setf([fmtflags1], [fmtflags2])	: ors the private fmtflags variable [with] [fmtflags1] and ands the result with not[fmtflags2]
				unsetf([fmtflags])				: clears the bits of private fmtflags variable corresponding to true bits in [fmtflags]
				precision()						: returns private floating-point precision field variable
				precision([streamsize])			: sets private floating-point precision field variable to [streamsize] and returns the old one
				width()							: returns private field width variable
				width([streamsize])				: sets private field width field variable to [streamsize] and returns the old one
				imbue([locale])					: sets [locale] to be used
				getloc()						: returns current locale used
				xalloc()						: returns unique value to be used as an argument for iword() or pword()
				iword(<int>)					: returns a long& to the <int>th element from the private, extensible, general purpose long array
				pword(<int>)					: returns a void*& to the <int>th element from the private, extensible, general purpose long array
				register_callback(				: sets up [event_callback] to be called whenever [event] occurs with passing in <int> as an argument;
					[event_callback], <int>)	   if multiple functions are set they will execute in FILO (First In Last Out) order
				sync_with_stdio([bool] = true)	: sets whether the default streams of C and C++ are synchronized; 
												   (ie. whether you can use them interchangeably (not as in {stdout.flags}))
			Enums:
				event:
					>used with ios_base::register_callback() (see ABOVE)
					copy_fmt_event	: on a ios::copyfmt() call; between the format flag and exception mask copy
					erase_event		: on a stream destruction
					imbue_event		: on a ios_base::imbue() call; before the return
				seekdir:
					beg		: beginning of sequence
					cur		: current position within sequence
					end		: end of sequence
			Masks:
				+---------------+------------------------------------------------------------------------------+
				| fmtflag flags |                               effect                                         |
				+---------------+------------------------------------------------------------------------------+
				| boolalpha     | read/write alphabetic bools ("true" and "false")                             |
				| showbase      | write numeric base prefixes                                                  |
				| showpoint     | write decimal points to floating points under all circumstances              |
				| showpos       | always write sign                                                            |
				| skipws        | skip leading whitespaces                                                     |
				| unitbuf       | flush output after every insertion operation                                 |
				| uppercase     | use uppercase letters in certain output operations                           |
				| dec           | read/write in decimal base                                                   |
				| oct           | read/write in octal base                                                     |
				| hex           | read/write in hexadecimal base                                               |
				| fixed         | write floating points like ints                                              |
				| scientific    | write floating points in scientific notation                                 |
				| internal      | pad to reach $[field width] with [fill] chars at a specific internal point ?!|
				| left          | pad to reach $[field width] with [fill] chars at the end                     |
				| right         | pad to reach $[field width] with [fill] chars at the beginning               |
				| adjust field  | left or right or internal                                                    |
				| basefield     | dec or oct or hex                                                            |
				| floatfield    | scientific or fixed                                                          |
				+---------------+------------------------------------------------------------------------------+
				+---------------+---------------------------------------------+
				| iostate flags |                   meaning                   |
				+---------------+---------------------------------------------+
				| eofbit        | whether end of file is reached              |
				| failbit       | whether the last operation has failed       |
				| badbit        | whether stream buffer i/o error encountered |
				| goodbit       | whether all other bits are false            |
				+---------------+---------------------------------------------+
				+---------------+------------------------------------------------------------+
				| openmode flag |                           effect                           |
				+---------------+------------------------------------------------------------+
				| in            | file opened for reading; (always set for ifstream)         |
				| out           | file opened for writing; (always set for ofstream)         |
				| binary        | operations are performed in binary mode rather than text   |
				| ate           | AT End; the output position starts at the end of the file  |
				| app           | append instead of overwriting                              |
				| trunc         | truncate; overwrite the file (default)                     |
				+---------------+------------------------------------------------------------+
	Class_templates:
		basic_ios<[char_type], [char_traits] = char_traits<charT>>
			Inherits from:
				>ios_base
			Member typesdefs:
				char_type		: alias of template parameter [char_type]
				traits_type		: alias of template parameter [char_traits]
				int_type		: traits_type::int_type
				pos_type		: traits_type::pos_type
				off_type		: traits_type::off_type
			Protected member functions:
				init([basic_streambuf<[char_type, traits_type]>*])	: ?!
			Member_functions:
				

	Functions:

	Typedefs:
		streamoff		: signed integer type
		streamsize		: signed integer type
		streampos		: integer type
	Enums:

----------------
---------------------------------
			<istream>
---------------------------------
#include <istream>
//(0x0000012a)➞
----------------
---------------------------------
			<ostream>
---------------------------------
#include <ostream>
//(0x0000012b)➞
-----------------------------------
			<iostream>
-----------------------------------
#include <iostream>
//(0x0000012c)➞

	cout : print out pretty much everything you give it (c out);

	cin : 
		>beolvas 
		>(c in) 
		~az első space-ig megy
			-cin.getline([char variable], [array size])
					>only works with char-s
			-getline(std::cin, [variable])
					>ha {
						string text
						int number;
						
						cin >> number;
						getline(std::cin, text)
					}
						szerencsétlen nem olvassa be text-et. skipeli.
					------------	
						megoldás {
							string text
							int number;
								
							cin >> number;
							cin.ignore()	//ő itt a fontos
							getline(std::cin, text)
					}
			
	endl 			: print end line; = "\n"
	fixed 			: print all numbers as floats
	scientific		: print all numbets as scientific numbers
	hexfloat		: print all numbers as hexadecimal 
	defaultfloat	: restore print state to normal


------------------------------
-----------------------------------
			<fstream>
-----------------------------------
#include <fstream>
//(0x0000012d)➞

	>it keeps the data in a buffer
	>"extracting" chars from this buffer they will get removed
	>when working with files, always check for errors!

	ifstream:
		class ifstream : istream : ios : ios_base
			Member_functions:
				open([file]) 				: associates [obj] with [file]; if the stream is already associated with a file, this fails
				open([file], [openmode])	: same as above, but with changed [openmode]; (see BELOW)
				is_open()					: returns whether [obj] has a file opened
				eof() 						: returns whether you have reached the End Of File
				swap([ifstream])			: swaps associated files with [ifstream]
				close()						: should always be called
				get([char*])				: extracts char into [char*]
				get([char[]], <int>)		: extracts <int>-1 chars into [char[]]; IT OVERFLOWS!
				get([char[]], <int>, [char]): extracts <int>-1 chars or until delimiter [char] is reached into [char[]]; IT OVERFLOWS!
				getline([char[]], <int>)	: extracts <int>-1 chars or until \n is reached into [char[]]; IT OVERFLOWS!
				ignore(<int>)				: extracts <int> chars and discards them
				peek()						: returns the next character in the input sequence, without extracting it
				read([char[]], <int>)		: extracts <int> chars, stores them in [char[]]
				readsome([char[]], <int>)	: mostly same as above; i do not understand the difference
				putback([char])				: inserts [char] to the start of the buffer
				gcount()					: returns the number of chars inputted from the last of the following functions called:
											   get; getline; ignore; peek; read; readsome; putback and unget;
				


	ofstream:
		class ofstream : ostream : ios : ios_base
			public member functions:
				open([file])				: associates [obj] with [file]; if the stream is already associated with a file, this fails
				open([file], [openmode])	: same as above, but with changed [openmode]; (see AT <ios>/Classes/ios_base/Masks/openmode)
				is_open()					: returns whether [obj] has a file opened
				swap([ofstream])			: swaps associated files with [ofstream]
				close()						: should always be called
--------
-----------------------
		sstream
-----------------------
#include <sstream>
//(0x0000012e)➞
--------
-----------------------
		iomanip
-----------------------
#include <iomanip>
//(0x0000012f)➞
--------
----------------------
		iosfwd
----------------------
#include <iosfwd>
//(0x00000130)➞
--------
-------------------------
		streambuf
-------------------------
#include <streambuf>
//(0x00000131)➞

	Class_templates:
		template class basic_streambuf<[char_type], [traits] = char_traits<[char_type]>>
			>the "internal stream position indicator" stands for the current element operated on; i call it that cause it 
			  lines up with the logic of naming of C FILE-s
			Member_typedefs:
				char_type		: alias of template parameter [char_type]
				traits_type		: alias of template parameter [char_traits]
				int_type		: traits_type::int_type
				pos_type		: traits_type::pos_type
				off_type		: traits_type::off_type
			Member_functions:
				pubimbue([locale])							: calls protected virtual member function imbue()	
				getloc()									: returns current [locale] set
				pubsetbuf([char_type*], [streamsize])		: calls protected virtual member function setbuf() with the same arguments as passed in
				pubseekoff([off_type], [ios_base::seekdir],	: calls protected virtual member function seekoff() with the same arguments as passed in
					[ios_base::openmode] = 
					ios_base::in | ios_base::out)
				pubseekpos([pos_type], [ios_base::openmode],: calls protected virtual member function seekpos() with the same arguments as passed in
					[ios_base::openmode] = 
					ios_base::in | ios_base::out)
				pubsync()									: calls protected virtual member function sync()
				in_avil()									: returns the number of chars left available to read
				snextc()									: advances the internal stream position indicator by one and returns the char pointed by it
				sbumpc()									: returns the char pointed by the internal stream position indicator and advances it by one
				sgetc()										: returns the char pointed by the internal stream position indicator
				sgetn([char_type*], [streamsize])			: calls protected virtual member function xsgetn() with the same arguments as passed in
				sputbackc([char_type])						: moves the internal stream position indicator back one and returns the char there
 															   if it [char_type], calls pbackfail() otherwise
				sungetc([char_type])						: moves the internal stream position indicator back one and returns the char there
				sputc([char_type])							: stores char at the location pointed by the internal stream position 
															   indicator and its advanced by one
				sputn([char_type*], [streamsize])			: calls protected virtual member function xsputn()
				swap([basic_streambuf])						: exchanges states with [basic_streambuf]
			Protected member functions:
				eback()										: returns a char_type* to the first element to the internal buffer array
				gptr()										: returns a char_type* to the first element to the internal stream position indicator
				egptr()										: returns gptr() + 1
				gbump(<int>)								: advances the internal stream position indicator
				setg([char_type1*], [char_type2*], 			: sets eback to [char_type1*], gptr to [char_type2*] and egptr to [char_type3*]
					[char_type3*])
				imbue([locale])								: sets [locale] to be used
				setbuf([char_type*], [streamsize])			: does nothing
				pubseekoff([off_type], [ios_base::seekdir],	: does nothing 
					[ios_base::openmode] = 
					ios_base::in | ios_base::out)
				pubseekpos([pos_type], [ios_base::openmode],: does nothing 
					[ios_base::openmode] = 
					ios_base::in | ios_base::out)
				sync()										: does nothing
				showmanyc()									: returns 0
				xsgetn([char_type*], [streamsize])			: returns and copies [streamsize] chars from the internal stream position
															   indicator to [char_type*]
				xsputn([char_type*], [streamsize])			: strores [streamsize] chars from [char_type*] at the location pointed 
															   by the internal stream indicator
				pbackfail([int_type])						: ?!
				underflow()									: ?!
				uflow()										: ?!

	Typedefs:
		streambuf	: basic_streambuf<char>
		wstreambuf	: basic_streambuf<wchar_t>

--------------
========================================
Red(
==================================================
					CONTAINERS
==================================================																											)
//(0x00000132)➞
-----------------
	Iterators
-----------------
#include <iterator>
//(0x00000133)➞

	>an iterator is an object that points to an element of a container
	>cannot go out of range

	template class [container_type]<<typename>>::iterator

	Functions:			//non member!
		advance([it], <int>)	: advances the [it] by <int> element positions; <int> can be negative
		next([it])				: returns iterator equal to advance([it], 1), but [it] stays unchanged
		prev([it])				: returns iterator equal to advance([it], -1), but [it] stays unchanged
		distance([it1], [it2])	: returns the number of elements between [it1] and [it2]; if [it1] and [it2] are unrelated the function never returns

	Operators:
		*[it]								: access value of what [it] is pointing to	.	.	.	.	.	.\	.  \.	.	.	.	.	. \
		++[it]								: pre-increase [it]									 			  \		\				       \
		[it]++								: post-increase [it]											   } all \					    \	
		[it1] == [it2]						: returns whether [it1] and [it2] point to the same element       /       } bidirection allowed  | random access
		[it1] != [it2]						: returns whether [it1] and [it2] dont point to the same element./ 		 /					     | allowed
		--[it]								: pre-decrease [it]														/					    /
		[it]--								: post-decrease [it]	.	.	.	.	.	.	.	.	.	.	.	.  /					   /
		[it] [ARTIMETRIC OPERATION] <int>	: operate on [it]	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	. /

--------
--------------------------
	<initializer_list>
--------------------------
#include <initializer_list>
//(0x00000134)➞

	Classes:
		initializer_list	: initializer list; silently created when ever initializer list is used
			>copying an initializer_list object produces another object referring to the same underlying elements, not to new copies of them
			Member_functions:
				size()	: returns length of initializer list
				begin() : returns iterator to the first element
				end()	: returns iterator to past-the-end element

------------
---------------
	<array>
---------------
#include <array>
//(0x00000135)➞

	template class array<<typename>, <int>>

	>NOT C arrays, instead a class called "array"
	>fixed size
	>elements accessible with corresponding index

	Member_functions:
		begin() 					: returns iterator to first element
		end()						: returns iterator to past-the-end element
		cbegin() 					: returns const_iterator to first element
		cend()						: returns const_iterator to last element
		front()						: returns reference to first element
		back() 						: returns reference to last element
		at(int i)					: returns reference to element <int>
		data()						: returns pointer to first element
		fill([val])					: sets all elements to [val]
		size() 						: returns size; unsigned
		empty()						: returns whether empty
		swap([array])				: exchanges the values of this array with [array]; [array] must be have the same <typename> and size as this array
		x[] 						: access element

--------
------------------
	<valarray>
------------------
#include <valarray>
//(0x00000136)➞
--------
-----------------
	<bitset>
-----------------
#include <bitset>
//(0x00000137)➞

	template class bitset<[size]>

	>a bool array of whichs elements are not separated by padding
		
	Pros:
		>saves plenty of memory
		>using it over other data types can shorten algorithm computation time
	Cons:
		>fixed size
	
	Constructor:
		defult			: all bit are initialized as 0s
		(<int>)			: bitmap will have the same binary representation as <int>
		(<string>)		: initializes bitmap with <string> containing 0s and 1s; 
						   the last char from left to right will represent [bitset object][0] (and vice versa)

	Member_functions:
		count()				: returns the number of ones in the bitset
		size()				: returns container size/length
		test(<int>)			: returns whether the bit at position <int> is set to 1
		any()				: returns whether any of the bits is set to 1
		none()				: returns whether none of the bits are to 1
		all()				: returns whether all of the bits are set to 1
		set()				: sets all bits to 1
		set(<int>, [bool])	: sets the bit at position <int> to [bool]
		reset()				: sets all bits to 0
		flip()				: sets all 1 bits to 0 and all 0 bits to 1
		flip(<int>)			: sets the bit at <int> to 1 if its 0 or to 0 if its 1
		reset(<int>)		: sets the bit at position <int> to 0
		to_string()			: returns string representing bitset; no, it doesnt convert to chars {01101010110};
							   the last char from left to right will represent [bitset object][0] (and vice versa)
		to_ulong()			: returns unsigned long with the same binary representation as the bitset
		to_ullong()			: returns unsigned long long with the same binary representation as the bitset
		operator[<value>]	: access element with <value> directly with the [] operator

--------
----------------
	<string>
----------------
#include <string>
//(0x00000138)➞

	Classes:
		class string [name]
			>elements (chars) accessible with corresponding index
			>way safer than C-strings
			Member_functions:
				length() || size() 					: hány charból áll
				append(<string>)					: hozzá ad szöveget
				insert(<int>, <string>) 			: inserts <string> at <int>; DOEST OVERWRITE SHIT, YOU MORON!
				erase([hanyadik hely utánra], [hány char-t]) : kivon szöveget
				popback() : removes last the char of the string
				replace([honnan kezdve], [hányat], "[mivel]") : replaces (duh)
				size_t find(<string>)	 			: returns position of first occurrence of <string>
													   or string::npos; {pl.: asd.replace(asd.find("fuck"), 4, "****")}
				size_t find(<string>, <int>)		: returns position of first occurrence of <string>
													   or string::npos, starting from position <int>
				rfind(<string>)						: returns position of last occurrence of <string> or string::npos
				rfind(<string>, <int>)				: returns position of last occurrence of <string> or string::npos, starting from position <int>
				substr([int-1] = 0, 				: substring; returns a string constructed from *this partal text;
						[int-2] = string::npos) 	   [int-1] is the starting position; [int-2] is the amount of chars to take
				find_firts_of("[mit]") 				: megtalálja az első CHAR-t 'mit'-ből; returns position
				compare("[mivel]") 					: össze hasonlítja őket (hogy egyenlőek-e);
				c_str() 							: returns a pointer to a C-string representing the current value

	Struct_templates:
		template class char_traits<[char_type]>
			Specializations:
				<>char_traits<char>
				<>char_traits<wchar_t>
				<>char_traits<char16_t>
				<>char_traits<char32_t>
			Member_typesdefs:
				char_type		: alias of template parameter [char_type]
				int_type		: integer type that can represent [char_type] and eof()
				off_type		: a type that behaves like streamoff (see AT "<ios>/Typedefs")
				pos_type		: a type that behaves like streampos (see AT "<ios>/Typedefs")
				state_type		: multibyte transformation type such as mbstate_t (see At "<wchar.h>/Structs")
			Member_functions:
				>"char_type" marks the template parameter supplied
				>"int_type" marks the member typedef
				eq([char_type1], [char_type2])					: returns whether the two arguments are equal
				eq_int_type([int_type1], [int_type2])			: returns whether the two arguments are considered equal
				lt([char_type1], [char_type2])					: not eq() (see ABOVE)
				length([char_type*])							: returns length of null terminated string at [char_type*]
				assign([char_type1], [char_type])				: assigns [char2] to [char1] ([char1] = [char2])
				assign([char_type*], [size_t], [char_type])		: assigns [char_type] to the first [size_t] chars of string pointed by [char_type*]
				move([char_type1*], [char_type2*], [size_t])	: copies [size_t] char_types from [char_type2*] to [char_type1*]
				copy([char_type1*], [char_type2*], [size_t])	: same as ABOVE
				eof()											: returns an int_type representing an end of file value
				not_eof([int_type])								: retutns [int_type] if its not an end of file value, otherwise returns an 
																   implementation dependent value
				comapre([char_type1*], [char_type2*], [size_t])	: compares the first [size_t] two string parameters; returns:
					0	: all chars are equal
					<0	: from the first chars that do not equal [char_type1*]s has a SMALLER value
					>0	: from the first chars that do not equal [char_type1*]s has a LARGER value
				find([char_type*], [size_t], [char_type])		: returns a char_type* to the first occurrence of [char_type] in the first [size_t] chars
																   of [char_type*] or null
				to_char_type([int_type])						: returns the char_type equivalent of [int_type]
				to_int_type([char_type])						: returns the int_type equivalent of [char_type]

	Class_templates:
		template class basic_string<[type], [char_traits] = char_traits<[type]>, [allocator] = allocator<[type]>>
			>[type] is the underlying type of the characters; could be any base type
			Specializations:
				<>basic_string<char>
				<>basic_string<wchar_t>
				<>basic_string<char16_t>
				<>basic_string<char32_t>
			Member_types:
				traits_type		: alias of template parameter [char_traits]
				allocator_type	: alias of template parameter [allocator]
				value_type		: trairs_type::char_type
				reference		: value_type&
				const_refrence	: const value_type&
				pointer			: ?!

	Functions:
		stoi(<string>) 		: converts string to int
		stol(<string>) 		: converts string to long
		stoul(<string>) 	: converts string to unsigned long
		stoll(<string>) 	: converts string to long long
		stoull(<string>) 	: converts string to unsigned long long
		stod(<string>) 		: converts string to double
		stof(<string>)		: converts string to float
		to_string([num])	: converts [num] to string
		to_wstring([num])	: converts [num] to wide string
		getline([ifstream], <string>);

	szövegből kilehet vonni/"hozzá adni" (számot) -> az elejéből von le karaktereket;
	<string> += <string> : hozzá ad
--------
-----------------
	<vectors>
-----------------
#include <vector>
//(0x00000139)➞

	template class vector<<typename>> [name]			: declares vector

	Pros:
		>elements accessible with corresponding index
		>fast appending and removing elements at the end
	Cons:
		>slow insertion in the middle or at the beginning

	Member_functions:
		begin() 					: returns iterator to first element
		end()						: returns iterator to past-the-end element
		cbegin() 					: returns const_iterator to first element
		cend()						: returns const_iterator to last element
		front()						: returns reference to first element
		back() 						: returns reference to last element
		insert([it], [value])		: inserts [value] at [it] 								//DOESNT OVERWRITE SHIT, YOU MORON!
		push_back([val])			: adds an element to the end
		pop_back()					: delete last element
		emplace([it], [args])		: inserts an element at [it] which is constructed in place, passing [args] to its constructor
		emplace_back([args])		: adds an element to the end which is constructed in place, passing [args] to its constructor
		size() 						: returns size; unsigned
		empty()						: returns whether empty
		erase([it])					: removes element at [it] from vector
		erase([it1], [itt2])		: removes every element from [it1] till [it2]
		clear()						: removes all elements from vector
		operator[] 					: access element
	
	Multidimensional vectors || vector of vectors:
		vector<vector<typename>> [name];

		x.								: x-el foglalkozik								// ?!
		x[unsigned int].				: x valamelyik elementjével foglalkozik
		x[unsigned int][unsigned int]	: x valamelyik elemének elemével foglalkozik

		create a temporary vector to push back into the outer vector!
			{		vector<vector<char> >example;
			
					for (int i = 0; i < rows; i++) {
						vector<char> temp;
						for (int j = 0; j < cols; j++) {
							temp.push_back('a');
							}
						example.push_back(temp);
						}
			}
		
--------
---------------
	<queue>
---------------
#include <queue>
//(0x0000013a)➞

	template class queue<<typename>, [container] = deque>
		>First In First Out (FIFO) container
		>[container] is the underlining container type to be used; 
		   it shall have atleast the following member functions:
		  		>empty() 
				>size() 
				>front()
				>back()
				>push_back()
				>pop_front()
		   from the STL deque and list support them
		Member_functions:
			front()				: returns reference to first element
			back() 				: returns reference to last element

	template class priority_queue<typename, [container] = deque, [ordering] = less>
		>the first element is always the greatest, judged by [ordering]
		Member_functions:
			top()				: returns reference to first element

	Shared_functions:
			empty()				: returns whether empty
			size()				: returns size; unsigned			
			push(<typename>)	: places <typename> to the end of the queue, making it the new last element
			emplace([args])		: constructs <typename> with [args] and places to the end of the queue, making it the new last element
			pop()				: removes the first (front) element
			swap([queue])		: swaps contents with [queue]
--------
---------------
	<deque>
---------------
#include <deque>	//pronounced "deck"
//(0x0000013b)➞

	template class deque<<typename>>

	>"Double Ended QUEue"

	Pros:
		>elements accessible with corresponding index
		>fast inserting of elements at the end and beginning
	Cons:
		>slow insertion at the middle
		>not guaranteed to store all its elements in contiguous storage locations: 
		  accessing elements in a deque by offsetting a pointer to another element causes undefined behavior

	Member_functions:
		begin() 					: returns iterator to first element
		end()						: returns iterator to past-the-end element
		cbegin() 					: returns const_iterator to first element
		cend()						: returns const_iterator to last element
		front()						: returns reference to first element
		back() 						: returns reference to last element
		insert([it], [value])		: inserts [value] at [it]
		push_back([val])			: adds element to the end
		push_front([val])			: adds element to the beginning
		pop_back()					: removes last element
		pop_front()					: removes first element
		emplace([it], [args])		: inserts an element at [it] which is constructed in place, passing [args] to its constructor
		emplace_back([agrs])		: adds element to the end which is constructed in place, passing [args] to its constructor
		emplace_front([agrs])		: adds element to the beginning which is constructed in place, passing [args] to its constructor
		size() 						: returns size; unsigned
		empty()						: returns whether empty
		erase([it])					: removes [it] element from deque
		erase([it1], [itt2])		: removes every element from [it1] till [it2]
		clear()						: removes all elements from deque
		operator[] 					: access element
--------
--------------
	<list>
--------------
#include <list>
//(0x0000013c)➞

	template class list<<typename>>

	YYY:
		"/Data structures/Linked lists/?!"

	Cons:
		>no element indexes

	Member_functions:
		reverse()							: reverse the order of elements
		begin() 							: returns iterator to first element
		end()								: returns iterator to past-the-end element
		cbegin() 							: returns const_iterator to first element
		cend()								: returns const_iterator to last element
		front()								: returns reference to first element
		back() 								: returns reference to last element
		insert([it], [value])				: inserts [value] at [it]
		slice([it], [list])					: transfer all elements from [list] into this list at [it]
		slice([it], [list], [it2])			: transfer element [it2] from [list] into this list at [it]
		slice([it], [list], [it2], [it3])	: transfer elements [it2]-[it3] from list into this list at [it]
		push_back([val])					: adds element to the end
		push_front([val])					: adds element to beginning
		pop_back()							: removes last element
		pop_front()							: removes first element
		emplace([it], [args])				: inserts an element at [it] which is constructed in place, passing [args] to its constructor
		emplace_back([agrs])				: adds element to the end which is constructed in place, passing [args] to its constructor
		emplace_front([agrs])				: adds element to the beginning which is constructed in place, passing [args] to its constructor		
		size() 								: returns size; unsigned
		empty()								: returns whether empty
		erase([it])							: removes [it] element from deque
		erase([it1], [itt2])				: removes every element from [it1] till [it2]
		remove([val])						: removes all elements which equal [val]
		clear()								: removes all elements from list
		swap([list])						: exchanges the values of this set with [list]
		
--------
----------------------
	<forward_list>
----------------------
#include <forward_list>
//(0x0000013d)➞

	forward_list<<typename>> [name]			: declares forward list

	YYY:
		"/Data structures/Linked lists/Forward linked"

	Cons:
		>no element indexes
		>no size()
		>no pushback()

	Member_functions:
		reverse()							: reverse the order of elements
		begin() 							: returns iterator to first element
		end()								: returns iterator to past-the-end element
		cbegin() 							: returns const_iterator to first element
		cend()								: returns const_iterator to last element
		front()								: returns reference to first element
		insert_after([it], [val])			: inserts [val] after [it]
		push_front([val])					: inserts element at beginning
		pop_front()							: removes first element
		emplace_front([agrs])				: adds element to the beginning which is constructed in place, passing [args] to its constructor
		emplace_after([[it], [args]])		: inserts an element after [it] which is constructed in place, passing [args] to its constructor
		empty()								: returns whether empty
		erase_after([it])					: removes the element AFTER [it]
		erase_after([it], [it2])			: removes elements from [it]+1 till [it2] 
		clear()								: removes all elements from list

--------
--------------
	<sets>
--------------
#include <set>
//(0x0000013e)➞

	>values of the elements in a set cannot be modified
	>no element indexes

	SETS:
		set<<typename>> [name]				: declares set

		>cannot hold duplicates

		Member_functions:
			>SHARED FUNCTIONS (see BELOW)
			find([val])							: returns iterator to element equal to [val]; if not found returns end()
			count([val])						: returns the number of elements equal to [val]; since set elements are unique, can only return 0 || 1
			erase([val])						: removes element with [val]


	MULTISETS:
		multiset<<typename>> [name]			: initializes multiset

		>can hold duplicets

		Member_functions:
			>SHARED FUNCTIONS (see BELOW)
			find()								: returns iterator to first element equal to [val]; if not found returns end()
			count([val])						: returns the number of elements equal to [val]
			erase([val])						: removes an element with [val]

	Shared_functions:
		begin() 							: returns iterator to first element
		end()								: returns iterator to past-the-end element
		cbegin() 							: returns const_iterator to first element
		cend()								: returns const_iterator to last element
		size() 								: returns size; unsigned
		empty()								: returns whether empty
		insert([value])						: inserts [value]
		erase([it])							: removes element at [it]
		erase([it], [it2])					: removes elements from [it] to [it2]
		emplace([args])						: inserts an element which is constructed in place, passing [args] to its constructor
		clear()								: removes all elements from set
		swap(<set>)							: exchanges the values of this set with <set>

--------
------------------------
	<unordered_sets>
------------------------
#include <unordered_set>
//(0x0000013f)➞

	>faster to access elements by their value then ordered sets, also constant
	>uses hash tables to store data
	>makes no guarantees on which specific element is considered which, but the range that goes from its begin to its end covers all the elements
	>guarantees that deleting elements does not cause a rehashing
	>values of the elements in a set cannot be modified

	UNORDERED_SET:
		template class unordered_set<[dataset]>

		>cannot hold duplicates

		Member_functions:
			find([val])							: returns iterator to element equal to [val]; if not found returns end()
			count([val])						: returns the number of elements equal to [val]; since set elements are unique, can only return 0 || 1
			erase([val])						: removes element with [val]

	UNORDERED_MULTISET:
		template class unordered_multiset<[dataset]>

		>can hold duplicates

		Member_functions:
			find()								: returns iterator to first element equal to [val]; if not found returns end()
			count([val])						: returns the number of elements equal to [val]
			erase([val])						: removes all elements with [val]		
	
	Shared_functions:
		begin() 							: returns iterator to "first" element
		end()								: returns iterator to past-the-"end" element
		cbegin() 							: returns const_iterator to "first" element
		cend()								: returns const_iterator to past-the-"end" element
		size() 								: returns size; unsigned
		empty()								: returns whether empty
		insert([value])						: inserts [value]
		insert([it1], [it2])				: inserts range
		erase([it])							: removes element at [it]
		erase([it], [it2])					: removes elements from [it] to [it2]
		erase([val])						: removes element with [val]
		emplace([args])						: inserts an element which is constructed in place, passing [args] to its constructor
		clear()								: removes all elements from set
		swap([unordered_set])				: exchanges the values of this set with [unordered_set]		

--------
------------
	Pair
------------
#include <utility>		//works without it too for some reason
//(0x00000140)➞

	template struct pair<[type1], [type2]>
	(or { auto mypair = make_pair(10, 10); })
		>a struct to pair together two values of different kinds
		>a pair has 2 variables, named "first" && "second"; 
		  they are also called Key and Value

		Assigning:
			pair [name]([value1], [value2])
			( or { mypair.first = 10; mypair.second = 10; })
		Member_functions:
			swap(<pair>)				: exchanges the values of this pair and <pair>

	Functions:
		make_pair([value1], [value2])		: returns a pair

--------
-------------
	<map>
-------------
#include <map>
//(0x00000141)➞

	>implemented as binary trees

	MAPS:
		template class map<[type1], [type2]>

		>cannot hold duplicates
		>elements accessible with corresponding index
		>a "list" of pairs
		>NOTE: accessing an element will insert it

		Member_functions:
			>SHARED FUNCTIONS
			erase([val])			: removes element with key equal to [val]
			find([key])				: returns iterator to [key] element; returns .end() if not found
			insert(<pair>)			: inserts <pair>; returns a pair, containing an iterator to the pair inserted (or the one with an identical key)
									   and a bool value set to true if a new element was inserted and false if it already existed
			cound([key])			: returns the number of elements with keys equal to [key]; since map elements are unique, can only return 0 || 1
			swap([map])				: exchange the values of this map with [map]


	MULTIMAPS:
		multimap<[type1], [type2]> [name]		: declares multimap

		>can hold duplicets
		>elements accessible with corresponding index
		>a "list" of pairs

		Member_functions:
			>SHARED FUNCTIONS
			erase([val])			: removes all elements with key equal to [val]
			find()					: returns iterator to first element equal to [val]; if not found returns end()
			insert(<pair>)			: inserts <pair>; returns an iterator to the newly inserted element
			count([key])			: returns the number of elements with keys equal to [key]
			swap([multimap])		: exchange the values of this multimap with [multimap]


	Shared_functions:
			begin()					: return iterator to first element
			end()					: returns iterator to past-the-end element
			cbegin() 				: returns const_iterator to first element
			cend()					: returns const_iterator to last element
			insert([it], <pair>)	: inserts <pair> at [it]
			erase([it])				: removes element at [it]
			erase([it], [it2])		: removes all elements from [it] till [it2]
			empty()					: returns true if empty, false otherwise
			size()					: returns container size/length
			clear()					: clear contents

--------
------------------------
	<unordered_maps> 
------------------------
#include <unordered_map>
//(0x00000142)➞

	>uses hash tables to store data
	>guarantees that deleting elements does not cause a rehashing
	>members are faster to access by their key, then in (regular) maps
	>a "list" of pairs

	Pros:
		>faster to access elements by their key value then ordered maps, also constant

	Cons:
		>less efficient for range iteration through a subset of their elements than maps
		>makes no guarantees on which specific element is considered which, but the range that goes from its begin to its end covers all the elements

	UNORDERED_MAPS:
		unordered_map<[type1], [type2]> [name]			: declares unordered map

		>cannot hold duplicates
		>elements directly accessible by value

		Member_functions:
			>SHARED FUNCTIONS
			erase([val])				: removes element with key equal to [val]
			find([key])					: returns iterator to [key] element; returns .end() if not found
			count([key])				: returns the number of elements with keys equal to [key]; since unordered map elements are unique, can only return 0 || 1
			swap([unordered_map])		: exchange the values of this map with [unordered_map]
			[[value]]					: access element with [value] directly with the [] operator


	UNORDERED_MULTIMAPS:
		unordered_multimap<[type1], [type2]> [name]		: declares unordered multimap

		>can hold duplicates

		Member_functions:
			>SHARED FUNCTIONS
			erase([val])				: removes all elements with key equal to [val]
			find()						: returns iterator to first element equal to [val]; if not found returns end()
			count([key])				: returns the number of elements with keys equal to [key]
			swap([unordered_multimap])	: exchange the values of this multimap with [unordered_multimap]


	Shared_functions:
			begin()					: return iterator to first element
			end()					: returns iterator to past-the-"end" element
			cbegin() 				: returns const_iterator to first element
			cend()					: returns const_iterator to last element
			insert(<pair>)			: inserts <pair>
			erase([it])				: removes element at [it]
			erase([it], [it2])		: removes all elements from [it] till [it2]
			emplace([args])			: inserts an element which is constructed in place, passing [args] to its constructor
			empty()					: returns true if empty, false otherwise
			size()					: returns container size/length
			clear()					: clear contents

--------
---------------
	<tuple>
---------------
//(0x00000143)➞
#include <tuple>

	Classes:
		tuple:
			>can hold different types
			>similar to pythons tuple
			Member_functions:
				swap([tuple])	: exchanges members with [tuple]; [tuple] must be the same type
		tuple_size:
			tuple_size<decltype([tuple])>::value	: ?!; returns [tuple object]s length for some reason
		tuple_element:
			tuple_element<[index],decltype([tuple])>::type	: ?!; expands(?) to type of [tuple object] element at [index]
	Objects:
		ignore		: ignores any value assigned to it

	Functions:
		make_tuple([vals])		: returns tuple filled with passed in [vals]
		make_tuple([vals])		: returns reference to temporary tuple
		tie([vals])				: temporary makes [vals] to behave like a tuple (so that a tuple can be assigned to them)
		tuple_cat([tuples])		: returns a tuple with all elements of [tuples] concatenated after eachother
		get<[index]>([tuple])	: returns [tuple]s element at [index]
--------
--------------
	<stack>
--------------
#include <stack>
//(0x00000144)➞

	Classes_templates:
		stack:
			>FILO (first in last out) container
			template class stack<<typename>, [container] = deque>
			-[container] shall have atleast the following member functions:
				>empty()
				>size()
				>back()
				>push_back()
				>pop_back()
			-containers from the std that qualify to be [container]:
				>vector
				>deque
				>list
			Member_functions:
				empty()				: whether the container is empty
				size()				: returns size
				top()				: access top element
				push(<typename>)	: insert element
				emplace([args])		: constructs <typename> with [args] and places to the end of the queue, making it the new last element
				pop()				: removes top element
				swap([stack])		: swaps the contents with [stack]
			Member_typedes:
				value_type		: alias of template parameter <typename>
				container_type	: alias of template parameter [container]
				reference		: container_type::reference (most likely: value_type&)
				const_refrence	: container_type::const_refrence (most likely: const value_type@)
				size_type		: an unsigned number (most likely: size_t)

	//?!; address .USELESS/fucking_with_stacks.cpp

========================================
Red(
===============================================
					THREADS
===============================================																												)
//(0x00000145)➞
---------------------------------
			<threads>
---------------------------------
#include <thread>
//(0x00000146)➞

	class thread

	joinable if NOT:
		>default-constructed
		>moved from either constructing another thread object, or assigning to it
		>either of its members join or detach has been called

	Member function:
		joinable()		: returns whether joinable
		get_id()		: returns thread id
		swap([thread])	: swaps states with [thread] 
		join()			: this function returns when the thread execution has completed
		detach()		: makes execution independent of object

	always CALL join() OR detach() BEFORE DESTRUCTING A thread OBJECT:
	   "remaining detached threads executing in the background are not waited upon,\
        instead their execution is suspended and their thread-local objects destructed;\
        crucially, this means that the stack of those threads is not unwound and\
        thus some destructors are not executed; depending on the actions\
		those destructors were supposed to undertake, this might be as bad a situation\
        as if the program had crashed or had been killed.\
        hopefully the OS will release the locks on files, etc...\
		but you could have corrupted shared memory, half-written files, and the like"

--------
------------------------
		<atomic>
------------------------
#include <atomic>
//(0x00000147)➞
--------
------------------------------------
		<condition_variable>
------------------------------------
#include <condition_variable>
//(0x00000148)➞
--------
------------------------
		<future>
------------------------
#include <future>
//(0x00000149)➞
--------
-----------------------
		<mutex>
-----------------------
#include <mutex>
//(0x0000014a)➞



========================================
Red(
=============================================
					OTHER
=============================================																												)
//(0x0000014b)➞
-------------------
	<algorithm>
-------------------
#include <algorithm>
//(0x0000014c)➞

	>its the programmer's responsibility to make sure [it[X]]:[it[X+1]] range is valid; ([X] is odd)
	>when you call algorithms for multiple ranges, make sure that the second and additional ranges have at least as many elements as the first range
	>[func] can mark either an actual function or a functor
	>values "judged" equal by a function if the function returns true when the said values were passed in
	Bool:
		all_of([it1], [it2], [func])				: returns whether ALL elements in range [it1]:[it2]-1  return TRUE to [func]
		none_of([it1], [it2], [func])				: returns whether ALL elements in range [it1]:[it2]-1  return FALSE to [func]
		any_of([it1], [it2], [func])				: returns whether ANY elements in range [it1]:[it2]-1  return TRUE to [func]
		equal([it1], [it2], [it3])					: returns whether range [it1]:[it2]-1 is equal to range [it3]:[it3]+(it2-it1)
		equal([it1], [it2], [it3], [func])			: returns whether [func]([it1]+i, [it3]+i) return true to all elements
		is_permutation([it1], [it2], [it3])			: returns whether range [it1]:[it2]-1 and range [it3]:[it3]+(it2-it1) contain the equal 
													   elemets in whatever order
		is_permutation([it1], [it2], [it3], [func])	: returns whether range [it1]:[it2]-1 and range [it3]:[it3]+(it2-it1) contain the equal 
							   						   elemets judged by [func] in whatever order
		is_partitioned([it1], [it2], [func])		: returns whether all elemets that return true to [func] precede those that return false
		is_sorted([it1], [it2])						: returns whether range [it1]:[it2]-1  is sorted
		is_sorted([it1], [it2], [func])				: returns whether range [it1]:[it2]-1  is sorted by [func]
		includes([it1], [it2], [it3], [it4])		: returns whether range [it1]:[it2]-1  contains all elements from range [it3]:[it4]
		includes([it1], [it2], [it3], [it4], [func]): returns whether range [it1]:[it2]-1  contains all elements judged by [func] from range [it3]:[it4]
		is_heap([it1], [it2])						: returns whether range [it1]:[it2]-1  is a heap; (not that heap; see BELOW)
		is_heap([it1], [it2], [func])				: returns whether range [it1]:[it2]-1  is a heap organized by [func]; (not that heap; see BELOW)
		lexicographical_compare([it1], [it2], 		: returns whether range [it1]:[it2]-1  is lexigraphically (alphabetically) less then range [it1]:[it2]
				[it3], [it4])
		lexicographical_compare([it1], [it2], 		: returns whether range [it1]:[it2]-1 is judged by [func] to be less then range [it1]:[it2]
				[it3], [it4], [func])

	Searching:
		>they return [it2] if not found
		find([it1], [it2], [val])				: returns iterator to FIRST element with an equal value to [val] in range [it1]:[it2]								   
		find_if([it1], [it2], [func])			: returns iterator to FIRST element for which [func] returns TRUE
		find_if_not([it1], [it2], [func])		: returns iterator to FIRST element for which [func] returns FALSE
		find_first_of([it1], [it2], 			: returns iterator to FIRST element in range [it1]:[it2]-1 that is found in range [it3]:[it4]
				[it3], [it4])	
		find_first_of([it1], [it2],				: returns iterator to FIRST element in range [it1]:[it2]-1 that returns true to [func]([it1]+i, [it3]+i)
				[it3], [it4],[func])		
		find_end([it1], [it2],					: returns iterator to LAST element in range [it1]:[it2]-1 that is found in range [it3]:[it4]
				[it3], [it4])
		find_end([it1], [it2],					: returns iterator to LAST element in range [it1]:[it2]-1 that returns true to [func]([it1]+i, [it3]+i)
				[it3], [it4], [func])
		adjacent_find([it1], [it2])				: returns iterator to FIRST element that is equal to the element after it
		adjecent_find([it1], [it2], [func])		: returns iterator to FIRST element that returns true when it and the element after it are fed to [func]
		mismatch([it1], [it2], [it3])			: returns a pair of iterators to [it1]+i and [it3]+i; i being where they first dont match
		mismatch([it1], [it2], [it3], [func])	: returns a pair of iterators to [it1]+i and [it3]+i; i being where they first return FALSE to [func]
		min([...])								: returns the smallest value, or if all arguments are equal -> [1]
		min([...], [func])						: returns the smallest value, or if all arguments are equal -> [1]; compares using [func]
		max([...])								: returns the highest value, or if all arguments are equal -> [1]
		max([...], [func])						: returns the highest value, or if all arguments are equal -> [1]; compares using [func]
		minmax([...])							: returns a pair, containing the smallest value as its first and the highest as its second
		minmax([...], [func])					: returns a pair, containing the smallest value as its first and the highest as its second; 
												   compares using [func]
		min_element([it1], [it2])				: returns iterator to the element with the smallest value in range [it1]:[it2]
		min_element([it1], [it2], [func])		: returns iterator to the element with the smallest value judged by [func] in range [it1]:[it2]
		max_element([it1], [it2])				: returns iterator to the element with the largest value in range [it1]:[it2]
		max_element([it1], [it2], [func])		: returns iterator to the element with the largest value judged by [func] in range [it1]:[it2]
		minmax([it1], [it2])					: returns a pair, containing the smallest value as its first and the highest as its second in range [it1]:[it2];
		minmax([it1], [it2], [func])			: returns a pair, containing the smallest value as its first and the highest as its second in range [it1]:[it2]; 
												   compares using [func]
		search([it1], [it2], [it3], [it4])		: returns iterator to FIRST element in the range [it1]:[it2]-1 where theres a subsequence equal to [it3]:[it4]
		search([it1], [it2], [it3], [it4])		: returns iterator to FIRST element in the range [it1]:[it2]-1 where theres a subsequence equal to [it3]:[it4]
												   judged by [func]
		search_n([it1], [it2], [num], [val])	: returns iterator to the first position in range [it1]:[it2]-1 that has [num] equal elements to [val] in a row
		search_n([it1], [it2], [num],			: returns iterator to the first position in range [it1]:[it2]-1 that has [num] elements that are judged to be 
				[val], [func])					   equal to [val] by [func] in a row
		partition_point([it1], [it2], [func])	: returns an iterator to first element of partition two of range [it1]:[it2]; 
												  range shall be already partitioned; (use it cause its optimezed)
		is_sorted_until([it1], [it2])			: returns iterator to the first element in range [it1]:[it2]-1 that is not in a sorted position
		is_sorted_until([it1], [it2], [func])	: returns iterator to the first element in range [it1]:[it2]-1 that is not sorted by [func]
		lower_bound([it1], [it2], [val])		: returns iterator to the first element in range [it1]:[it2]-1 that is not LESS then [val];
												   optimized for random-access iterators
		lower_bound([it1], [it2], [val], [func]): returns iterator to the first element in range [it1]:[it2]-1 that is not LESS then [val] judged by [func];
												   optimized for random-access iterators
		upper_bound([it1], [it2], [val])		: returns iterator to the first element in range [it1]:[it2]-1 that is not GREATER then [val];
												   optimized for random-access iterators
		upper_bound([it1], [it2], [val], [func]): returns iterator to the first element in range [it1]:[it2]-1 that is not GREATER then [val] judged by [func];
												   optimized for random-access iterators
		equal_range([it1], [it2], [val])		: returns a pair of iterators, the first element pointing to the first element in range [it1]:[it2]
												   equal to [val], the second element pointing after the last element that is adjasent and equal first;
												   optimized for random-access iterators
		equal_range([it1], [it2], [val], [func]): returns a pair of iterators, the first element pointing to the first element in range [it1]:[it2]
												   judged by [func] to be equal to [val], the second element pointing after the last element that is 
												   adjacent and equal first; optimized for random-access iterators
		binary_search([it1], [it2], [val])		: returns true if any elements in the range [it1]:[it2]-1 is equal to [val];
												   optimized for random-access iterators
		binary_search([it1], [it2], 			: returns true if any elements in the range [it1]:[it2]-1 is judged to be equal to [val] by [func];
				[val], [func])					   optimized for random-access iterators
		is_heap_until([it1], [it2])				: returns an iterator to the first element in range [it1]:[it2]-1 which is not part of a heap; 
												   (not that heap; see BELOW)
		is_heap_until([it1], [it2], [func])		: returns an iterator to the first element in range [it1]:[it2]-1 which is not part of a heap  
												   organized by [func]; (not that heap; see BELOW)

	Transformation:		//add a tab
		for_each([it1], [it2], [func])				: applies [func] to each elements in range [it1]:[it2]
		transform([it1], [it2], [it3], [func])		: as ABOVE, but keeps them unchanged and stores the results at [it3]
		copy([it1], [it2], [it3])					: copies range [it1]:[it2]-1 to range [it3]:[it3]+(it2-it1)
		copy_n([it1], [num], [it2])					: copies range [it1]:[it1]+[num] to range [it2]:[it2]+[num]
		copy_if([it1], [it2], [it3], [func])		: copies elemets from range [it1]:[it2]-1 to range [it3]:[it3]+(it2-it1) if they return true to [func]
		copy_backward([it1], [it2], [it3])			: same as copy but it starts from the end; no, it does not reverse the order
		move([it1], [it2], [it3])					: moves [it1]:[it2] to range [it3]:[it3]+(it2-it1); parsely for noncopyable types; ?!
		move([container])							: moves [container] to what its assigned to (with '='); parsely for noncopyable types; ?!
		swap([container1], [container2])			: swaps the contents of the two containers
		swap([it1], [it2], [it3])					: swaps the contents of the two ranges
		iter_swap([it1], [it2])						: swaps the elemets pointed by the two iterators
		fill([it1], [it2], [val])					: replace all elements in range [it1]:[it2]-1 with [val]
		fill_n([it], [num], [val])					: replace all elements in range [it1]:[it1]+[num] with [val]
		generate([it1], [it2], [func])				: replace all elements in range [it1]:[it2]-1 with values returned by [func] on successive calls; 
													   [func] shall take no argument
		generate_n([it], [num], [func])				: replace all elements in range [it1]:[it1]+[num] with values returned by [func] on successive calls; 
													   [func] shall take no argument
		random_shuffle([it1], [it2])				: randomly rearanges elements in range [it1]:[it2]-1
		random_shuffle([it1], [it2], [func])		: randomly rearanges elements in range [it1]:[it2]-1 by random number generator [func]
		shuffle([it1], [it2], [func])				: as ABOVE, but [func] shall be an uniform random number generator (take no arguments)
		merge([it1], [it2], [it3], [it4], [it5])	: copies range [it1]:[it2]-1 and [it3]:[it4] to [it5] in a sorted order
		merge([it1], [it2], [it3], [it4], 			: copies range [it1]:[it2]-1 and [it3]:[it4] to [it5], sorted by [func]
					[it5], [func])
		inplace_merge([it1], [it2], [it3])			: sorts two adjesent, separately sorted ranges ([it1]:[it2]; [it2]:[it3]); efficient
		inplace_merge([it1], [it2], [it3], [func])	: sorts two adjesent, separately sorted ranges ([it1]:[it2]; [it2]:[it3]) by [func]; efficient
		set_union([it1], [it2], [it3], [it3], [it5]): copies unique elements from sorted ranges [it1]:[it2]-1 and [it3]:[it4]-1 to [it5]
		set_union([it1], [it2], [it3], 				: copies elements judged by [func] to be unique from sorted ranges [it1]:[it2]-1 and [it3]:[it4]-1 to [it5]
					[it3], [it5], [func])
		set_intersection([it1], [it2], [it3],		: copies elements that are present in both ranges [it1]:[it2]-1 and [it3]:[it4]-1 to [it5]
					[it3], [it5])
		set_intersection([it1], [it2], [it3],		: copies elements that are present in both ranges [it1]:[it2]-1 and [it3]:[it4]-1 to [it5];
					[it3], [it5], [func])			   [func] judges what values are considered equal
		set_difference([it1], [it2], [it3],			: copies elements that are present only in range [it1]:[it2]-1 , but not and [it3]:[it4]-1 to [it5]
					[it3], [it5])
		set_difference([it1], [it2], [it3],			: copies elements that are present only in range [it1]:[it2]-1 , but not and [it3]:[it4]-1 to [it5]
					[it3], [it5], [func])			   [func] judges what values are considered equal
		set_symmetric_difference([it1], [it2], 		: copies elements that are present only in one of the ranges [it1]:[it2]-1 and [it3]:[it4]-1 to [it5]
					[it3], [it4], [it5])
		set_symmetric_difference([it1], [it2], 		: copies elements that are present only in one of the ranges [it1]:[it2]-1 and [it3]:[it4]-1 to [it5];
					[it3], [it4], [it5], [func])	   [func] judges what values are considered equal

	Sorting:
		>transformation with logic
		sort([it1], [it2])					: sorts the elements in range [it1]:[it2]-1 into ascending order
		sort([it1], [it2], [func])			: sorts the elements in range [it1]:[it2]-1 by [func];
											   [func] must return bool, which signals whether the first argument is considered to go before the second
		stable_sort([it1], [it2])			: same as ABOVE, but equal elements keep their relative order
		stable_sort([it1], [it2], [func])	: same as ABOVE, but equal elements keep their relative order
		partial_sort([it1], [it2], [it3])	: rearanges the elements in range [it1]:[it3]-1 in such a way that range [it1]:[it2]-1 will be sorted 
								   			   into ascending order, but elements in range [it2]:[it3] will be left in no order
		partial_sort([it1], [it2], 			: rearanges the elements in range [it1]:[it3]-1 in such a way that range [it1]:[it2]-1 will be sorted 
					[it3], [func])			   by [func], but elements in range [it2]:[it3] will be left in no order; [func] must return bool
		partial_sort_copy([it1], [it2],		: same as ABOVE, but the original container is untouched and the results of the operation are stored at [it4]
					[it3], [it4])
		partial_sort_copy([it1], [it2],		: same as ABOVE, but the original container is untouched and the results of the operation are stored at [it4]
					[it3], [it4], [func])
		replace([it1], [it2], 				: replaces all elements in range [it1]:[it2]-1 with [val2] that are equal to [val1]
					[val1], [val2])
		replace_if([it1], [it2],			: replaces all elements in range [it1]:[it2]-1 with [val] that return true to [func]
					[func], [val])
		replace_copy([it1], [it2], [it3],	: copies range [it1]:[it2]-1 to range [it3]:[it3]+(it2-it1) but all elements equal to [val1] in the SOURCE
					[val1], [val2])			   range are replaces with [val2] in the DESTINATION
		replace_copy_if([it1], [it2], 		: copies range [it1]:[it2]-1 to range [it3]:[it3]+(it2-it1) but all elements that return true to [func]
					[it3], [func], [val])	   in the SOURCE range are replaces with [val] in the DESTINATION
		remove([it1], [it2], [val])			: packs the values equal to [val] to the start of the range, overwriting any elements do not equal to [val];
											   it does not resize the container, but returns an iterator to the last element that should be considered
											   part of the container
		remove_if([it1], [it2], [func])		: packs the values that return true to [func] the start of the range, overwriting any elements 
											   do not return true to [func]; it does not resize the container, but returns an iterator to 
											   the last element that should be considered part of the container
		remove_copy([it1], [it2], 			: same as copy, but leaving out any elements equaling [val]
					[it3], [val])
		remove_copy_if([it1], [it2], 		: same as copy, but leaving out any elements that does not return true to [func]
					[it3], [func])
		unique([it1], [it2])				: packs the unique values to the start of the range, overwriting any non-unique elements in the way,
											   it does not resize the container, but returns an iterator to the last element that should be considered
											   part of the container
		unique([it1], [it2], [func])		: ?!
		unique_copy([it1], [it2], [it3])	: copies unique elements from range [it1]:[it2]-1 to range [it3]:[it3]+x
		reverse([it1], [it2])				: reverses the order of elemennts in range [it1]:[it2]
		reverse_copy([it1], [it2], [it3])	: copy range [it1]:[it2]-1 to range [it3]:[it3]+(it2-it1) in reverse order
		rotate([it1], [it2], [it3])			: rotares around the elements in souch a way that [it2] becomes the new [it1], and elements wrap around
		rotate([it1], [it2], [it3], [it4])	: as ABOVE, but range [it1]:[it2]-1 will remain the same and range [it3]:[it3]+(it2-it1) will contain the results
		partition([it1], [it2], [func])		: rearranges range [it1]:[it2]-1 in such a way that elemets that return true to [func] will be 
											   packed to the front, and elements that return false will be packed to the back
		stable_partition([it1], [it2], 		: same as ABOVE, but the relative order of elements are preserved
					[func])
		partition_copy([it1], [it2], 		: copies elemets [it1]:[it2]-1 from that return true to [func] to [it3] and elements that 
					[it3], [it4] [func])	   return false to [it4]
		nth_elementh([it1], [it2], [it3])	: sorts only [it2] element of range [it1]:[it3]; meaning [it2] will be the element that it would be if the whole
											   container were sorted; all other elements in an unspecified position, but no element preceding [it2] is greater
											   and no element after is less than it
	Heap:
		>not that heap
		>a way to organize elements
		>the first element is always the one with the highest value
		make_heap([it1], [it2])			: makes heap out of range [it1]:[it2]
		make_heap([it1], [it2], [func])	: makes heap out of range [it1]:[it2], deciding which element has the highest using [func]
		push_heap([it1], [it2])			: adds element *[it2]-1 to heap
		push_heap([it1], [it2], [func])	: adds element *[it2]-1 to heap organized by [func]
		pop_heap([it1], [it2])			: srinks the heap by one, placing the highest value to [it2]-1
		pop_heap([it1], [it2], [func])	: srinks the heap by one, placing the highest value judged by [func] to [it2]-1

	Misc:
		count([it1], [it2], [val])		: returns the number of elements in that are equal to val
		count_if([it1], [it2], [val])	: returns the number of elements that return true to [func]
----------
-----------------
	<chrono>
-----------------
#include <chrono>
//(0x0000014d)➞


	>uses its own sub-namespace of std; ( std::chrono::[...] )
	
	Duration:
		template<<typename>, [ratio]> class duration
		>64 bit values by default
		¤default typedef of instantiations
			>hours
			>minutes
			>seconds
			>milliseconds
			>microseconds
			>nanoseconds
		-Member_functions:
			count()				: returns value in int
	
	Clocks:
		¤default typedef of instantiations
			>system_clock
			>steady_clock
			>high_resolution_clock
		functions inside the above namespaces:
			now()				: returns timestamp to current time

		 /------+--------------------\
		| Epoch | UTC 1970 January 1. |
		 \------+--------------------/

	Timepoints:
		template<[clock], [duration]> class time_point
		>point in time relative to a clock's epoch
		Member_functions:
			time_since_epoch()	: returns duration since epoch

	Functions:
		duration_cast<[duration1]>([duration2])		: return 

-----------------
	<codecvt>
-----------------
#include <codecvt>
//(0x0000014e)➞

	Enum:
		codecvt_mode:
			>bitmask type
			1 - little_endian
			2 - generate_header
			4 - consume_header

	Class_templates:
		codecvt_utf8<[w_char_type], [] = 0x10ffffUL,
					[codecvt_mode]>

----------
-----------------
	<complex>
-----------------
#include <complex>
//(0x0000014f)➞

	Classes:
		complex:
			complex<[num]>		: declares complex
			>holds complex number
			>a complex number looks like this:
				x + i*y
			  where x ∈ R, representing the "real" part of the number;
			  where i = √1 (i² = -1);
			  where y ∈ R, representing the amount if 'i'-s;
			Member_functions:
				real()	: returns x
				imag()	: returns y

	Functions:
		real([complex])		: returns x of [complex]
		imag([complex])		: returns y of [complex]
		abs([complex])		: returns the absolute value of [complex]; ie. the distance between (0, 0) and (x, y) ( √(x²+y²) )

----------
-------------------
	<exception>
-------------------
#include <stdexcept>
//(0x00000150)➞

	Functions:
		unexpected()				: whenever a function throws an exception that is not listed on its exception specifier this function
									   is automatically called; calls the current unexpected handler (see BELOW)
		get_unexpected()			: if set_unexpected() was called previously, it returns the current unexpected handler,
						 			   otherwise returns an unspecified value
		set_unexpected([func])		: sets the current unexpected handler to [func] (see ABOVE)
		terminate()					: default unexpected handler; calls the current terminate handler (which is abort() by default)
		get_terminate()				: if set_terminate() was called previously, it returns the current terminate handler,
						 			   otherwise returns an unspecified value
		set_terminate([func])		: sets the current terminate handler to [func] (see ABOVE)
		uncaught_exception()		: returns true if an exception was throw, but not yet handled
		current_exception()			: returns an exception_ptr that points to the currently handled exception or to a copy of it
		rethrow_exception(			: throws exception *[exception_ptr]
			[exception_ptr])
		make_exception_prt([...])	: returns an exception_ptr created from [...]
		throw_with_nested([...])	: throws a nested_exception combining the currently handled except and [...]
		rethrow_if_nested([...])	: throws the exception nested in [...] if [...] is derived from nested_exception

	Classes:
		exception: base class for standard exceptions; all objects thrown by components of the standard library are derived from this class; 
				 	therefore, all standard exceptions can be caught by catching this type by reference; 
				Derived Classes: (bad_cast, bad_exception, bad_function_call, bad_typeid, bad_weak_ptr, ios_base::failure, 
					logic_error, runtime_error, domain_error, future_error, invalid_argument, length_error, out_of_range,
					overflow_error, range_error, system_error, underflow_error, bad_array_new_length)
					>most are defined in other headers
				Member_functions:
					virtual what()		: returns a null terminated character sequence that may be used to identify the exception
		bad_exception: derived from exception (see ABOVE); if a function throws an exception that wasnt listed in its exception specifier
					    and unexpected() throws something that was also not listed, this exception is automatically thrown
		nested_exception: holds 2 exception, one as nested
				Member_functions:
					rethrow_nested()	: throws the nested exception
					nested_ptr()		: returns exception_ptr to nested exception	
		
	Typedefs:
		exception_prt			: smartpointer that can refer to an exception object
		terminate_handler		: void function pointer with no arguments
		unexpected_handler		: void function pointer with no arguments

------------
--------------------
	<functional>
--------------------
#include <functional>
//(0x00000151)➞

	Functions:
		bind([function], [args/placeholders])		: returns a function object which, when called calls [function] with [args/placeholders]
														{
															int divide(int x, int y){ return x/y; }
															[...]
															auto d = std::bind(divide, 10, 2);							d();			//returns 5						
															auto d2 = std::bind(divide, std::placeholders::_1, 2);		d2(100);		//returns 50
															//can also be called directly
															std::cout << std::bind(divide, 9, 3);
														}
		ref([...])								: returns reference_wrapper to [...] 
		cref([const ...])						: returns reference_wrapper to [const ...]
		mem_fun([member func])					: returns member function pointer to "function" pointer;
												   which can be called with an object pointer as its first 
												   argument and a custom one to call the member function with; 
												   ie. incompatible with member functions that take more then 1 argument
												   {
														struct meaning_of_life{ int answer(){ return 42; } my_meaning;
														auto give_answer = std::memfun(&meaning_of_life::answer);
														std::cout << give_answer(&my_meaning);
												   }
		mem_fn([member func])					: replacement for mem_fun() (see ABOVE); can take arbitrary number of arguments;
												   can be called with object
		not_fn([func])							: return functor that returns the opposite value of [func] (0 || 1)


	Class_templates:
		template class reference_wrapper<[...]>
				Member_functions:
					>no default constructor
					get()		: access reference wrapped element
		function<[...]>				: callable element wrapper
			>used for passing unknown type of functions (or functors) as arguments
			Member_functions:
				assign()		: ?!
				operator bool	: ??!!??!!
				target_type		: ?!
   				Target type_info: ?!
				target			: ?!
				swap			: ?!

	Operator classes (function classes):
		----------------------------------------------
		| 		Expresion		  |		 Effect		 |
		----------------------------------------------
		| negate<[type]>()        | - param			 |
		| plus<[type]>()          | param1 + param2	 |
		| minus<[type]>()         | param1 - param2	 |
		| multiplies<[type]>()    | param1 * param2	 |
		| divides<[type]>()       | param1 / param2	 |
		| modulus<[type]>()       | param1 % param2	 |
		| equal_to<[type]>()      | param1 == param2 |
		| not_equal_to<[type]>()  | param1 != param2 |
		| less<[type]>()          | param1 < param2	 |	//default sorting criterion
		| greater<[type]>()       | param1 > param2  |
		| less_equal<[type]>()    | param1 <= param2 |
		| greater_equal<[type]>() | param1 >= param2 |
		| logical_not<[type]>()   | ! param		   	 |
		| logical_and<[type]>()   | param1 && param2 |
		| logical_or<[type]>()    | param1 || param2 |
		| bit_and<[type]>()       | param1 & param2  |
		| bit_or<[type]>()        | param1 | param2  |
		| bit_xor<[type]>()       | param1 ^ param2  |
		----------------------------------------------

	Namespaces:
		placeholders		: contains unspecified amount of "placeholders" (_1, _2, [...] _N), which when used in std::bind(), 
							   when calling the returned object the appropriate argument passed in will take its place (see AT bind())

----------------
	<limits>
----------------
#include <limits>
//(0x00000152)➞

	Functions_templates:
		template class numeric_limits<[num]>
			Members:
				>static consexpr-s
				>most correspond to C <limits.h> or <float.h> macros
				is_specialized		: true if [num] a type that numeric_limits<> is specialized for { int, double...}
				min()				: minimum finite value
				max()				: maximum finite value
				lowest()			: for ints same as min(); for floating-points negative of max()
				digits				: for ints, the number of non sign bits; for floats the mantissa bits
				digits10			: number of decimal digits that can be rounded into a [class] floating-point type and back without loss of precision
				is_signed			: whether signed
				is_integer			: whether int
				is_exact			: whether uses exact representation
				radix				: base of representation
				epsilon()			: difference between 1 and the next representable value
				round_error()		: measure of maximum rounding error
				mix_exponent		: minimum value for the exponent that generates a normalized [class] floating-point type
				mix_exponent10		: minimum value for the exponent of base 10 that generates a normalized [class] floating-point type
				max_exponent		: maximum value for the exponent that generates a normalized [class] floating-point type
				max_exponent10		: maximum value for the exponent of base 10 that generates a normalized [class] floating-point type
				has_infinity		: whether can represent infinity
				has_quiet_NaN		: whether can represent quiet NAN
				has_signaling_NaN	: whether can represent signaling NAN
				infinity()			: representation of infinity
				quiet_NaN()			: representation of quiet NAN
				signaling_NaN()		: representation of signaling NAN
				has_denorm			: appropriate float_denorm_style (see BELOW)
				has_denorm_loss		: whether loss of accuracy is detected as a denormalization loss
				denorm_min()		: minimum positive denormalized value
				is_iec559			: whether IEC-559 or IEEE-754 standard
				is_bounded			: whether finite
				is_modulo			: whether adding two positive numbers to have the result wrap around and result in a smaller number
				traps				: whether trapping is implemented for [class]
				tinyness_before		: whether tinyness is detected before rounding
				round_syte			: appropriate float_round_style (see BELOW)
				{std::numeric_limits<int>::max();}

		Enums:
			float_round_style:
				round_indeterminate			: -1; rounding style cannot be determined at compile time
				round_toward_zero			: 0; rounding style toward zero
				round_to_nearest			: 1; rounding style to the nearest representable value
				round_toward_infinity		: 2; rounding style toward infinity
				round_toward_neg_infinity	: 3; rounding style toward negative infinity
			float_denorm_style
				denorm_indeterminate	: -1; denormalization style for the type cannot be determined at compile time
				denorm_absent			: 0; [class] type does not allow denormalized values
				denorm_present			: 1; [class] allows denormalized values

-----------
----------------
	<locale>
----------------
//(0x00000153)➞
#include <locale>




-----------
----------------
	<memory>
----------------
#include <memory>
//(0x00000154)➞

	Class_templates:
		Managed_pointers:
			Auto_pointer:
				template class auto_ptr<[...]>
				>automatically manages life span of the pointed object; call the destructor 
				  whenever the pointer is destroyed (goes out of scope); deprecated, use unique_ptr instead (see BELOW)
				template class auto_ptr_ref<[auto_ptr]>
				>auto_ptr reference wrapper
			Unique_pointer:
				template class unique_ptr<[class]>
				>automatically manages life span of the pointed object; call the destructor 
				  whenever the pointer is destroyed (goes out of scope); it should be the only managed pointer owning the object;
				  minimal to no overhead
					Member_functions:
						get()						: returns pointer to the pointed object; does NOT release ownership
						get_deleter()				: returns callable object that is used for deleting the pointed object
						release()					: returns pointer to the pointed object, releases owner ship and sets itself to NULL
						reset()						: destroys the pointed object and sets itself to NULL
						swap([unique_ptr])			: swaps contents with [unique_ptr]
			Shared_pointer:
				template class shared_ptr<[class]>
				>automatically manages life span of the pointed object; whenever the last shared_ptr to the pointed object
				  is deleted, the destructor of the pointed object is called; uses reference counting; 
				  assign only to make_shared() please (see BELOW)
					Member_functions:
						get()						: returns pointer to the pointed object; does NOT release ownership
						reset()						: destroys the pointed object and sets itself to NULL
						swap([shared_ptr])			: swaps contents with [unique_ptr]
						use_count()					: returns the number of shared_pointers pointing to the pointed object
						unique()					: returns whether this is the only shared_ptr pointing to the pointed object
						owner_before([shared_ptr])	: returns whether this shared_pointer precedes [shared_ptr]; implementation defined; 
													   used to make shared and weak pointers usable as keys in associative containers
			Weak_pointer:
				template class weak_ptr<[class]>
				>kinda a shared_ptr that doesnt increase the reference count
						reset()						: destroys the pointed object and sets itself to NULL
						swap([weak_ptr])			: swaps contents with [weak_ptr]
						use_count()					: returns the number of shared_pointers pointing to the pointed object
						owner_before([weak_ptr])	: returns whether this weak_pointer precedes [weak_ptr]; implementation defined; 
													   used to make shared and weak pointers usable as keys in associative containers
						expired()					: returns whether use_count() == 0, but in a (possibly) more efficient way
						lock()						: returns shared_ptr to the pointed object (or a default constructed shared_ptr if there's none),
													   and prevents the owner to realise as long as the returned object doesnt do so
		Allocation_related:
			Class_templates:
				Allocator:
					template class allocator<<typename>>
					>default allocator
					Member_typedefs:
						value_type		: alias of template parameter <typename>
						pointer			: <typename>*
						const_pointer	: const <typename>*
						reference		: <typename>&
						const_refrence	: const <typename>&
						size_type		: size_t
						difference_type	: ptrdiff_t
					Member_struct_templates:
						rebind<[typename2]>
							Member_typedefs:
								other	: allocator<[typename2]>
					Member_functions:
						address([&object])							: returns address of [&object]
						allocate([size_type], [const void*] = 0)	: allocates memory for [size_type] [value_type]s; returns a pointer to the first element;
																	   [const void*] shall be a value obtained from a previous call, which hasn't been freed yet;
																	   [const void*] will not be overwritten, but rather the adjacent memory will get tested
																	   for suitableness, which if is suitable is a performance improvement
						deallocate([pointer], [size_type])			: releases [size_type] [value_type] memory
						max_size()									: returns the number of elements that could be potentially allocated by allocate()
						construct([pointer], [args])				: constructs a value_type at [pointer] with [args]
						destroy([pointer])							: destructs object at [pointer]
			Structs:
				allocator_arg_t				: empty struct-s used for differentiating overloads
			Objects:
				allocator_arg		: object of allocator_arg_t (see ABOVE)


		Struct_templates:
			Allocator_traits:
				template class allocator_traits<[allocator]>
				Member_typedefs:
					allocator_type	: alias of template parameter [allocator]
					value_type		: allocator_type::value_type
					pointer			: allocator_type::pointer
					const_pointer	: allocator_type::const_pointer
					void_pointer	: ?!
	Functors:
		template class default_delete<[class]>
		>deletes whatever the passed in pointer points to

	Function_templates:
		template class make_shared<[class]>([args])
			>constructs shared pointer to an object of [class] constructed with [args];
			  faster then calling the shared_ptr's constructor
		template class make_shared<[class]>([args])
			>constructs unique pointer to an object of [class] constructed with [args]

-----------
-------------
	<new>
-------------
#include <new>
//(0x00000155)➞
-----------
-----------------
	<numeric>
-----------------
#include <numeric>
//(0x00000156)➞
-----------
-----------------
	<random>
-----------------
#include <random>
//(0x00000157)➞

	Generators:
		>random number engines
		Class_templates:
			linear_congruential_engine
			mersenne_twister_engine
			subtract_with_carry_engine
			discard_block_engine
			independent_bits_engine
			shuffle_order_engine
		Classes:
			default_random_engine
			minstd_rand
			minstd_rand0
			mt19937
			mt19937_64
			ranlux24_base
			ranlux48_base
			ranlux24
			ranlux48
			knuth_b
			random_device	//true random number generator (or not if the hardware doesnt support it)

	Distributions:
		>functor that takes a generator as an argument and uses it to create distributions of it
		uniform_int_distribution
		uniform_real_distribution
		bernoulli_distribution	//all are templates but this
		binomial_distribution
		geometric_distribution
		negative_binomial_distribution
		poisson_distribution
		exponential_distribution
		gamma_distribution
		weibull_distribution
		extreme_value_distribution
		normal_distribution
		lognormal_distribution
		chi_squared_distribution
		cauchy_distribution
		fisher_f_distribution
		student_t_distribution
		discrete_distribution
		piecewise_constant_distribution
		piecewise_linear_distribution

	Mics:
		seed_seq
		generate_canonical

	{
		ranlux48 randy;
		bernoulli_distribution bnard(0.5);
		auto dice = bind(bnard, randy);
	}

---------------
	<ratio>
---------------
#include <ratio>
//(0x00000158)➞

	Class_templates:
		>meant to be typedefed rather then actually create instances of
		template class ratio<[num1], [num2] = 1>
			>{ typedef ratio<1, 2> half; cout << half::num << '/' << half::den << endl; }
			>the denominator cant be 0
			>will always simplify { 4/8 -> 1/2 }
			-Members:
				num(erator)
				den(ominator)
		arthimetric:
			>all have members "num" and "den"
			template class ratio_add<[ratio class1], [ratio class2]>		: holds the value of the sum of [ratio class1] and [ratio class2]
			template class ratio_subtract<[ratio class1], [ratio class2]>	: holds the value of the difference of [ratio class1] and [ratio class2]
			template class ratio_multiply<[ratio class1], [ratio class2]>	: holds the value of the multiplication of [ratio class1] and [ratio class2]
			template class ratio_divide<[ratio class1], [ratio class2]>	: holds the value of the dividition of [ratio class1] with [ratio class2]
		comperason:
			>all have a member "value"
			template class ratio_equal<[ratio class1], [ratio class2]>			: whether [ratio class1] and [ratio class2] are equal
			template class ratio_not_equal<[ratio class1], [ratio class2]>		: whether [ratio class1] and [ratio class2] are NOT equal
			template class ratio_less<[ratio class1], [ratio class2]>			: whether [ratio class1] is less then [ratio class2]
			template class ratio_less_equal<[ratio class1], [ratio class2]>	: whether [ratio class1] is less then or equal to [ratio class2]
			template class ratio_greater<[ratio class1], [ratio class2]>		: whether [ratio class1] is greater then [ratio class2]
			template class ratio_greater_equal<[ratio class1], [ratio class2]>	: whether [ratio class1] is greater then or equal to [ratio class2]			
--------
---------------
	<regex>
---------------
#include <regex>
//(0x00000159)➞

	Namespaces:
		regex_constants:
			Bitmasks:
				-used as [flags] parameter of basic_regex.assign():
					icase		: case insensitive
					nosubs		: no subexpressions
					optimize	: optimize for matching rather than object construction
					collate		: local sensitive
					-syntax:
						>NOTE: one and only one shall be specified
						ECMAScript	: ECMAScript; default
						basic		: basic POSIX
						extended	: extended POSIX
						awk			: Awk POSIX
						grep		: grep POSIX
						egrep		: egrep POSIX
				-used as [?!] parameter of regex_match(), regex_search(), regex_replace,
				  regex_iterator constructor or regex_token_iterator constructor
					match_default	: default
					¤match_not_[e,b]
						>match the literal, humanly logical [*] and not the corresponding char
						macth_not_bol		: not Beginning-Of-Line; { '^' }
						match_not_eol		: not End-Of-Line; nor '\n' { '$' }
						match_not_bow		: not Beginning-Of-Word; { '\b' }
						match_not_eow		: not End-Of-Word; { '\b' }
					match_any			: any match is acceptable if multiple matches are possible
					match_not_null		: do not match empty sequences
					match_continuous
					match_prev_avail
					format_default	
					format_sed
					format_no_copy		: non-matching sequences are not copied when replacing
					format_first_only	: replace first occurrence only
				-
					error_collate
					error_ctype
					error_escape 
					error_backref
					error_brack
					error_paren
					error_brace
					error_badbrac
					error_range
					error_space
					error_badrepeat
					error_complexity
					error_stack	
	Class_templates:
		regex_traits:
			regex_traits<<typename>> [name]		: declares regex_traits
				><typename> is the char_type to be used
			Member_typedefs:
				char_type		: alias of template parameter <typename>
				string_type		: basic_string<[char_type]>
				locale_type		: the standard locale type
				char_class_type	: a bitmask type; ?!
			Member_functions:
				length([char_type*])					: returns size of C-style string [char_type*]
				translate([char_type*])					: returns [char_type*]; meant to be overridden
				translate_nocase([char_type*])			: returns case insensitive version of [char_type*]; by default uses cctype/tolower()
				transform([forward_iterator1],			: returns string_type created from [forward_iterator1, forward_iterator2]
							[forward_iterator2])
				transform_primary([forward_iteratorr1], : ?!
							[forward_iteratorr2])
		basic_regex:
			regex<<typename>, [traits] = regex_traits<typename>> [name]		: declares regex
			Member_typedefs:
				value_type		: <typename>
				traits_type		: [traits]
				string_type		: [traits]::string_type
				flag_type		: regex_constants::syntax_option_type
				locale_type		: [traits]::locale_type
			Member_functions:
				assign(<string>, [flags])
	Typedefs:
		regex 	: basic_regex<char>

	Exceptions:
		regex_error		: thrown when ?!

--------
---------------------------
		<stdexcept>
---------------------------
#include <stdexcept>
//(0x0000015a)➞
--------
------------------------------
		<system_errno>
------------------------------
#include <system_errno>
//(0x0000015b)➞
--------
---------------------------
		<typeindex>
---------------------------
#include <typeindex>
//(0x0000015c)➞
--------
--------------------------
		<typeinfo>
--------------------------
#include <typeinfo>
//(0x0000015d)➞
--------
-----------------------------
		<type_traits>
-----------------------------
#include <type_traits>
//(0x0000015e)➞
--------
-------------------------
		<utility>
-------------------------
#include <utility>
//(0x0000015f)➞

#define 3th_party_cpp_libs
#define 3th_party_c++_libs::: //(0x000001e4)➞
--------
--------------
	utfcpp
--------------
#include <utf8.h>
//(0x00000162)➞

	using namespace utf8;

	Functions:
		string utf8to16(<string>)
		string utf8to32(<string>)	// NOTE: wchar_t is 32 bits wide with GCC
		string utf16to8(<string>)
		string utf16to32(<string>)
		string utf32to8(<string>)
		string utf32to16(<string>)

	Function_templates:
		typename find_valid(<typename>, <typename>)

	IN_PRACTICE:
		Hello_world:
		{ // Convert utf8 string wstring
			#include <iostream.h>
			#include <fstream>
			#include <vector>
			#include <utf8.h>
			
			using namespace std;
			
			signed main(int argc, char* argv[]){
				ifstream f("my_utf8_file.txt");
				vector<string> vstr;
				string str;
				// read
				while(getline(f, str)){
					if(utf8::is_valid(str)){
						vstr.push_back(str);
					}
				}

				// convert
				vector<u32string> vws;
				for(auto i : vs){
					vws.push_back(utf8::utf8to32(i));
				}

				//print
				for(auto i : vws){
					wcout << i << endl;
				}

				return 0;
		  	}
		}	

----------------
	libmagic
----------------
#include <magic.h>
//(0x00000163)➞

	>used for gathering file informations

	Functions:
		magic_open([flags])				: returns magic_t according to [flags]
		magic_load([magic_t], [char*])	: loads [magic_t] with [char*] database; pass NULL to use the default database
		magic_close([magic_t])			: closes magic database used by [magic_t]
		magic_file([magic_t], [char*])	: returns char* representing the eval of file [char*] with [magic_t]
		
	Structs:
		magic_t

	Masks:
		¤[flags]

	IN_PRACTICE:
		Hello_world:
		{ //Read a file name from the user and printf its MIME type
			#include <stdio.h>
			#include <magic.h>
			
			using namespace std;
			
			signed main(int argc, char* argv[]){
				magic_t m;
				const char* type;
				char user_filename[256];
			
				m = magic_open(MAGIC_MIME_TYPE);
				if( magic_load(m, NULL) == -1){ throw "oups";}
			
				scanf("%s", user_filename);
			
				type = magic_file(m, user_filename);
				if(type == NULL){ printf("%s\n", magic_error(m)); }
				printf("\"%s\"\n", type);
			
				return 0;
		  	}
		}	
---------------------------------------------------------
#define boost:::: //(0x000001e5)➞\
I------------------------------------------------------------------------------------------\
I						 ______  _____  _____  _____  _____ 							   \
I						 | ___ \|  _  ||  _  |/  ___||_   _|							   \
I						 | |_/ /| | | || | | |\ `--.   | |  							   \
I						 | ___ \| | | || | | | `--. \  | |  							   \
I						 | |_/ /\ \_/ /\ \_/ //\__/ /  | |  							   \
I						 \____/  \___/  \___/ \____/   \_/  	(boost)					   \
I------------------------------------------------------------------------------------------I
//(0x0000016a)➞
----------------
   random.hpp
----------------
#include <boost/random.hpp>
//(0x0000016b)➞

	using namespace boost;
	
	https://www.boost.org/doc/libs/1_66_0/doc/html/boost_random/reference.html
	
	engines:
		-reference has a nice list
		-fastest: mt11213b
		-bestest: ranlux64_4
	
	base:
		[random number generator engine] [object name];
		[object name]() 	: gives random number;
		[object name].seed(): takes int, changes seed, just like srand(); 

		uniform_int<> [object name]([int min], [int max]) : min-max value variable

		variate_generator< [random number generator engine], [uniform_int or ???] > [object name]( [engine object name], [uniform_int object name]);
---------------------
	ios_state.hpp
---------------------
#include <boost/io/ios_state.hpp>
//(0x0000016c)➞

	 boost::io::ios_flags_saver  [name]([cout]);		: this object saves the state of [cout] and restores it when ever its deconstructed

---------------------
	filesystem.hpp
---------------------
#include <boost/filesystem.hpp>
//(0x0000016d)➞

	>enclosed in the "boost::filesystem" namespace

	Functions:
		>these functions all follow the logic of ĐPOSIX statĐ
		current_path()					: returns [path] representing ${PWD} (the current working directory)
		exists([path])					: whether [path] exists
		is_directory([path])			: whether [path] is a directory
		is_regular_file([path])			: whether [path] is a normal file
		is_symlink()					: whether [path] is a symlink
		is_other()						: whether [path] is neither a directory, a normal file or a symlink
		is_empty()						: whether [path] is a empty file
		file_size([path])				: returns size of [path]
		create_directory([path])		: creates directory named [path]
		status([path])					: returns filestatus object constructed from [path]; symlinks are NOT followed
		symlink_status([path])			: returns filestatus object constructed from [path]; symlinks are followed

	Classes:
		file_status		: stores file status information
			member_functions:
				>these functions correspond to global funtions (see ABOVE)
				exists([path])					: whether [path] exists
				is_directory([path])			: whether [path] is a directory
				is_regular_file([path])			: whether [path] is a normal file
				is_symlink()					: whether [path] is a symlink
				is_other()						: whether [path] is neither a directory, a normal file or a symlink
				is_empty()						: whether [path] is a empty file

	Class_templates:
		path<<string>, [traits]>	: represents a file path
			>fluidly constructed from C-string/std::string;
			  therefor when a path must be passed and a string will also do
			>can include reference to current and parent directory ("."; "..")
			Member_typedefs:
				typedef basic_path<String, Traits> path_type
				typedef String string_type
				typedef typename String::value_type value_type
				typedef Traits traits_type
				typedef typename Traits::external_string_type external_string_type
			Member_functions:
				clear()								: 
				swap([path])						: swaps contents with [path]
				remove_filename()					: if has_parent_path() is true, remove the last filename and trailing '/'s, else do nothing
				replace_extention(<string> = "")	: replaces file extension with <string>
				string()							: returns stored path as string_type
				empty()								: returns string().empty() (see ABOVE)
				file_string()						: returns stored path formatted in a operating system native format file name format
													   (which is the same as string() in Linux and Windows)
				directory_string()					: returns stored path formated in a operating system native format directory name format
													   (which is the same as string() in Linux and Windows)
				filename()							: returns filename only (like ĐbasenameĐ; see AT "/Linux/File System/basename")
				operators:
					/		: appends path with child
							   { path base("mydir");
								 path file("myfile");
								 path full( base / file );		// full == "mydir/myfile"
							   }
		directory_iterator<[path]>		: type for easy iterating over of files in a directory
			Member_functions:
				path()			: returns path currently pointed at
			Operators:
				++				: steps the next file, hence modifying path()s value
		basic_directory_entry<[path]>	: 
			members:
				basic_path m_path			  :
				file_status  m_status		  :
				file_status  m_symlink_status :
				NOTE: the file_status object cache values

---------------------------------
	integer/common_factor.hpp
---------------------------------
#include <boost/integer/common_factor.hpp>
//(0x0000016e)➞

	gcd([num], [num])		: returns the "Greatest Common Divisor" of the 2 arguments
	lcm([num], [num])		: returns the "Least Common Multiple" of the 2 arguments


---------------------------------------------------------
#define SDL\
#define SDL2:::: //(0x000001e6)➞\
I--------------------------------------------------------------------------\
I				   ______   ______   _____      _____   				   \
I				 .' ____ \ |_   _ `.|_   _|    / ___ `. 				   \
I				 | (___ \_|  | | `. \ | |     |_/___) | 				   \
I				  _.____`.   | |  | | | |   _  .'____.' 				   \
I				 | \____| | _| |_.' /_| |__/ |/ /_____  				   \
I				  \______.'|______.'|________||_______| 	(sdl2)		   \
I																		   \
I--------------------------------------------------------------------------I
	#include <SDL2/SDL.h>
	#include <SDL2/SDL_image.h>						//marked with '@'; not sure why you would use one without the other tho

    >"Simple Directmedia Layer 2"
    >NOTE: as it says its a ĐĐmedia layerĐĐ if anyone tells you to make games in it,
            stab them on the spot as they are the literal devil;
            SDL can be used to develop high performance engines,
            please do not develop high performance engines for your own sake;
            try raylib instead

	INITIALIZATION: //(0x000001e7)➞
		SDL_Init([flag])				: initializes SDL; must be called to be able to use (most of) SDL
			----------------------------------------------------------
			| Flag 					  |		Initialized subsystem(s) |
			----------------------------------------------------------
			| SDL_INIT_HAPTIC 		  |		Force feedback subsystem |
			| SDL_INIT_AUDIO 		  |		Audio subsystem			 |
			| SDL_INIT_VIDEO 		  |		Video subsystem			 |
			| SDL_INIT_TIMER 		  |		Timer subsystem			 |
			| SDL_INIT_JOYSTICK 	  |		Joystick subsystem		 |
			| SDL_INIT_EVERYTHING 	  |		All subsystems			 |
			| SDL_INIT_NOPARACHUTE 	  |		Dont catch fatal signals |
			----------------------------------------------------------
				>use '|' to initialize more at a time { SDL_Init(SDL_INIT_AUDIO | SDL_INIT_VIDEO); }
		>SDL2 redirects stdout and stderr to appropriate files; to re-redirect it do:
			freopen("CON", "w", stdout);
			freopen("CON", "w", stderr);

	WINDOW_RELATED_STUFF: //(0x000001e8)➞
		SDL_Window* [name]				 : equals NULL if window could not be created;
		SDL_CreateWindow( [char*], [int-1] [int-2],						: title, x cord, y cord
							[int width], [int height], [WINDOW FLAG]);
			[WINDOW FLAGS]:
					SDL_WINDOW_FULLSCREEN				/**< fullscreen window */
					SDL_WINDOW_OPENGL					/**< window usable with OpenGL context */
					SDL_WINDOW_SHOWN					/**< window is visible */
					SDL_WINDOW_HIDDEN					/**< window is not visible */
					SDL_WINDOW_BORDERLESS				/**< no window decoration */
					SDL_WINDOW_RESIZABLE				/**< window can be resized */
					SDL_WINDOW_MINIMIZED				/**< window is minimized */
					SDL_WINDOW_MAXIMIZED				/**< window is maximized */
					SDL_WINDOW_INPUT_GRABBED			/**< window has grabbed input focus */
					SDL_WINDOW_INPUT_FOCUS				/**< window has input focus */
					SDL_WINDOW_MOUSE_FOCUS				/**< window has mouse focus */
					SDL_WINDOW_FULLSCREEN_DESKTOP		/**<  == SDL_WINDOW_FULLSCREEN */
					SDL_WINDOW_FOREIGN					/**< window not created by SDL */
					SDL_WINDOW_ALLOW_HIGHDPI			/**< window should be created in high-DPI mode if supported.
															 On macOS NSHighResolutionCapable must be set true in the
															 application's Info.plist for this to have any effect. */
					SDL_WINDOW_MOUSE_CAPTURE			/**< window has mouse captured (unrelated to INPUT_GRABBED) */
					SDL_WINDOW_ALWAYS_ON_TOP			/**< window should always be above others */
					SDL_WINDOW_SKIP_TASKBAR 			/**< window should not be added to the taskbar */
					SDL_WINDOW_UTILITY					/**< window should be treated as a utility window */
					SDL_WINDOW_TOOLTIP					/**< window should be treated as a tooltip */
					SDL_WINDOW_POPUP_MENU				/**< window should be treated as a popup menu */
					SDL_WINDOW_VULKAN					/**< window usable for Vulkan surface */
			{
				SDL_Window* window = SDL_CreateWindow( "MyWindow",  SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
														1920, 1080, SDL_WINDOW_SHOWN)
			}
		SDL_SetWindowTitle([SDL_Window], [c-string])	: sets window title;
		SDL_RaiseWindow([SDL_Window]) 					: Use this function to raise a window above other windows and set the input focus;										
		SDL_DestroyWindow([SDL_Window])					: always should be called;

----------------------
	<SDL_renderer.h>
----------------------
#include <SDL_renderer.h>
//(0x00000172)➞
					
		SDL_Renderer* [name];

	Functions:
		Managing:
			SDL_CreateRenderer([SDL_Window instance], [int index (???)], [RENDERER FLAGS])			:returns pointer to renderer
				[RENDERER FLAGS]:
					SDL_RENDERER_SOFTWARE						/**< The renderer is a software fallback */
					SDL_RENDERER_ACCELERATED					/**< The renderer uses hardware acceleration */
					SDL_RENDERER_PRESENTVSYNC					/**< Present is synchronized with the refresh rate */
					SDL_RENDERER_TARGETTEXTURE					/**< The renderer supports rendering to texture */
				{ SDL_Renderer* renderer = SDL_CreateRenderer( window, -1, NULL);}
			SDL_RenderCopy([SDL_Renderer* instance], [SDL_Texture* instance], 	: 1 puts out the texture fullsized; 2 will adjust texture to rect size;
				[SDL_Rect reference {1}], [SDL_Rect reference {2}]);
			SDL_RenderClear([renderer]);					: empties the [renderer]; sets the whole thing to RendererDrawColor;
			SDL_RenderPresent([renderer]);					: displays [renderer] in the window it belongs to		
			SDL_DestroyRenderer( [SDL_Renderer instance] );	: always should be called;
		Drawing:
			>the passed in renderer is always the renderer used for rendering (duh)
			SDL_SetRendererDrawColor([SDL_Renderer], [int red], [int green], [int blue], [int alpha channel; ==opicity; usually 255])
						int color = [int variable] % 255;
						Use this function to set the color used for drawing operations (Rect, Line and Clear).
						Returns 0 on success or a negative error code on failure;	
			SDL_RenderDrawLine([SDL_Renderer*], [int_x1], [int2], [int3], [int4])	: draws single pixel wide line from point [[int1]; [int2]] to point [[int3]; [int4]]
			SDL_RenderDrawLines([SDL_Renderer*], [SDL_Point*], <int>)				: draws single pixel wide lines connecting the lines in point array [SDL_Point] in accending order; count is the number of ponts from the array to connect
			SDL_RenderDrawRect([SDL_Renderer*], [SDL_Rect*])						: draws single pixel wide out line of [SDL_Rect]
			SDL_RenderFillRect([SDL_Renderer*], [SDL_Rect*])						: draws [SDL_Rect]
			SDL_RenderDrawRects([SDL_Renderer*], [SDL_Rect*], <int>)				: draws single pixel wide out line of the first <int> rectangles at array [SDL_Rect*]
			SDL_RenderFillRects([SDL_Renderer*], [SDL_Rect*], <int>)				: draws the first <int> rectangles at array [SDL_Rect*]

--------------------
	<SDL_Rect.h>
--------------------
#include <SDL_rect.h>
//(0x00000173)➞

	Stucts:
		SDL_Point [name]		: initializes [name] point
			Members:
				int x
				int y
		SDL_FPoint [name]		: initializes [name] floating-point point	//haha
			Members:
				float x
				float y
		SDL_Rect [name]			: initializes [name] rectangle
			Members:
				int x				: the x coordinate of the lower left corner
				int y				: the y coordinate of the lower left corner
				int w
				int h
		SDL_FRect [name]		: initializes [name] floating-point rectangle
			Members:
				float x				: the x coordinate of the lower left corner
				float y				: the y coordinate of the lower left corner
				float w
				float h

	Functions:
		SDL_PointInRect([SDL_Point], [SDL_Rect])	: returns an SDL_bool indicating whether [SDL_Point] is inside [SDL_Rect]
			>the logic is "return ( (p->x >= r->x) && (p->x < (r->x + r->w)) && (p->y >= r->y) && (p->y < (r->y + r->h)) ) ? SDL_TRUE : SDL_FALSE;",
			  so the upper and right border are not actually considered part of the rectangle
			{"logical table" for a 4x4 rect:
				4░░░░
				3███░
				2███░
				1███░
				01234
			}
		SDL_RectEmpty([SDL_Rect])					: returns an SDL_bool indicating whether [SDL_Rect] is smaller or equals to 0x0
		SDL_RectEquals([SDL_Rect1], [SDL_Rect2])	: returns an SDL_bool indicating whether all elements of the two rectangles are equal

----------------

	SURFACE:
		SDL_Surface* [name]
			
		SLD_Surface* SDL_LoadBMP([file (C style string)]);			: [file] must be bit map (.bmp)
@		SLD_Surface* IMG_Load([file (C style string)]);				: [file] can be almost any image file (.png && .jpg included)
			
	TEXTURE:
		SDL_Texture* [name];
		SDL_CreateTextureFromSurface([SDL_Renderer* instance], [SDL_Surface* instance]);
		SDL_QueryTexture([*texture], NULL, NULL, &[int1], &[int2]);		: changes [int1]'s value to [textures]'s width, and [int2]'s value 
																		to [texture]'s hight; meant to be used with a rect's .w and .h
		SDL_RenderCopy([renderer], [texture], &[rent1], &[rect2]);		: copy [texture] to [renderer]; [rect1] determines how much will be showed of
																		the texture, think of it as it were placed over the texture, what ever is under
																		it will be shown; [rect2] determines where it will be displayed, 
																		and how big will it be; passing NULL as [rect1] will make the renderer use
																		the entire texture; passing NULL as [rect2] will use the entire renderer for display
		SDL_RenderCopyEx([...], [...], [...], [...], [rotation], [point], [flip]);
			-------------------------------------------------------		: the first 4 parameters are the same as ABOVE; int [rotation] rotates the image;
			| [flip] value 		  | Purpose						  |		[point] is the center point of the rotation; [flip] is for flipping
			|---------------------|-------------------------------|
			| SDL_FLIP_NONE		  | no flipping					  |
			| SDL_FLIP_HORIZONTAL | flip the texture horizontally |
			| SDL_FLIP_VERTICAL   | flip the texture vertically   |
			-------------------------------------------------------

	EVENT:	
		SDL_Event event;
			types:
				SDL_FIRSTEVENT						/**< Unused (do not remove) */
				SDL_QUIT							: when the little 'x' is clicked
		SDL_PollEvent(&[event]);					: pulls event if one is available; changes [event].type

	Shared:
		SDL_CreateWindowAndRenderer( [int width], [int height], [window flags (see ABOVE)], 
										[SDL_Window reference], [SDL_Renderer reference]); 

	Misc:
		SDL_Delay( <int> );			: waits/sleep <int> MILLISECONDS(!);
		SDL_Quit();					: quites SDL; does not quit the program


	### SDL2 Hello World ###    //(0x00000174)➞
		{ // sdl_hw.c
			// @COMPILECMD gcc $@ -o sdl_hw.out -Wall -Wpedantic $(pkg-config --cflags --libs sdl2)
			#include <SDL.h>

			signed main(int argc, char* argv[]) {
				SDL_Init(SDL_INIT_VIDEO);

				SDL_Window*   window   = SDL_CreateWindow("HW", 0, 0, 800, 800, SDL_WINDOW_SHOWN);
				SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

				SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
				SDL_RenderClear(renderer);

				SDL_RenderPresent(renderer);

				while (1) { ; }

				return 0;
			}
		}
	#

---------------------------
#define raylib
--------------
    Raylib: //(0x000001e9)➞
--------------

    >easy to use graphical library
    >specifically made for indie video game development
    >just read the header bro
    >NOTE: i cant create a better cheatsheet than the offical raylib one;
            after 5 years this is the first time; well done raypeople;
            instead i will copy paste it and convert it to fit cdd

module: rcore
    // Window-related functions
    void InitWindow(int width, int height, const char *title);  // Initialize window and OpenGL context
    void CloseWindow(void);                                     // Close window and unload OpenGL context
    bool WindowShouldClose(void);                               // Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
    bool IsWindowReady(void);                                   // Check if window has been initialized successfully
    bool IsWindowFullscreen(void);                              // Check if window is currently fullscreen
    bool IsWindowHidden(void);                                  // Check if window is currently hidden (only PLATFORM_DESKTOP)
    bool IsWindowMinimized(void);                               // Check if window is currently minimized (only PLATFORM_DESKTOP)
    bool IsWindowMaximized(void);                               // Check if window is currently maximized (only PLATFORM_DESKTOP)
    bool IsWindowFocused(void);                                 // Check if window is currently focused (only PLATFORM_DESKTOP)
    bool IsWindowResized(void);                                 // Check if window has been resized last frame
    bool IsWindowState(unsigned int flag);                      // Check if one specific window flag is enabled
    void SetWindowState(unsigned int flags);                    // Set window configuration state using flags (only PLATFORM_DESKTOP)
    void ClearWindowState(unsigned int flags);                  // Clear window configuration state flags
    void ToggleFullscreen(void);                                // Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
    void ToggleBorderlessWindowed(void);                        // Toggle window state: borderless windowed (only PLATFORM_DESKTOP)
    void MaximizeWindow(void);                                  // Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
    void MinimizeWindow(void);                                  // Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
    void RestoreWindow(void);                                   // Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
    void SetWindowIcon(Image image);                            // Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)
    void SetWindowIcons(Image *images, int count);              // Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)
    void SetWindowTitle(const char *title);                     // Set title for window (only PLATFORM_DESKTOP and PLATFORM_WEB)
    void SetWindowPosition(int x, int y);                       // Set window position on screen (only PLATFORM_DESKTOP)
    void SetWindowMonitor(int monitor);                         // Set monitor for the current window
    void SetWindowMinSize(int width, int height);               // Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
    void SetWindowMaxSize(int width, int height);               // Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
    void SetWindowSize(int width, int height);                  // Set window dimensions
    void SetWindowOpacity(float opacity);                       // Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)
    void SetWindowFocused(void);                                // Set window focused (only PLATFORM_DESKTOP)
    void *GetWindowHandle(void);                                // Get native window handle
    int GetScreenWidth(void);                                   // Get current screen width
    int GetScreenHeight(void);                                  // Get current screen height
    int GetRenderWidth(void);                                   // Get current render width (it considers HiDPI)
    int GetRenderHeight(void);                                  // Get current render height (it considers HiDPI)
    int GetMonitorCount(void);                                  // Get number of connected monitors
    int GetCurrentMonitor(void);                                // Get current connected monitor
    Vector2 GetMonitorPosition(int monitor);                    // Get specified monitor position
    int GetMonitorWidth(int monitor);                           // Get specified monitor width (current video mode used by monitor)
    int GetMonitorHeight(int monitor);                          // Get specified monitor height (current video mode used by monitor)
    int GetMonitorPhysicalWidth(int monitor);                   // Get specified monitor physical width in millimetres
    int GetMonitorPhysicalHeight(int monitor);                  // Get specified monitor physical height in millimetres
    int GetMonitorRefreshRate(int monitor);                     // Get specified monitor refresh rate
    Vector2 GetWindowPosition(void);                            // Get window position XY on monitor
    Vector2 GetWindowScaleDPI(void);                            // Get window scale DPI factor
    const char *GetMonitorName(int monitor);                    // Get the human-readable, UTF-8 encoded name of the specified monitor
    void SetClipboardText(const char *text);                    // Set clipboard text content
    const char *GetClipboardText(void);                         // Get clipboard text content
    void EnableEventWaiting(void);                              // Enable waiting for events on EndDrawing(), no automatic event polling
    void DisableEventWaiting(void);                             // Disable waiting for events on EndDrawing(), automatic events polling

    // Cursor-related functions
    void ShowCursor(void);                                      // Shows cursor
    void HideCursor(void);                                      // Hides cursor
    bool IsCursorHidden(void);                                  // Check if cursor is not visible
    void EnableCursor(void);                                    // Enables cursor (unlock cursor)
    void DisableCursor(void);                                   // Disables cursor (lock cursor)
    bool IsCursorOnScreen(void);                                // Check if cursor is on the screen

    // Drawing-related functions
    void ClearBackground(Color color);                          // Set background color (framebuffer clear color)
    void BeginDrawing(void);                                    // Setup canvas (framebuffer) to start drawing
    void EndDrawing(void);                                      // End canvas drawing and swap buffers (double buffering)
    void BeginMode2D(Camera2D camera);                          // Begin 2D mode with custom camera (2D)
    void EndMode2D(void);                                       // Ends 2D mode with custom camera
    void BeginMode3D(Camera3D camera);                          // Begin 3D mode with custom camera (3D)
    void EndMode3D(void);                                       // Ends 3D mode and returns to default 2D orthographic mode
    void BeginTextureMode(RenderTexture2D target);              // Begin drawing to render texture
    void EndTextureMode(void);                                  // Ends drawing to render texture
    void BeginShaderMode(Shader shader);                        // Begin custom shader drawing
    void EndShaderMode(void);                                   // End custom shader drawing (use default shader)
    void BeginBlendMode(int mode);                              // Begin blending mode (alpha, additive, multiplied, subtract, custom)
    void EndBlendMode(void);                                    // End blending mode (reset to default: alpha blending)
    void BeginScissorMode(int x, int y, int width, int height); // Begin scissor mode (define screen area for following drawing)
    void EndScissorMode(void);                                  // End scissor mode
    void BeginVrStereoMode(VrStereoConfig config);              // Begin stereo rendering (requires VR simulator)
    void EndVrStereoMode(void);                                 // End stereo rendering (requires VR simulator)

    // VR stereo config functions for VR simulator
    VrStereoConfig LoadVrStereoConfig(VrDeviceInfo device);     // Load VR stereo config for VR simulator device parameters
    void UnloadVrStereoConfig(VrStereoConfig config);           // Unload VR stereo config

    // Shader management functions
    // NOTE: Shader functionality is not available on OpenGL 1.1
    Shader LoadShader(const char *vsFileName, const char *fsFileName);   // Load shader from files and bind default locations
    Shader LoadShaderFromMemory(const char *vsCode, const char *fsCode); // Load shader from code strings and bind default locations
    bool IsShaderReady(Shader shader);                                   // Check if a shader is ready
    int GetShaderLocation(Shader shader, const char *uniformName);       // Get shader uniform location
    int GetShaderLocationAttrib(Shader shader, const char *attribName);  // Get shader attribute location
    void SetShaderValue(Shader shader, int locIndex, const void *value, int uniformType);               // Set shader uniform value
    void SetShaderValueV(Shader shader, int locIndex, const void *value, int uniformType, int count);   // Set shader uniform value vector
    void SetShaderValueMatrix(Shader shader, int locIndex, Matrix mat);         // Set shader uniform value (matrix 4x4)
    void SetShaderValueTexture(Shader shader, int locIndex, Texture2D texture); // Set shader uniform value for texture (sampler2d)
    void UnloadShader(Shader shader);                                    // Unload shader from GPU memory (VRAM)

    // Screen-space-related functions
    Ray GetMouseRay(Vector2 mousePosition, Camera camera);      // Get a ray trace from mouse position
    Matrix GetCameraMatrix(Camera camera);                      // Get camera transform matrix (view matrix)
    Matrix GetCameraMatrix2D(Camera2D camera);                  // Get camera 2d transform matrix
    Vector2 GetWorldToScreen(Vector3 position, Camera camera);  // Get the screen space position for a 3d world space position
    Vector2 GetScreenToWorld2D(Vector2 position, Camera2D camera); // Get the world space position for a 2d camera screen space position
    Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height); // Get size position for a 3d world space position
    Vector2 GetWorldToScreen2D(Vector2 position, Camera2D camera); // Get the screen space position for a 2d camera world space position

    // Timing-related functions
    void SetTargetFPS(int fps);                                 // Set target FPS (maximum)
    float GetFrameTime(void);                                   // Get time in seconds for last frame drawn (delta time)
    double GetTime(void);                                       // Get elapsed time in seconds since InitWindow()
    int GetFPS(void);                                           // Get current FPS

    // Custom frame control functions
    // NOTE: Those functions are intended for advance users that want full control over the frame processing
    // By default EndDrawing() does this job: draws everything + SwapScreenBuffer() + manage frame timing + PollInputEvents()
    // To avoid that behaviour and control frame processes manually, enable in config.h: SUPPORT_CUSTOM_FRAME_CONTROL
    void SwapScreenBuffer(void);                                // Swap back buffer with front buffer (screen drawing)
    void PollInputEvents(void);                                 // Register all input events
    void WaitTime(double seconds);                              // Wait for some time (halt program execution)

    // Random values generation functions
    void SetRandomSeed(unsigned int seed);                      // Set the seed for the random number generator
    int GetRandomValue(int min, int max);                       // Get a random value between min and max (both included)
    int *LoadRandomSequence(unsigned int count, int min, int max); // Load random values sequence, no values repeated
    void UnloadRandomSequence(int *sequence);                   // Unload random values sequence

    // Misc. functions
    void TakeScreenshot(const char *fileName);                  // Takes a screenshot of current screen (filename extension defines format)
    void SetConfigFlags(unsigned int flags);                    // Setup init configuration flags (view FLAGS)
    void OpenURL(const char *url);                              // Open URL with default system browser (if available)

    // NOTE: Following functions implemented in module [utils]
    //------------------------------------------------------------------
    void TraceLog(int logLevel, const char *text, ...);         // Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
    void SetTraceLogLevel(int logLevel);                        // Set the current threshold (minimum) log level
    void *MemAlloc(unsigned int size);                          // Internal memory allocator
    void *MemRealloc(void *ptr, unsigned int size);             // Internal memory reallocator
    void MemFree(void *ptr);                                    // Internal memory free

    // Set custom callbacks
    // WARNING: Callbacks setup is intended for advance users
    void SetTraceLogCallback(TraceLogCallback callback);         // Set custom trace log
    void SetLoadFileDataCallback(LoadFileDataCallback callback); // Set custom file binary data loader
    void SetSaveFileDataCallback(SaveFileDataCallback callback); // Set custom file binary data saver
    void SetLoadFileTextCallback(LoadFileTextCallback callback); // Set custom file text data loader
    void SetSaveFileTextCallback(SaveFileTextCallback callback); // Set custom file text data saver

    // Files management functions
    unsigned char *LoadFileData(const char *fileName, int *dataSize); // Load file data as byte array (read)
    void UnloadFileData(unsigned char *data);                   // Unload file data allocated by LoadFileData()
    bool SaveFileData(const char *fileName, void *data, int dataSize); // Save data to file from byte array (write), returns true on success
    bool ExportDataAsCode(const unsigned char *data, int dataSize, const char *fileName); // Export data to code (.h), returns true on success
    char *LoadFileText(const char *fileName);                   // Load text data from file (read), returns a '\0' terminated string
    void UnloadFileText(char *text);                            // Unload file text data allocated by LoadFileText()
    bool SaveFileText(const char *fileName, char *text);        // Save text data to file (write), string must be '\0' terminated, returns true on success
    //------------------------------------------------------------------

    // File system functions
    bool FileExists(const char *fileName);                      // Check if file exists
    bool DirectoryExists(const char *dirPath);                  // Check if a directory path exists
    bool IsFileExtension(const char *fileName, const char *ext); // Check file extension (including point: .png, .wav)
    int GetFileLength(const char *fileName);                    // Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)
    const char *GetFileExtension(const char *fileName);         // Get pointer to extension for a filename string (includes dot: '.png')
    const char *GetFileName(const char *filePath);              // Get pointer to filename for a path string
    const char *GetFileNameWithoutExt(const char *filePath);    // Get filename string without extension (uses static string)
    const char *GetDirectoryPath(const char *filePath);         // Get full path for a given fileName with path (uses static string)
    const char *GetPrevDirectoryPath(const char *dirPath);      // Get previous directory path for a given path (uses static string)
    const char *GetWorkingDirectory(void);                      // Get current working directory (uses static string)
    const char *GetApplicationDirectory(void);                  // Get the directory of the running application (uses static string)
    bool ChangeDirectory(const char *dir);                      // Change working directory, return true on success
    bool IsPathFile(const char *path);                          // Check if a given path is a file or a directory
    FilePathList LoadDirectoryFiles(const char *dirPath);       // Load directory filepaths
    FilePathList LoadDirectoryFilesEx(const char *basePath, const char *filter, bool scanSubdirs); // Load directory filepaths with extension filtering and recursive directory scan
    void UnloadDirectoryFiles(FilePathList files);              // Unload filepaths
    bool IsFileDropped(void);                                   // Check if a file has been dropped into window
    FilePathList LoadDroppedFiles(void);                        // Load dropped filepaths
    void UnloadDroppedFiles(FilePathList files);                // Unload dropped filepaths
    long GetFileModTime(const char *fileName);                  // Get file modification time (last write time)

    // Compression/Encoding functionality
    unsigned char *CompressData(const unsigned char *data, int dataSize, int *compDataSize);        // Compress data (DEFLATE algorithm), memory must be MemFree()
    unsigned char *DecompressData(const unsigned char *compData, int compDataSize, int *dataSize);  // Decompress data (DEFLATE algorithm), memory must be MemFree()
    char *EncodeDataBase64(const unsigned char *data, int dataSize, int *outputSize);               // Encode data to Base64 string, memory must be MemFree()
    unsigned char *DecodeDataBase64(const unsigned char *data, int *outputSize);                    // Decode Base64 string data, memory must be MemFree()

    // Automation events functionality
    AutomationEventList LoadAutomationEventList(const char *fileName);                // Load automation events list from file, NULL for empty list, capacity = MAX_AUTOMATION_EVENTS
    void UnloadAutomationEventList(AutomationEventList *list);                        // Unload automation events list from file
    bool ExportAutomationEventList(AutomationEventList list, const char *fileName);   // Export automation events list as text file
    void SetAutomationEventList(AutomationEventList *list);                           // Set automation event list to record to
    void SetAutomationEventBaseFrame(int frame);                                      // Set automation event internal base frame to start recording
    void StartAutomationEventRecording(void);                                         // Start recording automation events (AutomationEventList must be set)
    void StopAutomationEventRecording(void);                                          // Stop recording automation events
    void PlayAutomationEvent(AutomationEvent event);                                  // Play a recorded automation event

    //------------------------------------------------------------------------------------
    // Input Handling Functions (Module: core)
    //------------------------------------------------------------------------------------

    // Input-related functions: keyboard
    bool IsKeyPressed(int key);                             // Check if a key has been pressed once
    bool IsKeyPressedRepeat(int key);                       // Check if a key has been pressed again (Only PLATFORM_DESKTOP)
    bool IsKeyDown(int key);                                // Check if a key is being pressed
    bool IsKeyReleased(int key);                            // Check if a key has been released once
    bool IsKeyUp(int key);                                  // Check if a key is NOT being pressed
    int GetKeyPressed(void);                                // Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
    int GetCharPressed(void);                               // Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
    void SetExitKey(int key);                               // Set a custom key to exit program (default is ESC)

    // Input-related functions: gamepads
    bool IsGamepadAvailable(int gamepad);                   // Check if a gamepad is available
    const char *GetGamepadName(int gamepad);                // Get gamepad internal name id
    bool IsGamepadButtonPressed(int gamepad, int button);   // Check if a gamepad button has been pressed once
    bool IsGamepadButtonDown(int gamepad, int button);      // Check if a gamepad button is being pressed
    bool IsGamepadButtonReleased(int gamepad, int button);  // Check if a gamepad button has been released once
    bool IsGamepadButtonUp(int gamepad, int button);        // Check if a gamepad button is NOT being pressed
    int GetGamepadButtonPressed(void);                      // Get the last gamepad button pressed
    int GetGamepadAxisCount(int gamepad);                   // Get gamepad axis count for a gamepad
    float GetGamepadAxisMovement(int gamepad, int axis);    // Get axis movement value for a gamepad axis
    int SetGamepadMappings(const char *mappings);           // Set internal gamepad mappings (SDL_GameControllerDB)

    // Input-related functions: mouse
    bool IsMouseButtonPressed(int button);                  // Check if a mouse button has been pressed once
    bool IsMouseButtonDown(int button);                     // Check if a mouse button is being pressed
    bool IsMouseButtonReleased(int button);                 // Check if a mouse button has been released once
    bool IsMouseButtonUp(int button);                       // Check if a mouse button is NOT being pressed
    int GetMouseX(void);                                    // Get mouse position X
    int GetMouseY(void);                                    // Get mouse position Y
    Vector2 GetMousePosition(void);                         // Get mouse position XY
    Vector2 GetMouseDelta(void);                            // Get mouse delta between frames
    void SetMousePosition(int x, int y);                    // Set mouse position XY
    void SetMouseOffset(int offsetX, int offsetY);          // Set mouse offset
    void SetMouseScale(float scaleX, float scaleY);         // Set mouse scaling
    float GetMouseWheelMove(void);                          // Get mouse wheel movement for X or Y, whichever is larger
    Vector2 GetMouseWheelMoveV(void);                       // Get mouse wheel movement for both X and Y
    void SetMouseCursor(int cursor);                        // Set mouse cursor

    // Input-related functions: touch
    int GetTouchX(void);                                    // Get touch position X for touch point 0 (relative to screen size)
    int GetTouchY(void);                                    // Get touch position Y for touch point 0 (relative to screen size)
    Vector2 GetTouchPosition(int index);                    // Get touch position XY for a touch point index (relative to screen size)
    int GetTouchPointId(int index);                         // Get touch point identifier for given index
    int GetTouchPointCount(void);                           // Get number of touch points

    //------------------------------------------------------------------------------------
    // Gestures and Touch Handling Functions (Module: rgestures)
    //------------------------------------------------------------------------------------
    void SetGesturesEnabled(unsigned int flags);      // Enable a set of gestures using flags
    bool IsGestureDetected(unsigned int gesture);     // Check if a gesture have been detected
    int GetGestureDetected(void);                     // Get latest detected gesture
    float GetGestureHoldDuration(void);               // Get gesture hold time in milliseconds
    Vector2 GetGestureDragVector(void);               // Get gesture drag vector
    float GetGestureDragAngle(void);                  // Get gesture drag angle
    Vector2 GetGesturePinchVector(void);              // Get gesture pinch delta
    float GetGesturePinchAngle(void);                 // Get gesture pinch angle

    //------------------------------------------------------------------------------------
    // Camera System Functions (Module: rcamera)
    //------------------------------------------------------------------------------------
    void UpdateCamera(Camera *camera, int mode);      // Update camera position for selected mode
    void UpdateCameraPro(Camera *camera, Vector3 movement, Vector3 rotation, float zoom); // Update camera movement/rotation

module: rshapes
    // NOTE: It can be useful when using basic shapes and one single font,
    // defining a font char white rectangle would allow drawing everything in a single draw call
    void SetShapesTexture(Texture2D texture, Rectangle source);       // Set texture and rectangle to be used on shapes drawing

    // Basic shapes drawing functions
    void DrawPixel(int posX, int posY, Color color);                                                   // Draw a pixel
    void DrawPixelV(Vector2 position, Color color);                                                    // Draw a pixel (Vector version)
    void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color);                // Draw a line
    void DrawLineV(Vector2 startPos, Vector2 endPos, Color color);                                     // Draw a line (using gl lines)
    void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color);                       // Draw a line (using triangles/quads)
    void DrawLineStrip(Vector2 *points, int pointCount, Color color);                                  // Draw lines sequence (using gl lines)
    void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color);                   // Draw line segment cubic-bezier in-out interpolation
    void DrawCircle(int centerX, int centerY, float radius, Color color);                              // Draw a color-filled circle
    void DrawCircleSector(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color);      // Draw a piece of a circle
    void DrawCircleSectorLines(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color); // Draw circle sector outline
    void DrawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2);       // Draw a gradient-filled circle
    void DrawCircleV(Vector2 center, float radius, Color color);                                       // Draw a color-filled circle (Vector version)
    void DrawCircleLines(int centerX, int centerY, float radius, Color color);                         // Draw circle outline
    void DrawCircleLinesV(Vector2 center, float radius, Color color);                                  // Draw circle outline (Vector version)
    void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color);             // Draw ellipse
    void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color);        // Draw ellipse outline
    void DrawRing(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color); // Draw ring
    void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);    // Draw ring outline
    void DrawRectangle(int posX, int posY, int width, int height, Color color);                        // Draw a color-filled rectangle
    void DrawRectangleV(Vector2 position, Vector2 size, Color color);                                  // Draw a color-filled rectangle (Vector version)
    void DrawRectangleRec(Rectangle rec, Color color);                                                 // Draw a color-filled rectangle
    void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color);                 // Draw a color-filled rectangle with pro parameters
    void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2);// Draw a vertical-gradient-filled rectangle
    void DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2);// Draw a horizontal-gradient-filled rectangle
    void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4);       // Draw a gradient-filled rectangle with custom vertex colors
    void DrawRectangleLines(int posX, int posY, int width, int height, Color color);                   // Draw rectangle outline
    void DrawRectangleLinesEx(Rectangle rec, float lineThick, Color color);                            // Draw rectangle outline with extended parameters
    void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color);              // Draw rectangle with rounded edges
    void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, float lineThick, Color color); // Draw rectangle with rounded edges outline
    void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                                // Draw a color-filled triangle (vertex in counter-clockwise order!)
    void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                           // Draw triangle outline (vertex in counter-clockwise order!)
    void DrawTriangleFan(Vector2 *points, int pointCount, Color color);                                // Draw a triangle fan defined by points (first vertex is the center)
    void DrawTriangleStrip(Vector2 *points, int pointCount, Color color);                              // Draw a triangle strip defined by points
    void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color);               // Draw a regular polygon (Vector version)
    void DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color);          // Draw a polygon outline of n sides
    void DrawPolyLinesEx(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color); // Draw a polygon outline of n sides with extended parameters

    // Splines drawing functions
    void DrawSplineLinear(Vector2 *points, int pointCount, float thick, Color color);                  // Draw spline: Linear, minimum 2 points
    void DrawSplineBasis(Vector2 *points, int pointCount, float thick, Color color);                   // Draw spline: B-Spline, minimum 4 points
    void DrawSplineCatmullRom(Vector2 *points, int pointCount, float thick, Color color);              // Draw spline: Catmull-Rom, minimum 4 points
    void DrawSplineBezierQuadratic(Vector2 *points, int pointCount, float thick, Color color);         // Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
    void DrawSplineBezierCubic(Vector2 *points, int pointCount, float thick, Color color);             // Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
    void DrawSplineSegmentLinear(Vector2 p1, Vector2 p2, float thick, Color color);                    // Draw spline segment: Linear, 2 points
    void DrawSplineSegmentBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color); // Draw spline segment: B-Spline, 4 points
    void DrawSplineSegmentCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color); // Draw spline segment: Catmull-Rom, 4 points
    void DrawSplineSegmentBezierQuadratic(Vector2 p1, Vector2 c2, Vector2 p3, float thick, Color color); // Draw spline segment: Quadratic Bezier, 2 points, 1 control point
    void DrawSplineSegmentBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float thick, Color color); // Draw spline segment: Cubic Bezier, 2 points, 2 control points

    // Spline segment point evaluation functions, for a given t [0.0f .. 1.0f]
    Vector2 GetSplinePointLinear(Vector2 startPos, Vector2 endPos, float t);                           // Get (evaluate) spline point: Linear
    Vector2 GetSplinePointBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);              // Get (evaluate) spline point: B-Spline
    Vector2 GetSplinePointCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);         // Get (evaluate) spline point: Catmull-Rom
    Vector2 GetSplinePointBezierQuad(Vector2 p1, Vector2 c2, Vector2 p3, float t);                     // Get (evaluate) spline point: Quadratic Bezier
    Vector2 GetSplinePointBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t);        // Get (evaluate) spline point: Cubic Bezier

    // Basic shapes collision detection functions
    bool CheckCollisionRecs(Rectangle rec1, Rectangle rec2);                                           // Check collision between two rectangles
    bool CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2);        // Check collision between two circles
    bool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec);                         // Check collision between circle and rectangle
    bool CheckCollisionPointRec(Vector2 point, Rectangle rec);                                         // Check if point is inside rectangle
    bool CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius);                       // Check if point is inside circle
    bool CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);               // Check if point is inside a triangle
    bool CheckCollisionPointPoly(Vector2 point, Vector2 *points, int pointCount);                      // Check if point is within a polygon described by array of vertices
    bool CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint); // Check the collision between two lines defined by two points each, returns collision point by reference
    bool CheckCollisionPointLine(Vector2 point, Vector2 p1, Vector2 p2, int threshold);                // Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
    Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);                                         // Get collision rectangle for two rectangles collision

module: rtextures
    // Image loading functions
    // NOTE: These functions do not require GPU access
    Image LoadImage(const char *fileName);                                                             // Load image from file into CPU memory (RAM)
    Image LoadImageRaw(const char *fileName, int width, int height, int format, int headerSize);       // Load image from RAW file data
    Image LoadImageSvg(const char *fileNameOrString, int width, int height);                           // Load image from SVG file data or string with specified size
    Image LoadImageAnim(const char *fileName, int *frames);                                            // Load image sequence from file (frames appended to image.data)
    Image LoadImageFromMemory(const char *fileType, const unsigned char *fileData, int dataSize);      // Load image from memory buffer, fileType refers to extension: i.e. '.png'
    Image LoadImageFromTexture(Texture2D texture);                                                     // Load image from GPU texture data
    Image LoadImageFromScreen(void);                                                                   // Load image from screen buffer and (screenshot)
    bool IsImageReady(Image image);                                                                    // Check if an image is ready
    void UnloadImage(Image image);                                                                     // Unload image from CPU memory (RAM)
    bool ExportImage(Image image, const char *fileName);                                               // Export image data to file, returns true on success
    unsigned char *ExportImageToMemory(Image image, const char *fileType, int *fileSize);              // Export image to memory buffer
    bool ExportImageAsCode(Image image, const char *fileName);                                         // Export image as code file defining an array of bytes, returns true on success

    // Image generation functions
    Image GenImageColor(int width, int height, Color color);                                           // Generate image: plain color
    Image GenImageGradientLinear(int width, int height, int direction, Color start, Color end);        // Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient
    Image GenImageGradientRadial(int width, int height, float density, Color inner, Color outer);      // Generate image: radial gradient
    Image GenImageGradientSquare(int width, int height, float density, Color inner, Color outer);      // Generate image: square gradient
    Image GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2);    // Generate image: checked
    Image GenImageWhiteNoise(int width, int height, float factor);                                     // Generate image: white noise
    Image GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale);           // Generate image: perlin noise
    Image GenImageCellular(int width, int height, int tileSize);                                       // Generate image: cellular algorithm, bigger tileSize means bigger cells
    Image GenImageText(int width, int height, const char *text);                                       // Generate image: grayscale image from text data

    // Image manipulation functions
    Image ImageCopy(Image image);                                                                      // Create an image duplicate (useful for transformations)
    Image ImageFromImage(Image image, Rectangle rec);                                                  // Create an image from another image piece
    Image ImageText(const char *text, int fontSize, Color color);                                      // Create an image from text (default font)
    Image ImageTextEx(Font font, const char *text, float fontSize, float spacing, Color tint);         // Create an image from text (custom sprite font)
    void ImageFormat(Image *image, int newFormat);                                                     // Convert image data to desired format
    void ImageToPOT(Image *image, Color fill);                                                         // Convert image to POT (power-of-two)
    void ImageCrop(Image *image, Rectangle crop);                                                      // Crop an image to a defined rectangle
    void ImageAlphaCrop(Image *image, float threshold);                                                // Crop image depending on alpha value
    void ImageAlphaClear(Image *image, Color color, float threshold);                                  // Clear alpha channel to desired color
    void ImageAlphaMask(Image *image, Image alphaMask);                                                // Apply alpha mask to image
    void ImageAlphaPremultiply(Image *image);                                                          // Premultiply alpha channel
    void ImageBlurGaussian(Image *image, int blurSize);                                                // Apply Gaussian blur using a box blur approximation
    void ImageResize(Image *image, int newWidth, int newHeight);                                       // Resize image (Bicubic scaling algorithm)
    void ImageResizeNN(Image *image, int newWidth,int newHeight);                                      // Resize image (Nearest-Neighbor scaling algorithm)
    void ImageResizeCanvas(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill);  // Resize canvas and fill with color
    void ImageMipmaps(Image *image);                                                                   // Compute all mipmap levels for a provided image
    void ImageDither(Image *image, int rBpp, int gBpp, int bBpp, int aBpp);                            // Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
    void ImageFlipVertical(Image *image);                                                              // Flip image vertically
    void ImageFlipHorizontal(Image *image);                                                            // Flip image horizontally
    void ImageRotate(Image *image, int degrees);                                                       // Rotate image by input angle in degrees (-359 to 359)
    void ImageRotateCW(Image *image);                                                                  // Rotate image clockwise 90deg
    void ImageRotateCCW(Image *image);                                                                 // Rotate image counter-clockwise 90deg
    void ImageColorTint(Image *image, Color color);                                                    // Modify image color: tint
    void ImageColorInvert(Image *image);                                                               // Modify image color: invert
    void ImageColorGrayscale(Image *image);                                                            // Modify image color: grayscale
    void ImageColorContrast(Image *image, float contrast);                                             // Modify image color: contrast (-100 to 100)
    void ImageColorBrightness(Image *image, int brightness);                                           // Modify image color: brightness (-255 to 255)
    void ImageColorReplace(Image *image, Color color, Color replace);                                  // Modify image color: replace color
    Color *LoadImageColors(Image image);                                                               // Load color data from image as a Color array (RGBA - 32bit)
    Color *LoadImagePalette(Image image, int maxPaletteSize, int *colorCount);                         // Load colors palette from image as a Color array (RGBA - 32bit)
    void UnloadImageColors(Color *colors);                                                             // Unload color data loaded with LoadImageColors()
    void UnloadImagePalette(Color *colors);                                                            // Unload colors palette loaded with LoadImagePalette()
    Rectangle GetImageAlphaBorder(Image image, float threshold);                                       // Get image alpha border rectangle
    Color GetImageColor(Image image, int x, int y);                                                    // Get image pixel color at (x, y) position

    // Image drawing functions
    // NOTE: Image software-rendering functions (CPU)
    void ImageClearBackground(Image *dst, Color color);                                                // Clear image background with given color
    void ImageDrawPixel(Image *dst, int posX, int posY, Color color);                                  // Draw pixel within an image
    void ImageDrawPixelV(Image *dst, Vector2 position, Color color);                                   // Draw pixel within an image (Vector version)
    void ImageDrawLine(Image *dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color); // Draw line within an image
    void ImageDrawLineV(Image *dst, Vector2 start, Vector2 end, Color color);                          // Draw line within an image (Vector version)
    void ImageDrawCircle(Image *dst, int centerX, int centerY, int radius, Color color);               // Draw a filled circle within an image
    void ImageDrawCircleV(Image *dst, Vector2 center, int radius, Color color);                        // Draw a filled circle within an image (Vector version)
    void ImageDrawCircleLines(Image *dst, int centerX, int centerY, int radius, Color color);          // Draw circle outline within an image
    void ImageDrawCircleLinesV(Image *dst, Vector2 center, int radius, Color color);                   // Draw circle outline within an image (Vector version)
    void ImageDrawRectangle(Image *dst, int posX, int posY, int width, int height, Color color);       // Draw rectangle within an image
    void ImageDrawRectangleV(Image *dst, Vector2 position, Vector2 size, Color color);                 // Draw rectangle within an image (Vector version)
    void ImageDrawRectangleRec(Image *dst, Rectangle rec, Color color);                                // Draw rectangle within an image
    void ImageDrawRectangleLines(Image *dst, Rectangle rec, int thick, Color color);                   // Draw rectangle lines within an image
    void ImageDraw(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint);             // Draw a source image within a destination image (tint applied to source)
    void ImageDrawText(Image *dst, const char *text, int posX, int posY, int fontSize, Color color);   // Draw text (using default font) within an image (destination)
    void ImageDrawTextEx(Image *dst, Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint); // Draw text (custom sprite font) within an image (destination)

    // Texture loading functions
    // NOTE: These functions require GPU access
    Texture2D LoadTexture(const char *fileName);                                                       // Load texture from file into GPU memory (VRAM)
    Texture2D LoadTextureFromImage(Image image);                                                       // Load texture from image data
    TextureCubemap LoadTextureCubemap(Image image, int layout);                                        // Load cubemap from image, multiple image cubemap layouts supported
    RenderTexture2D LoadRenderTexture(int width, int height);                                          // Load texture for rendering (framebuffer)
    bool IsTextureReady(Texture2D texture);                                                            // Check if a texture is ready
    void UnloadTexture(Texture2D texture);                                                             // Unload texture from GPU memory (VRAM)
    bool IsRenderTextureReady(RenderTexture2D target);                                                 // Check if a render texture is ready
    void UnloadRenderTexture(RenderTexture2D target);                                                  // Unload render texture from GPU memory (VRAM)
    void UpdateTexture(Texture2D texture, const void *pixels);                                         // Update GPU texture with new data
    void UpdateTextureRec(Texture2D texture, Rectangle rec, const void *pixels);                       // Update GPU texture rectangle with new data

    // Texture configuration functions
    void GenTextureMipmaps(Texture2D *texture);                                                        // Generate GPU mipmaps for a texture
    void SetTextureFilter(Texture2D texture, int filter);                                              // Set texture scaling filter mode
    void SetTextureWrap(Texture2D texture, int wrap);                                                  // Set texture wrapping mode

    // Texture drawing functions
    void DrawTexture(Texture2D texture, int posX, int posY, Color tint);                               // Draw a Texture2D
    void DrawTextureV(Texture2D texture, Vector2 position, Color tint);                                // Draw a Texture2D with position defined as Vector2
    void DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint);  // Draw a Texture2D with extended parameters
    void DrawTextureRec(Texture2D texture, Rectangle source, Vector2 position, Color tint);            // Draw a part of a texture defined by a rectangle
    void DrawTexturePro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint); // Draw a part of a texture defined by a rectangle with 'pro' parameters
    void DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint); // Draws a texture (or part of it) that stretches or shrinks nicely

    // Color/pixel related functions
    Color Fade(Color color, float alpha);                                 // Get color with alpha applied, alpha goes from 0.0f to 1.0f
    int ColorToInt(Color color);                                          // Get hexadecimal value for a Color
    Vector4 ColorNormalize(Color color);                                  // Get Color normalized as float [0..1]
    Color ColorFromNormalized(Vector4 normalized);                        // Get Color from normalized values [0..1]
    Vector3 ColorToHSV(Color color);                                      // Get HSV values for a Color, hue [0..360], saturation/value [0..1]
    Color ColorFromHSV(float hue, float saturation, float value);         // Get a Color from HSV values, hue [0..360], saturation/value [0..1]
    Color ColorTint(Color color, Color tint);                             // Get color multiplied with another color
    Color ColorBrightness(Color color, float factor);                     // Get color with brightness correction, brightness factor goes from -1.0f to 1.0f
    Color ColorContrast(Color color, float contrast);                     // Get color with contrast correction, contrast values between -1.0f and 1.0f
    Color ColorAlpha(Color color, float alpha);                           // Get color with alpha applied, alpha goes from 0.0f to 1.0f
    Color ColorAlphaBlend(Color dst, Color src, Color tint);              // Get src alpha-blended into dst color with tint
    Color GetColor(unsigned int hexValue);                                // Get Color structure from hexadecimal value
    Color GetPixelColor(void *srcPtr, int format);                        // Get Color from a source pixel pointer of certain format
    void SetPixelColor(void *dstPtr, Color color, int format);            // Set color formatted into destination pixel pointer
    int GetPixelDataSize(int width, int height, int format);              // Get pixel data size in bytes for certain format

module: rtext
    // Font loading/unloading functions
    Font GetFontDefault(void);                                                            // Get the default Font
    Font LoadFont(const char *fileName);                                                  // Load font from file into GPU memory (VRAM)
    Font LoadFontEx(const char *fileName, int fontSize, int *codepoints, int codepointCount);  // Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character set
    Font LoadFontFromImage(Image image, Color key, int firstChar);                        // Load font from Image (XNA style)
    Font LoadFontFromMemory(const char *fileType, const unsigned char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount); // Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
    bool IsFontReady(Font font);                                                          // Check if a font is ready
    GlyphInfo *LoadFontData(const unsigned char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount, int type); // Load font data for further use
    Image GenImageFontAtlas(const GlyphInfo *glyphs, Rectangle **glyphRecs, int glyphCount, int fontSize, int padding, int packMethod); // Generate image font atlas using chars info
    void UnloadFontData(GlyphInfo *glyphs, int glyphCount);                               // Unload font chars info data (RAM)
    void UnloadFont(Font font);                                                           // Unload font from GPU memory (VRAM)
    bool ExportFontAsCode(Font font, const char *fileName);                               // Export font as code file, returns true on success

    // Text drawing functions
    void DrawFPS(int posX, int posY);                                                     // Draw current FPS
    void DrawText(const char *text, int posX, int posY, int fontSize, Color color);       // Draw text (using default font)
    void DrawTextEx(Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint); // Draw text using font and additional parameters
    void DrawTextPro(Font font, const char *text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint); // Draw text using Font and pro parameters (rotation)
    void DrawTextCodepoint(Font font, int codepoint, Vector2 position, float fontSize, Color tint); // Draw one character (codepoint)
    void DrawTextCodepoints(Font font, const int *codepoints, int codepointCount, Vector2 position, float fontSize, float spacing, Color tint); // Draw multiple character (codepoint)

    // Text font info functions
    void SetTextLineSpacing(int spacing);                                                 // Set vertical line spacing when drawing with line-breaks
    int MeasureText(const char *text, int fontSize);                                      // Measure string width for default font
    Vector2 MeasureTextEx(Font font, const char *text, float fontSize, float spacing);    // Measure string size for Font
    int GetGlyphIndex(Font font, int codepoint);                                          // Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
    GlyphInfo GetGlyphInfo(Font font, int codepoint);                                     // Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
    Rectangle GetGlyphAtlasRec(Font font, int codepoint);                                 // Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found

    // Text codepoints management functions (unicode characters)
    char *LoadUTF8(const int *codepoints, int length);                // Load UTF-8 text encoded from codepoints array
    void UnloadUTF8(char *text);                                      // Unload UTF-8 text encoded from codepoints array
    int *LoadCodepoints(const char *text, int *count);                // Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
    void UnloadCodepoints(int *codepoints);                           // Unload codepoints data from memory
    int GetCodepointCount(const char *text);                          // Get total number of codepoints in a UTF-8 encoded string
    int GetCodepoint(const char *text, int *codepointSize);           // Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
    int GetCodepointNext(const char *text, int *codepointSize);       // Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
    int GetCodepointPrevious(const char *text, int *codepointSize);   // Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
    const char *CodepointToUTF8(int codepoint, int *utf8Size);        // Encode one codepoint into UTF-8 byte array (array length returned as parameter)

    // Text strings management functions (no UTF-8 strings, only byte chars)
    // NOTE: Some strings allocate memory internally for returned strings, just be careful!
    int TextCopy(char *dst, const char *src);                                             // Copy one string to another, returns bytes copied
    bool TextIsEqual(const char *text1, const char *text2);                               // Check if two text string are equal
    unsigned int TextLength(const char *text);                                            // Get text length, checks for '\0' ending
    const char *TextFormat(const char *text, ...);                                        // Text formatting with variables (sprintf() style)
    const char *TextSubtext(const char *text, int position, int length);                  // Get a piece of a text string
    char *TextReplace(char *text, const char *replace, const char *by);                   // Replace text string (WARNING: memory must be freed!)
    char *TextInsert(const char *text, const char *insert, int position);                 // Insert text in a position (WARNING: memory must be freed!)
    const char *TextJoin(const char **textList, int count, const char *delimiter);        // Join text strings with delimiter
    const char **TextSplit(const char *text, char delimiter, int *count);                 // Split text into multiple strings
    void TextAppend(char *text, const char *append, int *position);                       // Append text at specific position and move cursor!
    int TextFindIndex(const char *text, const char *find);                                // Find first text occurrence within a string
    const char *TextToUpper(const char *text);                      // Get upper case version of provided string
    const char *TextToLower(const char *text);                      // Get lower case version of provided string
    const char *TextToPascal(const char *text);                     // Get Pascal case notation version of provided string
    int TextToInteger(const char *text);                            // Get integer value from text (negative values not supported)

module: rmodels
    // Basic geometric 3D shapes drawing functions
    void DrawLine3D(Vector3 startPos, Vector3 endPos, Color color);                                    // Draw a line in 3D world space
    void DrawPoint3D(Vector3 position, Color color);                                                   // Draw a point in 3D space, actually a small line
    void DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color); // Draw a circle in 3D world space
    void DrawTriangle3D(Vector3 v1, Vector3 v2, Vector3 v3, Color color);                              // Draw a color-filled triangle (vertex in counter-clockwise order!)
    void DrawTriangleStrip3D(Vector3 *points, int pointCount, Color color);                            // Draw a triangle strip defined by points
    void DrawCube(Vector3 position, float width, float height, float length, Color color);             // Draw cube
    void DrawCubeV(Vector3 position, Vector3 size, Color color);                                       // Draw cube (Vector version)
    void DrawCubeWires(Vector3 position, float width, float height, float length, Color color);        // Draw cube wires
    void DrawCubeWiresV(Vector3 position, Vector3 size, Color color);                                  // Draw cube wires (Vector version)
    void DrawSphere(Vector3 centerPos, float radius, Color color);                                     // Draw sphere
    void DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color);            // Draw sphere with extended parameters
    void DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color);         // Draw sphere wires
    void DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color); // Draw a cylinder/cone
    void DrawCylinderEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color); // Draw a cylinder with base at startPos and top at endPos
    void DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color); // Draw a cylinder/cone wires
    void DrawCylinderWiresEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color); // Draw a cylinder wires with base at startPos and top at endPos
    void DrawCapsule(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color); // Draw a capsule with the center of its sphere caps at startPos and endPos
    void DrawCapsuleWires(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color); // Draw capsule wireframe with the center of its sphere caps at startPos and endPos
    void DrawPlane(Vector3 centerPos, Vector2 size, Color color);                                      // Draw a plane XZ
    void DrawRay(Ray ray, Color color);                                                                // Draw a ray line
    void DrawGrid(int slices, float spacing);                                                          // Draw a grid (centered at (0, 0, 0))

    //------------------------------------------------------------------------------------
    // Model 3d Loading and Drawing Functions (Module: models)
    //------------------------------------------------------------------------------------

    // Model management functions
    Model LoadModel(const char *fileName);                                                // Load model from files (meshes and materials)
    Model LoadModelFromMesh(Mesh mesh);                                                   // Load model from generated mesh (default material)
    bool IsModelReady(Model model);                                                       // Check if a model is ready
    void UnloadModel(Model model);                                                        // Unload model (including meshes) from memory (RAM and/or VRAM)
    BoundingBox GetModelBoundingBox(Model model);                                         // Compute model bounding box limits (considers all meshes)

    // Model drawing functions
    void DrawModel(Model model, Vector3 position, float scale, Color tint);               // Draw a model (with texture if set)
    void DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint); // Draw a model with extended parameters
    void DrawModelWires(Model model, Vector3 position, float scale, Color tint);          // Draw a model wires (with texture if set)
    void DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint); // Draw a model wires (with texture if set) with extended parameters
    void DrawBoundingBox(BoundingBox box, Color color);                                   // Draw bounding box (wires)
    void DrawBillboard(Camera camera, Texture2D texture, Vector3 position, float size, Color tint);   // Draw a billboard texture
    void DrawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint); // Draw a billboard texture defined by source
    void DrawBillboardPro(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, Color tint); // Draw a billboard texture defined by source and rotation

    // Mesh management functions
    void UploadMesh(Mesh *mesh, bool dynamic);                                            // Upload mesh vertex data in GPU and provide VAO/VBO ids
    void UpdateMeshBuffer(Mesh mesh, int index, const void *data, int dataSize, int offset); // Update mesh vertex data in GPU for a specific buffer index
    void UnloadMesh(Mesh mesh);                                                           // Unload mesh data from CPU and GPU
    void DrawMesh(Mesh mesh, Material material, Matrix transform);                        // Draw a 3d mesh with material and transform
    void DrawMeshInstanced(Mesh mesh, Material material, const Matrix *transforms, int instances); // Draw multiple mesh instances with material and different transforms
    bool ExportMesh(Mesh mesh, const char *fileName);                                     // Export mesh data to file, returns true on success
    BoundingBox GetMeshBoundingBox(Mesh mesh);                                            // Compute mesh bounding box limits
    void GenMeshTangents(Mesh *mesh);                                                     // Compute mesh tangents

    // Mesh generation functions
    Mesh GenMeshPoly(int sides, float radius);                                            // Generate polygonal mesh
    Mesh GenMeshPlane(float width, float length, int resX, int resZ);                     // Generate plane mesh (with subdivisions)
    Mesh GenMeshCube(float width, float height, float length);                            // Generate cuboid mesh
    Mesh GenMeshSphere(float radius, int rings, int slices);                              // Generate sphere mesh (standard sphere)
    Mesh GenMeshHemiSphere(float radius, int rings, int slices);                          // Generate half-sphere mesh (no bottom cap)
    Mesh GenMeshCylinder(float radius, float height, int slices);                         // Generate cylinder mesh
    Mesh GenMeshCone(float radius, float height, int slices);                             // Generate cone/pyramid mesh
    Mesh GenMeshTorus(float radius, float size, int radSeg, int sides);                   // Generate torus mesh
    Mesh GenMeshKnot(float radius, float size, int radSeg, int sides);                    // Generate trefoil knot mesh
    Mesh GenMeshHeightmap(Image heightmap, Vector3 size);                                 // Generate heightmap mesh from image data
    Mesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize);                               // Generate cubes-based map mesh from image data

    // Material loading/unloading functions
    Material *LoadMaterials(const char *fileName, int *materialCount);                    // Load materials from model file
    Material LoadMaterialDefault(void);                                                   // Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
    bool IsMaterialReady(Material material);                                              // Check if a material is ready
    void UnloadMaterial(Material material);                                               // Unload material from GPU memory (VRAM)
    void SetMaterialTexture(Material *material, int mapType, Texture2D texture);          // Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
    void SetModelMeshMaterial(Model *model, int meshId, int materialId);                  // Set material for a mesh

    // Model animations loading/unloading functions
    ModelAnimation *LoadModelAnimations(const char *fileName, int *animCount);            // Load model animations from file
    void UpdateModelAnimation(Model model, ModelAnimation anim, int frame);               // Update model animation pose
    void UnloadModelAnimation(ModelAnimation anim);                                       // Unload animation data
    void UnloadModelAnimations(ModelAnimation *animations, int animCount);                // Unload animation array data
    bool IsModelAnimationValid(Model model, ModelAnimation anim);                         // Check model animation skeleton match

    // Collision detection functions
    bool CheckCollisionSpheres(Vector3 center1, float radius1, Vector3 center2, float radius2);   // Check collision between two spheres
    bool CheckCollisionBoxes(BoundingBox box1, BoundingBox box2);                                 // Check collision between two bounding boxes
    bool CheckCollisionBoxSphere(BoundingBox box, Vector3 center, float radius);                  // Check collision between box and sphere
    RayCollision GetRayCollisionSphere(Ray ray, Vector3 center, float radius);                    // Get collision info between ray and sphere
    RayCollision GetRayCollisionBox(Ray ray, BoundingBox box);                                    // Get collision info between ray and box
    RayCollision GetRayCollisionMesh(Ray ray, Mesh mesh, Matrix transform);                       // Get collision info between ray and mesh
    RayCollision GetRayCollisionTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);            // Get collision info between ray and triangle
    RayCollision GetRayCollisionQuad(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4);    // Get collision info between ray and quad

module: raudio
    // Audio device management functions
    void InitAudioDevice(void);                                     // Initialize audio device and context
    void CloseAudioDevice(void);                                    // Close the audio device and context
    bool IsAudioDeviceReady(void);                                  // Check if audio device has been initialized successfully
    void SetMasterVolume(float volume);                             // Set master volume (listener)
    float GetMasterVolume(void);                                    // Get master volume (listener)

    // Wave/Sound loading/unloading functions
    Wave LoadWave(const char *fileName);                            // Load wave data from file
    Wave LoadWaveFromMemory(const char *fileType, const unsigned char *fileData, int dataSize); // Load wave from memory buffer, fileType refers to extension: i.e. '.wav'
    bool IsWaveReady(Wave wave);                                    // Checks if wave data is ready
    Sound LoadSound(const char *fileName);                          // Load sound from file
    Sound LoadSoundFromWave(Wave wave);                             // Load sound from wave data
    Sound LoadSoundAlias(Sound source);                             // Create a new sound that shares the same sample data as the source sound, does not own the sound data
    bool IsSoundReady(Sound sound);                                 // Checks if a sound is ready
    void UpdateSound(Sound sound, const void *data, int sampleCount); // Update sound buffer with new data
    void UnloadWave(Wave wave);                                     // Unload wave data
    void UnloadSound(Sound sound);                                  // Unload sound
    void UnloadSoundAlias(Sound alias);                             // Unload a sound alias (does not deallocate sample data)
    bool ExportWave(Wave wave, const char *fileName);               // Export wave data to file, returns true on success
    bool ExportWaveAsCode(Wave wave, const char *fileName);         // Export wave sample data to code (.h), returns true on success

    // Wave/Sound management functions
    void PlaySound(Sound sound);                                    // Play a sound
    void StopSound(Sound sound);                                    // Stop playing a sound
    void PauseSound(Sound sound);                                   // Pause a sound
    void ResumeSound(Sound sound);                                  // Resume a paused sound
    bool IsSoundPlaying(Sound sound);                               // Check if a sound is currently playing
    void SetSoundVolume(Sound sound, float volume);                 // Set volume for a sound (1.0 is max level)
    void SetSoundPitch(Sound sound, float pitch);                   // Set pitch for a sound (1.0 is base level)
    void SetSoundPan(Sound sound, float pan);                       // Set pan for a sound (0.5 is center)
    Wave WaveCopy(Wave wave);                                       // Copy a wave to a new wave
    void WaveCrop(Wave *wave, int initSample, int finalSample);     // Crop a wave to defined samples range
    void WaveFormat(Wave *wave, int sampleRate, int sampleSize, int channels); // Convert wave data to desired format
    float *LoadWaveSamples(Wave wave);                              // Load samples data from wave as a 32bit float data array
    void UnloadWaveSamples(float *samples);                         // Unload samples data loaded with LoadWaveSamples()

    // Music management functions
    Music LoadMusicStream(const char *fileName);                    // Load music stream from file
    Music LoadMusicStreamFromMemory(const char *fileType, const unsigned char *data, int dataSize); // Load music stream from data
    bool IsMusicReady(Music music);                                 // Checks if a music stream is ready
    void UnloadMusicStream(Music music);                            // Unload music stream
    void PlayMusicStream(Music music);                              // Start music playing
    bool IsMusicStreamPlaying(Music music);                         // Check if music is playing
    void UpdateMusicStream(Music music);                            // Updates buffers for music streaming
    void StopMusicStream(Music music);                              // Stop music playing
    void PauseMusicStream(Music music);                             // Pause music playing
    void ResumeMusicStream(Music music);                            // Resume playing paused music
    void SeekMusicStream(Music music, float position);              // Seek music to a position (in seconds)
    void SetMusicVolume(Music music, float volume);                 // Set volume for music (1.0 is max level)
    void SetMusicPitch(Music music, float pitch);                   // Set pitch for a music (1.0 is base level)
    void SetMusicPan(Music music, float pan);                       // Set pan for a music (0.5 is center)
    float GetMusicTimeLength(Music music);                          // Get music time length (in seconds)
    float GetMusicTimePlayed(Music music);                          // Get current music time played (in seconds)

    // AudioStream management functions
    AudioStream LoadAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels); // Load audio stream (to stream raw audio pcm data)
    bool IsAudioStreamReady(AudioStream stream);                    // Checks if an audio stream is ready
    void UnloadAudioStream(AudioStream stream);                     // Unload audio stream and free memory
    void UpdateAudioStream(AudioStream stream, const void *data, int frameCount); // Update audio stream buffers with data
    bool IsAudioStreamProcessed(AudioStream stream);                // Check if any audio stream buffers requires refill
    void PlayAudioStream(AudioStream stream);                       // Play audio stream
    void PauseAudioStream(AudioStream stream);                      // Pause audio stream
    void ResumeAudioStream(AudioStream stream);                     // Resume audio stream
    bool IsAudioStreamPlaying(AudioStream stream);                  // Check if audio stream is playing
    void StopAudioStream(AudioStream stream);                       // Stop audio stream
    void SetAudioStreamVolume(AudioStream stream, float volume);    // Set volume for audio stream (1.0 is max level)
    void SetAudioStreamPitch(AudioStream stream, float pitch);      // Set pitch for audio stream (1.0 is base level)
    void SetAudioStreamPan(AudioStream stream, float pan);          // Set pan for audio stream (0.5 is centered)
    void SetAudioStreamBufferSizeDefault(int size);                 // Default size for new audio streams
    void SetAudioStreamCallback(AudioStream stream, AudioCallback callback); // Audio thread callback to request new data

    void AttachAudioStreamProcessor(AudioStream stream, AudioCallback processor); // Attach audio stream processor to stream, receives the samples as s
    void DetachAudioStreamProcessor(AudioStream stream, AudioCallback processor); // Detach audio stream processor from stream

    void AttachAudioMixedProcessor(AudioCallback processor); // Attach audio stream processor to the entire audio pipeline, receives the samples as s
    void DetachAudioMixedProcessor(AudioCallback processor); // Detach audio stream processor from the entire audio pipeline

struct-s
    struct Vector2;                // Vector2, 2 components
    struct Vector3;                // Vector3, 3 components
    struct Vector4;                // Vector4, 4 components
    struct Matrix;                 // Matrix, 4x4 components, column major, OpenGL style, right handed
    struct Color;                  // Color, 4 components, R8G8B8A8 (32bit)
    struct Rectangle;              // Rectangle, 4 components

    struct Image;                  // Image, pixel data stored in CPU memory (RAM)
    struct Texture;                // Texture, tex data stored in GPU memory (VRAM)
    struct RenderTexture;          // RenderTexture, fbo for texture rendering
    struct NPatchInfo;             // NPatchInfo, n-patch layout info
    struct GlyphInfo;              // GlyphInfo, font characters glyphs info
    struct Font;                   // Font, font texture and GlyphInfo array data

    struct Camera3D;               // Camera, defines position/orientation in 3d space

    struct Camera2D;               // Camera2D, defines position/orientation in 2d space
    struct Mesh;                   // Mesh, vertex data and vao/vbo
    struct Shader;                 // Shader
    struct MaterialMap;            // MaterialMap
    struct Material;               // Material, includes shader and maps
    struct Transform;              // Transform, vertex transformation data
    struct BoneInfo;               // Bone, skeletal animation bone
    struct Model;                  // Model, meshes, materials and animation data
    struct ModelAnimation;         // ModelAnimation
    struct Ray;                    // Ray, ray for raycasting
    struct RayCollision;           // RayCollision, ray hit information
    struct BoundingBox;            // BoundingBox

    struct Wave;                   // Wave, audio wave data
    struct AudioStream;            // AudioStream, custom audio stream
    struct Sound;                  // Sound
    struct Music;                  // Music, audio stream, anything longer than ~10 seconds should be streamed

    struct VrDeviceInfo;           // VrDeviceInfo, Head-Mounted-Display device parameters
    struct VrStereoConfig;         // VrStereoConfig, VR stereo rendering configuration for simulator

    struct FilePathList;           // File path list

    struct AutomationEvent;        // Automation event
    struct AutomationEventList;    // Automation event list

colors
    // Custom raylib color palette for amazing visuals on WHITE background
    #define LIGHTGRAY  (Color){ 200, 200, 200, 255 }   // Light Gray
    #define GRAY       (Color){ 130, 130, 130, 255 }   // Gray
    #define DARKGRAY   (Color){ 80, 80, 80, 255 }      // Dark Gray
    #define YELLOW     (Color){ 253, 249, 0, 255 }     // Yellow
    #define GOLD       (Color){ 255, 203, 0, 255 }     // Gold
    #define ORANGE     (Color){ 255, 161, 0, 255 }     // Orange
    #define PINK       (Color){ 255, 109, 194, 255 }   // Pink
    #define RED        (Color){ 230, 41, 55, 255 }     // Red
    #define MAROON     (Color){ 190, 33, 55, 255 }     // Maroon
    #define GREEN      (Color){ 0, 228, 48, 255 }      // Green
    #define LIME       (Color){ 0, 158, 47, 255 }      // Lime
    #define DARKGREEN  (Color){ 0, 117, 44, 255 }      // Dark Green
    #define SKYBLUE    (Color){ 102, 191, 255, 255 }   // Sky Blue
    #define BLUE       (Color){ 0, 121, 241, 255 }     // Blue
    #define DARKBLUE   (Color){ 0, 82, 172, 255 }      // Dark Blue
    #define PURPLE     (Color){ 200, 122, 255, 255 }   // Purple
    #define VIOLET     (Color){ 135, 60, 190, 255 }    // Violet
    #define DARKPURPLE (Color){ 112, 31, 126, 255 }    // Dark Purple
    #define BEIGE      (Color){ 211, 176, 131, 255 }   // Beige
    #define BROWN      (Color){ 127, 106, 79, 255 }    // Brown
    #define DARKBROWN  (Color){ 76, 63, 47, 255 }      // Dark Brown

    #define WHITE      (Color){ 255, 255, 255, 255 }   // White
    #define BLACK      (Color){ 0, 0, 0, 255 }         // Black
    #define BLANK      (Color){ 0, 0, 0, 0 }           // Blank (Transparent)
    #define MAGENTA    (Color){ 255, 0, 255, 255 }     // Magenta
    #define RAYWHITE   (Color){ 245, 245, 245, 255 }   // My own White (raylib logo)


----------------
    RapidCSV: //(0x000001ea)➞  
----------------

	using namespace rapidcsv;

	>header only

	Classes:
		Document:
			class Document(<path>(, <LabelParams>))
			Member_functions:
				template auto GetColumn<typename>(<id>) -> vector<typename>
				template auto GetRow<typename>(<id>) -> vector<typename>
				template auto GetCell<typename>(<id-1>, <id-2>) -> vector<typename>
		Label_params:
			class LabelParams(<int-1>, <int-2>)
				int-1 : row header
				int-2 : column header
				 0 - header exists
				-1 - header doesnt exists
		SeparatorParams:
			class SeparatorParams(<char>)

-------------------
    TurboVision: //(0x000001eb)➞
-------------------
#include <tvision/tv.h>
    >TUI library
    >looks great
    >object oriented
    >from the 90s
    >the guy porting it did a very nice job, seriously
    >supports all kinds of colors seemlessly
    >the ported version supports unicode
    >the naming is all funny
    >it seems that nothing can be added to the deskTop until TApplication::run()
      has been called, but since that creates an event oriented context,
      it also means that nothing can be displayed without user interaction
      (not without hacking anyways)

// ?!
#define swig

    >C/C++ binding generator
    >primarily focused on extending scripting languages
    -the type of binding Swig automates
                   ┌────────────────────┐
                   │ Scripting Language │
                   └────────────────────┘
                           |    |
                           |    |
                          \      /
                           \    /
                            \  /
            ┌─────────────────────────────────────┐
            │                                     │
            │    Collection of C/C++ functions    │
            │                                     │
            └─────────────────────────────────────┘

    Programs:
        swig <backend> [options]* <file>+   : generate bindings based on <file> for <backend>
            <backends>
                -csharp
                -d
                -go
                -guile
                -java
                -javascript
                -lua
                -octave
                -perl5
                -php7
                -python
                -r
                -ruby
                -scilab
                -tcl8
                -xml
            [options]
                -c++            : generate C++ bindings { use new instead of malloc() }
                -module <name>  : override module naming
                -D<symbol>[=<value>]
                -o <file>

    Extensions:
        .i      : interface file
        .swg    : explicit swig interface file

    Interfaces:
        >swig generates code based on interface files
        >the swig output from interface files are valid C/C++ meant to be further processed
          with conventional compilers
        {
            (<directive> | <declaration>)+
        }
        >often C/C++ source files are technically adequate interface files only requiring
          a few cli options, however this is generally discurraged
        Directives:
            %module <name>  : names the "module"; this information is usually passed to the backend
            %{ /*...*/ %}   : literal codeblock to be inserted into the generated code
                               without further processing;
                               yacc style
        Declaration:
            >ANSI C or C++ declaration
            >every declartion will be wrapped
            >marks symbols as public for the backend
                

//-----------------------
#define bugs\
I=======================================\
I=======================================\
I        ______                         \
I        | ___ \                        \
I        | |_/ /_   _  __ _ ___         \
I        | ___ \ | | |/ _` / __|        \
I        | |_/ / |_| | (_| \__ \        \
I        \____/ \__,_|\__, |___/        \
I                      __/ |            \
I                     |___/             \
I=======================================\
I=======================================I

	XXX:
		error: function ‘int* __errno_location()’ is initialized like a variable
			Cause:
				>if errno is defined as a macro, it cannot be used as name in another scoope nor declared extern 
			Fix:
				>do not use the name "errno"
				>include <errno.h>



#define convertions\
I=================================================================================\
I=================================================================================\
I     _____                               _                 _   _      _          \
I    /  __ \                             (_)               | | | |_   | |         \
I    | /  \/ ___  _ ____   _____ _ __ ___ _  ___  _ __     | |_| (_)__| |_ __     \
I    | |    / _ \| '_ \ \ / / _ \ '__/ __| |/ _ \| '_ \    | __| | / _` | '__|    \
I    | \__/\ (_) | | | \ V /  __/ |  \__ \ | (_) | | | |   | |_| || (_| | |       \
I     \____/\___/|_| |_|\_/ \___|_|  |___/_|\___/|_| |_|    \__|_( )__,_|_|       \
I                                                                |/               \
I=================================================================================\
I=================================================================================I
	
	Ints <-> Ints:
		>no explicit conversion is needed, values are auto truncated/padded

	Floats <-> Floats:
		>no explicit conversion is needed, values are auto truncated/padded
																		 
	Floats <-> Ints:
		>no explicit conversion is needed, values are auto truncated/padded

	char <-> Ints:
		>as char is already a num type just representing an ASCII code a simple addition/subtraction will suffice
		>the const difference between 0 and '0' is 48 (or 060/0x30/0b00110000), which is -not accidently- also '0'
		{ // char -> int
			char user_input;
			// ... user_input := '3'
			int user_choise = user_input - '0';
		  // int -> char
		  	int my_int = 7;
			putchar(7 + 48)
		}

	char -> wchar_t:
		wchar_t btowc([char])

	wchar_t -> char:
		char wctob([wchar_t])
		>returns EOF if inpossible

	char* -> typename:
		>use scanf if possible
		{ // char* -> int
			int d;
			sscanf("5", "%d", d);
		}

	typename -> char*:
		>its the simplest to use printf() for all purposes alike
		>GNU asprintf() and vasprintf() makes life oh so better
		{ // double -> char*
			char* output;
			asprintf(&output, "%.1lf", 13.4);
		}

	Nums -> string:
		{
			#include <string>
			std::to_string(myNumber);
		}

	string -> const char*:
		<string>.c_str()

	bool -> string:
		boolalpha([bool])	: converts bool to string 'true' or 'false'	// ?!; years old contextless information; fact check!


//-----------------------
#define snippets::: //(0x000001ec)➞\
I========================================================\
I========================================================\
I         _____       _                  _               \
I        /  ___|     (_)                | |              \
I        \ `--. _ __  _ _ __  _ __   ___| |_ ___         \
I         `--. \ '_ \| | '_ \| '_ \ / _ \ __/ __|        \
I        /\__/ / | | | | |_) | |_) |  __/ |_\__ \        \
I        \____/|_| |_|_| .__/| .__/ \___|\__|___/        \
I                      | |   | |                         \
I                      |_|   |_|                         \
I========================================================\
I========================================================I


	FILE* to C string: //(0x000001ed)➞
		{
			#include <stdio.h>
			//  ...

			FILE* f = fopen("file.txt", "rw");
			if(!f){ /*ERROR HANDLING*/; }

			fseek(f, 0, SEEK_END);
			int flen = ftell(f);
			rewind(f);
			char fstr[flen+1];
			fstr[flen] = '\00';
			fread(fstr, flen, sizeof(char), f);

			fclose(f);
		}
        {
            #define READ_ENTIRE_FILE(filehandle, buffername) \
                fseek(filehandle, 0, SEEK_END); \
                int filehandle ## len = ftell(filehandle); \
                rewind(filehandle); \
                char buffername[filehandle ## len+1]; \
                buffername[filehandle ## len] = '\00'; \
                fread(buffername, filehandle ## len, sizeof(char), filehandle); \
                fclose(filehandle);
        }


	Strtok: //(0x000001ee)➞
		{
			#include <string.h>
			//  ...

			const char* delim = ";";
			char* data = strtok(line, delim);
			i = 0;
			do{
				/* do stuff with data */
				++i;
			}while((data = strtok(NULL, delim), data));
		}


	Nested_strtok_with_strtok_r: //(0x000001ef)➞
		>the variable names {line_delim, col_delim} in the example specialize on parsing csv
		{
			#include <string.h>
			//  ...

			const char* line_delim = "\n";
			const char* col_delim = ";";
			char* line_save;
			char* line = strtok_r(fstr, line_delim, &line_save);
			int i = 0;
			int h;
			do{
				h = 0;
				char* col = strtok(line, col_delim);
				do{
					/* do stuff with col */
					++h;
				}while((col = strtok(NULL, col_delim), col));
				++i;
			}while((line = strtok_r(NULL, line_delim, &line_save), line));
		}


	Get_TTY_size: //(0x000001f0)➞
		>*NIX only
		>it is baffling how everyone only says "uh oh use ncurses or something"
		{
			#include <sys/ioctl.h>
			#include <unistd.h>
			#include <fcntl.h>
			//  ...

			/*  struct winsize{
				  unsigned short int ws_row;
				  unsigned short int ws_col;
				  unsigned short int ws_xpixel;
				  unsigned short int ws_ypixel;
			}; */
			struct winsize ws;
			
			int fd = open("/dev/tty", O_WRONLY);
			ioctl(fd, TIOCGWINSZ, &ws);
			close(fd);
		}

    Auto_pass_vararg_count:
        {
            // @BAKE gcc $@ -o $*
            #include <stdio.h>
            #include <stdarg.h>

            #define PP_NARG(...) \
                     PP_NARG_(__VA_ARGS__,PP_RSEQ_N())
            #define PP_NARG_(...) \
                     PP_128TH_ARG(__VA_ARGS__)
            #define PP_128TH_ARG( \
                      _1, _2, _3, _4, _5, _6, _7, _8, _9,_10, \
                     _11,_12,_13,_14,_15,_16,_17,_18,_19,_20, \
                     _21,_22,_23,_24,_25,_26,_27,_28,_29,_30, \
                     _31,_32,_33,_34,_35,_36,_37,_38,_39,_40, \
                     _41,_42,_43,_44,_45,_46,_47,_48,_49,_50, \
                     _51,_52,_53,_54,_55,_56,_57,_58,_59,_60, \
                     _61,_62,_63,_64,_65,_66,_67,_68,_69,_70, \
                     _71,_72,_73,_74,_75,_76,_77,_78,_79,_80, \
                     _81,_82,_83,_84,_85,_86,_87,_88,_89,_90, \
                     _91,_92,_93,_94,_95,_96,_97,_98,_99,_100, \
                     _101,_102,_103,_104,_105,_106,_107,_108,_109,_110, \
                     _111,_112,_113,_114,_115,_116,_117,_118,_119,_120, \
                     _121,_122,_123,_124,_125,_126,_127,N,...) N
            #define PP_RSEQ_N() \
                     127,126,125,124,123,122,121,120, \
                     119,118,117,116,115,114,113,112,111,110, \
                     109,108,107,106,105,104,103,102,101,100, \
                     99,98,97,96,95,94,93,92,91,90, \
                     89,88,87,86,85,84,83,82,81,80, \
                     79,78,77,76,75,74,73,72,71,70, \
                     69,68,67,66,65,64,63,62,61,60, \
                     59,58,57,56,55,54,53,52,51,50, \
                     49,48,47,46,45,44,43,42,41,40, \
                     39,38,37,36,35,34,33,32,31,30, \
                     29,28,27,26,25,24,23,22,21,20, \
                     19,18,17,16,15,14,13,12,11,10, \
                     9,8,7,6,5,4,3,2,1,0


            void _variad(size_t argc, ...);
            #define variad(...) _variad(PP_NARG(__VA_ARGS__), __VA_ARGS__)

            void _variad(size_t argc, ...) {
                va_list ap;
                va_start(ap, argc);
                for (int i = 0; i < argc; i++) {
                    printf("%d ", va_arg(ap, int));
                }
                printf("\n");
                va_end(ap);
            }


            signed main() {
                variad(7, 2, 3, 5);
            }
        }

#define arduino:: //(0x000001f1)➞\
I------------------------------------------------------------------------\
I------------------------------------------------------------------------\
I                                                                        \
I      /$$$$$$                  /$$           /$$                        \
I     /$$__  $$                | $$          |__/                        \
I    | $$  \ $$  /$$$$$$   /$$$$$$$ /$$   /$$ /$$ /$$$$$$$   /$$$$$$     \
I    | $$$$$$$$ /$$__  $$ /$$__  $$| $$  | $$| $$| $$__  $$ /$$__  $$    \
I    | $$__  $$| $$  \__/| $$  | $$| $$  | $$| $$| $$  \ $$| $$  \ $$    \
I    | $$  | $$| $$      | $$  | $$| $$  | $$| $$| $$  | $$| $$  | $$    \
I    | $$  | $$| $$      |  $$$$$$$|  $$$$$$/| $$| $$  | $$|  $$$$$$/    \
I    |__/  |__/|__/       \_______/ \______/ |__/|__/  |__/ \______/     \
I                                                                        \
I------------------------------------------------------------------------\
I------------------------------------------------------------------------I
    >"Ardurino Sketch"/"Ardurino Lang"
    >C/C++ dialect
    >supports many C++ features, but kept more minimalistic
    >supports neither the C or C++ standard libraries

    FILES: //(0x000001f2)➞
        ino     : Ardurino Sketch file

    Arduino: //(0x000001f3)➞
        >preassembled micro controllers to computers
        r3:
            >USB-B
            -ATmega328P micro-controller:
                >32 * 8 general purpose working register
                >16MHz
                >2KB SRAM
                >32KB FLASH
                >1KB EEPROM

    Sketches: //(0x000001f4)➞
        <sketch>/
		 ├── <sketch>.ino
		 └── <...>
        >ardurino programs/projects are called sketches
        >their control abstraction is what justifies this convention
        >each Arduino program must contain exactly one .ino file
          with setup() and loop() definitions
        >NOTE: for sketches, function declarations are created for every
                function definition directly at the top;
                this means typedef return types and arguments are
                getting nuked without warning or reason // XXX
        >structure is otherwise retained (you may place .c files in your
          sketch folder; the IDE will even recognize and compile them)

    Variables: //(0x000001f5)➞
        C_Builtin_and_standard_types_available:
			void
            bool
            (unsigned) char
            short
            (unsigned) int
            (unsigned) long
            size_t
            float
            double
            >NOTE: due to the memory and register constrains,
                    concrete type sizes are the minimum allowed by
                    the C standard { sizeof(int) == 2 };
                    they also seem not to expand to higher storage
                    when doing artimetrics(?!)
                    { unsigned long i = 60 * 1000; /* junk value */ }
        New:
            boolean : type alias for bool
            byte    : what you would expect
			word    : processor word; guaranteed to be >= 16 bits
			String	: char string class
				Member_functions:
					charAt(<int>)
					compareTo(<String>)
					concat(<constructor>)
					c_str()
					equals(<String>)
					equalsIgnoreCase(<String>)
					indexOf(<char|String>)
					indexOf(<char|String>, <int>)
					getBytes(<byte*>)remove(<int>)   : delete from <int> to the end
					remove(<int-from>, <int-n>) : remove <int-n> chars starting from <int-from>
					replace(<String-what>, <String-with>)   : replace all occurrences of <String-what> with <String-with>
					reserve(<int>)                          : preemptively grow the internal buffer
					substring(<int>)
					substring(<int>, <int>)
					toDouble()
					toInt()
					toFloat()
					toLowerCase()
					toDouble()
					Constructors:
						String()
						String(<char*>)
						String(<int>)
						String(<int>, <base>)
	Functions: //(0x000001f6)➞
        Setup:
            void setup(void);
            >run once on power up or reset
        Loop:
            void loop(void);
            >there is no main; this is its "equivalent"
            >never exits, its run continuously in a loop

    Interupts: //(0x000001f7)➞
        -NOTE: interupt execution suspends the hardware clock,
                affecting for example the following functions
            >delay()
            >millis()
            >micros()
        void cli(void)      : "CLear Interupts"; suspend interupt detection
        void sei(void)      : "SEt Interupts"; restart interupt detection
        void ISR(<override-r>)  : "Interupt Service Routine"; interupt handler;
                                   the desired handler is selected based on overloading
            Overloader_macros:
                PCI0_vect
                PCI1_vect
                PCI2_vect
            

    Standard_libary: //(0x000001f8)➞
        void tone(<pin>, <int-frequency>)                    : output square ware on <pin> of <int-frequency> until a corresponding call to noTone()
        void tone(<pin>, <int-frequency>, <int-duration>)    : output square ware on <pin> of <int-frequency> for <int-duration> milliseconds
        void noTone(pin)                                     : cancel squarewave initiated by tone() on <pin>
        void delay(<int-miliseconds>)
        int random(max_bound)
        int random(min, max_bound)
        unsigned long millis(void)                          : number of milliseconds since start; overflows after ~50 days
        unsigned long micros(void)                          : number of microseconds since start; overflows after ~70 mins
        int map(<int-input>, <int-fromLow>, <int-fromHigh>, <int-toLow>, <int-toHigh>)
		class HardwareSerial
			Member_functions:
				being(<int data_rate_bps>)	: initializes the interface
				print(<...>)
				println(<...>)
			Builtin_Instances:
				Serial

-----------------
 LiquidCrystal.h
-----------------

    class LiquidCrystal : represents an LCD display
        ¤state
            -cursor
                >position
                >visibility
            >text (WO)
            >scroll direction
        Constructors:
            LiquidCrystal(rs, enable, d4, d5, d6, d7)
            LiquidCrystal(rs, rw, enable, d4, d5, d6, d7)
            LiquidCrystal(rs, enable, d0, d1, d2, d3, d4, d5, d6, d7)
            LiquidCrystal(rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7)
        Member_functions:
            void begin(int cols, int rows)           : required initialization finisher // what moron made it separate from the constructor?
            void begin(int cols, int rows, CHARSIZE) : same as ABOVE, but with explicit CHARSIZE (see BELOW)
            void setCursor(int col, int row)         : move the cursor
            void home()                              : == setCursor(0, 0)
            void clear()                             : erase and home()
            int write(?!)
            int print(<...>)
            int print(int, BASE)
            void cursor()                            : show cursor
            void noCursor()                          : hide cursor
            void blink()                             : blink the cursor
            void noDisplay()                         : turn of the screen; preserves state {cursor; text}
            void display()                           : retore screen after noDisplay()
            void scrollDisplayLeft()                 : scroll the diplayed text to the left by one
            void scrollDisplayRight()                : scroll the diplayed text to the left by one
            void autoscroll()                        : turn on scrolling; each write shall push the
                                                        previous output to the scroll direction
            void noAutoscroll()                      : turn off scrolling (see ABOVE)
            void leftToRight()                       : set the scolling direction left-to-right
            void rightToLeft()                       : set the scolling direction right-to-left
            void createChar([0..7], byte*)           : create custom character from <byte*>
                                                        with the ID [0..7],
                                                        which can be passed to write() for display;
                                                        <byte*> must be an array,
                                                        where each bit is interpreted as a bool;
                                                        the size of <byte*> is assumed from the CHARSIZE
                                                        passed to begin();
                                                        NOTE: some displays may not support it at all
    
    Enum:
        CHARSIZE:
            LCD_5x8DOTS     // default
            LCD_5x10DOTS
        BASE:
            BIN
            DEC
            OCT
            HEX

#define holy_c:: //(0x000001f9)➞\
I----------------------------------------------------------\
I----------------------------------------------------------\
I                                                          \
I     /$$   /$$           /$$                  /$$$$$$     \
I    | $$  | $$          | $$                 /$$__  $$    \
I    | $$  | $$  /$$$$$$ | $$ /$$   /$$      | $$  \__/    \
I    | $$$$$$$$ /$$__  $$| $$| $$  | $$      | $$          \
I    | $$__  $$| $$  \ $$| $$| $$  | $$      | $$          \
I    | $$  | $$| $$  | $$| $$| $$  | $$      | $$    $$    \
I    | $$  | $$|  $$$$$$/| $$|  $$$$$$$      |  $$$$$$/    \
I    |__/  |__/ \______/ |__/ \____  $$       \______/     \
I                             /$$  | $$                    \
I                            |  $$$$$$/                    \
I                             \______/                     \
I----------------------------------------------------------\
I----------------------------------------------------------I

    >created by Saint Terrence Andrew Davis (Terry for short),
      the developer behind God's 3th temple, TempleOS
    >NOTE: i tried documenting as close to the King's original as it made sense for cdd
    >C89 features unmentioned are to be presumed to be untouched

    Programs: //(0x000001fa)➞
        On_TempleOS:
            >has a JIT capable compiler
        hcc <file>+     : cross-platform Holy C compiler
            YYY:
                https://github.com/Jamesbarford/holyc-lang

    Types: //(0x000001fb)➞
        >no typedef (use class)
        >union-s do not require the union keyword
        >no type checking (similar to B)
        V0  : void, but ZERO size!
        I8  : char
        U8  : unsigned char
        I16 : short
        U16 : unsigned short
        I32 : int
        U32 : unsigned int
        I64 : long
        U64 : unsigned long
        F64 : double
        no F32 float.
        Bit_access:
            // ?!
        Literals:
            '<char>+'   : multi-char literal;
                           compiles to the char values being strongly packed
                           and without a NULL termination
                           { 'ABC' -> 0x434241 }
        Classes:
            >single inheritance only
            lastclass   : ?!
            Metadata:
                format
                data

    Preprocessor: //(0x000001fc)➞
        >no macro functions
        >cant use <> with #include (use "")
        #exe {} : ?!

    Functions: //(0x000001fd)➞
        <flag> <returns> <name>(<args>) { <...> }   : function definition
        >functions with no args, or just default args can be called
          without parentheses
            {
                Dir("*");
                Dir();
                Dir;
            }
        >function names do not decay to their addresses,
          the address of operator (&) has to be used explicit-ly
        Default_arguments:
            >C++ style declarations
            >dont have to be at the end
            >an empty spot between commas will result in the default being used
            {
                U0 Test(I64 i=4, I64 j, I64 k=5) {
                    Print("%x %x %x\n", i, j, k);
                }

                Test(,3);
            }
        Builtin_wiring:
            '<char>';        : sent to PutChars()
            '' <char*>       : sent to PutChars()
            "<fmt>" <args>;  : sent to Print()
            "" <fmt*> <args> : sent to Print()
            { // The following plain C function:
                void DemoC(char drv, char * fmt, char * name, int age) {
                    printf("Hello World\n");
                    printf("%s age %d\n", name, age);
                    printf(fmt, name, age);
                    putchar(dry);
                    putchar('*');
                }
              // Is simple the the following in Holy C:
                V0 DemoHolyC(U8 drv, U8 * fmt, U8 * name, I64 age) {
                    "Hello World\n";
                    "%s age %d\n", name, age;
                    "" fmt, name, age;
                    '' dry;
                    '*';
                }
            }
        Variadic_functions:
            -variable arg count functions (...) can access their args with built-in
              variables similar to 'this' in C++
                I64 argc
                I64 argv
        Flags:
            interupt    : ?!
            haserrcode  : ?!
            public      : ?!
            argpop      : ?!
            noargpop    : ?!
        Main:
            >there is no main() function
            >any code outside of functions gets executed upon start-up, in order
            {
                V0 Main() {
                    "Heyo World\n"
                }
                Main;
            }

    Operators: //(0x000001fe)➞
        >no ternary operator (operator?)
        <base>`<power>   : power operator
        offset <member>  : returns the offset of a member of a class;
                            designed after sizeof
        Precedence:
            ` >> <<
            * / %
            &
            ^
            |
            + -
            < > <= =>
            == !=
            &&
            ^^
            ||
            = <<= >>= *= /= &= |= ^= += -=

    Logic: //(0x000001ff)➞
        >multiple logical statements can be combined into one
            { // C equivalent:
                5 < i && i < j+1 && i < 20
              // Holy C alternative:
                5 < i < j+1 < 20
            }
        >no continue (use goto)
        Switch:
            >switch statements always use a jump table
            >NOTE: dont use them with cases with really big, sparse ranges
            switch[<variable>]  : does not check <variable> to be within the jump table bounds;
                                   slightly faster than switch(), but may result in horrible bugs
            <int-1>...<int-2>   : defines a range (similar to the GNU C extension or Ada)
            case: <...>         : case for the last case value + 1;
                                   implicit numbering starts from 0
            Sub-Switch  : ?!

    Registers:
        reg [register] <var>    : declares <var> as an alias to the register [register]
                                   or a register choosen by the compiler;
                                   reg variables are guaranteed to be kept in registers
        noreg <var>             : specifies <var> to not be kept in registers by optimizations
        >no C compliant 'register' keyword

    no_warn : ?!

    Try_catch:
        ?!

    Lock: //(0x00000200)➞
        lock {<...>}    : applies an asm lock for safe multi-core processing

    Std: //(0x00000201)➞
        >no notable C stl compatibility; functions are renamed the very least
        >PascalCase
        ToI64()
        ToBool()
        ToF64()
        Print()
        PutChars()
        Option(<option>, [ON|OFF])  : controls compiler options
            OPIf_WARN_PAREN
            OPIf_WARN_DUP_TYPES
        Free()
        Malloc()
        Msize(<obj>)    : real heap allocation size of <obj>
        HeapCtrlInit()
        Cli:
            Dir(<path>=".") : lists all files on the given path
            Ed(<path>)      : invokes the editor
            Cd(<path>)      : change the current working directory to the given path
            Copy()
            Touch()
            Diff()
            Del()
            Sort()
            Touch()


#define C#\
#define C_sharp:: //(0x00000202)➞\
I-------------------------------------------\
I-------------------------------------------\
I-------------------------------------------\
I			  /$$$$$$    /$$ /$$  			\
I			 /$$__  $$  / $$/ $$  			\
I			| $$  \__/ /$$$$$$$$$$			\
I			| $$      |   $$  $$_/			\
I			| $$       /$$$$$$$$$$			\
I			| $$    $$|_  $$  $$_/			\
I			|  $$$$$$/  | $$| $$  			\
I			 \______/   |__/|__/  			\
I-------------------------------------------\
I-------------------------------------------\
I-------------------------------------------I
//(0x00000187)➞

	>"sharp"(/"cisz"^HU)( or "C hashtag" or "C Tic-Tac-Toe")
	>compiled language
	>by Microsoft
	>auto garbage collection (heap freeing)
	>fully (radically) object oriented
	>part of the Đ.NETĐ framework
	>the successor of J++, the next generation of supposed Java killers
	>"better than Java"™ (not even kidding)

	PROGRAMS: //(0x00000203)➞
		dotnet [verb] [options]		: dotnet framework interface
			new [type]			: creates new project
				console
				¤[options]
					--output <string>
			run
				--project <string>
			sln

		mono:
			mcs				: turbo C# compiler
			mono [path] 	: runs compiler C# executable located at [path]


	FILES: //(0x00000204)➞
		Extentions:
			cs		: C# source code


	C_COMPATEBLE_FEATURES: //(0x00000205)➞
		>NOTE: see AT "/C++"
		>commenting
		>commas
		>casting (C style)
		>operator-s
		>variable assignment
		>for(), while(), do{}while() loops


	COMMENTING: //(0x00000206)➞
		>C compatible
		>unique documentation comment style (see ?!)


	VARIABLES: //(0x00000207)➞
		Value_types:
			-bool:
				>"boolean"
				>binary; true or false.
			-int:
				>"integer"
				>whole number
				-signed:
					> short <= int <= long
				-unsigned:
					> ushort <= uint <= ulong
			-floating point numbers:
				>float: fraction; up to 7 decimals
				>double: double-precision floating point value; fraction; up to 15 decimals
				>decimal: 28-29 decimals
			-byte:
				>corresponds to C/C++s char
				>single byte integer
				>byte/sbyte (byte/signed byte)
			-char:
				>single unicode character
			-array:
				<typename>[]+ name = new <typename><int>+
				{ string[][] AAAAAAAAA = new string[5][5]; }
				>NOTE: fuck this syntax
			-----------------------------------------------------------------
			| C# Declaration    | Storage 	  | Size (bits)  | Size (bytes) |
			-----------------------------------------------------------------
			| bool				| Byte		  | 8-bits 	 	 | 1 byte	  	|
			| short 		  	| Word 		  | 16-bits		 | 2 bytes    	|
			| ushort 		  	| Word 		  | 16-bits		 | 2 bytes    	|
			| int 			  	| Double-word | 32-bits		 | 4 bytes	  	|
			| uint 			  	| Double-word | 32-bits		 | 4 bytes	  	|
			| long				| Quadword	  | 64-bits		 | 8 bytes	  	|
			| ulong				| Quadword	  | 64-bits		 | 8 bytes	  	|
			| float 		  	| Double-word | 32-bits	  	 | 4 bytes    	|
			| double 		  	| Quadword 	  | 64-bits	  	 | 8 bytes    	|
			| decimal			| N/A		  | 96-bits	  	 | 12 bytes    	|
			| byte				| Byte		  | 8-bits 	 	 | 1 byte	  	|
			| sbyte				| Byte		  | 8-bits 	 	 | 1 byte	  	|
			| char 			  	| Word		  | 8-bits 	 	 | 2 byte	  	|
			-----------------------------------------------------------------

	PREPROCESSOR: //(0x00000208)➞
		>there isnt one
		>its simulated
		#nullable [verb]
		#if
		#elif
		#else
		#endif
		#define
		#undef
		#region				: starts a ĐregionĐ; a ĐĐregionĐĐ is a block of code which is designated for the editor to be ĐfoldableĐ
							   (ie. a region can be, on any good editor, hidden into a single line)
		#endregion			: ends a ĐregionĐ (see ABOVE)
		#error
		#warning
		#line
		#pragma


	LOOPS:
		foreach(<typename> [name] in [iteratable]){}

	¤Misc keywords
		var		: roughly equivalent to C++'s auto (see AT "?T")
		out		: paramater modifier; makes the argument be passed by reference rather than value; equivalent to C/C++s '&'

    Execution_entry:
        static void Main() { <...> }
        >with the advent of version 10, top level instructions are allowed in 1 source file,
          which will be auto wrapped to a Main() equivalent function
	
	LOCKS:
		lock([var]){
			[...]
		}
		>[var] is purely used for uniquely identifying the lock
		-its recommended to use a readonly object which as the lock which has no other purpose
			>if an object which is being operated on is used instead, a reassignment could break the lock
		>equivalent to using Monitors


#define c_sharp_std::: //(0x00000209)➞\
I-------------------------------------------\
I	 _____   _  _     _____ _____ _      	\
I	/  __ \_| || |_  /  ___|_   _| |     	\
I	| /  \/_  __  _| \ `--.  | | | |     	\
I	| |    _| || |_   `--. \ | | | |     	\
I	| \__/\_  __  _| /\__/ / | | | |____ 	\
I	 \____/ |_||_|   \____/  \_/ \_____/ 	\
I-------------------------------------------I
//(0x0000018e)➞
-------------------------------
	using namespace System;
-------------------------------
//(0x0000018f)➞
	Interfaces:
		IClonable:
			Methods:
				Object Clone()
		IComparable:
			>used for builtin .Sort()-s 
				int Compare(Object [name])

	Classes:
		Console:
			class Console : Object
			Properties:
				Title			: console window title
			Methods:
				Write([...])					: prints [...] to stdout
				WriteLine([...])				: same as Write([...], '\n');
				Read()							: returns an Int32 (Unicode char) read from console or -1 on fail
				ReadKey()						: returns a ConsoleKeyInfo corresponding to the next key the user presses
				ReadKey([bool])					: same as ABOVE, but [bool] decides whether not to echo it as a char
				ReadLine()						: returns a string read from stdin
				Clear()							: empties out the screen
				GetCursorPosition()				: returns a tuple<Int32, Int32> representing the cursors current position on the console
				SetCursorPosition([Int32-1],	: sets console cursor position to column [Int32-1], line [Int32-2]
									[Int32-2])
		Convert:
			static class Convert : Object
			Methods:
				>these methods all return data types corresponding to their names
				>they all may throw FormatException on invalid input
				ToBoolean([...])
				ToByte([...])
				ToChar([...])
				ToDateTime([...])
				ToByte([...])
				ToChar([...])
				ToDateTime([...])
				ToDecimal([...])
				ToDouble([...])
				ToHexString([...])
				ToInt16([...])
				ToInt32([...])
				ToInt64([...])
				ToSByte([...])
				ToSingle([...])
				ToString([...])
				ToUInt16([...])
				ToUInt32([...])
				ToUInt64([...])
		Random:
			class Random : Object
			Methods:
				Next()					: returns a random Int32; return >= 0
				Next(<int>)				: returns a random Int32; return >= 0 && return < <int>
				Next(<int-1>, <int-2>)	: returns a random Int32; return >= <int-1> && return < <int-2>
				NextDouble()			: returns a random Double; return >= 0 && return < 1
		String:
			class String : Object
			Properties:
				length		: number of chars stored in *this
			Methods:
				string Insert(<Int32>, <string>)	: returns *this with <string> inserted into its <Int32>th position
				string Remove(<int-1>, <int-2>)		: returns *this with <int-2> number of chars delete-d starting from index <int-1>
				string ToLower()					: returns *this with all chars converted to lower case
				string ToUpper()					: returns *this with all chars converted to upper case
				string Trim()						: returns *this with all leadin and trailing whitespaces removed
				string Trim(<Char>)					: returns *this with all occurences of <Char> removed
				string Trim(<Char[]>)				: returns *this with all occurences of <Char[]>s members removed
				string Trim(<...-1>, <...-2>)		: returns *this with all occurences of <...-1> swapped with <...-2>; <...> may be Char/String
				string[] Split(<string>)			: returns *this cut up at each <string> delimiter as a string array; all delimeter are removed 
				string Substring(<int>)				: returns a string constructed from *this <int>th char, till its end
				string Substring(<int-1>, <int-2>)	: returns a string constructed from *this-s <int-2>s chars, starting from <int-1>
		Nullable<T>:
			class Nullable<T> : ValueType : Object
			[type]?		: expands to "Nullable<[type]>"
			>a wrapper type which adds the capability to hold the value null
			>used whenever an undefined state must be represented
			Methods:
				HasValue()	: returns whether *this is not null


	Structs:
		Double
		Float
		Int16
		Int32
		Int64
		Shared_methods:
			>"this" here marks the type in the structs name
			Parse(<string>)				: returns <string>s value converted to this
										   throw:
										       ArgumentException
			TryParse(<string>, <this>)	: returns whether <string> could be converted to this; internally operates on <this>
			ToString()					: returns a string constructed from this

---------------------------------
	using namespace System.IO
---------------------------------
//(0x00000190)➞

	Classes:
		File:
			static class File : Object
			Methods:
				AppendAllLines(<string>,			 					: appends all contents of [System.Collections.Generic.IEnumerable<string>] to file
					[System.Collections.Generic.IEnumerable<string>])	   at [path]
				ReadAllLines([path])		: returns a String[], every item being a single line from the file at [path]; the leading endlines are not copied

---------------------------------------
	using namespace System.DateTime
---------------------------------------
//(0x00000191)➞
	Classes:
		DateTime:
			class DateTime : ValueType : Object
			Methods:
				pass

--------------------------------------------------
	using namespace System.Collections.Generic
--------------------------------------------------
//(0x00000192)➞

	Classes:
		List:
			class List : Object
			List<[typename_1]>		: template-s list, [typename-1] being its contained type
			Properties:
				int Count				: number of elements	// you taught reusing Length is more logical every possible way? get fucked
			Methods:
				void Add([typename-1])			: appends [typename-1] to the end of *this
				void Insert(<int>, [typename-1]): inserts [typename-1] to the <int>th position in the list
				bool Remove([typename-1])		: delete-s the first instance of [typename-1] and returns whether it succeded
				void Clear()					: delete-s all elements of *this
				bool Contains([typename-1])		: returns whether *this has a value == [typename-1]
				void Reverse()					: reverses the elements (the last becoming the first and vica versa)
				void Sort()						: sorsts the elements in decreasing order using [typename-1]s '>' '<' operator-s
				operator[]
		Dictionary:
			class Dictionary : Object
			Dictionary<[typename-1], [typename-2]>		: template-s dictionary to have [typename-1] as its key and			// this line has a stoke over the first "[typename-1]"; ?!
														   [typename-2] as its value
			Methods:
				void Add([typename-1], [typename-2])		: adds key/value pair to *this
				void TryAdd([typename-1], [typename-2])		: returns whether the key/value pair has been added successfully
				bool ContainsKey([typename-1])				: returns whether [typename-1] exists in *this as key
				bool ContainsValue([typename-2])			: returns whether [typename-2] exists in *this as value
				bool TryGetValue([typename-1],				: returns whether [typename-1] is an existing key and
									out [typename-2])		   if so, copies the corresponding value to [typename-2]
				bool Remove([typename-1])					: delete-s the key/value pair where [typename-1] == key
				bool Remove([typename-1], out [typename-2])	: delete-s the key/value pair where [typename-1] == key and
															   copies the value to [typename-2]
				void Clear()								: delete-s all elements, while not altering the capacity

----------------------------------------
	using namespace System.Threading
----------------------------------------
//
	Classes:
		class Thread
			Thread([function])
			Thread([class ThreadProc])
			{ Thread t = new Thread(new ThreadProc(tudod_mit_bohoc)); /* where tudod_mit_bohoc is a function */ }
			Properties:
				bool IsAlive					: whether *this is currently executing
				enum ThreadPriority priority	: *this threads priority in scheduling
			Methods:
				void Start()		: start execution on the specified function
				void Sleep(<int>)	: stop execution for <int> milliseconds
				bool Yield()		: requests the processor to pass execution to another thread; returns true if it does
				void Join()			: blocks the calling thread until *this terminates
		class ThreadProc
			ThreadProc([function])
			>meant for Thread construction
			>delegate which represents the function a thread will execute
		static class Monitor
			Methods:
				// ?!; explain the waiting/ready queue
				void Enter([var])		: begin critical section; lock section with [var]
				void Exit([var])		: end critical section; release lock [var]
				bool IsEntered([var])	: returns whether [var] is locked
				bool Wait([var])		: release lock [var] and move the thread to the waiting queue for [var]
				void Pulse([var])		: move a single thread from the waiting queue for [var] to the ready queue for [var]
				void PulseAll([var])	: move all threads from the waiting queue for [var] to the ready queue for [var]

	Enums:
		enum ThreadPriority
			Highest
			AboveNormal
			Normal
			BelowNormal
			Lowest

------------------------------------------
	using namespace System.Net
	using namespace System.Net.Sockets
------------------------------------------
//

	Classes:
		class IPAddress
			Methods:
				static IPAddress Parse(<string>)		: returns new-ly constructed IPAddress from <string>
															{ var ip = new IPAddress("127.0.0.1"); }
		class TcpClient
			void Connect([IPAddress], <int>)		: attempts to connect to remote host; fails quickly 
			NetStream GetStream()					: returns NetStream for I/O; NOTE: when operating on a clients stream always Flush()
			void Stop()
		class TcpListener
			TcpListener([IPAddress], <int>)
			Methods:
				void Start()						: init function; must be called before anyother method
				TcpClient AcceptTcpClient()			: return connected TcpClient; blocking call
				void Stop()

	Examples:
		Hello_world:
			{ //
				using System;

				namespace Hello_World
				{
					class Program
					{
						static void Main(string[] args)
						{
							Console.WriteLine("Hello World!");
						}
					}
				}
			}

----------------------------------
	using System.Drawing;
	using System.Windows.Forms;
----------------------------------

	Classes:
		class Size
		class Rectangle
		class Brush
		class From
			Methods:
				Title
				Size
				virtual protected OnPaint(PaintEventArg e)
				Invalidate()
		class Graphics
			Methods:
				DrawLine(<Brush>, <int-1>, <int-2>, <int-3>, <int-4>)
				FillRectangle(<Brush>, <Rectangle>)
				FillElipse(<Brushe>, <Rectangle>)
				
	Namespaces:
		Brushes
			Black
			Yellow
			Green

----------
 Avalonia
----------

    >UI library
    >runs on linux, unline WPF and WinFroms

    >NOTE: ive found a new low. the documentation uses ViewModelBase. ViewModelBase is not part of the library.
            its implementation comes from a specific type of project template you can use (MVVM).
            public class ViewModelBase : ReactiveObject { }


#define smalltalk: //(0x0000020a)➞\
SMALLTALK

	>came out in 1972
	>grand daddy of OOP
	>has reflections
	>attempts to read like natural lanugage (hence the name)
	>interactive; supports state snapshotting by default

	Variables:
		| <name>+ |
		<name> := <value>.
		>dynamically typed
		>case sensitive
		>everything is an object; even speudo-primitive types inherit
		{
			| var |
			var := 'Hello, world!'.
			Transcript show: var.
		}

	Comments:
		"<...>"			: multiline comment
		<key: value>	: so called pragma; reflectable meta data
			category		: conventional key to base IDE method sorting on

	Operators:
		-unary
			<arg> <operator>
		-binary
			<arg-1> <operator-char> <arg-2>
		-keyword
			<arg-1> <operator-string>: <arg-2>

	Builtins:
		snapshot:
		show:

	Classes:
		<base> subclass: <name>.	// create new child class of <base> with name
		>as a general base the Object class is provided
		>all classes in the language inherit from Object
		Methods:
			>no explicit function/procedure distinction
			^<value>	: returns <value>
			>calling a method is called "sending a message"
			>member variables can only be interacted with with messages;
			  therefor getters/setters are REQUIRED;
			  if im not mistaking this is the root of the modern obsession with privates
			  with getter-setters

#define java:\  //₩\
I-----------------------------------------------------------------\
I-----------------------------------------------------------------\
I-----------------------------------------------------------------\
I                 /$$$$$                                          \
I                |__  $$                                          \
I                   | $$  /$$$$$$  /$$    /$$ /$$$$$$             \
I                   | $$ |____  $$|  $$  /$$/|____  $$            \
I              /$$  | $$  /$$$$$$$ \  $$/$$/  /$$$$$$$            \
I             | $$  | $$ /$$__  $$  \  $$$/  /$$__  $$            \
I             |  $$$$$$/|  $$$$$$$   \  $/  |  $$$$$$$            \
I              \______/  \_______/    \_/    \_______/            \
I-----------------------------------------------------------------\
I-----------------------------------------------------------------\
I-----------------------------------------------------------------I

	YYY:
		http://durgasoft.com/
	>hello sirs, please do not redeem
	>auto garbage collection (heap freeing)
	>designed after C++
	>fully object oriented
	>all code runs on the java virtual machine
	>multi-platform (with all its software)
	>web browsers used to support it (with so-called ĐappletsĐ)
    >NOTE: "application/x-java" owns the magic mime bytes "CAFEBABE"

	¤Design principles
		Simple
		Object Oriented
		Distributed
		Robust
		Secure
		Architecture Neutral
		Portable
		Interpreted
		High Performance
		Multithreaded
		Dynamic

    ???:
        "\
        @egor | java rant incoming                                                                                                                            \
              | i have a java program on my server that periodically needs to exec another program                                                            \
              | back in the java 8 days the jdk devs replaced fork/exec with posix_spawn                                                                      \
              | which is generally a good idea, on systems where it exists, it's much more lightweight than doing a fork                                      \
              | this is especially important for java, which is memory hungry as fuck                                                                         \
              | however, posix_spawn isn't really feature-complete compared to fork/exec                                                                      \
              | so what do they do? they fucking posix_spawn a helper binary jspawnhelper, pipe information to it, and have it do the exec                    \
              | keep in mind, on a certain little hobbyist unix-like operating system made by a certain finnish guy, posix_spawn is implemented in libc using \
              | fork/exec                                                                                                                                     \
              | so there's literally no benefit                                                                                                               \
              | but they also did another stupid thing, they passed the pipe fds in argv[0]                                                                   \
              | this doesn't work well with things like qemu-user                                                                                             \
              | so they made it go to argv[1] instead                                                                                                         \
              | this got backported java 17.0.10                                                                                                              \
              | when I updated, my program started mysteriously failing                                                                                       \
              | until I restarted it, of course                                                                                                               \
              | then in 17.0.11 they added another file descriptor to the argument, and that broke my shit again                                              \
              | the moral of the story is                                                                                                                     \
              | 1) don't break inter-process API, even if it's internal, because people WILL run outdated binaries                                            \
              | 2) don't make the inter-process API so stupid that you'll need to break it in the future                                                      \
              | 3) don't introduce unnecessary inter-process API in the first place (for fucks sake it's still fork/exec on linux, there's literally zero     \
              | benefit to all of this madness)                                                                                                               \
              | --                                                                                                                                            \
              | another instance of jdk devs being retarded is the removal of version scripts in java 11                                                      \
              | the main purpose of version scripts is to implement symbol versioning                                                                         \
              | but they also can be used to control symbol visibility                                                                                        \
              | basically like .def files for windows DLLs, where you can just specify a list of public symbols instead of using __declspec(dllexport)        \
              | gcc actually has an equivalent for dllexport, called __atatribute__((visibility("default")))                                                  \
              | *attribute                                                                                                                                    \
              | vast majority of project use neither version scripts nor the visibility attribute, because the default on unix systems is for all symbols to  \
              | be public (hooray namespace pollution)                                                                                                        \
              | anyway so the java devs decided to switch from using version scripts to those attributes                                                      \
              | and they completely forgot the fact that symbol versioning also exists                                                                        \
              | this breaks the ABI                                                                                                                           \
              | the dynamic linker will give you an undecipherable error message if you try to link to a versioned symbol, but there is only an unversioned   \
              | one in the .so                                                                                                                                \
              | old versions of minecraft are affected. in particular, the ones with the lwjgl2 native lib, which links to the awt native interface           \
              | --                                                                                                                                            \
        "

	Programs: //(0x0000020b)➞
		JDK			: "Java Development Kit"/"Java SDK"/"Java Software Development Kit"
			jar	<options>					: create/manipulate jar-s; follows the footsteps of tar
			javac <options> <file>+			: "JAVA Compiler"; translates java code to java byte code
			java <options> <program> <arg>+	: java virtual machine; used to interpret(/JIT) java byte code;
											   the program name is enforced to not contain the extension
											   {
												 $ java HelloWorld.class
												 Error: Could not find or load main class HelloWorld.class
												 Caused by: java.lang.ClassNotFoundException: HelloWorld.class
												 $ java HelloWorld
												 Hello, World!
											   }
		Eclipse		: very famous IDE
		Maven		: build system
			mvn <lifecycle>
				clean
				build
				install
		Gradle		: build system
		SDKMAN!		: package and environment manager for java
			sdk <verb> <subject>
				install <package>

	CPP_COMPATEBLE_FEATURES: //(0x0000020c)➞
		>NOTE: see AT "/C++"
		>commenting
		>commas
		>operator-s
		>variable assignment
		>casts
		>for(); while(); do{}while() loops
		>for-each loop
		>method syntax
		>static keyword
		-close enough:
			>the keyword const is replaced by final


	Primitives: //(0x0000020d)➞
		>ie. built in types
		>passed by value
		-----------------------
		| Java Type |   Size  |
		-----------------------
		| byte  	| 1 byte  |
		| short 	| 2 bytes |
		| int 		| 4 bytes |
		| long 		| 8 bytes |
		| float 	| 4 bytes |
		| double 	| 8 bytes |
		| char   	| 2 bytes |
		| boalean   | 1 bytes |
		-----------------------
		Char:
			>UTF-16 (2 byte; non-variadic length)


	Projects: //(0x0000020e)➞
		>core java has its own characteristic folder structure (see AT "/Organization/Project\ Structure/Core\ Java")
        >many tools {maven} depend on very specific paths


	Files: //(0x0000020f)➞
		.java	: java source code
		.class	: compiled java byte code
		.jar	: "Java ARchive"; compressed java ĐĐprojectĐĐ format


	Classes: //(0x00000210)➞
		<access> class <name> { <...> }	: class declaration
		>everything is a class
		<access>
			public	: accessable from any class;
					   source files declaring a public class,
					   must be named after it
					   {public class MyClass {} /* MyClass.java */}
		Records: //(0x00000211)➞
			<access> record <name>(<arg>+) { <...> }	: record declaration
			>boilerplate reducing feature
			>after thought
			-records are equivalent to classes where:
				>the <access> and <name> matches
				>each arg is a final private member
				>each member has a getter and a setter
				>there is a 0 argument constructor
				>there is a constructor which takes all fields as arguments
			>additional fields are only all; NOTE: do realize that this requirement makes
			  records totally useless when dealing with JPA entities
        Nesting: //(0x00000212)➞
            >classes can be nested
            >this allows for having multiple public classes in a single source file
            >every pajeet that creates a tutorial not using them should be beheaded
            >every instance is tied to an instance of the parent class by default
            >the static keyword unties the nested class from its parent
            {
                public
                class Parent {
                    class Child {
                    }
                }
            }


	Packages: //(0x00000213)➞
		>each package component has to be located in a directory named after the package
		>packages can be located online
			{ // The MyPackage package
				$ tree mypkg
				mypkg/
				└── MyPkg.java
				$ cat mypkg/MyPkg.java
				package mypkg;
				public class Component {
					public static void fun(){ }
				}
			}
		import <package>.<component>	: tells java to recognize <component> without its path
										   being specified;
										   ie. { mypkg.Component.fun() }
										   becomes { Component.fun() }
		import <package>.*				: import-s every component from <package>;
										   not recursive and cannot be made recursive

	Exceptions: //(0x00000214)➞
		{
			try { <...>
			} catch (<type> <name>) {
				<...>
			}
		}
		Specifiers:
			>"throw clause"
			>compile time enforced
			>all calls to functions with exception specifiers must be wrapped in a throw - catch block
			{
				<function_head> throws <exception> <function_body>
			}

	Try_resource: //(0x00000215)➞
		try(<declaration>) {
			<...>
		}
		>the try-resouce block guarantees that the variables declared in the head
		  do not leak
		>since every object is created on the heap AND there is no delete,
		  object lifetimes are purely managed by the garbage collector
		-quote from Oracle:
			static String readFirstLineFromFileWithFinallyBlock(String path) throws IOException {
   
				FileReader fr = new FileReader(path);
				BufferedReader br = new BufferedReader(fr);
				try {
					return br.readLine();
				} finally {
					br.close();
					fr.close();
				}
			}

			"However, this example might have a resource leak.\
			A program has to do more than rely on the garbage collector (GC)\
			to reclaim a resource's memory when it's finished with it.\
			The program must also release the resoure back to the operating system,\
			typically by calling the resource's close method.\
			However, if a program fails to do this before the GC reclaims the resource,\
			then the information needed to release the resource is lost.\
			The resource, which is still considered by the operaing system to be in use,\
			has leaked."

			"In this example, if the readLine method throws an exception,\
			and the statement br.close() in the finally block throws an exception,\
			then the FileReader has leaked."
		>due to this ''memory safe'' language leaking like a barrel,
		  oracle invented the try-resource block


	Annotations: //(0x00000216)➞
		@<annotation>
		{
			@Retention(<policy>)
			@Target(<target>)
			<access> @interface <Name> {
				<...>
			}
		}
		Retention:
			Retention.SOURCE	- for static analisys
			Retention.CLASS		- for compiletime magic
			Retention.RUNTIME	- for runtime magic
		Target:
			ElementType
				METHOD
				FIELD
				TYPE

	Objects: //(0x00000217)➞
		Builtin_methods:
			Class getClass()
			Method getDeclatedMethods
		Type_Class:
			Builtin_methods:
				bool isAnnotationPresent(<annotation>.class)
		Type_Method:
			bool isAnnotationPresent(<annotation>.class)
			setAccessible(bool)		: casts accessibility; yes, it can cast away private-ness
			invoke(object)
		Serialization:
			implements Serializable
			>the process of converting an object to reconstrucable bytecode
			>for an object to serializable, all fields must be serializable too
			>during serialization, references are preserved
			transistent <field>	: <field> will not be serialized
		POJO:
			>"Plain Old Java Object"
			>a self contained, simple as possible class
			-objects which which comply with the following restrictions:
				>does not extend classes
				>does not implement interfaces
				>does not use extern annotations (non-builtin)
		Beans:
			-objects which comply with the following restrictions:
				>has a public, 0 argument constructor
				>all fields are private
				>has getters and setters for all fields
				>serializable

	Builtin_classes:
		Math
			sin
			cos
			tan
			atan
			atan2
			exp
			log
			round
			PI
			E
		System
			out
				print
				println
			exit
		String
			length
			equals
			equalsIgnoreCase

	Core_library:
		pass

	?!:
		final <declaration>	    : the subject of the declaration is const (read-only)
        synchronized <function> : make <function> thread-safe
		strictfp                : madness. // ?!

	
	Jakarta_EE:
		JPA:
			>ORM specification
			interface interface JPARepository<T, ID>
				findAll()		: return T iteratable
				findById(<ID>)
				deleteById(<ID>)
				save(<T>)
				count()
			@Entity		: annotated to objects which are abstracted into the database as records
				@Id			: required for each @Entity; the primary key; spring manages its value
				@GeneratedValue(strategy = GenerationType.IDENTITY)
				@JsonIgnore	: hide this field when serializing to JSON
			@Projection(name=<string>, types={<class>+})	: annotated to interfaces;
															   used to expose select fields of one or multiple classes after a query;
															   overrides other exposure policies {private, @JsonIgnore}
				{
					@Projection(name = "passwords", types = { User.class })
					interface PasswordProjection {
					  String getPassword();
					}
				}
			Logical_mapping:
				ineterface JPARepository    -    DATABASE
				                 @Entity    -    TABLE
				                     @Id    -    PRIMARY KEY
				         @GeneratedValue    -    AUTOINCREMENT

	Lombok:
		>used for auto generating boilerplate code,
		  which interesting from a software philosophical perspective
		Annotations:
			class @Getter				: auto generate a getter for all private methods
			class @Setter				: auto generate a setter for all private methods
			class @NoArgsConstructor 	: auto generate an argumentless constructor
			class @Builder
	HyperSQL:
		>java implementation of an SQL database


#define java_spring::\   //₩\
I------------------------------\
I   ___          _             \
I  / __|_ __ _ _(_)_ _  __ _   \
I  \__ \ '_ \ '_| | ' \/ _` |  \
I  |___/ .__/_| |_|_||_\__, |  \
I      |_|             |___/   \
I------------------------------I
		>framework
		Init:
			YYY:
				https://spring.io/quickstart
				https://start.spring.io/starter.tgz
			>a directory local instance contains all dependencies
			>there is a webui intended for generating new projects
			>there is an API for creating new project under https://start.spring.io/starter.tgz
			>there is a cli application to wrap the API
			API:
				name=<string>
				dependencies=<style>
					web
				{
					curl https://start.spring.io/starter.tgz -d dependencies=web -d name=simple | tar -xzvf -
				}
			cli:
				spring <action>
					init
					encodepass
		Building:
			-supports the following build systems
				gradle
				maven
				ant
			gradle_targets:
				bootRun
			Dependencies:
				spring-boot-starter-*
				>spring serves a giant list of dependencies called ĐĐstartersĐĐ
				spring-boot-starter		: core; auto config
		File_structure:
			webjars/	: webjars from this path are auto served
			static/		: static content is served from here
			public/		: static content is served from here
			resource/	: static content is served from here
			error/		: error pages are looked up from here;
						   the file name decides which page is loaded;
						   they have to be named after the HTTP response code;
						   'x' is a place holder for any digit
						   { 5xx.ftlh : matches all 500 errors }
		Dev_tools:
			org.springframework.boot:spring-boot-devtools
			>disables all caching
		Classes:
			SpringBootApplication	: inject to the main application
				-responsibilities
					>logging
					>running the test server
					>processing configurations
				methods:
					static void run(class, string[])	: starts spring with the default configs
					       void run(string[])			: starts an instance of spring
				fields:
					<set|get><config>(<...>)	: all environment options are available; see AT "../../Environment"
		Environment:
			>basically fancy configuration
			>it has 15 layers of overriding and they dare to call in "sensible" in the docs
			>properties part of the environment are audited by spring to
			  reflect their configurant values
			>there are a bunch of builtin environment properties,
			  but new ones can be defined too by the developer
			>configuration names use camelCase inside java and kebab-case outside of it
			@Value("${<name>}")					: marks the <name> property to be part of the environment
			@ConfigurationProperties("<name>")	: marks the <name> class to be part of the environment
			-the following config files are autoloaded:
				application.properties
				application.yaml
				application.yml
			{ // Java runtime notation
				myApplication.setBannerMode(Banner.Mode.OFF);
			  // Yaml notation
				spring:
				  main:
				    banner-mode: OFF
			}
		Bean:
			>NOTE: not to be confused with Java Bean, Spring Beans are a different concept
			>any object that is managed by the spring IoC
		Data:
			>JPA is encouraged (see AT "/Java/JPA")
			config:
				spring.datasource.url
					jdbc:<server>://<host>:<port>/<database_name>
				spring.datasource.username
				spring.datasource.password
				spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver	// ?!
				spring.jpa.hibernate.ddl-auto	: determines how to handle syncing to the database
					none		: do not reflect changes
					update		: sync and preserve
					create		: (re)create on start up; do not drop shutdown
					create-drop	: (re)create on start up; drop on shutdown
			seeding:
				>using a CommandLineRunner is a solid choice
				sql_scripts:
					-the following sql scripts are auto sourced on start up:
						/src/main/resources/
							schema.sql
							data.sql
					>NOTE: Spring/JPA may mangle table names in unexpected ways;
							to double check the correct naming, one could place the following
							line into a sourced sql script and deduct from the create statements:
						SCRIPT TO 'dump.sql';
					config:
						spring.jpa.defer-datasource-initialization=<bool>	: whether to source sql scripts after JPA creates the database schema based on repositories
			-the following databases are supported:
				>H2 JdbcDataSource		// in memory; has a webadmin; perfect for testing
				>HikariCP
				>Tomcat pooling Datasource
				>Commons DBCP2
				>Oracle UCP & OracleDataSource
				>Spring Framework’s SimpleDriverDataSource
				>PostgreSQL PGSimpleDataSource
				>C3P0
		Validation:
			@Validated
				@Size(min=..., max=...)
		Logging:
			>NOTE: inherits the abstraction of log levels from unix like systems
			class LoggerFactory
				static Logger getLogger(<string>)	: returns named logger;
													   the loggers name is only used by itself,
													   when printing information
			class Logger
				-the following methods all log with difference log levels
				error(<string>)
				warn(<string>)
				info(<string>)
				debug(<string>)
				trace(<string>)
		CommandLineRunner:
			class CommandLineRunner
			>allows for running code after spring has started up
			-instances must be passed to the Application.run call:
				{
					@Bean
					public
					CommandLineRunner cmdlr(AnimalRepository repository) {
						return (args) -> {
							repository.save(new Animal("Bob", 3, 10));
						};
					}

					/* ...  */

					SpringApplication.run(FarmApplication.class, args);
				}
		Templating:
			-the following engines are supported
				FreeMarker
				Groovy
				Thymeleaf
				Mustache
			{ // NOTE: missing the groovy templates dependency will NOT result in any error
				spring-boot-starter-groovy-templates
			}

	
		Starters:
			Web:
				spring-boot-starter-web
				Annotations:
					@RestController		: any class with this annotation will be checked for mappings to bind
					Mappings:
						>functions can be marked as mappings
						>mappings determine what a server path will return
						@RequestMapping(<path>)
							@GetMapping(<path>)
							@PostMapping(<path>)
							@PutMapping(<path>)
							@DeleteMapping(<path>)
								@PathVariable(<var>)
						-a mapping could return one of the following:
							-string:
								>it is taken literally
								>echod back to the user
							-serializable:
								{
									MyBean
									List<MyBean>
								}
								>a JSON will be created
								>its returned as a JSON (not a string)
							-ModelAndView:
								>the ViewName property is used for template look ups;
								  ( from "src/main/resources/templates/*" )
								{
									@GetMapping("/")
									ModelAndView index(){
										ModelAndView mav = new ModelAndView();
										mav.setViewName("index");
										return mav;
									}
								}
					@Configuration(...)
					@Component
					@RequestBody
					@ResponseBody
			OAuth2:
				>pulls in security
				>as a side effect of security all pages will become private (auth only) by default
				-setting up oauth2 is done through the environment;
				  using the config files is recommended { /src/main/resources/application.properties };
				  the following options are important:
					spring.security.oauth2.client.registration.<provider>.client-id=<id>
					spring.security.oauth2.client.registration.<provider>.client-secret=<secret>
					// ---
				>NOTE: due to the nature of oauth, both the id and the secret is obtained from
				        the authentication provider. (usually through their website)
				Supported_providers:
				   github
				   google
				Security_filter_bean:
					>a filter chain is basically a firewall
					>it enforces response policies based on rules (logic)
					>can allow, deny, ask for credentials, etc.
					@Bean SecurityFilterChain <name>(HttpSecurity http) throws Exception { ... }
					>override-s the default filtering chain
					class HttpSecurity
						authorizeHttpRequests(<delegate>(<auth>))	: ?!
						fromLogin(withDefaults())					: enables on site, form based authentication
						oauth2Login(withDefaults())					: enables oauth2 authentication
						build()										: wires the request into the mapping system
					<auth>
						>NOTE: path can contain blobs
						<filter>.<policy>()
						<filter>
							-filters are interpreted from top to bottom and are greedy
							{
								// this does lock "secret/"
								auth.requestMatchers("/secret").authenticated();
								auth.requestMatchers("/*").permitAll();
								// this allows all, the lock on secret is ignored,
								//  because "/*" is matched first
								auth.requestMatchers("/*").permitAll();
								auth.requestMatchers("/secret").authenticated();
							}
							requestMatchers(<path>)
						<policy>
							authenticated()
							permitAll()
					{
						/* Make all pages autenticationless,
						 *  except for '/secret'
						 */
						@Bean
						public
						SecurityFilterChain myFilter(HttpSecurity http) throws Exception {
							return http
									.authorizeHttpRequests( auth -> {
										auth.requestMatchers("/secret").authenticated();
										auth.requestMatchers("/*").permitAll();
									})
									.oauth2Login(withDefaults())
									.build()
							;
						}
					}
			Actuator:
				>used for enabling useful production features
				endpoints:
					env
					health
					info
			Gateway:
				>basically a reverse proxy
				>a server determining how to further dispatch requests
				>could be used for load balancing
				>promots horizontal scaling
				-the root locator bean is primarly responsible for the gateway functionality:
					{
						@Bean
						public
						RouteLocator rtl(RouteLocatorBuilder b) {
							return b.<...>.build();
						}
					}
				class RouteLocatorBuilder
					routes()
						route(<string-id>, <Function<route, route>>)
				class Route
					path(<string>)
			Batch:
				pass



	### Spring Gateway Hello World ###  //(0x00000184)➞
		1. Set up dependencies
			-gateway is all we need:
				spring-cloud-starter-gateway
			-NOTE: in case you missed it during initialization,
					this is how it would look like under gradlew:
				{
					dependencies {
						implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
					}
				}
		2. Run services
			>netcat is going to be the easiest to set up
			>we will create 2 instances continously running
			$ nc -l -p 8081
			$ nc -l -p 8082
			>NOTE: -p signals the port, make sure to make them distinct
		4. Set up routing
			-we will hate to add a route locator bean:
				{
					@Bean
					public RouteLocator rl(RouteLocatorBuilder builder) {
						return builder.routes().build();
					}
				}
			>NOTE: for convinience, might as well add it as a method of our (main) application
		5. Add routes
			>we can append route() calls to routes
			>the first argument is a string id (it does not actually matter for our purposes)
			>the second argument is a lambda configuring a route
			>route calls can be chained
			>we will add 2 routes, discriminated based on path
			{
				.route("netcat-1", r -> r.path("/cat1").uri("http://127.0.0.1:8081"))
				.route("netcat-2", r -> r.path("/cat2").uri("http://127.0.0.1:8082"))
			}
			>NOTE: we must reuse to port of our designated services here,
			        currently its those on which we are running netcat(s)
		6. Compile and run
			>we regularly invoke our application from the top directory of our project
			$ gradlew bootRun
		7. Validate
			>any http connection would do
			>using a browser is going to easiest (with curl we would have to acknowledge ssl)
			{ // Enter to the address bar of your favourite browser
				127.0.0.1:8080/cat2
			}
			-now, even tho we contacted port 8080, the cat on port 8082 was reached because
			  spring forwarded the request. this can be proven by cat's output:
			{
				$  nc -l -p 8082
				GET /cat2 HTTP/1.1
				User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:111.0) Gecko/20100101 Firefox/111.0
				Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
				Accept-Language: en-US,en;q=0.5
				Accept-Encoding: gzip, deflate, br
				DNT: 1
				Cookie: csrftoken=o6NYlegO2KW4jNrhg1hjJvjI19yqm6KT
				Upgrade-Insecure-Requests: 1
				Sec-Fetch-Dest: document
				Sec-Fetch-Mode: navigate
				Sec-Fetch-Site: none
				Sec-Fetch-User: ?1
				Forwarded: proto=http;host="127.0.0.1:8080";for="127.0.0.1:55796"
				X-Forwarded-For: 127.0.0.1
				X-Forwarded-Proto: http
				X-Forwarded-Port: 8080
				X-Forwarded-Host: 127.0.0.1:8080
				host: 127.0.0.1:8082
				content-length: 0
			}
			>NOTE: do not expect the browser tab to load, netcat only listens, it does not answer
			>NOTE: the X-Forwarded-* keys hint at how the forwarding server could be
			        reflected on by the endpoint servers
		XXX:
			{ // File (for easier copy pasting): GatewayApplication.java
				package example.gateway;

				import org.springframework.boot.SpringApplication;
				import org.springframework.boot.autoconfigure.SpringBootApplication;
				import org.springframework.cloud.gateway.route.builder.*;
				import org.springframework.cloud.gateway.route.*;
				import org.springframework.context.annotation.*;

				@SpringBootApplication
				public class GatewayApplication {
					@Bean
					public RouteLocator rl(RouteLocatorBuilder builder) {
						return builder.routes()
							.route("netcat-1", r -> r.path("/cat1").uri("http://127.0.0.1:8081"))
							.route("netcat-2", r -> r.path("/cat2").uri("http://127.0.0.1:8082"))
							.build()
						;
					}

					public static void main(String[] args) {
						SpringApplication.run(GatewayApplication.class, args);
					}
				}
			}
	#

	### The most minimalistic JPA/REST example with spring ###  //(0x00000185)➞
		{
		  // --- AnimalRepository.java ---
		  	/* By using the Farm package here,
			 * we make the contents of
			 * FarmApplication.java visible
			 */
			package com.example.Farm;

			import org.springframework.data.jpa.repository.JpaRepository;

			public interface AnimalRepository extends JpaRepository<FarmApplication.Animal, Long> {}

		  // --- FarmApplication.java ---
		  	/* By using the Farm package here,
			 * we make the contents of
			 * AnimalRepository.java visible
			 */
			package com.example.Farm;

			import java.util.List;
			import jakarta.persistence.*;
			import org.springframework.boot.*;
			import org.springframework.boot.autoconfigure.SpringBootApplication;
			import org.springframework.context.annotation.*;
			import org.springframework.web.bind.annotation.*;

			/* Signals spring to perform component scanning.
			 */
			@SpringBootApplication
			public
			class FarmApplication {
				/* We mark Animal as and @Entity to signal to JTA that
				 *  we wish to abstarct this class as a database table.
				 */
				@Entity
				/* We declare Animal nested only for simplicity.
				 */
				public static
				class Animal {
					/* We mark id as the primary key for our table.
					 *  It could be further used by our program for querying, etc.  
					 */
					@Id
					@GeneratedValue(strategy = GenerationType.IDENTITY)
					Long id;

					// - Public
					// will be visible by (API) queries
					public String name;

					// - Private
					// will NOT be visible by (API) queries
					private int weight;

					// - Private \w Getter
					// will be visible by (API) queries
					private int age;
					public int getAge(){
						return this.age;
					}

					/* Constructor to be used only by US later on.
					 */
					Animal(String name, int age, int weight) {
						this.name = name;
						this.age = age;
						this.weight = weight;
					}

					/* Default constuctor required by @Entity
					 *  since we have another constuctor,
					 *  we have to specify it explicitly.
					 */
					Animal() { ; }
				}
				
				/* Marking cmdlr as @Bean makes it managed by spring.
				 * In this case it means that it will be called on start up.
				 */
				@Bean
				public
				/* Spring  expects  a
				 *  CommandLineRunner       Spring will pass the othetwise
				 *  instance for start       private "global" repository
				 *  up configurations        instance for us
				 *        |                           |
				 *        V                           V             */
				CommandLineRunner cmdlr(AnimalRepository repository) {
					return (args) -> {
						repository.save(new Animal("Bob", 3, 10));
					};
				}

				/* Marking this class as a @RestController makes spring scan it
				 *  for @*Mapping-s.
				 *  Otherwise they would be ignored.
				 */
				@RestController
				static
				class Controller {
					/* Internal copy of the global repository instance.
					 */
					private final
					AnimalRepository repository;

					Controller(AnimalRepository repository) {
						this.repository = repository;
					}
					
					/* Associate the calling of this function
					 *  with GET requests arriving to :URL:/hello
					 */
					@GetMapping("/hello")
					/* Making the return type List<Animal> will
					 *  result in a JSON of N auto serialized
					 *  Animal instances
					 */
					List<Animal> say_hello(){
						return repository.findAll();  // findAll is inherited by AnimalRepository
					}
				}

				/* Finally, launch or spring application at once.
				 * As we insstantiate SpringApplication and there by the spring eco-system,
			     *  we trigger its commandline, Inversion of Control, Database and web service
			     *  features in the process.
				 */
				public static
				void main(String[] args) {
					SpringApplication.run(FarmApplication.class, args);
				}
			}
		}
	#

	### Minimal Mysql example with Spring ###   //₩
		1. Create a new domain specific database and user
		{@begin=sql@
			CREATE DATABASE spring;
			CREATE USER 'spring'@'localhost' IDENTIFIED BY 'passwd';
			GRANT ALL PRIVILEGES ON spring.* TO 'spring'@'localhost';
			FLUSH PRIVILEGES;
		@end=sql@}
		2. Generate a Spring Boot application with the following dependencies:
			jpa
			mysql
		3. Configure Spring to connect to mysql
		{// File: src/main/resources/application.properties
			spring.datasource.url=jdbc:mysql://localhost:3306/spring
			spring.datasource.username=spring
			spring.datasource.password=passwd
			spring.jpa.hibernate.ddl-auto=update
		}
		4. Create JTA classes to sync to the database
		{
			@Entity
			public
			class Sheep {
				@Id
				@GeneratedValue(strategy = GenerationType.IDENTITY)
				public Long id;
				public String name;

				Sheep(String name_) {
					this.name = name_;
				}
			}
			// ---
			public
			interface SheepRepository
			extends JpaRepository<SqlApplication.Sheep, Long> {}
		}
		5. Seed the database somehow
		{
			@Bean
			public
			CommandLineRunner cmdlr(SheepRepository repository) {
				return (args) -> {
					repository.save(new Sheep("Ross"));
					repository.save(new Sheep("Joe"));
				};
			}
		}
		6. Validate
		{
			$ mysql -u root
			> use spring;
			> select * from sql_application$sheep;
			+----+------+
			| id | name |
			+----+------+
			|  1 | Ross |
			|  2 | Joe  |
			+----+------+
		}
	#


		NOTES:
			>highly recommended to wrap your stuff in a package
			

#define groovy::\   //₩\
I------------------------------------------\
I     _____                                \
I    |  __ \                               \
I    | |  \/_ __ ___   _____   ___   _     \
I    | | __| '__/ _ \ / _ \ \ / / | | |    \
I    | |_\ \ | | (_) | (_) \ V /| |_| |    \
I     \____/_|  \___/ \___/ \_/  \__, |    \
I                                 __/ |    \
I                                |___/     \
I------------------------------------------I
	
	>language dependent on the java virtual machine
	>compiles to java byte code
	>in many ways very similar to java
	>the syntax is lighter, more script-y
	>commonly used for testing
	>has templating support

	Templating:
		*.tpl
		>its like PHP, if it were to override HTML syntax with C
		{
			<tagname> (<options>) {<innerHTML>}
		  // Translates roughly to:
		    <<tagname> <options>>
				<innerHTML>
		    </<tagname>>
		  // E.g
		  	div (id: 'mydiv') {
				h1 { yield 'IOWA' }
			}
		}
		Values:
			>everything in an open convect is interpreted as a keyword or symbol name
			>format strings use the ${<name>} schema
			{
				// literal string 'mystring'
				yield 'mystring'
				// expension of variable 'myvar'
				yield myvar
				// format string using the value of 'myvar'
				yield "# - ${myvar}."
				// iteration using all elements of 'myvars'
				myvars.findAll().each { myvar ->
					li {
						yield myvar
					}
			}
		Methods:
			>NOTE: parenthesies are ommitable if there is only one argument
			yield(<...>)			: pastes <...> into the HTML; basically PHP's echo;
									   auto escapes "<>"s
			yieldUnescaped(<...>)	: yield; but "<>"s are not escaped
			comment(<...>)			: pastes <...> into the HTML encapsulated inside a comment

#define kotlin:: //(0x00000218)➞
I-------------------------------\
I   _   __      _   _ _         \
I  | | / /     | | | (_)        \
I  | |/ /  ___ | |_| |_ _ __    \
I  |    \ / _ \| __| | | '_ \   \
I  | |\  \ (_) | |_| | | | | |  \
I  \_| \_/\___/ \__|_|_|_| |_|  \
I-------------------------------I


    Files:
        .kt     : kotlin source file
        .kts    : kotlin script

    Applications:
        program:
            >requires a main
            fun main() { ... }  : entry point
        script:
            >the global context is executed
            >the compiler creates no output file and runs the code after compiling to memory

    Comments:
        >C/C++ style
        >NOTE: CAN be nested
        // <...>
        /* <...> */

    Variables:
        <var|val> <name> [: <typename>]
            var : variable
            val : const
            >the typename is not required on assignment at declaration (behaves like auto)
            >the idea is that you are only suppord to specify the type explicitly
              if its not obvious what the type of the right hand side will be
              {function return value}
            >C# nullable syntax ('?')
        typename:
            >no primitive types
            Boolean
            Byte
            Short
            Int
            Long
            Float
            Double
            Char
            String
            Array
            Pair
            List
                Member_functions:
                    first()
                    last()
                    count()
                    add(<typename>)
                    remove(<typename>)
            Set
                Member_functions:
                    count()
                    add(<typename>)
                    remove(<typename>)
            Map
                count()
                add(<pair>)
                remove(<typename>)
                operator[]
                keys()
                values()
            // ---
            Any         // void * / Object
            Unit        // void / ()
            Nothing     // [[noreturn]] (can still throw)
        literals:
            >normal numerics
            -C style char/string literal quoting
                "string"
                'c'
            -interpolation:
                "--- ${muh_var} ---"
                " = ${i * 6}"
                >can contain arbitrary code
                >NOTE: can include unescaped '\"'s; its smart like bash
                >NOTE: the offical documentation refers to this as template-s

    Operators:
        ?.  : "Elvis operator";
               if left handside is null
                then null
                else access right hand side of left hand side
               { val b : Int? = a?.size(); }

    Functions:
        func <name>([parameter]+) [: <typename>] { <...> }
        func <name>([parameter]+) = <expression>
        >first order
        >NOTE: the passed parameters are const (val)
        >if the body can be expressed as a single expression
          then no return type or return keyword is needed
        >named arguments
        >default values
        -lambda types are defined with haskell like syntax:
            var myrelation : (Int a, Int b) -> Int
        {
            fun sum(a: Int, b: Int): Int { return a + b }
        }

    Data_groups:
        .    : member access notation
        this : refers to the current object
        class:
            [specifier] class <name> [argument-list] : <inheritance> { <...> }
            >members are public by default
            >get set syntax that drops the function call notation
            >can be extended from outside of their definition
            specifier:
                open    : can be inherited from
                final   : cannot be inherited from; default
                data:
                    -the compiler auto generates the following methods:
                        >toString()
                        >equals()
                        >hashCode()
                    >final by default and this cannot be changed
                abstract    : the class cannot be consturcted and abstract members become allowed
                value       : created on the stack
            inheritance:
                typename                : inherits from <typename>
                <typename> by <var>     : inherits <typename> through <var>;
                                           which is an also an injected dependency
            constructor:
                super(<...>)    : refers to the constructor of the parent
                >a ĐĐprimary constructorĐĐ is a constructor all other constructors must call
                >if a class has no primary constructor and inherits then it must call the parents constructor
                >if an argument list is given to the class definition,
                  that creates a primary constructor
                {
                    class Language(val name : String, var bullshit_score : Int) {}
                    var kotlin = Language("Kotlin", 3);
                }
            methods:
                <specifier> <function>
                    override
            fields:
                <var> [get] [set];
                get() { <...> }
                set(value) { <...> }
                field   : refers to the current member variable inside a getter or a setter
                lateinit
            enum:
                pass
        interface:
            >like abstract classes, but they cant store state at all
            SAM:
                fun interface <name> { fun <...>(<parameters>): <typename> } 
                >"Single Abstract Method"
                >radical OOP way of typedef-ing a function
        object:
            >syntax support for a singleton
            companion object:
                >static, but radically OOP because fuck you thats why
        access:
            private
            protected
            internal
            public
        extensions:
            fun <typname>.<name> <function-declaration>
            val <typname>.<name> <field-declaration>
            >symbols which are added as members to a class while being declared outside of it
            >resolved static-ally
            >can be inside other class-es
            >cannot use 'field'
        nesting:
            >valid
            inner   : allows the nested class to access the fields of its parent

    Control:
        when    // switch
            ->      // :
            else    // default
        do while
        while
        for     // foreach
        try catch finally

    Operators:
        <1>...<2>                   : returns iterable from <1> to <2>; inclusive
        <1>...<<2>                  : returns iterable from <1> to <2>; end exclusive
        <...> in <iterable>         : returns bool indicating whether <operand>
                                       can be found inside <iterable>
        <iterable> step <int>       : returns interatable constructed from
                                       every <int>th element of <iterable>
        <...> is <typename>         : returns bool indicating whether <...>
                                       is of the type <typename>
        <1> to <2>                  : returns a Pair constructed from <1> and <2>

    Generics:
        >they exist

    Packages:
        package <name>
        import <name>
        >no directory requirements (unlike in java)

    Standard_library:
        print()
        println()
        readln()

    ?!:
        >if else has a value
            {
                val c : Int = if (a == b) { a } else { b }
            }

#define tcl: //(0x00000219)➞\
I-------------------------------------------------\
I-------------------------------------------------\
I-------------------------------------------------\
I            /$$$$$$$$ /$$$$$$  /$$               \
I           |__  $$__//$$__  $$| $$               \
I              | $$  | $$  \__/| $$               \
I              | $$  | $$      | $$               \
I              | $$  | $$      | $$               \
I              | $$  | $$    $$| $$               \
I              | $$  |  $$$$$$/| $$$$$$$$         \
I              |__/   \______/ |________/         \
I-------------------------------------------------\
I-------------------------------------------------\
I-------------------------------------------------I

    >interpreted
    >integrates very (VERY) closely with C
    >primarly used for rapid prototyping and/or creating cross-platform GUIs
	>the TCL interactive shell uses "%" as ${PS1}; except to see it in examples

    Programs: //(0x0000021a)➞
        tclsh [FILE]+       : runs the provided scripts or launches an interactive shell
        tcc4tcl             : tcl shell fork running a patched version of tcc;
                               allows nesting native C in tcl scripts which will be JIT compiled

    Syntax: //(0x0000021b)➞
        >system shell like
        {} : encapsulate spaces in arguments
        [] : eval a command in-place
        $  : access variable value

    Return_codes: //(0x0000021c)➞
        enum {
            TCL_OK
            TCL_ERROR
            TCL_RETURN
            TCL_BREAK
            TCL_CONTINUE
        };

    Functions:  // ?!
        proc <name> {[arguments]+} { [...] }
        >NOTE: proc builtin function and not a keyword

    Builtins: //(0x0000021d)➞
        Variables: //(0x0000021e)➞
            argc
            argv
            argv0
            env
            TCL_platform
            TCL_interactive
            retval
        Functions: //(0x0000021f)➞
            IO: //(0x00000220)➞
                puts
                    -nonewline
                error
                open
                fconfigure
                read
                close
            Math: //(0x00000221)➞
                abs arg
                acos
                ceil
                cos
                double
                floor
                fmod
                hypot
                int
                isqrt
                expr
                log
                log10
                min 
                pow 
                sin 
                sinh 
                sqrt 
                tan 
                tanh
                wide
            Variables: //(0x00000222)➞
                global
                set
                unset
                incr
            Control: //(0x00000223)➞
                if
                for
                foreach
                while
                continue
                break
                eval
                catch
            Strings: //(0x00000224)➞
                string [verb]
                    is
                    repeat
                    range
                    last
                    match
                    trim
                append
                format
                scan
                subst
                regexp
                regsub
            Lists: //(0x00000225)➞
                list
                concat
                join
                lappend
                lassign
                lindex
                linsert
                llength
                lrange
                lrepeat
                lreverse
                lset
                lsort
                split
            Dictionary: //(0x00000226)➞
                dict
                    create
                    append
                    get
                    merge
        TK: //(0x00000227)➞
            package require Tk
            >"graphical Tool Kit"
            >used by pythons tkinter
            >realistically the only thing keeping Tcl alive
            >cross-platform
            >from the 90s, looks like the 90s (READ: peak soul)
            Widgets: //(0x00000228)➞
                wm
                    title <window> <string>
                destroy
                <widget> <wpath> <options>
                    button
                    label
                    toplevel
                    frame
                    entry
                    listbox
                    <wpath>
                        >'.' marks the inplicitly created root window
                        >each widget must name itself with the basename
                    <(common) options>
                        -text
                        -command
                pack <widget>
                    -side [top|left|right|bottom]
                        /* Top|Bottom packed first*/   /*Left|Right packed first*/
                            +----------------+            +----------------+
                            |      Top       |            |   |  Top   |   |
                            |----------------|            |   |--------|   |
                            | L |        | R |            | L |        | R |
                            | e |        | i |            | e |        | i |
                            | f |        | g |            | f |        | g |
                            | t |        | h |            | t |        | h |
                            |   |        | t |            |   |        | t |
                            |----------------|            |   |--------|   |
                            |     Bottom     |            |   | Bottom |   |
                            +----------------+            +----------------+
                grid
            Popups: //(0x00000229)➞
                tk_messageBox
                tk_dialog
                tk_chooseColor
                tk_chooseDirectory
                tk_getOpenFile      : existing file only
                tk_getSaveFile      : allows for new


    C_integration:
          // ?!?!?!

#define python: //(0x0000022a)➞\
I------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------\
I			  /$$$$$$$              /$$     /$$                          			 \
I			 | $$__  $$            | $$    | $$                          			 \
I			 | $$  \ $$ /$$   /$$ /$$$$$$  | $$$$$$$   /$$$$$$  /$$$$$$$			 \
I			 | $$$$$$$/| $$  | $$|_  $$_/  | $$__  $$ /$$__  $$| $$__  $$			 \
I			 | $$____/ | $$  | $$  | $$    | $$  \ $$| $$  \ $$| $$  \ $$			 \
I			 | $$      | $$  | $$  | $$ /$$| $$  | $$| $$  | $$| $$  | $$			 \
I			 | $$      |  $$$$$$$  |  $$$$/| $$  | $$|  $$$$$$/| $$  | $$			 \
I			 |__/       \____  $$   \___/  |__/  |__/ \______/ |__/  |__/			 \
I					    /$$  | $$ ((((python)))                                      \
I					   |  $$$$$$/                                        			 \
I					    \______/                                         			 \
I------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------I
	{keywords left to describe: ?!
		as; async; await; finally; is; nonlocal; yield;
	}

	>most of this documentation assumes python3 or higher
	>forget semicolons;
	>whitespace sensitive
	>interpreted language
	>the python3 interactive shell uses ">>>" as ${PS1} and "..." as ${PS2} by default; except to see it in examples
	NOTE: if you very creatively name your module testing files [module].py that WILL break shit as it will try to import itself;
		   "<-->" signals indentation, cause i repeat, this language is whitespace sensitive
	
#define python-programs:: //(0x0000022b)➞\
I#######################################\
I ___                                   \
I | _ \_ _ ___  __ _ _ _ __ _ _ __  ___ \
I |  _/ '_/ _ \/ _` | '_/ _` | '  \(_-< \
I |_| |_| \___/\__, |_| \__,_|_|_|_/__/ \
I              |___/                    \
I#######################################I
************
	pip3:
************
	A tool for installing and managing Python packages.

	NOTE: do not run pip as root; such action can break system tools, leading you to speedrun the Linux installation (again)

	pip3 [operation]
		install 					: installs packages
			[package]					: [package]
			-r [file]					: packages listed in [file]
		uninstall
Purple(	search [package]			: searches for [package]	)	// depracated
		list						: lists installed [packages]

**********
***************
	python3:
***************

	python3 ([options]) [file]
		>not providing any arguments will result in the python interpreter being run interactively
		>[file] being a python script
		-c '''<string>'''	: pass program as <string>
		-E					: ignore python environment variables

*************
*****************
	ipython3:
*****************
	>python3 wrapper; fully compatible
	>slow as fuck
	-adds the following features:
		>syntax highlighting
		>auto history
		>dynamic object introspection
		>auto completion
		>system shell access
***************
************
	pudb:
************
>NOTE: its broken; step does not step.
Purple(
	>interactive python debugger
	>tui
	>looks great
	>minimal typing redundancy friendly
)
**********

	Other_notable_implementations:
		>IronPython by Microsoft
		>Anaconda

//--------------------

	FILES:
		.py					: Python script
		.pyc				: Bytecode compiled from a Python script; usually created by the interpreter automatically and stored inside a __pycache__
		.ipynb				: "Interactive PYthon Note Book"; JSON export of a Jupiter-lab session
		__pycache__/		: a folder create by the interpreter at runtime specifically for caching
		requirements.txt	: new line separated list file pip packages used for storing an environment


#define python-language:: //(0x0000022c)➞\
I##########################################\
I  _                                       \
I | |   __ _ _ _  __ _ _  _ __ _ __ _ ___  \
I | |__/ _` | ' \/ _` | || / _` / _` / -_| \
I |____\__,_|_||_\__, |\_,_\__,_\__, \___| \
I                |___/          |___/      \
I##########################################I

	FILES: //(0x0000022d)➞
		Extentions:
			py		: python script
			pyc		: compiled python code
		Runtime:
			.python_history		: interactive python interpreter history file


	Commenting: //(0x0000022e)➞
		# [stuff]		: single line
		'''[stuff]'''	: multi line; more of a bug then a feature tho



	Importig: //(0x0000022f)➞
		>including really
		>module-s import-ed in import-ed module-s are not visible in the base file
		   { import [lib]/[python file]

			 [imported python file (no extension)].[function from imported python file]()
		   }
	     or
		   { from [python file (no extension)] import [function from imported file]
			
			 [imported file]()
		   }
	     or 
		   { from [python file (no extension)] import *		//imports every function
			
			 [function]()
		   }
	


	Operators: //(0x00000230)➞
		>operator-s complying with C/C++ do not have a description, see that AT /C++/Operators
		Logical:
			and
			or
			not
			>
			<
			==
			!=
			>=
			<=
			-in
				[a] in [b]		: whether [a] equals to any member of [b]
				[a] not in [b]  : not ([a] in [b])
			-is
				[a] is [b]		: are [a] and [b] the same object;
								   being equal in value isn't enough
				[a] not is [b]	: not ([a] is [b])
				{ >>> y = ["python", "C++", "C"]
				  >>> x = y
				  >>> x is y
				  True
				  >>> x = ["python", "C++", "C"]
				  >>> x is y
				  False
				}
		Artimetric:
			+
			+=
.			-
.			-=
			%
			%=
			*
			*=
			**		: power
			**=		: power assignment
			/		: divide to float
			/=		: 
/*			//		: */; divide to int
/*			//=		: */; 
		Bitwise:
			&
			|
			^
.			>>
			<<
		Misc:
			*[list || tuple]	: unpacking operator; translates [list || tuple] to a literal of its elements
				{	>>> def repPrint(times, _str):
					... for i in range(times):
					...     print(_str)
					...
					>>> myTuple = {3, "This feature is legit cool as fuck."}
					>>> repPrint(*myTuple)
					This feature is legit coll as fuck.
					This feature is legit coll as fuck.
					This feature is legit coll as fuck.
				}
			**[dictionary]		: dictionary unpacking operator



	Logic: //(0x00000231)➞
		-if
			{	if [bool]:
				<-->[...]
				([elif])
				([else])
			}
		¤[elif]
			>else if
			{	elif [bool]:
				<-->[...]
			}
		¤[else]
			{	else:
				<-->[...]
			}
		>NOTE: "True" != "true"; (NameError: name 'true' is not defined)



	Loops: //(0x00000232)➞
		-for
			>[variable] will take up the values of [list] or [range(<int>)] as it goes throught the elements
			>technically its a foreach loop
			{	for [variable] in [list]:
				<-->[commands]
				<-->[...]
			}
		-while
			{	while [logic]:
				<-->[commands]
			}
		>break && continue works as if a sane person had written this shit


	Literals:
        Int:
            [digit|_]*
            { 1_000_000 }
        Float:
            <int>.<int>
            <int>.
            .<int>
            { 3.14; .1; 2. }
		String:
			'[...]'				: string literal; '"'s dont have to be escaped 
			"[...]"				: string literal; '''s dont have to be escaped
			r<string_literal>	: raw string literal; escape sequences are not processed; most commonly used when writing regex
            f<string_literal>   : format string; like string.format where the current scope is passed in


	Variables: //(0x00000233)➞
        >dynamically typed
		>variable type can change
		>one cant declare a variable before assigning a value to it, therefor { myString = "" } and { myList = [] } are common sights
		>variable names must start with a letter or the underscore char
		¤types
			¤basic
				>bool; const
				>int; const
				>long; const
				>float; const
				>complex (scientific numbers){ 3e+26 }; const
			-iterable:
				>a container type which can be iterated over
				>from now on referred to as "itr"
				¤
					>string; const
						-ĐĐunicodeĐĐ by default (used to be ascii prior to python3)
					-list (like if a c++ vector would allow different variable types)
						>mutable
						>[list][num]		: [num]-th member of [list]
						>[list][num:]		: all members of [list] from [num]; including [num]
						>[list][:num]		: all members of [list] till [num]; not including [num]
						>[list][num1:num2]	: members between [num1] and [num2]; including [num1], but not including [num2]
						>negative [num]-s start from the end
						>you can go out of range tho; (nor consistency nor wholeness)
						{     [name] = []     }
					-tuple (a const list)
						>mutable
						{     [name] = ()     }
					-dictionary
						>mutable
						{     [name] = {<key> : <value>}     }
		-casting:
			[type_func]([variable])
			>does what you would expect (on heroin)
			>[type_func] is a builtin function see AT "../Builtin functions"
			{ int("9")
			  str(3.14)
			}
        Scoping:
            >variables declared at the script level are global
            >variables declared inside functions are local to the function
            >variables declared inside a class are local to instances
            >global variables are always readable
            global <variable>   : specifies that the symbol in the current scope is global;
                                   can be used to write the value of a global variable from
                                   inside a function;
                                   the symbol referenced may or may not be already defined,
                                   assuming its not, attempting to read its value will throw


	Comprehensions: //(0x00000234)➞
		>can return either a list, dictionary or set
		[ <select>      <from> (<where>) ]			: list comprehension
		{ <select>      <from> (<where>) }			: set comprehension
		{ <select-dict> <from> (<where>) }			: dictionary comprehension
		execution:
			1. Get next item (break if none) <--+
			2. Filter                        <--|-+
			3. Append eval-d return value    <--|-|-+
			4. goto 1.                          | | |
						  +---------------------+ | |
						  |                       | |
						  |      +----------------+ |
						  |      |                  |
				  +-------|------|------------------+
				  |       |      |
				  |       |      |
				  |       |      |
				  |       |      |
			      V       V      V
			[ <select> <from> <where> ]
		<from>:
			for <...> in <...>
			>NOTE: how it works on any iterable {files}
		<where>
			if <bool>
			>optional
			>filters whether an element should be added or not
		<select>
			<statement>
			>any statement
			>the return value is what gets appended to the generated list
		<select-dict>
			<statement> : <statement>
			>any 2 statements separated by a colon
			>the statements return values become key-value pairs
		{ @begin=python@
			# Unrealistic example showing way too many things at once
			>>> [int(x) + 1 for x in "20232805080" if x != '0']
			[3, 3, 4, 3, 9, 6, 9]
		@end=python@ }


	Functions: //(0x00000235)➞
		{ @begin=python@
			def [name](([parameters])):
			<-->[command]
			<-->[...]
			<-->(return [variable])
		@end=python@ }
		>default values work C style
		>call it as normal ( [name](([parameters])) ) { print("Heyo") }
        -nested functions are allowed
            >nested functions can implicitly reference the parents variables
        lambda:
            lambda [parameters] : <expression>
            >creates an anonymous function object
            >can contain only one expression
            >the expressions value is returned
            >mostly syntactic sugar for quick callbacks
            {@begin=python@
                >>> list(filter(lambda x : x >= 5, [1, 5, 3, 8, 9, 4, 2, 6]))
                [5, 8, 9, 6]
            @end=python@}


	Type_members: //(0x00000236)➞
		<string>:
			.upper()								: returns <string> with CAPS
			.lower()								: returns <string> with all lower case letters
			.title()								: returns <string> with CAPS first letter of words
			.split([string1], <int>)				: returns list with <string> split at [string1] (if none is specified at spaces)
													  <int> specifies the maximum list elements to split into (indefinite if none is specified)
			.join()
			.find(<string>)							: returns position of <string>s first occurrence or -1
			.rfind(<string>)						: returns position of <string>s last occurrence or -1
			.replace([string-1], [string-2])		: returns this with all occurrences of [string-1] replaced with [string-2]
			.isalnum()								: returns whether <string> consists only from alpha numeric chars
			.isalnum()								: returns whether <string> consists only from whitespace chars
			.format([name] = [val])					: returns <string> with placeholder [name] switch-ed to [val];
													   placeholders follow the format: "{name}"
			string[[start]: [end]: [step]]			: returns a substring
				string[start:end]		: get all characters from index start to end-1
				string[:end]			: get all characters from the beginning of the string to end-1
				string[start:]			: get all characters from index start to the end of the string
					[start]					: The starting index of the substring. The character at this index is included in the substring. 
											   If start is not included, it is assumed to equal to 0.
					[end]					: The terminating index of the substring. The character at this index is NOT included in the substring. 
											   If end is not included, or if the specified value exceeds the string length, 
											   it is assumed to be equal to the length of the string by default.
					[step]					: Every ‘step’ character after the current character to be included. The default value is 1. 
											   If the step value is omitted, it is assumed to equal to 1.
		[list]:
			.append([value])						: hozzáad a végéhez
			.pop([num]) -> [element]				: removes [num]-th member; if left blank, removes last
		[dictionary]:
			.keys()
			.values()
		[file]:
			.write([typename presumed by mode])		: writes [typename presumed by mode] to [file]
			.read()									: returns string
			.readline()								: returns line of string
			.close()								: duh; should always be called


	Builtin_functions: //(0x00000237)➞
		>NOTE: the most important functions are marked with a 'Ж' at the begining of their line
		__import__([module],									: import-s [module] with [dictionary1] globals and [dictionary2] locals;
				   [dictionary1] = None, [dictionary2] = None,     this function is invoked by the import keyword under the hood
				   [list] = (), <int> = 0)
		abs(<int>)						: returns absolute value of <int> or member  __abs__()
		all([itr])						: returns True if none of [itr]s elements are False
		any([itr])						: returns True if any of [itr]s elements are True
		ascii(<string>)					: returns a ascii valid, unicode escaped representation of <string>
		bin(<int>)						: returns <int> or member __index__() converted to python valid binary format (prefixed with "0b")
Ж		bool([var])						: returns [var] converted to bool
		breakpoint()					: import-s pdb (see AT "../STD modules/pdb") and calls set_trace(); ie. starts a debugger
		bytearray([],[],[])
		bytes([var])					: returns a immutable bytes object initialized with the given size and data.
		callable([object])				: returns whether it is possible to call [object] (no success guaranteed)
Ж		chr(<int>)						: returns char represented with value <int>
		classmethod()
		compile()
		complex()
		delattr([object], <string>)		: delete-s [object]s <string> member; { delattr(x, "foobar") == del x.foobar }
Ж		dir([])
		divmod([], [])
		enumerate([list])				: creates a list of tuples with 0 to N and [list]-s elements;
                                           primarily used in for loops while an accumulator is also needed
                                           lazily evaluated;
                {@begin=python@
                    >>> list(enumerate(["a", "b", "c", "d", "e"]))
                    [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e')]
                @end=python@}
		eval([], [], [])
		exec([], [], [])
		filter([func], [itr])				:
Ж		float([var])						: returns [var] converted to float
		format()
		frozenset([itr])
		getattr([object], <string>)			: returns [object] member called <string> { getattr(x, "foobar") == x.foobar };
											   fuck getters and setters in C++, but this is actually a nice feature and good practice
											   (see also AT "./getattr")
		globals()							: returns a directory of the current global symbol table
		hasattr([object], <string>)			: returns whether [object] has a member called <string>
		help([object])						: prints info about class
		hex(<int>)							: returns <int> or member __index__() converted to python valid hexidecimal format (prefixed with "0x")
		id([object])						: returns a unique int corresponding [object]; objects with non-overlapping lifetimes
											   may have the same id() value
Ж		input((<string>))					: reads stdin for a line if no argument is given, else outputs <string> to stdin 
Ж		int([var], <int> = 10)				: returns [var] converted to int in base <int>
		isinstance([object], [class])		: returns whether [object] is an instance of [class]
		issubclass([class1], [class2])
		iter([object], [])
Ж		len(<string>)						: length of <string>
		locals()							: returns a directory of the current local symbol table
Ж		list([itr])							: lists(?) [list]; (instead of treating it as a memory address)
Ж		map([func], [itr])
		max([itr1](, [itr2]))				: returns the largest element from [itr](s)
		min([itr1](, [itr2]))				: returns the smallest element from [itr](s)
		next()
		oct(<int>)							: returns <int> or member __index__() converted to python valid octal format (prefixed with "0o")
		open([file name], "[mode]")			: returns file object
			¤mode
				x 	: create (fail if the file already exists)
				r	: read
				w 	: write
				a	: append
				t	: text mode; default
				b	: binary mode
				+	: updating (r + w)
		ord([char] || <int>)				: return either unicode int representation of [char] or unicode char representation of <int>
		pow([int1], [int2](, [int3]))		: returns [int1] as base raised to exponent [int2]; [int3] is a modulo,
											   pow(i, h, g) is more efficent than ( pow(i, h) % g )
		print([var])						: prints [var] to stdout
		property()
Ж		range(<int>)						: 
Ж		range([int1], [int2])				: 
		repr([object])						: returns a string representation of [object]; ideally this string can be fed to eval()
											   to create an equivalent object, other wise string is enclosed as: '<'[...]'>'
		reversed([])
		round([num1](, [num2]))				: returns [num1] rounded to the nearest int or to [num2] decimal places
Ж		set([itr])							: returns a set constructed from [itr]
		setattr([object], <string>, [var])	: sets <string> member of [object] to [var] (see also AT "./getattr")
		sorted()
		staticmethod()
		sum()
		super()
Ж		tuple([itr])						: returns a tuple constructed from [itr]
		type([var])							: returns [var]s type
		vars([])
		get([list || tuple])				: sorts and removes duplicates
		zip([list_a], [list_b]) 			: returns a list of lists, which's members are paired together
			>if cant pair, will purge
			>can take unlimited number of lists
			{ @begin=python@
				# Zip Used
				letters = ["a", "b", "c", "d", "e"]
				numbers = ["1", "2", "3", "4", "5"]
				print(zip(letters, numbers))
				# Output
				[('a', '1'), ('b', '2'), ('c', '3'), ('d', '4'), ('e', '5')]
			@end=python@ }

	Classes: //(0x00000238)➞
		>standardly defined, implements (multiple) inheritance and polymorphism
		{ @begin=python@
			>>> class [name]:
			... <-->[...]
		@end=python@ }
		¤methods( ie. member functions)
            >the object is explicit-ly passed -> the first argument is always the object itself
            >the convential name for the first argument is "self"
				{ @begin=python@
					// this example presupposes an MP3 class (m) which has a "len" member
					>>> class music:
					... <-->m = readMP3("Seether - 03. - Karma and Effect (2005).mp3")
					... <-->def length(self):
					... <--><-->return self.m.len
				@end=python@ }
			-__init__:
				>the constructor really
				{ @begin=python@
					>>> class a:
					... <-->def __init__(self, b):
					... <--><-->print(b)
					... 
					>>> n = a("Hello world")
					Hello world
				@end=python@ }


	Exceptions: //(0x00000239)➞
		>NOTE: every interpreter error will raise an exception and therefor can be caught
		{ @begin=python@
			try:
				[...]
			except [exception class] as [name]:
				[...]
		@end=python@ }
		{ @begin=python@
			raise [...]
		@end=python@ }
		class BaseException:
			>all exceptions must be derived from it
			>can be converted to string

    
    Modules:
        -a module is an external script used by the main one with the following properties:
            >no hardcoded path is provided
            >every symbol is optionally accessable
            >every symbol is namespace-d by default
            >the module script is aware its being used as a module
        >a python module is just a script
        >NOTE: modules must end with the ".py" extension
        >the python script at the root of the execution has the variable __name__ := "__main__",
          unless this is true, we can persume our script is runnning as a module
        Packages:
            >logical module wrapper
            >does not contain data by itself
            >accomplished by creating a folder on the filesystem level
        Import:
            import <module> (as <alias>)                    : import <module> namespace-d;
                                                               optionally rename the namespace as <alias>
            from <module> import *                          : import every public symbol from <module>
                                                               into the global namespace
            from <module> import <symbol>(, <symbol-2>)*    : import the listed symbols from <module>
                                                               into the global namespace
            >NOTE: <module> must not contain the extension ".py"
.       ### Intuitiv python module tl;dr ###
        { @begin=sh@
            $ tree
            .
            ├── main.py
            ├── mymodule.py
            └── mypackage
                └── mypackagedmodule.py

            2 directories, 3 files
            $ for i in **/*.py; do
                bat $i
            done
            ───────┬────────────────────────────────────────────
                   │ File: main.py
            ───────┼────────────────────────────────────────────
               1   │ import mymodule
               2   │ import mypackage.mypackagedmodule as mpm
               3   │
               4   │ mymodule.f()
               5   │ mpm.f()
            ───────┴────────────────────────────────────────────
            ───────┬────────────────────────────────────────────
                   │ File: mymodule.py
            ───────┼────────────────────────────────────────────
               1   │ def f():
               2   │     return 0
               3   │
               4   │ if __name__ == '__main__':
               5   │     print("heyo")
               6   │ else:
               7   │     print("I am a module.")
            ───────┴────────────────────────────────────────────
            ───────┬────────────────────────────────────────────
                   │ File: mypackage/mypackagedmodule.py
            ───────┼────────────────────────────────────────────
               1   │ def f():
               2   │     return 1
            ───────┴────────────────────────────────────────────
            $ python main.py
            I am a module.
            $ python mymodule.py
            heyo
        @end=sh@ }
        #


	Escape_sequences:
		>all python escape sequences are C/C++ complient,
		  therefor see description AT "/C++/Escape\ Sequences"
		\a
		\b
		\f
		\n
		\r
		\t
		\v
		\"																																					"/**/
		\'
		\\
		\[d][d][d]
		\x[d][d]
		-recognized only inside string literals:
			\u[d][d][d][d]
			\U[d][d][d][d][d][d][d][d]
			\N[name]	: unicode char named [name]



	### Guide to Python Venvs ###   //(0x000001a3)➞
		>"Virtual ENVironment"
		>a venv is a self contained python installation
		>they help to avoid system pollution
		>guarantee a state which has no dependency conflicts
		>there is a built in "venv" module
		1. Creation
			>the entirety of a python venv resides in an arbitrary named folder
			$ python -m venv <venv_name>
		2. Activation/Deactivation
			>"activating" a venv means to manipulate a shells behaviour to operate with the specific python installation which the venv provides
			>activating works by redefining ${PATH}, defining functions and such
			+----------+------------+-----------------------------------------+
			| Platform |    Shell   | Command to activate virtual environment |
			+----------+------------+-----------------------------------------+
			|          | bash/zsh   | $ source <venv>/bin/activate            |
			| POSIX    | fish       | $ source <venv>/bin/activate.fish       |
			|          | csh/tcsh   | $ source <venv>/bin/activate.csh        |
			|          | PowerShell | $ <venv>/bin/Activate.ps1               |
			| Windows  | cmd.exe    | C:\> <venv>\Scripts\activate.bat        |
			|          | PowerShell | PS C:\> <venv>\Scripts\Activate.ps1     |
			+----------+------------+-----------------------------------------+
			>since activation is a shell operation, the "session"s lifetime will never exceed the lifetime of the shell,
			  each shell requires activation to use the venv
			>activation will change the prompt, this is a semi reliable way to tell if you are inside a virtual environment
			  {
				$ source myvenv/bin/activate
				(venv) $
			  }
			>explicit deactivation is possible:
				$ deactivate
		Venvs_in_projects:
			>you should
			>makes installation by others infinitely less painful
			-do NOT fucking try to move/share them:
				"Warning: Because scripts installed in environments should not expect\
				the environment to be activated, their shebang lines contain the absolute paths\
				to their environment’s interpreters. Because of this, environments are\
				inherently non-portable, in the general case."
			Shipping_a_venv:
				1. Set it up
					$ python -m venv <my_venv>
					$ source <my_venv>/bin/activate
					(venv) $ python -m pip install <package>+
				2. Dump it
					$ (venv) python -m pip freeze > requirements.txt
				3. Ship it
					>add your "requirements.txt" to your version control system
					>do NOT track "<my_venv>", and while you're at it, do the same with your "__pycache__" damn it
			Restoring_a_venv:
				1. Recreate
					$ python -m venv <my_new_venv>
				2. Acticate
					$ source <my_new_venv>/bin/activate
				3. Full up
					(venv) $ python -m pip install -r requirements.txt
	#

	Misc_keywords: //(0x0000023a)➞
		assert [condition][, <string>]		: stops program and writes <string> as error message (if any given, its optional)
											 (do not include the ',' if you dont give an error message)
		del [object]						: frees memory of object; "deletes" it
		pass								: a statement that does nothing; used when a statement is required, but no action is desired:
											  { >>> def myFunction():	#TODO: implement
												... <-->pass
											  }


#define python_std_modules:: //(0x0000023b)➞\
I=========================================================================\
I=========================================================================\
I     _____ ___________  ___  ______________ _   _ _      _____ _____     \
I    /  ___|_   _|  _  \ |  \/  |  _  |  _  \ | | | |    |  ___/  ___|    \
I    \ `--.  | | | | | | | .  . | | | | | | | | | | |    | |__ \ `--.     \
I     `--. \ | | | | | | | |\/| | | | | | | | | | | |    |  __| `--. \    \
I    /\__/ / | | | |/ /  | |  | \ \_/ / |/ /| |_| | |____| |___/\__/ /    \
I    \____/  \_/ |___/   \_|  |_/\___/|___/  \___/\_____/\____/\____/     \
I=========================================================================\
I=========================================================================I
~~~~~~~~~~~~~~~~
	argparse: //(0x0000023c)➞
~~~~~~~~~~~~~~~~
import argparse

	Functions:

	Classes:
		ArgumentParser:
			Constructor:
				(description = <string>)
			Member_funtions:
				add_argument(<string>, type=<typename>, dest=<string> default=[value])

~~~~~~~~~~~~~~
	ctypes: //(0x0000023d)➞
~~~~~~~~~~~~~~
import ctypes

	>ctypes is a foreign function library for Python. it provides C compatible data types, 
	 and allows calling functions in DLLs or shared libraries.

	Data types:
		-------------------------------------------------------------------------
		|           C_Type           |        Python_Type         | ctypes_Type |
		-------------------------------------------------------------------------
		| char                       | 1-character string         | c_char      |
		| wchar_t                    | 1-character Unicode string | c_wchar     |
		| char                       | int/long                   | c_byte      |
		| char                       | int/long                   | c_ubyte     |
		| short                      | int/long                   | c_short     |
		| unsigned short             | int/long                   | c_ushort    |
		| int                        | int/long                   | C_int       |
		| unsigned int               | int/long                   | c_uint      |
		| long                       | int/long                   | c_long      |
		| unsigned long              | int/long                   | c_ulong     |
		| long long                  | int/long                   | c_longlong  |
		| unsigned long long         | int/long                   | c_ulonglong |
		| float                      | float                      | c_float     |
		| double                     | float                      | c_double    |
		| char* (NULL terminated)    | string or none             | c_char_p    |
		| wchar_t* (NULL terminated) | unicode or none            | c_wchar_p   |
		| void*                      | int/long or none           | c_void_p    |
		-------------------------------------------------------------------------
	
~~~~~~~~~~~
	dir: //(0x0000023e)➞
~~~~~~~~~~~
	dir([lib])						: returns list of [lib] members; (functions, classes, etc.)
	getmembers([class])				: returns list of [class] members 
	callable([function])			: returns bool; value deppends on whether the fuction can be called
	isinstance([object], [class])	: returns bool; value deppends on whethet [object] is a instance of [class]
	issubclass([object], [class])	: as ABOVE, but bout inheritance
	eval()!!!!!!!!!!

~~~~~~~~~~~~~			
	numpy: //(0x0000023f)➞
~~~~~~~~~~~~~
import numpy as np

	Functions:
		array([list], <typename> = float)					: returns an ndarray object; can be multidimentional by [list] being a list of lists
															   { array([[1,2,3],[1,2,3]]) }
        arrange([int])                                      : returns array created from range([int])
        arrange([int-step], [int-limit])                    : returns array created from range(0, [int-limit], [int-step])
		empty([shape], <typename> = float)					: returns an ndarray object according to the arguments with uninitialized values (ie. random)
		full([shape], <typename>)							: returns an ndarray object according to the arguments with all values initialized to value <typename>
		zeros([shape])										: returns an ndarray object according to the [shape] with all values initialized to 0
		fill_like([array], [value1])						: as ABOVE; will have the same dimensions as [array], but filled with [value1]
        empty_like([array])
        linspace([int-start], [int-end], [int-step])

	Classes:
		ndarray:
			Member_funtions:
				.shape()			: returns [shape] size of each dimension
				.ndim()				: returns number of dimensions
				.dtype()			: returns typename
				.itemsize()			: returns size of element
				.size()				: returns over all element number; can be used as { a[0].size }
				.copy()				: return an identical function; (so 
									   { a = array([1,2,3])
									   	 b = a.copy		// vs "b = a"
									   }
									   doesnt result in b becoming a pointer)
			Operators:
				operator[]				: works exactly like in lists, ':' features included

	[shape]:
		>an int or a tuple of ints
		>each int means the length of Đ_a_Đ dimension 

~~~~~~~~~~~~~~~~~~
    matplotlib: //(0x00000240)➞
~~~~~~~~~~~~~~~~~~
import matplotlib

    Matplotlib_hello_world:
        { @begin=python@
            import numpy as np
            import matplotlib
            import matplotlib.pyplot as plt

            x_values = np.linspace(-10, 10)
            y_values = x_values**2

            plt.plot(x_values, y_values)
            plt.show()
        @end=python@ }
        

    
import matplotlib.pylot as plt

    plot(x : [num], y : [num])
    title(string)
    xlabel(string)
    ylabel(string)

~~~~~~~~~~
	os: //(0x00000241)➞
~~~~~~~~~~
import os

	Variables:
		name				: the name of the operating system dependent module imported ("posix", "nt", "java")
		environ[<string>]	: mapping object; returns corresponding value to environment variable <string>;
							   initialized at start up, later changes are not reflected

	Functions:
		system([command])				: runs system commands from shell
		_exit(<int>)					: exits with code <int>
		Filesystem_manipulation:
			mkdir([[path]name])				: creates new dir
			rmdir([[path]name])				: removes dir
			rename([name1], [name2])		: renames [name1] to [name2]
			chmod([file], <int>)			: change [file] mode to <int> see; 
		System_information:
			ctermid()						: returns the full path to the controlling terminal { /dev/tty }
			getcwd()						: returns path to Current Working Directory
			chdir([path])					: changes working directory; (i dont think you can have multiple instances)
			listdir([path])					: returns list; same as ls
			stat([file])					: returns stats of file; (inode protection mode; inode number; device inode resides on; user id of the owner; 
																		group id of the owner; size in bytes of a plain file; time of last access;
																		Time of last modification; creation time || metadata change)
		Path:
			.join([string1], [stringN])			: joins strings together, to form a path
			.basename([path])					: returns file name from full path
			.dirname([path])					: returns path from full path of file; (removes file from path)
			.exists([path])						: returns bool; checks whether [path] exists
			.isfile([path])						: returns bool; checks whether [file] exists
	
	files:
		stdout
		stdin
		stderr

~~~~~~~~~~~
	pdb: //(0x00000242)➞
~~~~~~~~~~~
import pdb

	>"Python DeBugger"
	>gdb wrapper specifically for python
	>NOTE: the debugger accepts gdb commands; see AT "/?!"

	Functions:
		set_trace()			: break-s and starts an interactive debugging session


~~~~~~~~~~~~
	time: //(0x00000243)➞
~~~~~~~~~~~~
import time

	functions:
		sleep(<int>)	: sleep (wait) <int> seconds

~~~~~~~~~~~~~~
	timeit: //(0x00000244)➞
~~~~~~~~~~~~~~
import timeit
	
	>used for measuring execution time of python code spinets
	>all functions use their own python environment, ie. they cant access previous code by default;
	  if such thing is desired it must be import-ed explicitly

	funtions:
		timit([string-1], [string-2],		: runs [string-2], then runs [string-1] <int> times using [timer] for 
			[timer] = time.perf_counter(),     measuring time
			<int> = 1000000)

	{ from timeit import *

	  def uselessProcess():
		  i = 0
		  for h in range(1000):
			  i = 2*h

	  mycode = '''def uselessProcess():
		  i = 0
		  for h in range(1000):
			  i = 2*h
	  '''

	  print(timeit("uselessProcess()", "from __main__ import uselessProcess"))	# importing uselessProcess explicitly
	  print(timeit("uselessProcess()", mycode))									# passing uselessProcess as a string
	  print(timeit("uselessProcess()"))	# ERROR -> NameError: name 'uselessProcess' is not defined
	}

~~~~~~~~~~~~
	math: //(0x00000245)➞
~~~~~~~~~~~~
import math

	global variables:
		pi					: 3.141592653589793
	functions:
		sqrt([num])			: square root of num

~~~~~~~~~~~~
	sys: //(0x00000246)➞
~~~~~~~~~~~~
import sys

	global variables:
		argv					: a list; the first element is the programs name, the others are command line arguments
									{ python3 sys.py -s => argv[1] == '-s' }
		NOTE: no "argc" use len(argv)
		platform				: duh

~~~~~~~~~~~~~~~
	getpass: //(0x00000247)➞
~~~~~~~~~~~~~~~
	getpass()					: takes and returns input from console without echo

~~~~~~~~~~~~~~
	random: //(0x00000248)➞
~~~~~~~~~~~~~~
	functions:
		random()				: returns random number (probably float)
		randuniform([min],[max]): returns random number between [min] and [max]
		randint([[min], [max]])	: returns random int, between [min] and [max] if specified
		shuffle([list])			: shuffles [list] by reference; returns "None"
		choise([list])			: returns a random element from [list]
		choices([list][, weights=[list]][, k=<int>])	: returns k <int> random elements from [list]; weights changes the 
														 probability of the elements for being selected, you give a list full of ints to do so
~~~~~~~~~~~~~~
	regex: //(0x00000249)➞
~~~~~~~~~~~~~~
import re

	Regular Expressions

	Functions:
		>return None on fail
		compile([re](, [flags]))	 						: returns Regex object { re.compile("\Amyword\d\s", re.A) }
		search([re], <string>(, [flags]))					: returns a match object from the first occurence of [re] in <string>
		match([re], <string>(, [flags]))					: returns a match object if [re] matches the beginning of the <string>
		fullmatch([re], <string>(, [flags]))				: returns a match object if [re] matches the whole of <string>
		split([re], <string>(, <int>, (, [flags])))			: returns <string> split into a list at first <int> or all occurrences of [re]
		findall([re], <string>(, [flags]))					: returns a list of strings constructed from occurrences of [re]
		finditer([re], <string>(, flags))					: returns a list of indexes where [re] was found in <string>
		escape(<string>)									: returns <string> with all chars interpretable as regex special chars escaped
															   { re.escape("http://python.org") -> "http://\.python\.org" }
		sub([re], [string1], [string2](, <int>(, [flags]))) : returns [string2] with first <int> or all occurrences of [re] replaced with [string1]
		sub([re], [string1], [string2](, <int>(, [flags]))) : same as ABOVE, but returns a tuple with ĐstringĐ and Đnumber of substitutionsĐ
		purge()												: clear regex cache

	flags:
		>controls how [re] behaves
		>logical or them to use multiple { flags = re.M | re.I }
		A		: Ascii only
		DEBUG	: display Debug information about compiled expression
		I		: Ignore case
		L		: make \w, \W, \b and \B Locale dependent
		M		: Multiline; makes '^' and '$' match start of and end of lines
		S		: makes '.' match '\n's too
		X		: allows [re]s to be separated by spaces, which will get discarded

	Regex:
		Member_functions:
			-functions being almost identical to the modules functions,
			  but using *this and without taking a [re] and [flags] in all cases
				search()
				match()
				fullmatch()
				split()
				sub()
				subn()
				-these functions now have the added ability to take two extra int arguments 
				  as positions (to-from) to limit the search area in <string>
				findall()
				finditer()
		Member_variables:
			flags		: the [flags]
			groups		: ?!
			groupindex	: ?!
			pattern		: the string from which [Regex] was compiled from

	re:
		>can be logically operated on
		>can be freely parentheses (see AT match why its useful);
		  inside the parentheses đP<"<string>">đ syntax can be used to name a regex
		Special_characters:
			.	  	: any char except '\n'
			^	  	: beginning of string
			$	  	: end of string
			[re]*	: match any number of repetitions of [re]
			[re]+	: match 1 or more repetitions of [re]
			[re]?	: match 0 or 1 repetitions of [re]
		Special_strings:
			>the optional '^' is a logical not sign in this context
			[re]{<int>} 		 : match exactly <int> repetitions of [re]
			[re]{[int1], [int2]} : match from [int1] to [int2] repetitions of [re]
			[(^)[chars]]		 : match any of [chars] set of chars
			[(^)[char1]-[char2]] : match any chars from range [char1]-[char2]
		Escape_sequances:
			\A	  -		start of the string
			\b	  -		word boundary
			\B	  -		not \b
			\d	  -		digit (0-9)
			\D	  -		not \d
			\s    - 	white space
			\S	  -		not \s
			\w    -		word char (letters, digits or '_')
			\W    -		not \w
			\Z	  -		end of the string
		+----------------------------------------------------------+
		|					Simulating scanf()					   |
		+----------------+-----------------------------------------+
		| scanf() Token  |           Regular Expression            |
		+----------------+-----------------------------------------+
		| %c             | .                                       |
		| %5c            | .{5}                                    |
		| %d             | [-+]?\d+                                |
		| %e, %E, %f, %g | [-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)? |
		| %o             | [-+]?[0-7]+                             |
		| %s             | \S+                                     |
		| %u             | \d+                                     |
		| %x, %X         | [-+]?(0[xX])?[\dA-Fa-f]+                |
		+----------------+-----------------------------------------+
	
	match:
		>always have a bool value of true
		>the strings matching the parenthesised regexes are called ĐgroupsĐ in this context
		>[id] is either the index number (int) of a group or its name (string)
		Member_functions:
			expand(<string>)		: returns <string> with escape sequences converted to appropriate chars
			group([id](, [id]))		:  returns a string or tuple of strings corresponding to int-th group or group named string
									   { i = re.match(r"(\w+)", "asd a") ; print(i.groups(1)) -> "asd" }
		[[id]]					: identical to group()
			groups()				: returns a tuple to with all groups
			groupdict()				: returns a dictionary of with all group names - group pairs
			start([id])				: returns an int representing the starting position of group [id]
			end([id])				: returns an int representing the ending position of group [id]
			span([id])				: returns a tuple with start([id]) and end([id])
		Member_variables:
			pos			: ?!
			endpos		: ?!
			lastindex	: int index of the last group
			lastgroup	: name of the last group or None of it doesnt have a name
			re			: the regex object from which *this was created from
			string		: string from which *this was created from

	Exceptions:
		error(<string>, [re], [pos])	: raised when a string passed to a regex function is not a valid regex;
										   <string> being the error message;
										   [re] being the faulty regex;
										   [pos] being the position of [re]


~~~~~~~~~~~~~~~
	socket: //(0x0000024a)➞
~~~~~~~~~~~~~~~
import socket

	gethostname()								: gets host user's name (pl.: kali)
	socket([address family],[socket type],		
			[protocol number])					: creates new socket
		address families:
				AF_INET			: IPv4							//default
				AF_INET6		: IPv6
				AF_UNIX			: UNIX-domain protocol family
				AF_CAN			: Controller Area Network
				AF_PACKET		: packet
				AF_RDS			:
		socket types:
				SOCK_STREAM		: TCP transport protocol			//default
				SOCK_DGRAM		: dgram
				SOCK_RAW		: raw
		protocol number:										//default: 0
			is usually zero and may be omitted or in the case where the address family 
			is AF_CAN the protocol should be one of CAN_RAW, CAN_BCM or CAN_ISOTP.

~~~~~~~~~~~~~~~~
	requests: //(0x0000024b)➞
~~~~~~~~~~~~~~~~
import requests

	functions:
		[http method]([url]{, timeout = <int>})		: returns [response] class to [method] on [url]; 
													   will wait indefinitely for response unless timeout is specified; set time out! 
													   { get(fizika.pe.hu) }

	class Response:
		.text		: returns source in UTF-8 (for getting html)
		.content	: returns source in bytes (for getting file (images))
		.status_code: returns status code (optimally 200) (in 404 for example)
		.headers	: returns http header
		.url		: return url

~~~~~~~~~~~~~~~~
	hashlib: //(0x0000024c)➞
~~~~~~~~~~~~~~~~
import hashlib

	class hash:
		new(<name>, <data>)
		-predefined new wrappers:
			md5(<data>)
			sha1(<data>)
			sha224(<data>)
			sha256(<data>)
			sha384(<data>)
			sha512(<data>)
			blake2b(<data>)
			blake2s(<data>)
			sha3_224
			sha3_256
			sha3_384
			sha3_512
			shake_128
			shake_256
		Methods:
			update(<string>)	: concat <string> to the internal data
			digest()			: return hash of internal data
			hexdigest()			: return digest() converted to a string of hex chars

	{
		>>> import hashlib
		>>> hashlib.md5(b'nicotine').hexdigest()
		'1cecdfb5a688b023ce65fd0b51fcf67f'
	}


#define tkinter:: //(0x0000024d)➞\
I=========================================\
I=========================================\
I     _____ _    _       _                \
I    |_   _| |  (_)     | |               \
I      | | | | ___ _ __ | |_ ___ _ __     \
I      | | | |/ / | '_ \| __/ _ \ '__|    \
I      | | |   <| | | | | ||  __/ |       \
I      \_/ |_|\_\_|_| |_|\__\___|_|       \
I=========================================\
I=========================================I
from tkinter import *
from tkinter import ttk

    >"ToolKit INTERface"
    >standard gui toolkit for python
    >not just some standard library, it binds to Tcl/Tk
    >it has to be compile time enable in the interpreter

	-NOTE on memory:
		>the Tk object tree internally saves references to the created objects,
		  therefor lifetimes work as one would expect without explicit references
		>the same does not apply to say PhotoImages, they are passed to the underlying Tcl
		  functions, but create no copies that the python garbage collector could see,
		  resulting in premature destruction
		{ @begin=python@
			# The BELOW display the text "Example" correctly
			from tkinter import *
			from tkinter import ttk

			w = Tk()
			Label(w, text="Example").pack()
			w.mainloop()
			# The BELOW fails to display the image "example.png",
			#  however it does sizes correctly to a blank area
			from tkinter import *
			from tkinter import ttk

			w = Tk()
			Label(w, image=PhotoImage(file="sample.png")).pack()
			w.mainloop()
			# The BELOW on the otherhand succeeds
			from tkinter import *
			from tkinter import ttk

			w = Tk()
			i = PhotoImage(file="example.png")
			Label(w, image=i).pack()
			w.mainloop()
		@end=python@ }

    Tk:
        Tk  : returns a top level window object
			mainloop()	            : fire up GUI
            resizable(bool, bool)
		PhotoImage(file=...)
			subsample(<int-h>, <int-w>) -> PhotoImage	: return a shrinked copy
			zoom(<int-h>, <int-w>) -> PhotoImage		: return an enlarged copy

	Ttk:
		>ttk is part of the Tk package and provides more modern widgets based on the original ones,
		  python provides it as a separate (sub)module
		Widgets:
			Label
			Button(command=<function>)
			-common members:
				master  : parent element, always the first argument and is required
				text    : visible text
				image
				bind(<event>, <function>, <add>)
					add:
						''  - replace previous handlers
						'+' - append to previous handlers
			>widgets may be further changed using dictionary syntax { myButton["fg"] = "red" }

    Events:
		<[${mprefix}-]Button-${N}>		Mouse button press
		<B${N}-Motion>					Mouse moved with the ${N}th button held down
		<ButtonRelease-${N}>			Mouse button realise
		<Enter>							Mouse hover
		<Leave>							Mouse hover off
		<FocusIn>						Widget cursor focus
		<FocusOut>						Widget cursor focus off
		<[${prefix}-]${key}>			${key} was pressed with ${prefix} held
		${key}							${key} was typed
		<Configure>						Size change
		<Activate>						Turned active
		<Deactivate>					Turned inactive
		<Destroy>						Being deleted
		<Expose>						Got uncovered by another window
		<KeyRelease>					Any key released
		<Map>							Getting mapped (shows up)
		<Motion>						Mouse move within
		<MouseWheel>					Wheel moved; does not work on Linux
		<Unmap>							Getting unmapped (gets hidden)
		<Visibility> 					Turned visible on the screen
		NOTE: the outer "<>" are not my schizophrenia, they are literals required
		NOTE: 1 is a keyboard binding, while <1> is a button binding.
		Callbacks:
			def ...(<element>, <event>);
		Keys:
			>ordinary literals { <a> }
			-one of the special keys available:
				Cancel		// Break key
				BackSpace
				Tab
				Return		// Enter key
				Shift_L		// any Shift key
				Control_L	// any Control key
				Alt_L		// any Alt key
				Pause
				Caps_Lock
				Escape
				Prior		// Page Up
				Next		// Page Down
				End
				Home
				Left
				Up
				Right
				Down
				Print
				Insert
				Delete
				F1
				F2
				F3
				F4
				F5
				F6
				F7
				F8
				F9
				F10
				F11
				F12
				Num_Lock
				Scroll_Lock
			-one of the aliases
				space
				less		// <
			prefixes:
				Alt
				Control
				Shift
			mprefixes:
				Double
				Triple

	Layout:
		pack
			side="<side>"
				left
		grid
		place
	


#define python_3th_party_modules:: //(0x0000024e)➞\
I========================================================================================================\
I========================================================================================================\
I   _____ _____ _   _   ______  ___  ______ _______   __  ___  ______________ _   _ _      _____ _____   \
I  |____ |_   _| | | |  | ___ \/ _ \ | ___ \_   _\ \ / /  |  \/  |  _  |  _  \ | | | |    |  ___/  ___|  \
I      / / | | | |_| |  | |_/ / /_\ \| |_/ / | |  \ V /   | .  . | | | | | | | | | | |    | |__ \ `--.   \
I      \ \ | | |  _  |  |  __/|  _  ||    /  | |   \ /    | |\/| | | | | | | | | | | |    |  __| `--. \  \
I  .___/ / | | | | | |  | |   | | | || |\ \  | |   | |    | |  | \ \_/ / |/ /| |_| | |____| |___/\__/ /  \
I  \____/  \_/ \_| |_/  \_|   \_| |_/\_| \_| \_/   \_/    \_|  |_/\___/|___/  \___/\_____/\____/\____/ 	 \
I========================================================================================================\
I========================================================================================================I

~~~~~~~~~~~~~~~~~
	pyautogui: //(0x0000024f)➞
~~~~~~~~~~~~~~~~~
import pyautogui

	Constants:
		KEYBOARD_KEYS						: list of [button] names

	Functions:
		size()								: returns screen size
		position()							: Returns the current xy coordinates of the mouse cursor as a two-integer tuple.
		click([intx], [inty], <string>)		: simulates click at [intx] [inty] (in pixels), with <string> button ("left" || "right" || "middle")
		mouseDown([intx], [inty], <string>)	: duh; see ABOVE
		mouseUp([intx], [inty], <string>)	: duh; see ABOVE
		typewrite(<string>)					: simulates typing <string>
		press([button])						: simulates [button] press
		hold([button])						: simulates holding down [button]
		KeyUp([button])						: simulates releasing [button]

~~~~~~~~~~~~~~
    Pillow: //(0x00000250)➞
~~~~~~~~~~~~~~
from PIL import Image
from PIL import ImageTk

    >image processing library
    >closely integrates with tkinter

    Image:
        open(path: string)
        Image:
            width
            height
            resize((w, h))
            getpixel((x, y))
            putpixel((x, y), channels: tuple)
    ImageTk:
        PhotoImage(Image)   : return-s a converted object which can be displayed using tkinter;
                               it is however not fully compatible with tk PhotoImages

#define python_scrapping::: //(0x00000251)➞ \
I  ___                        _            \
I / __| __ _ _ __ _ _ __ _ __(_)_ _  __ _  \
I \__ \/ _| '_/ _` | '_ \ '_ \ | ' \/ _` | \
I |___/\__|_| \__,_| .__/ .__/_|_||_\__, | \
I                  |_|  |_|         |___/  I

~~~~~~~~~~~~~~~~~~~~~
	beautiful_soup: //(0x00000252)➞
~~~~~~~~~~~~~~~~~~~~~
import bs4
	
	BeautifulSoup(<string>, 'html.parser')			: returns html (BeautifulSoup) object

	[BeautifulSoup]:
		.head										: returns the head
			.title										: returns the title
		.body										: returns the body
		.find([options]) || .find_all([options])	: returns first occurrence of [options] || returns list of all occurrences of [options]
			[tag]										: searches for tag {"div"}
			id=[id]										: searches for id
			class_=[class]								: searches for class
			attrs={[name]:[value]}						: searches for attribute
		.get_text()									: returns the text without any tags
		.prettify()									: returns source formatted nicely with tabs and spaces

	Snippets:
		b = BeautifulSoup(get(my_url).text, 'html.parser')
			
~~~~~~~~~~~~~~~~
	selenium: //(0x00000253)➞
~~~~~~~~~~~~~~~~

	modules:
		webdriver		: its a module inside a module, therefor you import it as follows: "from selenium import webdriver"
						 and you either "from" further or do webdriver.[x];
						 {import selenium [\n] selenium.webdriver.[...]} is invalid; (confusing ik)
			functions:
				[browser]()					: return browser session; [browser] == "Firefox" || etc.
											 { driver = webdriver.Firefox(firefox_binary="/usr/bin/firefox-esr") }
		common:
			actionchains	: ?; import as follows: "from selenium.webdriver.common.action_chains import ActionChains"
				functions:
					ActionChains([browser])		: returns actionchain object
			keys			: keyboard keys; import it as follows: "from selenium.webdriver.common.keys import Keys"
				.RETURN || .ENTER		: enter
			by:
				By:
					CLASS_NAME
					CSS_SELECTOR
					ID
					LINK_TEXT
					NAME
					PARTIAL_LINK_TEXT
					TAG_NAME
					XPATH

	[browser]:
		Member_functions:
			impicitly_wait(<int>)					: wait <int> before timeout
			get([url])								: load [url]
			back()									: move backward in browsers history
			forward()								: move forward in browsers history
			find_element([By], [val])
			find_elements([By], [val])
NOTE: the following methods have been deprecated and replaced by the ABOVE;
	   which follows the exact logic a beginner, alcoholic teen (me) came up with
	   after a single small scale project. this proves that webdevs are mentally
	   handicapped and should be forced to work on the fields instead.
Purple(
			search:
				>includeing an 's' after elements will leturn a list of results instead of the first ocurence
				>returns [element]
				.find_element(s|_by_id(<string>|				: searches for id; {<whatever id="login">}
				.find_element(s|_by_name(<string>|				: searches for name; {<whatever name="login">}
				.find_element(s|_by_link_text					:
				.find_element(s|_by_partial_link_text			:
				.find_element(s|_by_tag_name					: serches for tag name; {<my_tag name="irrelevant">}
				.find_element(s|_by_class_name					:
				.find_element(s|_by_css_selector				: searches for class name; {if <form name="login">}
				.find_element(s|_by_xpath([XPath]|				: searches for XPath; can be used to search for visible text
															 { driver.find_element_by_xpath('//*[text(|="text to search for"]'| }
)
		Member_variables:
			.page_source							: page source
			.current_url							: url of current page

	[element]
		Member_functions:
			.send_keys(<string>)					: simulates writing
			.click()								: simulates click
			.doubleClick()							: simulates double clicking
			.clickAndHold()							: simulates clicking and holding
			.getX()
			.getY()
			.getWidth()
			.getHeight()

	[actionchain]
		Member_functions:
			move_to_element()						: simulates hoverover
			perform()								: actually perform actions

	Hello_World:
		{ // Using Chromeium
			from selenium import webdriver
			driver = webdriver.Chrome(executable_path="/usr/bin/chromedriver")
			driver.get("https://example.com")
		}


~~~~~~~~~~~~~~
	scrapy                                                                 //₩
~~~~~~~~~~~~~~
	>OOP cancer
	>slow as fuck
	>tries to be both a library and a framework
	>the output is unreadable
	>it wraps ^C (of the shell), but it does not work
	>it wraps the lxml library, but hides features (with xpath)

Purple(
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    google_images_download
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    >outdated piece of crap
    >used to allow image type filtering
)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    bing_image_downloader
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    >downloads images from bing
    >useful for fetching machine learning datasets

    {@begin=python@
        from bing_image_downloader import downloader

        downloader.download(
            "dog",
            limit=100,
            output_dir="downloads/",
            timeout=60
        )
    @end=python@}



#define python_machine_learning::: //(0x00000254)➞ \
I  __  __         _    _            _                   _            \
I |  \/  |__ _ __| |_ (_)_ _  ___  | |___ __ _ _ _ _ _ (_)_ _  __ _  \
I | |\/| / _` / _| ' \| | ' \/ -_) | / -_) _` | '_| ' \| | ' \/ _` | \
I |_|  |_\__,_\__|_||_|_|_||_\___| |_\___\__,_|_| |_||_|_|_||_\__, | I

~~~~~~~~~~~~~~~~~~
	tensorflow                                                                 //₩
~~~~~~~~~~~~~~~~~~
	import tensorflow
	from tensorflow import keras

	>machine learning library

    "\
    tensor /tĕn′sər, -sôr″/\
        noun\
        A muscle that stretches or tightens a body part.\
    "

    >a ĐĐtensorĐĐ is the main abstraction of tensorflow; it is a value type that utalizes GPUs for calculations
    >the low-level ĐtensorĐ is something one does not really have to touch due to higher level abstractions
    >NOTE: keras used to be a poli-backend abstraction module, however after tensorflow was left as
            the last viable one, it got merged into a submodule

    Files:
        .ckpt   : "ChecKPoinT"; model weights saved to disk
        .h5     : depricated; entire model saved to disk
        .keras  : entire model saved to disk

    Keras:
        ¤has 3 main APIs
                       Sequential   Functional   Sub-classing           Red(
                  simple ◀━━━━━━━━━━━━━━━━━━━━━━━━━▶ complex
                less powerful                     more powerful            )
            >NOTE: this abstract method of classification comes from "TensorFlow in Action"; (and i like it)
            -Sequential
                >the sub-class of Model called Sequential is parameterized
                >classical feed-forward network
            -Functional
                >Model is paramerized
                >(persumably) a less conventional architecture is used (such as one with branches)
            -Sub-classing (custom)
                >realistically at least "__init__", "build()" and "call()" is overriden
                >requires low-level understanding of tensors and willingness to thinker with them
        package_layers:
            from tensorflow.keras import layers
            Input(shape)
            Rescale(scale, offset)  : multiplies all input values by <scale> and adds offset;
                                       used for preprocessing data, by forcing input values
                                       in an arbitrary range
            Dense(shape)            : fully connected
            Conv2D()                : 2 dimensional convolution
            MaxPool2D()             : max convolution
            Flatten()               : convolutional-fully connected layer adapter
            SimpleRNN(shape),
            Concatenate(?!)
        package_models:
            class Model:
                Members:
                    summary()       : print pretty table regarding layers and parameters; useful for visualization
                    fit()           : train
                    predict()       : ask the opinion after training
                    persistance:
                        save(path)              : save the entire model; the recommended extension is ".keras"
                        load_model(path)        : load a model saved with save()
                        save_weights(path)      : save weights only; no architectural information is retained
                        load_weights(path)      : load weights saved with save_weights()
                Subclasses:
                    Sequential
        package_callbacks:
            class EarlyStopping:
                >used for creating a break condition during training
                >if the model starts to overfit, fitting will terminate
                constructor:
                    "monitors" ["loss"|"val_loss"]
                    "patience" <int>                : number of lossy epochs to terminate after
                    "restore_best_weights" <bool>
        preprocessing:
            from tensorflow.keras import preprocessing
            >used for rapidly creating datasets from common disk representations
            image_dataset_from_directory(
                directory,
                image_size=(256, 256),
            )
            text_dataset_from_directory(directory)
            timeseries_dataset_from_array(directory)

    ### ACTUALLY simple tensorflow example ### //₩
        {@begin=python@
            #!/bin/python3
            import numpy as np
            from tensorflow import keras

            # ---------------
            # --- Dataset ---
            # ---------------
            #NOTE: this is where i do NOT ask you to download 5GBs of samples
            def gen_data():
                # Addition in the finite field of 0..9
                r = {'in': [], 'out': []}
                for i in range(10):
                    for h in range(10):
                        r['in'].append((i, h))
                        r['out'].append((i + h) % 10)
                r['in']  = np.array(r['in'])    # tensorflow does not accept python lists
                r['out'] = np.array(r['out'])
                return r
            dataset = gen_data()

            # -------------
            # --- Model ---
            # -------------
            model = keras.Sequential()	# Stock feedforward network

            hidden_layers = [2, 8, 4, 10, 8] # Overkill is the best kind of kill
            for i in hidden_layers: model.add(keras.layers.Dense(i, activation='relu'))
            model.add(keras.layers.Dense(1))	# output layer

            model.compile(
                optimizer='adam',
                loss='mse', # Mean Square error - for calculating how wrong the model was (margins will grow exponentially)
                metrics=['accuracy']
            )

            # Training
            model.fit(dataset['in'], dataset['out'],
                verbose=2,      # max level of output during training
                batch_size=10,
                epochs=5000,	# Repetition count on the whole dataset; again, overkill
                shuffle=True,
            )

            # ------------------------------
            # --- Interactive playground ---
            # ------------------------------
            #NOTE: importing will work too
            def main():
                while True:
                    try:
                        a = int(input("Enter the first  integer (a): "))
                        b = int(input("Enter the second integer (b): "))
                        
                        r1 = model.predict(np.array([(a, b)]))[0][0]
                        r2 = np.round(r1)
                        print(f"The sum of {a} and {b} is {r2} ({r1})")
                    except ValueError:
                        pass

            if __name__ == '__main__':
                main()
            # Now try playing around with the variables
        @end=python@ }
    #

.   ### Basic image classification example ###
        -set up all the data we need:
            >one black image
            >one white image
        {@begin=sh@
            #!/bin/bash
            mkdir dataset
            mkdir dataset/white
            mkdir dataset/black
            convert -size 100x100 xc:white dataset/white/white.png
            convert -size 100x100 xc:black dataset/black/black.png
        @end=sh@}
        >make our model
        {@begin=python@
            #!/bin/python3
            from sys import argv
            from tensorflow import keras

            my_activation = ( # declared like this to ease commenting/uncommenting
                #'sigmoid'
                # performs like absolute trash
                # requires ~x4 more epochs than relu

                #'relu'
                # has the tendency to produce such probabilities:
                #  white.png - 0.00% black : 100.00% white 
                #  black.png - 51.10% black : 48.90% white
                # which is not surprising considering its inherent asymmetry
                # requires roughly 50 epochs and slight luck

                'tanh'
                # easily adjusts under 10 epochs
                # produces reasonable divided probabilites
            )

            HEIGHT, WIDTH = 20, 20

            dataset = keras.utils.image_dataset_from_directory(
                "dataset/",
                image_size=(HEIGHT, WIDTH),
            )

            model = keras.Sequential([
                # normally we would use convolutional layers
                #  before flattening and adding a few dense layers,
                #  however the example is so simple we dont care about spacial information
                keras.layers.Flatten(),
                keras.layers.Dense(8, activation=my_activation),
                keras.layers.Dense(8, activation=my_activation),
                keras.layers.Dense(1, activation='sigmoid')
            ])

            model.compile(
                'adam',
                loss='binary_crossentropy',
                metrics=['accuracy']
            )

            model.fit(dataset, epochs=10)

            img = keras.preprocessing.image.load_img(argv[1], target_size=(HEIGHT, WIDTH))
            img = keras.utils.img_to_array(img)
            img = keras.ops.expand_dims(img, 0)

            score = model.predict(img)[0][0]
            print(f"{100 * (1 - score):.2f}% black : {100 * score:.2f}% white")
        @end=python@}
    #

    NOTE:
        -if the import cries about your GPU and such,
          you can silence like this:
            {
                import os
                os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"
            }

~~~~~~~~~~~~~~~~~~~~
    transformers: //(0x00000255)➞
~~~~~~~~~~~~~~~~~~~~
    >closely associated with https://huggingface.co/
    >highlevel machine learning framework

    class pipeline:
        >functor like
        constructor(<string-type>)
            text-classification         : determines sentiment
            text-generation             : attempts to continue the input string
            zero-shot-classification    : classify text into user provided candidate categories
            question-answering          : returns where the answer is in an input text to an input question;
                                           NOT a higher-level text generation model;
                                           the full answer being in multiple places confuses it


    {@begin=python@
        import transformers
        print(transformers.pipeline("sentiment-analysis")("I am very angry"))
        # [{'label': 'NEGATIVE', 'score': 0.9994483891868591}]
    @end=python@}

~~~~~~~~~~~~~~
	petals: //(0x00000256)➞
~~~~~~~~~~~~~~
	>p2p LLM library
	>allows for treating remote models as local
	>has a network of (GPU) volunteers backing the project

	{ @begin=python@
		from transformers import AutoTokenizer
		from petals import AutoDistributedModelForCausalLM

		# Choose any model available at https://health.petals.dev
		model_name = "petals-team/StableBeluga2"

		# Connect to a distributed network hosting model layers
		tokenizer = AutoTokenizer.from_pretrained(model_name)
		model = AutoDistributedModelForCausalLM.from_pretrained(model_name)

		# Run the model as if it were on your computer
		inputs = tokenizer("A cat sat", return_tensors="pt")["input_ids"]
		outputs = model.generate(inputs, max_new_tokens=5)
		print(tokenizer.decode(outputs[0]))  # A cat sat on a mat...
	@end=python@ }


#define brython\
I---------------------------------------------------------------------------------\
I                                                                                 \
I    ███████████                        █████    █████                            \
I   ░░███░░░░░███                      ░░███    ░░███                             \
I    ░███    ░███ ████████  █████ ████ ███████   ░███████    ██████  ████████     \
I    ░██████████ ░░███░░███░░███ ░███ ░░░███░    ░███░░███  ███░░███░░███░░███    \
I    ░███░░░░░███ ░███ ░░░  ░███ ░███   ░███     ░███ ░███ ░███ ░███ ░███ ░███    \
I    ░███    ░███ ░███      ░███ ░███   ░███ ███ ░███ ░███ ░███ ░███ ░███ ░███    \
I    ███████████  █████     ░░███████   ░░█████  ████ █████░░██████  ████ █████   \
I   ░░░░░░░░░░░  ░░░░░       ░░░░░███    ░░░░░  ░░░░ ░░░░░  ░░░░░░  ░░░░ ░░░░░    \
I                            ███ ░███                                             \
I                           ░░██████                                              \
I                            ░░░░░░                                               \
I---------------------------------------------------------------------------------I

	>python implementation in Javascript 
	>allows for user-side python seamlessly interacting with the DOM
	>its kinda slow (who would have guessed that python is slow?)
	>whitespace sensitivity means minimizing it is not possible like with Javascript

	Programs:
		brython-cli <options> <verb>
			>used for creating local installations
			<verb>
				install		: creates a local copy of the interpreter files,
							   to avoid external dependencies

	Dependencies:
		>since the interpreter is written in javascript, it has to be included somewhere
		brython.js			: the core dependency for the language to work
		{
			<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/brython/3.10.0/brython.min.js"></script>
			<script type="text/javascript" src="/brython.min.js"></script>
		}
		brython_stdlib.js	: the python standard library (reimplemented in javascript,
							   exposed to brython natively)
		{
			<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/brython/3.10.0/brython_stdlib.min.js"></script>
			<script type="text/javascript" src="/brython_stdlib.min.js"></script>
		}

	Embeding:
		>brython code is placed into its own script tag, appropriately marked
		{
			<script src="https://www.example.com/main.py" type="text/python"></script>
			//
			<script type="text/python">
			  print("Hello World!")
			</script>
		}
		>brython tags must be explicitly invoked using Javascript somehow
		{
			<script type="text/javascript">
				brython({});
			</script>
		}
		>modules imported must be served somehow, dynamic serving is the default,
		  however the used modules can be prepackaged to the app
		{
			$ brython-cli --modules # this will generate a "modules" file, which can be included in one
			// ---
			<script type="text/javascript" src="brython_modules.js"></script>
		}

	Modules:
		#================================================================================#
		I                           Key browser API modules                              I
		#==================#==============================#==============================#
		I      Modules     |            Context           |           Examples           I
		#==================#==============================#==============================#
		| browser          | Contains the built-in names  | browser.alert()              |
		|                  |  and modules                 |                              |
		+------------------+------------------------------+------------------------------+
		| browser.document | Accesses the DOM             | document["element-id"]       |
		+------------------+------------------------------+------------------------------+
		| browser.html     | Creates HTML elements        | html.H1("This is the title") |
		+------------------+------------------------------+------------------------------+
		| browser.window   | Accesses Window functions    | window.navigator             |
		|                  |  and objects                 |                              |
		+------------------+------------------------------+------------------------------+
		| javascript       | Accesses objects defined     | javascript.JSON.parse()      |
		|                  |  in JavaScript               |                              |
		#==================#==============================#==============================#

//------------------------------------------------------------------------------------
#define prolog: //(0x00000257)➞\
I-----------------------------------------------------------------------------\
I-----------------------------------------------------------------------------\
I-----------------------------------------------------------------------------\
I             /$$$$$$$                     /$$                                \
I            | $$__  $$                   | $$                                \
I            | $$  \ $$ /$$$$$$   /$$$$$$ | $$  /$$$$$$   /$$$$$$             \
I            | $$$$$$$//$$__  $$ /$$__  $$| $$ /$$__  $$ /$$__  $$            \
I            | $$____/| $$  \__/| $$  \ $$| $$| $$  \ $$| $$  \ $$            \
I            | $$     | $$      | $$  | $$| $$| $$  | $$| $$  | $$            \
I            | $$     | $$      |  $$$$$$/| $$|  $$$$$$/|  $$$$$$$            \
I            |__/     |__/       \______/ |__/ \______/  \____  $$            \
I                                                        /$$  \ $$            \
I                                                       |  $$$$$$/            \
I                                                        \______/             \
I-----------------------------------------------------------------------------\
I-----------------------------------------------------------------------------\
I-----------------------------------------------------------------------------I
	>declarative
	>purely logical programming language

	gprolog [options]	: launches interactive Prolog season
		>GNU Prolog



	FILES:
		Extentions:
			pl		: rule file



	DOTS:
		>every statement must end with a '.' { rules; calls }



	LITERAL:
		>any ascii string of printable chars starting with a lower case letter { literal; pizza; dog }



	VARIABLE:
		>any ascii string of printable chars starting with an upper case letter { literal; pizza; dog }



	LISTS:
		[[literal](, [literal])+]
		{ [a, b, c] }
		>can be split with operator '|'




	RULES:
		>must be defined in a file
		[name]([variable | literal](, [variable | literal])+)
		[rule] := [rule]+
		Recursive_rules:
			{ len([], 0).
			  len([ _ | F], N) :- len(F, K), N is K+1.
			}
			{ len(L, N) :- len2(L, 0, N).
			  len2([], A, A).
			  len2([ _ | F], A, N) :- A2 is A+1, len2(F, A2, N).
			}



	IMPORTING:
		[[file]]
		>import-s the rules from [file]
		>[file] shall not contain the file extension
		{  $ cat e.pl
		   likes(me, vodka).
		   $ gprolog
		   GNU Prolog 1.5.0 (64 bits)
		   Compiled Jul 16 2021, 09:17:34 with gcc
		   Copyright (C) 1999-2021 Daniel Diaz
		   
		   | ?- [e].
		   compiling [...]/e.pl for byte code...
		   [...]/e.pl compiled, 1 lines read - 345 bytes written, 6 ms

		   yes
		   | ?- likes(me, X).                                                                                                                                           
		   																																							 
		   X = vodka                                                                                                                                                    
		   																																							 
		   yes
		}

#define haskell: //(0x00000258)➞\
I------------------------------------------------------------------\
I------------------------------------------------------------------\
I------------------------------------------------------------------\
I     /$$   /$$                     /$$                 /$$ /$$    \
I    | $$  | $$                    | $$                | $$| $$    \
I    | $$  | $$  /$$$$$$   /$$$$$$$| $$   /$$  /$$$$$$ | $$| $$    \
I    | $$$$$$$$ |____  $$ /$$_____/| $$  /$$/ /$$__  $$| $$| $$    \
I    | $$__  $$  /$$$$$$$|  $$$$$$ | $$$$$$/ | $$$$$$$$| $$| $$    \
I    | $$  | $$ /$$__  $$ \____  $$| $$_  $$ | $$_____/| $$| $$    \
I    | $$  | $$|  $$$$$$$ /$$$$$$$/| $$ \  $$|  $$$$$$$| $$| $$    \
I    |__/  |__/ \_______/|_______/ |__/  \__/ \_______/|__/|__/    \
I------------------------------------------------------------------\
I------------------------------------------------------------------\
I------------------------------------------------------------------I

	PROGRAMS: //(0x00000259)➞
		ghc		: haskell compiler
		ghci	: haskell interpreter; eval-s each statement in its own module /*?!*/
			<statement>
			:<meta>
				l			: load
				r			: reload
				q			: quit
				i <subject>	: print info
				!<command>	: execute <command> in a system shell
		cabal	: haskell dependency and project manager
			init
			run
			install

	COMMENTING: //(0x0000025a)➞
		-- <...>	: single line
		{- <...> -}	: multi line

	OPERATORS: //(0x0000025b)➞
		<oper-1> <operator> <oper-2>	: apply <operator> to operands <oper-x>
		(<operator>) <oper-1> <oper-2>	: apply <operator> to operands <oper-x>;
										   prefix syntax
		<func-1> $ <func-2> 	: apply operator; equivalent to <func-1>(<func-2>)


	FUNCTIONS: //(0x0000025c)➞
		<name> <arg>+ = <body>
		{
			f x = x + 1
		}
		Signature:
			>not required
			>enforces types
			<name> :: (constraint) <type-signature>
				constraint:
					<typename> <alias> =>	: alias <alias> as <typename> for the type signature
					{ // 
						f :: Num a => a -> a
					}
				type_signature:
					<typename> -> <typename>
		Calling:
			<name> <arg>*
		Body:
			<expression> 
			<let_binding> in <expression>
			<expression> where <where_binding>
			Bindings:
				>defines intermediate values
				>similar to vars
				Let:
					{
						in_range min max x =
							let
								l = x >= min
								h = x <= max
							in l && h
					}
				Where:
					{
						in_rr2 min max x = l && h
							where
								l = x >= min
								h = x <= max
					}
		Currying:
			>every function technically takes one argument
			>multi argument functions eval to a function with one argument hardcoded
			{
				ghci> curryer a b = a / b
				ghci> curryer 6 / 3
				2.0
				ghci> intermediate_fun = curryer 6	-- intermediate_fun b = 6 / b
				ghci> intermediate_fun 3
				2.0
			}
		Lambdas:
			(\<arg>+ -> <body>)
			{
				> (\x -> 2 * x) 4
				8
			}

	CONDITIONALS: //(0x0000025d)➞
		if:
			if <...> then <...> else <...>
		Pattern_matching:
			>top to bottom
			>a way to branch
			>similar to both switch cases and function overloading from imperative languages
			{ // this sucessfully return the sum of all numbers from n to 0
				sumt 0 = 0
				sumt n = n + sumt (n - 1)
			  // translates roughly to this:
			  /* int sumt(int n) {
			   *   switch(n) {
			   *     case 0:
			   *       return 0;        
			   *     default:
			   *       return n + sumt(n - 1);        
			   *   }          
			   * }
			   */
			  // this messes up the pattern matching;
			  //  causing always the top line to be called,
			  //  resulting and infinit recursive loop,
			  //  causing a stack overflow
				sumt n = n + sumt (n - 1)
				sumt 0 = 0
			}
		Guards:
			<name> args+ <guard>+
				(| <condition> = <body>)
			{
				f x
				  | x < 10    = print "This is a"
				  | x > 10    = print "very poor"
				  | otherwise = print "example."
			}
			>checked from top to bottom
			>the body of the first true condition is eval-ed
			>"otherwise" is a special alias for true, helping readability
			>concentrated pattern matching in a way

	Types: //(0x0000025e)➞
		Aliasing:
			type <alias> = <typename>
        Constraints:
            Eq
            Ord
            Show
            Num
            Monad

	Lists: //(0x0000025f)➞
		[<elem>(, <elem>)*]
		Comprehensions:
			[<Int-1>..<Int-2>] -> [Int]
			[<Char>..<Char>] -> [Char]
			[<select> | <from>(, <where>)]
			{
				[i | i <- [1..10]]
			}
		Operators:
			<typename> : [<typename>] -> [<typename>]		: concatenate an element to a list
			[<typename>] ++ [<typename>] -> [<typename>]	: concatenate 2 lists
			[<typename>] !! <Int>							: returns the <Int>th element

	Importing: //(0x00000260)➞
		import <module> (<...>)
		>NOTE: MUST be at the beginning of the file
	
	Standard_library: //(0x00000261)➞
		Prelude
			head [a] -> a			: returns first element
			tail [a] -> [a]			: returns input without the first element
			last [a] -> a			: returns last element
			init [a] -> [a]			: returns input without the last element
			length [a] -> Int		: returns number of elements
			take Int -> [a] -> [a]
			null [a] -> Bool
			elem a -> [a] -> Bool
			notElem a -> [a] -> BoolA
			any (a -> Bool) -> [a] -> Bool
			all (a -> Bool) -> [a] -> Bool
		Data.lists
			sum Num a => [a] -> a
			map (a -> b) -> [a] -> [b]
			sort Ord a => [a] -> [a]
			reverse [a] -> [a]
			filter (a -> Bool) -> [a] -> [a]
		IO
			putChar
			putStr
			putStrLn
			print

#define networking: //(0x00000262)➞\
I------------------------------------------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------------------------------------------\
I             /$$   /$$             /$$                                       /$$       /$$                              \
I            | $$$ | $$            | $$ Networking                           | $$      |__/                              \
I            | $$$$| $$  /$$$$$$  /$$$$$$   /$$  /$$  /$$  /$$$$$$   /$$$$$$ | $$   /$$ /$$ /$$$$$$$   /$$$$$$           \
I            | $$ $$ $$ /$$__  $$|_  $$_/  | $$ | $$ | $$ /$$__  $$ /$$__  $$| $$  /$$/| $$| $$__  $$ /$$__  $$          \
I            | $$  $$$$| $$$$$$$$  | $$    | $$ | $$ | $$| $$  \ $$| $$  \__/| $$$$$$/ | $$| $$  \ $$| $$  \ $$          \
I            | $$\  $$$| $$_____/  | $$ /$$| $$ | $$ | $$| $$  | $$| $$      | $$_  $$ | $$| $$  | $$| $$  | $$          \
I            | $$ \  $$|  $$$$$$$  |  $$$$/|  $$$$$/$$$$/|  $$$$$$/| $$      | $$ \  $$| $$| $$  | $$|  $$$$$$$          \
I            |__/  \__/ \_______/   \___/   \_____/\___/  \______/ |__/      |__/  \__/|__/|__/  |__/ \____  $$          \
I																									 /$$  \ $$           \
I																									|  $$$$$$/           \
I																									 \______/            \
I------------------------------------------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------------------------------------------I

    DMZ:    // ?!



	Size: //(0x00000263)➞
		Sneakernet:
			>manual auto-mation
			>the process of transfering data by coping to an externel drive and delivering it by foot
		LAN: 
			>"Local Area Network"
			>NOTE: WLAN is a common abrevaration which can cause confusion between LAN/WAN, however it stands for "Wireless LAN"
		WAN:
			>"Wide Area Network"
			>or internet ("INTERconnected NETworks") (with a lower case 'i')
			>collection of LANs
			>network of networks
		NOTE:
			>there is no strict line between LAN and WAN
			>the usage of the terms could be context dependent
		Intranet:
			>private network
			>only accessable by authorized personel
			{ networking system of an university;
			  segragated 3 letter agency networks
			}
		Extranet:
			>outsider equipment which accesses an intranet
			{ VPN software; computer of employee loging in remotely }
			                  Internet
			┏━━━  ━━  ━━  ━━  ━━  ━━  ━━  ━━  ━━  ━━  ━┓
			                            ?              ┃                        
			┃   ?                         ┌─────────┤ <...>'s Network ├─────────┐
			                              │┌┤Extranet├┐┃┌──────┤Intranet├──────┐│
			┃                             ││          │ │  ___                 ││
			                 ?            ││        __│┃│ /   \     _____      ││
			┃                             ││    .---88---| XXX |---I 0x0 I     ││
			                              ││    l_  ""│┃│ \___/     ''''''     ││
			┃                     ?       ││    |0|   │ │   |-------------.    ││
			                              ││    ^^^   │┃│   l_   l_   l_   l_  ││
			┃       ?                     ││          │ │   |0|  |0|  |0|  |0| ││
			                              ││          │┃│   ^^^  ^^^  ^^^  ^^^ ││
			┃                             │└──────────┘ └──────────────────────┘│
			┗━  ━━  ━━  ━━  ━━  ━━  ━━  ━━│ ━━  ━━  ━━━┛                        │
			                              └─────────────────────────────────────┘
		Internet:
			>strictly capital 'I'
			>global WAN

	VPN:	//write a good rant; ?!; also move
		>"Virtual Private Network"
		¤vpn technologies
			¤layer 5-7
				>SSH
				>SSL
			¤layer 3-4
				>GRE
				>PPTP
				>L2TP
				>MPLS
				>IPSec
				>MPPE
			¤layer 1-2
				>link-layer encryption

	Hierarchy: //(0x00000264)➞
		Peer_to_Peer:
			>all nodes are equal
			-Pros:
				>cheap
				>no server required; easy to set up
				>no centralization
			-Cons:
				>not scalable
		Clien_server:
			>a ĐĐserverĐĐ is a computer existing to perform networking tasks and thereby serve ĐclientsĐ;
			  or by another deffinition a computer that has a resource which it makes accessable to other computers
			>all computers in a network which are not ĐserversĐ are ĐĐclientsĐĐ
			>allows for usage of a ĐĐmainframeĐĐ, which is strong centrall computer sharing
			  computing resources across the network
			-Pros:
				>scalable
			-Cons:
				>centralized
				>expensive

	Transmission: //(0x00000265)➞
		unicast		: a single host sending information to another host; one-to-one
		multicast	: a single host sending information to multiple (, but not all) other hosts; one-to-some
		broadcast	: a single host sending informaion to all other hosts on the network; one-to-many
		anycast		: a single host sending information to a single interface routed the neerest


	Topology: //(0x00000266)➞
		>the form of the physical connection of the devices of a network
		Mesh: //(0x00000267)➞
			>every computer is connected to every other computer by an individual cable
		      	           ___               ___ 
			   		     .^ .^|            .^ .^|
			   		   .^ .^  |          .^ .^  |
			   		   |‾‾|   |          |‾‾|   |
			   		   |==|   |Blue(────)|==|   |
			   		   |^*|  .^          |^*|  .^
			           |__|.^            |__|.^  
Blue(					  │"-.         ."   │                )
Blue(					  │   "-.    ."     │                )
Blue(					  │      "-."       │                )
Blue(			          │___.-"   ""--..  │___             )
			   		     .^ .^|           '.^ .^|
			   		   .^ .^  |          .^ .^  |
			   		   |‾‾|   |          |‾‾|   |
			   		   |==|   |          |==|   |
			   		   |^*|  .^Blue(────)|^*|  .^
			           |__|.^            |__|.^  
		Bus: //(0x00000268)➞
		      	           ___             ___             ___             ___ 
			   		     .^ .^|          .^ .^|          .^ .^|          .^ .^|
			   		   .^ .^  |        .^ .^  |        .^ .^  |        .^ .^  |
			   		   |‾‾|   |        |‾‾|   |        |‾‾|   |        |‾‾|   |
			   		   |==|   |        |==|   |        |==|   |        |==|   |
			   		   |^*|  .^        |^*|  .^        |^*|  .^        |^*|  .^
			Terminator |__|.^          |__|.^          |__|.^          |__|.^   Terminator
Blue(           ░░░      │               │               │               │         ░░░
			    ░░░──────┴───────────────┴───────────────┴───────────────┴─────────░░░
				░░░                               <------+------>                  ░░░)
			>computers are connected to a single backbone cable
			>data travels both ways trying to find the right destination
			>as all trafick is handled by the same cable, overwhelming it results in network-wide
			  performance degradation
			>if the backbone gets damaged the whole network goes down
		Ring: //(0x00000269)➞
		       		   	   ___             ___             ___             ___ 
			   		     .^ .^|          .^ .^|          .^ .^|          .^ .^|    _______
			   		   .^ .^  |        .^ .^  |        .^ .^  |        .^ .^  |   | ___  0|
			   		   |‾‾|   |        |‾‾|   |        |‾‾|   |        |‾‾|   |   |[_-_]_ | 
			   		   |==|   |Blue(──)|==|   |Blue(──)|==|   |Blue(──)|==|   |   |[_____]|
			   		   |^*|  .^        |^*|  .^        |^*|  .^        |^*|  .^   |[_____]|  
					   |__|.^          |__|.^          |__|.^          |__|.^     |[====o]|
Blue(		            ┌┘                                               └┐)      |[_.--_]|
Blue(                   │   											  ├───────|)F    :|
Blue(		            └─────────────────────────────────────────────────┘)      |______:|
		Star: //(0x0000026a)➞
								 ___                    ___ 
							   .^ .^|                 .^ .^|
							 .^ .^  |               .^ .^  |
							 |‾‾|   |               |‾‾|   |
							 |==|   |               |==|   |
							 |^*|  .^               |^*|  .^
							 |__|.^                 |__|.^  
					___ Blue(   ╲                   ╱        )    ___ 
				  .^ .^|Blue(    ╲                 ╱         )  .^ .^|
				.^ .^  |Blue(     ╲               ╱          ).^ .^  |
				|‾‾|   |Blue(      ╲).^‾‾‾‾‾‾‾‾‾‾.            |‾‾|   |
				|==|   |Blue(───────)I_________.^|Blue(──────)|==|   |
				|^*|  .^            | #* 00 ~~ |.^            |^*|  .^
				|__|.^  Blue(      ╱)‾‾‾‾‾‾‾‾‾‾^╲             |__|.^  
				Blue(            _╱_             ╲  )   ___ 
							   .^ .^|Blue(        ╲ ) .^ .^|
							 .^ .^  |Blue(         ╲)^ .^  |
							 |‾‾|   |               |‾‾|   |
							 |==|   |               |==|   |
							 |^*|  .^               |^*|  .^
							 |__|.^                 |__|.^  
 			>by far to most common
			>all devices are connected to central device { hub; router; etc. }
			>its the middle devices responsibility deliver data to the correct machine
		Hybrid: //(0x0000026b)➞
			>a combination of any of the ABOVE
			>no fucking way im going to draw one



	Networking_Hardware: //(0x0000026c)➞
		Repeater: //(0x0000026d)➞
			>a device which uppon receving data, echos it forward
			>used to reset the data strenght which was lowered due to attenuation
			>dumb
			>minecraft is cooler than i thought
		Hub: //(0x0000026e)➞
			>or multiport repeaters
			>the most minimalistic device which allows for implementing a star topology
			>dumb
			>middle piece to which devices connect
			>uppon receving a frame it echos it back to all of its occupied ports
			  except the one it has recieved it from
		Bridge: //(0x0000026f)➞
			>similar to a hub
			>learns the MAC addresses of the connected devices and echos only
			  to the correct port
			>makes forwarding decissions with software
			>not so dumb
			>great help with collisions
			>not all that popular in physical form, but virtualized quite often {in routers}
            >can be used to map many physical ports to a single IP
		Switch: //(0x00000270)➞
			>does everything a bride can
			>makes forwarding decission with dedicated chips (meaning less overhead)
			>has the ability to avoide loops (when a frame cant find its target and 
			  therefor it takes infinite laps around, being forwarded endlessly)
			¤forwarding methods
					>some switch-es can only perform one of the BELOW,
					  some can be configured between methods
				-store-and-forward:
					>reads the whole frame and checks the FCS
					Pros:
						>corrupted packages doesnt get forwarded
					Cons:
						>slow
				-fragment-free:
					>the first 64 bits are read
					Pros:
						>packages corrupted by collisions are not forwarded
						>mild spead
				-cut-through:
					>only the MAC addresses are read before forwarding
					Pros:
						>fast
					Cons:
						>corrupted packages are forwarded
		Router: //(0x00000271)➞
			>allows multiple networks to be connected
			>resposible for forwarding a frame on the correct route to reach its destination in the
			  shortest possible way
			>inteligent as fuck
			¤common_router_operating_systems:
				>CatOS
				>Cisco IOS
				>Linux {openWRT}
			>usually, their operating system gets loaded to memory on start up for performence
			Routing_tables:
				>the internal information that a router uses to make routing decesions
				¤population methods
					>all are symbolised by a single letter, which is usually written to the left of network id
					-C; having a direct connection (auto)
					-S; being manually configured (static)
					-R; learned from another router by Đdynamic routing protocolĐ (auto)
						-Exterior routing protocols
						-Interior routing protocols
		Multilayer_Switches: //(0x00000272)➞
			>"MLS"
			>combination of a router and a switch
			>by mashing the two roles together, performs both jobs faster
			  than an individual router and switch could

#define networking_models:: //(0x00000273)➞\
I---------------------------------------\
I    ___  ___          _      _         \
I    |  \/  |         | |    | |        \
I    | .  . | ___   __| | ___| |___     \
I    | |\/| |/ _ \ / _` |/ _ \ / __|    \
I    | |  | | (_) | (_| |  __/ \__ \    \
I    \_|  |_/\___/ \__,_|\___|_|___/    \
I---------------------------------------I
	>networking is so complex that for human sanaties sake its broken up into layers
	>each layer has its own API with which its the layer BELOW and ABOVE can communicate with

	OSI: //(0x00000274)➞
		>"Open Systems Interaction"
		>widely recognized layering model
		>created by ISO
		>YEARS OF TEACHING yet NO REAL-WORLD USE FOUND
		-layers:
			  +--------------+
			7 | Application  |
			  +--------------+
			6 | Presentation |
			  +--------------+
			5 | Session      |
			  +--------------+
			4 | Transport    |
			  +--------------+
			3 | Network      |
			  +--------------+
			2 | Data-Link    |
			  +--------------+
			1 | Physical     |
			  +--------------+
		"Please Do Not Throw Sausage Pizza Away"
		 h      a  e   r     e       r     p
		 y      t  t   a     s       e     p
		 s      a  w   n     s       s     l
		 i      -  o   s     i       e     i
		 c      L  r   p     o       n     c
		 a      i  k   o     n       t     a
		 l      n      r             a     t
		        k      t             t     i
		                             i     o
		                             o     n
		                             n     


	IPS: //(0x00000275)➞
		>"Internet Protocol Suite"
		>"TCP/IP model"
		>originally created by the (((USA Department of Defense)))
		      IPS
		+-------------+	       
		|             |
		|             |                     
		| Application | 4  <----- HTTP; FTP; SMTP; etc.
		|             |   
		|             |    
		+-------------+   
		|  Transport  | 3  <----- TCP; UDP
		+-------------+   
		|  Internet   | 2  <----- IP
		+-------------+   
		|   Network   |    
		|    Access   | 1  <----- OS kernels; physical medium
		|             |    
		+-------------+   
		-IANA ("Internet Assigned Numbers Authority")
			>the organization responsible for assinging and keeping track of IPs and domains
			>its a literal world mafia
		Comperassion_to_OSI:
					OSI                     IPS
			  +--------------+********+-------------+	       
			7 | Application  |        |             |	 <----- HTTP; FTP; SMTP; etc.
			  +--------------+        |             |                     
			6 | Presentation |        | Application | 4  <----- Encryption; Compression; etc.
			  +--------------+        |             |   
			5 | Session      |        |             |    <----- Connection of source and destination
			  +--------------+********+-------------+   
			4 | Transport    |        |  Transport  | 3  <----- Identification of protocol and port
			  +--------------+********+-------------+   
			3 | Network      |        |  Internet   | 2  <----- Indetification of ip address
			  +--------------+********+-------------+   
			2 | Data-Link    |        |   Network   |    <----- Identification of MAC adress
			  +--------------+        |    Access   | 1 
			1 | Physical     |        |             |    <----- Medium allowing for data exchange
			  +--------------+        +-------------+
		Protocol_Data_Units:
			>"PDU"
			-at each layer the individual data units have different names
				>Data
				>Segment
				>Packet
				>Frame
		Yellow(																			Layer: PDU name				 )
		Blue(  ───────────────────────────────────────────────────────────────────────────────────────────────────── )
										   +-------------+-------------+
										   | Application |     Data    |				Application: Data
										   |     Header  |             |
										   +-------------+-------------+
		Green( ───────────────────────────────────────────────────────────────────────────────────────────────────── )
										   +-------------+-------------+
										   |  Transport  |   Payload   |				Transport: Segments
										   |     Header  |             |
										   +-------------+-------------+
		Green( ───────────────────────────────────────────────────────────────────────────────────────────────────── )
							 +-------------+-------------+-------------+
							 |   Network   |  Transport  |   Payload   |				Internet: Packets
							 |    Header   |     Header  |             |
							 +-------------+-------------+-------------+
		Green( ───────────────────────────────────────────────────────────────────────────────────────────────────── )
			   +-------------+-------------+-------------+-------------+-------------+
			   |     Frame   |   Network   |  Transport  |   Payload   |     Frame   |	Network Access:	Frames
			   |    Header   |    Header   |     Header  |             |   Trailer   |		Sometimes also refered
			   +-------------+-------------+-------------+-------------+-------------+		to as Packets
		Blue(  ───────────────────────────────────────────────────────────────────────────────────────────────────── )
		?!:
			-network access
				>a Đframe trailerĐ is added containing a Đframe check sequanceĐ
				>a ĐĐframe check sequance (FCS)ĐĐ contains section meta-data information
				  used to check frame integrity
		

// --------------------
	URL:	// ?!; move
		>"Uniform Resource Locator"
		>naming scheme for internet resources
		| Red( Protocol ) | Blue( Authentication ) | Yellow( Server ) | Purple( Path ) |
		{ Complete URL scheme:
		  @begin=html@
			<protocol>://<name>:<password>@<domain>:<port>/<path>
		  @end=html@
		}
		{ // Average site link
					  |     |              |         |
		  			   https://4channel.org/g/catalog
		  			  |     |              |         |
		  			Protocol:		https
					Authentication: None
		  			Server:_		4channel.org	// NOTE: in the example (and in most real file cases) the server is identified by a ĐdomainĐ; see ../DNS
		  			Path:			g/catalog
		}


	NAT:
		>"Network Address Traslation"
		>by mapping internal IPs to ports, it allows for reserving a single public IP to a LAN
		>typically performed by all routers
		>saved the net from running out of IPs ridicilously fast
		SNAT:
			>"Source NAT"
			>mostly applied to out going packets
		DNAT:
			>"Destination NAT"
			>mostly applied to inbound packets


#define networking_protocols:: //(0x00000276)➞\
I-------------------------------------------------\
I    ______          _                  _         \
I    | ___ \        | |                | |        \
I    | |_/ / __ ___ | |_ ___   ___ ___ | |___     \
I    |  __/ '__/ _ \| __/ _ \ / __/ _ \| / __|    \
I    | |  | | | (_) | || (_) | (_| (_) | \__ \    \
I    \_|  |_|  \___/ \__\___/ \___\___/|_|___/    \
I-------------------------------------------------I

"\
 ___ _           _         _   _                       \
| _ \ |_ _  _ __(_)__ __ _| | | |   __ _ _  _ ___ _ _  \
|  _/ ' \ || (_-< / _/ _` | | | |__/ _` | || / -_) '_| \
|_| |_||_\_, /__/_\__\__,_|_| |____\__,_|\_, \___|_|   \
		 |__/                            |__/          \
"
	Multiplexing:
		TDM:
			>"Time Division Multiplexing"
			>bandwidth is divided into time slots
			>machines and applications take turns in communicating
		FDM:
			>"Frequency Division Multiplexing"
			>the mediums frequency spectrum is divided into non-overlapping frequency bands

"\
 ___     _                _     _                       \
|_ _|_ _| |_ ___ _ _  ___| |_  | |   __ _ _  _ ___ _ _  \
 | || ' \  _/ -_) ' \/ -_)  _| | |__/ _` | || / -_) '_| \
|___|_||_\__\___|_||_\___|\__| |____\__,_|\_, \___|_|   \
										  |__/          \
"

	ARP: //(0x00000277)➞
		>"Address Resolution Protocol"
		MAC_address: //(0x00000278)➞		// ?!; move
			>"Media Access Control"
			>or hardware address, physical address, adapter address
			>not related Jewpple
			>stored in the NIC (or mobo nowdays)
			>unchangeably burnt into the silicone of ones machine
			>globally unique id
			>can be forged
			>visible only to ones local network



	IP:
		>"Internet Protocol"
		>a system of assigning unique addresses to computers
		>necessery for device identification
		¤versions
			-IPv4:
				>32 bit
				-writen in groups of decimal octets
					x.x.x.x 
					>'x' being an unsigned char (0-255)
					>leading 0-s are omited
				  { 123.45.178.9 }
				>4.294.967.296 possibles addresses, some are reserved however
				¤reserved addresses
					0.0.0.0
					255.255.255.255
					-network id:
						>all host bits are 0-s
					-broadcast address:
						>all host bits are 1-s (resulting in octet holding the value of 255)
					-Private addresses:
						-10.x.x.x
						-172.16.0.0-172.31.255.255
						-192.168.x.x
					-127.x.x.x range:
						>loopback address
						>for testing
						>any of these address can be success fully pinged with a working NIC,
						  and a working TPC/IP installation
						>every out going packet is return-ed as an inbound packet
						-127.0.0.1:
							>most common value
				License_classes:
					>A-E
					>practically obsolite
					+-------+---------------+--------+------+--------------------+-----------------+
					| Class | Address Range | Prefix | Mask | Number of Networks | Number of Hosts |
					+-------+---------------+--------+------+--------------------+-----------------+
					| A     | 1-126.x.x.x   |      0 |    8 | 256                | 16.777.214      |
					| B     | 128-191.x.x.x |     10 |   16 | 65.536             | 65.534          |
					| C     | 192-223.x.x.x |    110 |   24 | 16.777.216         | 254             |
					| D     | 224-239.x.x.x |   1110 |  N/A | N/A                | N/A             |
					| E     | 240-255.x.x.x |   1111 |  N/A | N/A                | N/A             |
					+-------+---------------+--------+------+--------------------+-----------------+
					A:
						>assigned to used to be large networks
						  { IBM; HP; Apple; DoD }
					B:
						>assigned to used to be medium networks
						  { Ford; MIT; GE }
					C:
						>assigned to used to be small networks
						  { insignificantly large companies }
					D:
						>multicast addresses
					E:
						>experimental or future use
						>not assigned
				CIDR:
					>"Classless Inter Domain Routing"
				-Header:       						 	 <-- 32 bits -->
					+--------------+--------------+--------------+--------------------------------------------+
					|   Version    |     IHL      |     TOS      |               Total length                 |
					+--------------------------------------------+--------------------+-----------------------+
					|               Identification               |       Flags        |    Fragment Offset    |
					+---------------------+----------------------+--------------------------------------------+
					|    Time to live     |       Protocol       |              Header Checksum               |
					+---------------------+----------------------+--------------------------------------------+
					|                                      Source Address                                     |
					+-----------------------------------------------------------------------------------------+
					|                                 Destination Address                                     |
					+--------------------------------------------+--------------------------------------------+
					|                  Options                   |                  Padding                   |
					+--------------------------------------------+--------------------------------------------+
					\                                          Data			 								  \
					/									  (Variable size)									  /
					+-----------------------------------------------------------------------------------------+
			-IPv6:
				>128 bit
				>forced IPsec
				-written in 8 groups of 4 hex numbers separated by colons
.					xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
					>the first 4 sections are the ĐĐhost partionĐĐ
					>the last 4 sections are the ĐĐnetwork partionĐĐ
					{ 2001:0db8:85a3:0000:0000:8a2e:0370:7334 }
				-link-local:
					>always start with fe80:
					Link-local IPv6 addresses are used as part of the IPv6 network auto-configuration process.
					Instead of getting an address via DHCP, a NIC will hop on the network with a link-local IPv6 address and with this will
					have the ability to do further configuration automatically (soliciting neighbors, router, et cetera).
					This link-local IPv6 is infered from the NIC’s mac address.
					A mac address is 48 bits, an IPv6 address is 128 bits. Here’s the conversion process step by step:
						1. take the mac address { 52:74:f2:b1:a8:7f }
						2. throw ff:fe in the middle { 52:74:f2:ff:fe:b1:a8:7f }
						3. reformat to IPv6 notation  { 5274:f2ff:feb1:a87f }
						4. convert the first octet from hexadecimal to binary { 52 -> 01010010 }
						5. invert the bit at index 6 (counting from 0)  { 01010010 -> 01010000 }
						6. convert octet back to hexadecimal { 01010000 -> 50 }
						7. replace first octet with newly calculated one { 5074:f2ff:feb1:a87f }
						8. prepend the link-local prefix { fe80::5074:f2ff:feb1:a87f }
						done!
				-unique local address:
					>always starts with fec0:
				-global:
					>always starts with 2000:
				¤reserved addresses
					0:0:0:0:0:0:0:0 or ::		: default address of any machine not assigned a unique ipv6
					0:0:0:0:0:0:0:1 or ::1		: loopback address (127.0.0.1 in ipv4)
.					FF00:[...]					: multicast range
		Subnetting:
			>necessery for fast data delivery
			>scalable with dismissible performance impact
			Subnet_mask:
				>a number used to identify the network part of an ip
				>same length
				>const string of 1-s starting from the left side
				  continue-ing with a const string of 0-s
				-standard subnet masks:
					>class A: 255.0.0.0
					>class B: 255.255.0.0
					>class C: 255.255.255.0
				-CIDR notation
					>"Classless Inter-Domain Routing NOTATION"
					>a subnet written simply by posponing a slash and the number of true bits to an ip
					{ ip:   172.18.5.5 
.					  mask: 255.255.255.240
							172.18.5.5/28
					}
				VLSM:
					>"Variable length Subnet Mask"


	ROUTING:
		>routing tables
		>if the routing tables are configured manually, its called ĐĐstatic routingĐĐ
		>if the routing tables are configured auto, its called ĐĐdynamic routingĐĐ
		¤protocols for dynamic tables
			>RIP
			>OSPF
			>EIGRP
		¤algorithms to find the shortest path
			>Dijkstra's
			>Bellman-Ford
			>link-state
		>routing is dependent on the shortest know path (dependent on hop count) and the quality of the connection


	CABLES:
		COAX:
			>anchient
		Fiber_optic:
			>replacement for COAX
			>gigabit capable
		Ethernet:
			-T568A
				Green-White
				Green
				Orange-White
				Blue
				Blue-White
				Orange
				Brown-White
				Brown
			-T568B
				Orange-White
				Orange
				Green-White
				Blue
				Blue-White
				Green
				Brown-White
				Brown

"\
 _____                               _     _                       \
|_   _| _ __ _ _ _  ____ __  ___ _ _| |_  | |   __ _ _  _ ___ _ _  \
  | || '_/ _` | ' \(_-< '_ \/ _ \ '_|  _| | |__/ _` | || / -_) '_| \
  |_||_| \__,_|_||_/__/ .__/\___/_|  \__| |____\__,_|\_, \___|_|   \
					  |_|                            |__/          \
"

	TCP:
		>"Transmission Control Protocol"
		>unicast
		>considerable overhead
		>reliable
		>has sequancing (numbers in the packets so that they may always be put into order)
		>implements ĐĐwindowingĐĐ; meaning aknowledgements are sent back after arbitrary
		  amounts of data has been transmited; the process of changing the ĐwindowĐ site is
		  called ĐflowcontrolĐ and is implemented in such a way to allow for good performance
		  while minimizing the number of packets that must be resent						   ,---------,
		-Three-Way Handsake:		 044444444444440                 044444444444440         ,"        ,"|
				   ___________       1             1                 1             1       ," Kevin  ,"  |
(			      |.---------.|      1             1                 1  LISTENING  1     ,"    Lam ,"    |
				  || #jgs_   ||      1             1 ------SYN-----> 1             1    +---------+      |
				  ||         ||      1  SYN_SENT   1                 1             1    | -==----'|      |
				  ||         ||      1             1                 1             1    |         |      |
				  |'---------'|      1             1                 1  SYN_RCVD   1    |`---=    |      |
				   `)__ ____('       1             1 <---SYN-ACK---- 1             1    |==== ooo |      ;
				   [=== -- o ]--.    1 ESTABLISHED 1                 1             1    |(((( [33]|    ,^
				 __'---------'__ \   1             1 ------ACK-----> 1             1    |((((     |  ,^												))))))))
				[::::::::::: :::] )  1             1                 1 ESTABLISHED 1    |         |,^     
				 `""""""""'""""`/T\  1             1                 1             1    +---------+
					ĐClientĐ    \_/  044444444444440                 044444444444440     ĐServerĐ
			SYN : synchronization request
			ACK	: synchronization request acknowledgment
		-Header:       						  <-- 32 bits -->
		+--------------------------------------------+--------------------------------------------+
		|                Source Port                 |             Destination Port               |
		+--------------------------------------------+--------------------------------------------+
		|                                    Sequnece Number                                      |
		+-----------------------------------------------------------------------------------------+
		|                                 Acknowledgment Number                                   |
		+--------------+--------------+--------------+--------------------------------------------+
		| Data Offset  | Reserved (6) |  Flags (6)   |                   Window                   |
		+--------------+--------------+--------------+--------------------------------------------+
		|                                   Options and Padding                                   |
		+--------------------------------------------+--------------------------------------------+
		\                                          Data			 								  \
		/									  (Variable size)									  /
		+-----------------------------------------------------------------------------------------+



	UDP:
		>"User Datagram Protocol"
		>multi- or broadcast
		>minimal overheap
		>fast
		-Header:       						  <-- 32 bits -->
		+--------------------------------------------+--------------------------------------------+
		|                Source Port                 |             Destination Port               |
		+--------------------------------------------+--------------------------------------------+
		|                   length					 |                 Checksum					  |
		+--------------------------------------------+--------------------------------------------+
		\                                          Data			 								  \
		/									  (Variable size)									  /
		+-----------------------------------------------------------------------------------------+




"\
   _             _ _         _   _            _                       \
  /_\  _ __ _ __| (_)__ __ _| |_(_)___ _ _   | |   __ _ _  _ ___ _ _  \
 / _ \| '_ \ '_ \ | / _/ _` |  _| / _ \ ' \  | |__/ _` | || / -_) '_| \
/_/ \_\ .__/ .__/_|_\__\__,_|\__|_\___/_||_| |____\__,_|\_, \___|_|   \
	  |_|  |_|                                          |__/          \
"

	DHCP:
		>"Dynamic Host Configuration Protocol"
		>auto assigns ip addresses
		-DHCP process:
			1. Yellow( DHCPDiscover ) Purple( ip address requst ) ....... by the đ_Client_đ
			2. Yellow( DHCPOffer ) .. Purple( ip address offer ) ........ by the đ_Server_đ
			3. Yellow( DHCPRequest )  Purple( ip address selection ) .... by the đ_Client_đ
			4. Yellow( DHCPAck ) .... Purple( ip address acknowledgment ) by the đ_Server_đ

    SSH:
        >"Secure SHell" protocol
        >"transport layer through application layer";
          this is where you can really see the OSI model break down;
          ssh requires "any 8-bit clean, binary-transparent transport" which is usually TCL/IP,
          but it also requires an application using the protocol it sets up
        >IANA registered port 22
        -process of establishing an ssh connection;
            >NOTE: note based on RFC 4253 and the sshd manual;
                    the host key authentication does not seem to be part of
                    the ssh psecification, but it says:
                      "The server MAY send other lines of data before sending the version string."
                    and the manual documents:
                      "Whenever a client connects, the daemon responds  with  its  public hostkey."
                    so it seems reasonable to assume thats where it happens

        04444444444444444444440     Connection Request       044444444444444440
        1                     1 ---------------------------> 1                1
        1    ___________      1     Transport connection     1    ,---------, 1
        1   |.---------.|     1       established {TCP}      1  ," KL     ,"| 1
        1   || #jgs_   ||     1 <==========================> 1 +---------+  | 1
        1   ||         ||     1          Host Key            1 | -==----'|  | 1
        1   ||         ||     1 <--------------------------- 1 |         |  | 1
        1   |'---------'(     1       Version Exchange       1 |`---=    |  | 1
        1    `)__ ____('      1 <==========================> 1 |==== ooo |  | 1
        1    [=== -- o ]--.   1       Key Negotiation        1 |(((( [33]|  | 1
        1  __'---------)__ \  1 <==========================> 1 |((((     |  ; 1                     )))))))
        1 [::::::::::: :::] ) 1       Service Request        1 |         |,^  1
        1  `""""""""'""""`/T\ 1 ---------------------------> 1 +---------+    1
        1     ĐClientĐ    \_/ 1       Authentication         1  ĐServerĐ      1
        1                     1 <==========================> 1                1
        1                     1          Service             1                1
        04444444444444444444440 <==========================> 044444444444444440



#define network_applications:: //(0x00000279)➞\
I---------------------------------------------------------------\
I      ___              _ _           _   _                     \
I     / _ \            | (_)         | | (_)                    \
I    / /_\ \_ __  _ __ | |_  ___ __ _| |_ _  ___  _ __  ___     \
I    |  _  | '_ \| '_ \| | |/ __/ _` | __| |/ _ \| '_ \/ __|    \
I    | | | | |_) | |_) | | | (_| (_| | |_| | (_) | | | \__ \    \
I    \_| |_/ .__/| .__/|_|_|\___\__,_|\__|_|\___/|_| |_|___/    \
I          | |   | |                                            \
I          |_|   |_|                                            \
I---------------------------------------------------------------I
//(0x000001d5)➞

	Apache:
		XXX:
			apache2 daemon
		Files:
			/etc/apache2/			: config directory
			/var/log/apache2/		: log directory
		Programs:
			apache2ctl [options]	: responsible for cli administration of the apache2 daemon
				-S						: print relevant information about the running instance

    Lighttpd:
        >minimalist webserver
        >can easily be run in the foregroup
        >NOTE: if one more source spells out how its pronounced im commiting homicide
        Files:
		    /etc/lighttpd/			: config directory

    Samba:
        XXX:
            samba daemon    // smbd
        >"Server (A) Message (A) Block"; one of the few dictionary words that can be formed using "SMB"
        Files:
            /etc/samba/     : config dir
             └── smb.cfg        : main config file
        Configuration:
            >ini format, but key names may contain spaces
            Sections:
                [global]        : generic server config
                [homes]         : used for creating shared resourced on the fly to users not configured explicit-ly
                [printers]      : used for printers
                [<...>]         : shared resource named <...>
            Supported_protocols:
                CORE
                COREPLUS
                LANMAN1
                LANMAN2
                NT1
                SMB2_02
                SMB2_10
                SMB3_00
                SMB3_02
                SMB3_11
                SMB2_FF
            Macros:
                >expanded inside key values
                %R  : protocol in use (see BELOW)
                %T  : current date
                %t  : current date (YYYYYmmdd_HHMMSS)
                %w  : winbind separator
                %S  : service name
                %P  : service root directory
                %u  : username of the service
                %g  : primary group name of %u
                %H  : home directory of the user given by %u
                %$(ENVVAR)  : value of the environment variable ENVVAR
                server:
                    %h  : hostname
                    %d  : pid
                    %L  : NetBIOS name
                    %N  : %L
                client:
                    %a  : OS
                    %U  : requested username
                    %G  : group name of %U
                    %D  : domain or workgroup
                    %I  : IP
                    %J  : %I where colons/dots are replaced by underscores
                    %i  : local IP
                    %j  : %i where colons/dots are replaced by underscores
                    %M  : DNS
                    %m  : NetBIOS name; not available when Samba listens on port 445
            Options:
                admin users     = <user>*       : allow root access for <user>*
                browsable       = [yes|no]      : whether to allow directory listing
                create mask     = <mask>        : UNIX permission mask to AND with new files
                directory mask  = <mask>        : UNIX permission mask to AND with new dirs
                dns port        = <port>
                follow symlinks = [yes|no]
                public          = [yes|no]      : whether to allow guest logins
                guest only      = [yes|no]      : whether to only allow guest logins
                allow hosts     = <host>*       : whitelist of hosts;
                deny hosts      = <host>*       : blacklist of hosts
                include         = <path>        : C style include
                path            = <path>        : path to which the user is given access to
                root            = <path="">     : path to chroot to at launch;
                                                   NOTE: requires mirroring /etc/passwd
                                                          and configured scripts
                username map    = <path>        : specifies a username map file to use
                writable        = [yes|no]      : whether to allow file writting
                Name_mangling:
                    >translating file names so systems not prepared
                      to understand some names may still do
                    case sensitive = [yes|no|auto]
                    default case   = [upper|lower]
                Identity_mapping:
                    >translating SMB protocol SIDs (Security IDentifiers) to
                      POSIX user and group names
                <host>
                    >hostnames
                    >net groups
                    >ips
                    >ip ranges
                Username_mapping:   // move; ?!
                    >standard cfg file
                    >maps usernames which the client may send to UNIX usernames valid on the server
                    <UNIX_name> = <name>*
                

	HTTP: //(0x0000027a)➞
		Response_codes: //(0x0000027b)➞
			100	: Header succesfully recived, continue on with sending the body
			101	: Upgrade header accepted, swithing protocols
			102 : Processing; intermidate response to inform the user that the request is successfull, but the server is still processing 
			103	: Early Hints; used with a link header to allow the user to load resources while the server doesnt send a full response
			200	: OK
			201	: Created
			202	: Accepted; however it doesnt mean that the process has compleated
			203	: Non-Authoritative Information; a 200 request that has been altered by a proxy
			204	: No Content; indicates success and that the user doesnt have to navigate away (see BELOW) {saving an online document}
			205	: Reset Content; indicates success and that the user should refresh the site (see ABOVE)
			206	:
			207	:
			208	:
			226	:
			300	: Multiple Choices; multiple possiple responses, the user shall choose
			301	: Moved permanently
			302	: Found; temporarly moved
			303	: See Other
			304	:
			305	:
			306	:
			307	: Temporary Redirect
			308	: Permanent Redirect
			309	:
			400 : Bad Requst; the server will not process the request due to user error
			401 : Unauthorized
			402 : Payment Required
			403 : Forbiden; like 401, but no re-authentication will make a difference, the request is permanently forbidden by the server
			404 : Not Found
			405 : Method Not Allowed; the request method is recognized, but not supported
			406 : Not Acceptable; for example wrong character set
			407 : Proxy Authentication Required
			408 : Request Timeout; sent by a server that would like to close an iddle connection
			409 : Conflict; request could not be setisfied
			410 : Gone; perminanently unaccessible
			411 : length Required; the server will not accept the request without a Content-length header
			412 : Precondition Failed; user supplied condition is false (and so the request shall not be sattisfied)
			413 : Payload Too Large
			414 : URI Too Long
			415 : Unsupported Media Type; payload's format is unacceptable
			416 : Range Not Satisfiable
			417 : Exception Failed
			418 : I'm a Teapot
			421 : 		
			422 : Unprocessable Entity; understood, but cannot be satisfied
			423 :
			424 :
			425 : Too Early; protection from a Replay attack
			426 : Upgrade Required; indicates that the user should change protocols
			428 : Precondition Required
			429 : Too Many Requests
			431 : Request Header Fields Too Large
			451 : Unavailable For Legal Reasons
			500 : Internal Server Error
			501 : Not Implemented
			502 : Bad Gateway; the server failed to succesfully communicate with another server
			503 : Service Unavailable
			504 : Gateway Timeout; the server encountered a timeout while it tried to communicate with another server
			505 : HTTP Version Not Supported
			506 : Variant Also Negotiates
			507 : Insufficient Storage
			508 : Loop Detected; server terminated an operation cause it identified an infinite loop
			510 : Not Extende; requirements to access the resource were not met, information to sattisfy those requirements are sent
			511 : Network Authentication Required

#define www\


	>"World Wide Web"	//NOTE: its actually faster to say than "Double U Double U Double U"
	>the subset of the Internet which depends on the browser/markup stack
	Technologies_involved:
Purple(	-depricated:
			>Java
			>Flash	// goodnight, sweet prince
)
		-current:
			>html
			>css
			>javascript
			>web asm
	Render_engines:
		>each web browser depends on one
		>responsible for parsing markup, applying styling and calculating layout
		-the market is a horror show, no independent developer could ever be expected to implement one
			>Gecko (by Mozilla) {Firefox}
			>Chromium Embeded Framework (by CEF Group) {Chromium; Chrome; Brave}
			>WebKit (by Apple) {Safari}

	BOTS:
		Scrapper:
			>data collector
			>purpisefully extracts information from a webpage
			>stores the scrapped data in a struct-ured format
.			### Rules for writing scrappers ###
				-always browse the site first
					>check for errors
					>check for response code standardness
				-try curl
					>see how badly its js-poozed
					>see what tags were auto corrected by your browser
					>check for protocol errors
				-consider using (browser) js
					>many times its the easiest and fastest way to extract data
					>good idea when doing a one time thing
				-consider using wget
					>many dont know how versatile it is
				-use local copies for testing
					>can safe lots of time
					>can spare you from bans
					>can spere you from network errors
				-check for gray-APIs
					>suspect it with fancy interfaces
					>sniffing the requests might be the easiest path to take
			#
		Crawler:
			>"spider"
			>navigates a site or sites through a series of available links
			>most commonly scraps keywords in the process used for indexing
		Sniper:
			>performs a single action requiring percision
			>most commonly refers to bot waiting for a condition and reacting as fast as possible
			  { biding at the last possible chance in an auction }
		¤common tools for writting bots
			>Curl
			>Python/Requests
			>Python/Beautifulsoup
			>Selenium


#define UI\
#define user_interface\
#define UX\
#define user_experience\
#define UX/UI: //(0x0000027c)➞\
II--------------------------------------------------------------I\
II--------------------------------------------------------------I\
II                             AW                               I\
II    `7MMF'   `7MF'`7MMF'    ,M'`7MMF'   `7MF'`YMM'   `MP'     I\
II      MM       M    MM      MV   MM       M    VMb.  ,P       I\
II      MM       M    MM     AW    MM       M     `MM.M'        I\
II      MM       M    MM    ,M'    MM       M       MMb         I\
II      MM       M    MM    MV     MM       M     ,M'`Mb.       I\
II      YM.     ,M    MM   AW      YM.     ,M    ,P   `MM.      I\
II       `bmmmmd"'  .JMML.,M'       `bmmmmd"'  .MM:.  .:MMa.    I\
II                        MV                                    I\
II                       AW                                     I\
II--------------------------------------------------------------I\
II--------------------------------------------------------------II

    >people are unironically getting payed for UX,
      not only that, more often than not,
      they are fucking terminally retarded
    >the better looking something is, the better it is percieved,
      this is called the ĐĐAesthetic-Usability EffectĐĐ

    -aspects of UIs:
Green(
              ooooooooooo
            oo           oo
          o   \            o
         o     \  Widgets   o
        o       \_           o
        o         \__________o
        o  Layout |          o
         o        | Style   o
          o      |         o
           oo   |        oo
             oooooooooooo
)
        >ĐĐwidgetĐĐ type defines the available functionality and generic look of an element { button }
        >ĐĐstyleĐĐ defines the precise look of elements { blue background }
        >ĐĐlayoutĐĐ defines how elements are sized, placed next to eachother and change their size { vertical stacking of buttons }
        >a framework with any taste will have proper separation and or consistent combining of
          these aspects {TK; QT; NOT HTML/CSS}

    // XXX: ?! where the fuck did the bit on stacktraces go?
	CLI: //(0x0000027d)➞
		>ascii art is king
		>the output pages by default if it is one very large dump (${PAGER} exists for a reason)
		Exit_codes:
			 0 - success
			!0 - error
		Streams:
			stdout - key output
			stderr - errors, logs
		Help:
			-the following flags should always be hooked to displaying a concise help message
				-h
				-help
				--help
			>unless there is a good reason not to do so, launching the application with
			  no arguments should display a help message
			>if the help message is so large that it cannot realistically fit on a
			  single screen, the program should have a second explicit-ly concise
			  help message, which only shows and describes the key information bits
		Flags:
			-most common conventional flags:
.				-a, --all
.				-d, --debug
.				-f, --force
.				--json
.				-h, --help
.				-o, --output
.				-i, --input
.				-p, --port
.				-q, --quiet
.				-u, --user
.				--version
.				-v --verbose
            >every short option should have a long equivalent,
              so if a ready made command is shared with someone not quite at home with the program
              can rougly tell what the hell is going
            >kebab-case or bust
            >if the cli is robust enough, it should have a system to hint at typos
                { // This is how git does it
                    $ git clone -dept 1 http://192.168.0.200/anon/software.git
                    error: did you mean `--dept` (with two dashes)?
                }
		Interactivity:
			>do not use color if not run interactively unless explicit-ly requested
			>prompt before destructive operations
			>show progress or a spinner if something takes a long time
            >abort file operations uppon exit {im looking at you "useradd"}
		Compatibility:
			-do not add a default verb; it could break backwards compatibility with scripts
				{ // assume the following
					$ mycli -h
					mycli <verb> <string> : echo the result of <verb> operation on <string>
						verb:
							len      : return the number of characters in the input; default // !!!
							reverse  : return the input with its characters in reverse order
				  // then someone writes a script:
				  	mycli moo im a cow
				  // but we decided to add a new verb:
							moo      : print the input with cowsay ascii art
				  // now the users script stops functioning as it used to,
				  //  resulting in him deleting the root partition of his
				  //  employer's server, ultimately leading to his homelessness
				  //  and crack addiction
				}
		Configuration:
			>try to limit yourself to flags
			>if you cannot limit yourself to flags, attempt to introduce environment variables only
			>if you seriously need a configuration file,
			  DO NOT VOMIT ALL OVER SOMEONES HOME FOLDER
			>using the home folder for storing configuration (including ~/.mycli/)
			  is only acceptable if your program is so crucial that it warrants it
			  { interactive system shell; (robust) editor }
			>please, PLEASE use ~/.config
            No_color_convention:
                YYY:
                    https://no-color.org/
                >color codes can fuck over TTYs or pollute logs
                >each program defining its own (unconventional) flag for turning colors off
                  is insanity and a pain in the ass
                >if the environment var ${NO_COLOR} is set,
                  the cli shall not output any ansii color codes
        Margins:
            ?!
            >"\
             As long as no error occurs, the lines will be prefixed by \"###\".    \
             Error messages will instead have a "---" prefix.                      \
             This makes it easy to spot errors just by looking in the left margin. \
             "
                                                            - cmdtest User's Guide

	Sloppy_focus: //(0x0000027e)➞
		>when the mouse auto shifts focus to the element under it
		>most often used in desktop environments when the hovered window is auto focused

	Window: //(0x0000027f)➞
		>well bordered area
		>its contents are independent from the rest of the screen
		-traditionally:
			>is square
			>has a border
            >has a title
			-has 3 controls located on the border
				>hide
				>minimize/maximize
				>close
		┏━━━━━━━━━━━━━━━━━┓
		┃ my window  - □ x┃
		┣━━━━━━━━━━━━━━━━━┫
		│                 │
		│   Hello World   │
		│                 │
		│                 │
		└─────────────────┘

	Cursor: //(0x00000280)➞
		>its main intent is to mark a location
		>may or may not have other states
		>NOTE: for example in imperative SQL wrappers, where search results are iterated,
		  the internal variable to the SQL engine which marks the current result is often
		  called a cursor
		{ // Terminals have (emulated) hardware cursors, which mark where text should be inserted
			┌─────────────┐
			│ PS1$ █      │
			│             │
			│             │
			│             │
			└─────────────┘
		}
		Pointer:
			¤commonly controlled by one of these devices
				>mouse
				>trackpad
				>trackpoint
				>joystick
			>movable to arbitrary locations on the screen
			  (in practice this usually means pixel-addressability)
			{ // traditional "mouse style" pointer
				.
				|\
				 l
			}

	Switch: //(0x00000281)➞
		>"flip-flop control"
		>a user input with a binary state
		Check_box:
			>"tick box"
			>a switch that is represented as box indicating the state and usually a label too
			>often comes in batches
            >conventially a square (except Apple seems to have started breaking that)
			{
				┌─────────────────────────────┐
				│ Which liqueurs do you like? │
				├─────────────────────────────┤
				│ ○ Rum                       │
				│ ⊗ Tonic                     │
				│ ⊗ Vodka                     │
				│ ○ Whiskey                   │
				└─────────────────────────────┘
			}
		Push_button:
			>a ĐswitchĐ that auto resets when it looses active input
			{ // your keyboard is filled with such
			Blue(
				. -------------------------------------------------------------------.        
				| [Esc] [F1][F2][F3][F4][F5][F6][F7][F8][F9][F0][F10][F11][F12] o o o|        
				|                                                                    |        
				| [`][1][2][3][4][5][6][7][8][9][0][-][=][_<_] [I][H][U] [N][/][*][-]|        
				| [|-][Q][W][E][R][T][Y][U][I][O][P][{][}] | | [D][E][D] [7][8][9]|+||        
				| [CAP][A][S][D][F][G][H][J][K][L][;]['][#]|_|           [4][5][6]|_||        
				| [^][\][Z][X][C][V][B][N][M][,][.][/] [__^__]    [^]    [1][2][3]| ||        
				| [c]   [a][________________________][a]   [c] [<][V][>] [ 0  ][.]|_||        
				`--------------------------------------------------------------------'    dp  
			)}
		Switch_button:
			>a switch, that looks like a button
			{ // Our on/off button always displays a state on it
				[on]    /* OR */    [off]
			  // now, what do you think, does our button display
			  //  the current state or the next?
			  // dunno? exactly. its confusing.
			}
			>dont do it please; or at least put verbs on it { "turn off" }

	Dropdown: //(0x00000282)➞
		>a property of widgets which signals that the complete interface
		  is not visible without input
		>the name originates from how in practice it is usually being implemented as a menu
		  that expands downwards on click, layed over other elements
        // ?!; write something about auto closing dropdows and how button holding would be a solution

	Snipper: //(0x00000283)➞
		>directional controls accompanying a state display,
		  which may or may not itself be a {text} input
		>convenient with input repeat acceleration
		{
			┌──────┬───┐
			│   /| │ A │
			│    | │ V │
			└──────┴───┘
		}

	Slider: //(0x00000284)➞
		>an elongated user input
		>its two ends represent two values between which the user
		  can select a value
        >usually linear
		>its best used where the user gets instant visual feedback on its selection
		{
			┏━━━━━━━━━━━━━━━━━━━━━━━━┓	┏━━━━━━━━━━━━━━━━━━━━━━━━┓
			┃                        ┃	┃           .--'         ┃
			┃                        ┃	┃       .--'             ┃
			┃                        ┃	┃   .--'                 ┃
			┃------------------------┃	┃--'                     ┃
			┣━━━━━━━━━━━━━━━━━━━━━━━━┫	┣━━━━━━━━━━━━━━━━━━━━━━━━┫
			┃ Angle: ├█────────────┤ ┃	┃ Angle: ├──█──────────┤ ┃
			┗━━━━━━━━━━━━━━━━━━━━━━━━┛	┗━━━━━━━━━━━━━━━━━━━━━━━━┛
		}
        Scroller:
            >a slider which is used for moving a viewport over an area
            >modern scrollers handle shrink in size proportional to the displayable arena's size
            >scrollers are traditionally fit with snippers
            >can be used to mark the position of search results
            >NOTE: please stop using snippers for scrollers, they are utterly useless;
                    your mouse has a SCROLL wheal, your keyboard has arrow keys,
                    your touchpad supports guestures, your trackpoint has the smoothest scrolling imaginable
                    and most screens in personal usage are touch screens
            -scroll bars are useful for even for those who do not use them:
                >they display the users corrent location
                >they (can) hint at the documents length
                >they allow for fast and precise navigation
            >NOTE: please stop making scroll bars that dont jump on click;
                    {good: firefox; bad: chrome}
            {
                ┏━━━━━━━━━━━━━━┳━┓
                ┃Our OS who art┃^┃
                ┃in CPU, UNIX  ┃█┃
                ┃be thy name.  ┃█┃
                ┃Thy programs  ┃|┃
                ┃run, thy      ┃|┃
                ┃syscalls done,┃|┃
                ┃in kernel as  ┃V┃
                ┗━━━━━━━━━━━━━━┻━┛
                 it is in user!│
                │Give us this  
                 day our daily │
                │cycles, And   
                 forgive us our│
                │GOTO's As we    
                 forgive them  │
                │that also use 
                 BASIC. Lead us│
                │not into        
                 FORTRAN, But  │
                │deliver us      
                 from COBOL.   │
                │For thine is    
                 the for loop, │
                │the while and 
                 the switch For│
                │ever and ever,
                 Amen.         │
                └  ──  ──  ── ─┘
            }


	Canvas: //(0x00000285)➞
		>a continuous arena where uniform, atomic sections are writable


    Miller_collumns: //(0x00000286)➞
        >tree traversing widget
        >the children of each selected branch is kept in its own collumn
        >all children of a selected branch is displayed
        { // File browsing with miller collumns
			┌───────┬──────────────┬─────────┐
			│ bin/  │>EFI/         │ BOOT/   │
			│>boot/ │ grub/        │ EFI/    │
			│ dev/  │ config-6.0.2-│#gentoo/ │
			│ etc/  │ config-6.5.7-│ GRUB/   │
			│ home/ │ config-6.7.2-│         │
			│ ...   │ ...          │         │
			└───────┴──────────────┴─────────┘
        }
        >works best when the number of nodes is enough to warrant such complex widget,
          but not so much that displaying it on the screen becomes a clutter
          (as it may have to start squashing collumns or have horizontal scolling
          for elements to fit)
        >they can be used to visualize data filtering too
        >they can be used to visualize data filtering too

    Popup: //(0x00000287)➞
        YYY:
            https://bytepointer.com/resources/old_new_thing/20030901_039_the_default_answer_to_every_dialog_box_is_cancel.htm
        >appears above the rest of the application
        >corresponds to a main window or process
        >may or may not have its own window
        >a ĐĐdialog boxĐĐ is a popup with input widgets;
          when mentioning popups, in most cases we are refering to dialog boxes
        { // Typical desktop popup (under Linux)
            ┏━━━━━━━━━━━━━━━━━┓
            ┃ my window  - □ x┃
            ┣━━━━━━━━━━━━━━━━━┫
            │ ┏━━━━━━━━━━━━━┓ │
            │ ┃ popup  - □ x┃ │
            │ ┣━━━━━━━━━━━━━┫ │
            │ │ Halt &      │ │
            │ │ catch fire? │ │
            │ │ [no]  [yes] │ │
            │ └─────────────┘ │
            └─────────────────┘
          // Typical website popup
			┌─────────────────┐
            │ Search (______) │
            │ˇ ˇ ˇ ˇ ˇ ˇ ˇ ˇ ˇ│
            │ #What is a pig? │
            │ pigs most often │
            │ wear blue and   │
            │---------------x-│
            │  We use cookies │
            └─────────────────┘
        }
        -popups are terrible:
            >they create surprise
            >they block the user from trying to do what he wants
            >most never read popups, instead look for the fastest way to get rid of them
            >if the user is unsure of what the popup means, she will almost always click no/cancel
            {
                Cookie notifications are annoying beyond belief and thats a fact.
                // ---
                "How do I make this error message go away?\
                  It appears every time I start the computer."
                "What does this error message say?"
                "It says, 'Updates are ready to install.' I've just been clicking the X\
                  to make it go away, but it's really annoying."
                // ---
                "Every time I start my computer, I get this message that says\
                  that updates are ready to install. What does it mean?"
                "It means that Microsoft has found a problem that may allow a computer virus\
                  to get into your machine, and it's asking for your permission to fix the problem.\
                  You should click on it so the problem can be fixed."
                "Oh, that's what it is? I thought it was a virus, so I just kept clicking No."
                // ---
                "When I start the computer I get this big dialog that talks about Automatic Updates.\
                  I've just been hitting Cancel. How do I make it stop popping up?"
                "Did you read what the dialog said?"
                "No. I just want it to go away."
                // ---
                "Sometimes I get the message saying that my program has crashed and\
                  would I like to send an error report to Microsoft. Should I do it?"
                "Yes, we study these error reports so we can see how we can fix\
                  the problem that caused the crash."
                "Oh, I've just been hitting Cancel because that's what I always do\
                  when I see an error message."
                "Did you read the error message?
                "Why should I? It's just an error message.\
                  All it's going to say is 'Operation could not be performed because\
                   blah blah blah blah blah.'"
                // ---
                Chromium has been asking me for authentication for the past 3 years and counting;
                 however, pressing escape 3 times proves to be much more convenient.
            }
            >the one typical legit use is "There are unsaved changes, are you sure you want to quit?";
              because we seriously do want the user to pay attention,
              the message will be understandable for everyone
              and we dont really have any other means to communicate with the user as the application
              is probably about to be shut down or atleast the workspace is being closed;
              however, not placing a "Do not ask me again." button on it is a Serbian tier war crime
              {damn you Wireshark, let me quit!}


    Minimap: //(0x00000288)➞
        >a smaller and compressed display of some other navigatable are
        >most used in gamedev
        >can be used in any application with a large traversable area
        { CS 1.6 (map) minimap; }
        Satelitemap:
            -special type of minimap which:
                >displays an outline of the viewport
                >can be directly interacted with for navigation
            { VSCode (code outline) minimap; Ghidra (grap view) minimap; }


    Layout_engines: //(0x00000289)➞
        >a library or framework providing a way for the developer to manage layouts
        Absolute:
            { ncurses; X11 windows; html absolute }
            >defined with absolute coordinates
            >dynamic (size) changes are the explicit responsibility of the programmer
        Pack:
            { tcl/tk pack; html box&inline }
            >elements follow each other
            >where one element ends, the next will start
            >horizontal, vertical and/or directional
        Grid:
            >a table
        Elastic:
            >a ĐĐspringĐĐ is an elastic layout construction that is blank
              and takes up as much space as possible;
              it is used to squize other elements
              { Qt }
            >an ĐĐanchorĐĐ is an elastic layout construct that is blank
              and takes up as little space as possible while binded to other elements
              { Android }
            >placing the same elastic layout constructs on opposite sides of
              an element creates equilibrium
            {
                // Placing an element to the bottom
                /* Spring  */             /* Anchor  */
                ┌───────────┐             ┌───────────┐
                │     A     │             │           │
                │     |     │- pushing    │           │
                │     |     │             │           │
                │     V     │             │           │
                │┌─────────┐│             │┌─────────┐│
                ││         ││             ││         ││
                ││         ││             ││         ││
                │└─────────┘│             │└────X────┘│- pulling
                └───────────┘             └─────X─────┘
                // Placing an element to the vertical center
                /* Spring  */             /* Anchor  */
                ┌───────────┐             ┌─────X─────┐
                │     A     │             │     |     │
                │     |     │- pushing    │     |     │- pulling
                │     V     │             │     |     │
                │┌─────────┐│             │┌────X────┐│
                ││         ││             ││         ││
                ││         ││             ││         ││
                │└─────────┘│             │└────X────┘│
                │     A     │             │     |     │
                │     |     │- pushing    │     |     │- pulling
                │     V     │             │     |     │
                └───────────┘             └─────X─────┘
            }
            

#define html: //(0x0000028a)➞\
I-----------------------------------------------------------\
I-----------------------------------------------------------\
I-----------------------------------------------------------\
I         /$$   /$$ /$$$$$$$$ /$$      /$$ /$$              \
I        | $$  | $$|__  $$__/| $$$    /$$$| $$              \
I        | $$  | $$   | $$   | $$$$  /$$$$| $$              \
I        | $$$$$$$$   | $$   | $$ $$/$$ $$| $$              \
I        | $$__  $$   | $$   | $$  $$$| $$| $$              \
I        | $$  | $$   | $$   | $$\  $ | $$| $$              \
I        | $$  | $$   | $$   | $$ \/  | $$| $$$$$$$$        \
I        |__/  |__/   |__/   |__/     |__/|________/        \
I-----------------------------------------------------------\
I-----------------------------------------------------------\
I-----------------------------------------------------------I
	>TODO: RUN AS FAR AS YOURE ABLE TO

	>"HyperText Markup Language"
	>mark up language
	>a program that can display rendered html documents is a browser
    >html was originally used to make text documents slightly more readable and
      to have interactive documents; now we are forever stuck with it
      (or rather its frankeinstien-raped monster arch)
      as the markup of the web; God help us all!
			
	Dunno:
		Files:
			-can be nested in html
				<style>
					[css]
				</style>
			.css	: css file which will be included by a hypertext document
				({ <link rel="stylesheet" href="css.css"/> })
		-text
			Attributes:
				@begin=html@
					text-align: left || right || center || justify;
				@end=html@}
				#<\html>
				text-align	: 
					center		: center horizontally
					justify		: stretch text make all full lines have an equal width
					left
					right
			-word-wrap
Purple(			>controls how to break up words
				normal		: see ABOVE
				anywhere	: )
		Attributes:
			class="<string>"				: adds <string> class
			id="<string>"					: adds <string> id; every id should be unique; used for xpath-ing
			style="[css]"					: applies css to *this tag (and inheriting downwords)

	
	DOCTYPE: //(0x0000028b)➞
		<!DOCTYPE html>
		>not an HTML tag
		>metadata on the dociments type
			{@begin=html@
				<!DOCTYPE html>
					<html>
						<head>
							<!-- ... -->
						</head>
						<body>
							<!-- ... -->
						</body>
					</html>
			@end=html@}

	COMMENTS: //(0x0000028c)➞
 		<!-- [comment] -->		: multiline html comment; applies only in a html ĐcontextĐ
        "\
        According  to  specifications,  HTML  comments are expressed as SGML declarations.   \
        Declaration is special markup that begins  with  <!  and  ends  with  >,  such  as   \
        <!DOCTYPE  ...>,  that may contain comments between a pair of -- delimiters.  HTML   \
        comments are \"empty declarations\", SGML declarations without any non-comment text. \
        Therefore, <!--foo--> is a valid  comment,  and  so  is  <!--one--  --two-->,  but   \
        <!--1--2--> is not.                                                                  \
                                                                                             \
        On  the  other  hand,  most HTML writers don’t perceive comments as anything other   \
        than text delimited with <!-- and -->, which is not quite the same.  For  example,   \
        something  like  <!------------> works as a valid comment as long as the number of   \
        dashes is a multiple of four (!).  If not, the comment technically lasts until the   \
        next --, which may be at the other end of the document.   Because  of  this,  many   \
        popular browsers completely ignore the specification and implement what users have   \
        come to expect: comments delimited with <!-- and -->.                                \
        "                                                            - man wget

	CHARS: //(0x0000028d)➞
		>chars which only exist in the context of html
		TLDR:
			&nbsp;		: nonbreaking space ("I&nbsp;am" will always go to the same line)
			&ensp;		: ?!
			&emsp;		: tab
		+------------+------------+-------------+-----------------------------------+
		| Character  |  Number    |    Name     |            Description            |
		+------------+------------+-------------+-----------------------------------+
		| "          | &#34;      | &quot;      | quotation mark                    |
		| '          | &#39;      | &apos;      | apostrophe                        |
		| &          | &#38;      | &amp;       | ampersand                         |
		| <          | &#60;      | &lt;        | less-than                         |
		| >          | &#62;      | &gt;        | greater-th                        |
		| Œ          | &#338;     | &OElig;     | capital ligature OE               |
		| œ          | &#339;     | &oelig;     | small ligature oe                 |
		| Š          | &#352;     | &Scaron;    | capital S with caron              |
		| š          | &#353;     | &scaron;    | small S with caron                |
		| Ÿ          | &#376;     | &Yuml;      | capital Y with diaeres            |
		| ƒ          | &#402;     | &fnof;      | f with hook                       |
		| ˆ          | &#710;     | &circ;      | modifier letter circumflex accent |
		| ˜          | &#732;     | &tilde;     | small tilde                       |
		| N/A        | &#8194;    | &ensp;      | en space                          |
		| N/A        | &#8195;    | &emsp;      | em space                          |
		| N/A        | &#8201;    | &thinsp;    | thin space                        |
		| N/A        | &#8204;    | &zwnj;      | zero width non-joiner             |
		| N/A        | &#8205;    | &zwj;       | zero width joiner                 |
		| N/A        | &#8206;    | &lrm;       | left-to-right mark                |
		| N/A        | &#8207;    | &rlm;       | right-to-left mark                |
		| –          | &#8211;    | &ndash;     | en dash                           |
		| —          | &#8212;    | &mdash;     | em dash                           |
		| ‘          | &#8216;    | &lsquo;     | left single quotation mark        |
		| ’          | &#8217;    | &rsquo;     | right single quotation mark       |
		| ‚          | &#8218;    | &sbquo;     | single low-9 quotation mark       |
		| “          | &#8220;    | &ldquo;     | left double quotation mark        |
		| ”          | &#8221;    | &rdquo;     | right double quotation mark       |
		| „          | &#8222;    | &bdquo;     | double low-9 quotation mark       |
		| †          | &#8224;    | &dagger;    | dagger                            |
		| ‡          | &#8225;    | &Dagger;    | double dagger                     |
		| •          | &#8226;    | &bull;      | bullet                            |
		| …          | &#8230;    | &hellip;    | horizontal ellipsis               |
		| ‰          | &#8240;    | &permil;    | per mille                         |
		| ′          | &#8242;    | &prime;     | minutes                           |
		| ″          | &#8243;    | &Prime;     | seconds                           |
		| ‹          | &#8249;    | &lsaquo;    | single left angle quotation       |
		| ›          | &#8250;    | &rsaquo;    | single right angle quotation      |
		| ‾          | &#8254;    | &oline;     | overline                          |
		| €          | &#8364;    | &euro;      | euro                              |
		| ™          | &#8482;    | &trade;     | trademark                         |
		| ←          | &#8592;    | &larr;      | left arrow                        |
		| ↑          | &#8593;    | &uarr;      | up arrow                          |
		| →          | &#8594;    | &rarr;      | right arrow                       |
		| ↓          | &#8595;    | &darr;      | down arrow                        |
		| ↔          | &#8596;    | &harr;      | left right arrow                  |
		| ↵          | &#8629;    | &crarr;     | carriage return arrow             |
		| ⌈          | &#8968;    | &lceil;     | left ceiling                      |
		| ⌉          | &#8969;    | &rceil;     | right ceiling                     |
		| ⌊          | &#8970;    | &lfloor;    | left floor                        |
		| ⌋          | &#8971;    | &rfloor;    | right floor                       |
		| ◊          | &#9674;    | &loz;       | lozenge                           |
		| ♠          | &#9824;    | &spades;    | spade                             |
		| ♣          | &#9827;    | &clubs;     | club                              |
		| ♥          | &#9829;    | &hearts;    | heart                             |
		| ♦          | &#9830;    | &diams;     | diamondan                         |
		| ∀          | &#8704;    | &forall;    | for all                           |
		| ∂          | &#8706;    | &part;      | part                              |
		| ∃          | &#8707;    | &exist;     | exists                            |
		| ∅          | &#8709;    | &empty;     | empty                             |
		| ∇          | &#8711;    | &nabla;     | nabla                             |
		| ∈          | &#8712;    | &isin;      | isin                              |
		| ∉          | &#8713;    | &notin;     | notin                             |
		| ∋          | &#8715;    | &ni;        | ni                                |
		| ∏          | &#8719;    | &prod;      | prod                              |
		| ∑          | &#8721;    | &sum;       | sum                               |
		| −          | &#8722;    | &minus;     | minus                             |
		| ∗          | &#8727;    | &lowast;    | lowast                            |
		| √          | &#8730;    | &radic;     | square root                       |
		| ∝          | &#8733;    | &prop;      | proportional to                   |
		| ∞          | &#8734;    | &infin;     | infinity                          |
		| ∠          | &#8736;    | &ang;       | angle                             |
		| ∧          | &#8743;    | &and;       | and                               |
		| ∨          | &#8744;    | &or;        | or                                |
		| ∩          | &#8745;    | &cap;       | cap                               |
		| ∪          | &#8746;    | &cup;       | cup                               |
		| ∫          | &#8747;    | &int;       | integral                          |
		| ∴          | &#8756;    | &there4;    | therefore                         |
		| ∼          | &#8764;    | &sim;       | similar to                        |
		| ≅          | &#8773;    | &cong;      | congruent to                      |
		| ≈          | &#8776;    | &asymp;     | almost equal                      |
		| ≠          | &#8800;    | &ne;        | not equal                         |
		| ≡          | &#8801;    | &equiv;     | equivalent                        |
		| ≤          | &#8804;    | &le;        | less or equal                     |
		| ≥          | &#8805;    | &ge;        | greater or equal                  |
		| ⊂          | &#8834;    | &sub;       | subset of                         |
		| ⊃          | &#8835;    | &sup;       | superset of                       |
		| ⊄          | &#8836;    | &nsub;      | not subset of                     |
		| ⊆          | &#8838;    | &sube;      | subset or equal                   |
		| ⊇          | &#8839;    | &supe;      | superset or equal                 |
		| ⊕          | &#8853;    | &oplus;     | circled plus                      |
		| ⊗          | &#8855;    | &otimes;    | circled times                     |
		| ⊥          | &#8869;    | &perp;      | perpendicular                     |
		| ⋅          | &#8901;    | &sdot;      | dot operator                      |
		| Α          | &#913;     | &Alpha;     | Alpha                             |
		| Β          | &#914;     | &Beta;      | Beta                              |
		| Γ          | &#915;     | &Gamma;     | Gamma                             |
		| Δ          | &#916;     | &Delta;     | Delta                             |
		| Ε          | &#917;     | &Epsilon;   | Epsilon                           |
		| Ζ          | &#918;     | &Zeta;      | Zeta                              |
		| Η          | &#919;     | &Eta;       | Eta                               |
		| Θ          | &#920;     | &Theta;     | Theta                             |
		| Ι          | &#921;     | &Iota;      | Iota                              |
		| Κ          | &#922;     | &Kappa;     | Kappa                             |
		| Λ          | &#923;     | &Lambda;    | Lambda                            |
		| Μ          | &#924;     | &Mu;        | Mu                                |
		| Ν          | &#925;     | &Nu;        | Nu                                |
		| Ξ          | &#926;     | &Xi;        | Xi                                |
		| Ο          | &#927;     | &Omicron;   | Omicron                           |
		| Π          | &#928;     | &Pi;        | Pi                                |
		| Ρ          | &#929;     | &Rho;       | Rho                               |
		| N/A        | undefined  | N/A         | Sigmaf                            |
		| Σ          | &#931;     | &Sigma;     | Sigma                             |
		| Τ          | &#932;     | &Tau;       | Tau                               |
		| Υ          | &#933;     | &Upsilon;   | Upsilon                           |
		| Φ          | &#934;     | &Phi;       | Phi                               |
		| Χ          | &#935;     | &Chi;       | Chi                               |
		| Ψ          | &#936;     | &Psi;       | Psi                               |
		| Ω          | &#937;     | &Omega;     | Omega                             |
		| α          | &#945;     | &alpha;     | alpha                             |
		| β          | &#946;     | &beta;      | beta                              |
		| γ          | &#947;     | &gamma;     | gamma                             |
		| δ          | &#948;     | &delta;     | delta                             |
		| ε          | &#949;     | &epsilon;   | epsilon                           |
		| ζ          | &#950;     | &zeta;      | zeta                              |
		| η          | &#951;     | &eta;       | eta                               |
		| θ          | &#952;     | &theta;     | theta                             |
		| ι          | &#953;     | &iota;      | iota                              |
		| κ          | &#954;     | &kappa;     | kappa                             |
		| λ          | &#955;     | &lambda;    | lambda                            |
		| μ          | &#956;     | &mu;        | mu                                |
		| ν          | &#957;     | &nu;        | nu                                |
		| ξ          | &#958;     | &xi;        | xi                                |
		| ο          | &#959;     | &omicron;   | omicron                           |
		| π          | &#960;     | &pi;        | pi                                |
		| ρ          | &#961;     | &rho;       | rho                               |
		| ς          | &#962;     | &sigmaf;    | sigmaf                            |
		| σ          | &#963;     | &sigma;     | sigma                             |
		| τ          | &#964;     | &tau;       | tau                               |
		| υ          | &#965;     | &upsilon;   | upsilon                           |
		| φ          | &#966;     | &phi;       | phi                               |
		| χ          | &#967;     | &chi;       | chi                               |
		| ψ          | &#968;     | &psi;       | psi                               |
		| ω          | &#969;     | &omega;     | omega                             |
		| ϑ          | &#977;     | &thetasym;  | theta symbol                      |
		| ϒ          | &#978;     | &upsih;     | upsilon symbol                    |
		| ϖ          | &#982;     | &piv;       | pi symbol                         |
		| À          | &#192;     | &Agrave;    | capital a, grave accent           |
		| Á          | &#193;     | &Aacute;    | capital a, acute accent           |
		| Â          | &#194;     | &Acirc;     | capital a, circumflex accent      |
		| Ã          | &#195;     | &Atilde;    | capital a, tilde                  |
		| Ä          | &#196;     | &Auml;      | capital a, umlaut mark            |
		| Å          | &#197;     | &Aring;     | capital a, ring                   |
		| Æ          | &#198;     | &AElig;     | capital ae                        |
		| Ç          | &#199;     | &Ccedil;    | capital c, cedilla                |
		| È          | &#200;     | &Egrave;    | capital e, grave accent           |
		| É          | &#201;     | &Eacute;    | capital e, acute accent           |
		| Ê          | &#202;     | &Ecirc;     | capital e, circumflex accent      |
		| Ë          | &#203;     | &Euml;      | capital e, umlaut mark            |
		| Ì          | &#204;     | &Igrave;    | capital i, grave accent           |
		| Í          | &#205;     | &Iacute;    | capital i, acute accent           |
		| Î          | &#206;     | &Icirc;     | capital i, circumflex accent      |
		| Ï          | &#207;     | &Iuml;      | capital i, umlaut mark            |
		| Ð          | &#208;     | &ETH;       | capital eth, Icelandic            |
		| Ñ          | &#209;     | &Ntilde;    | capital n, tilde                  |
		| Ò          | &#210;     | &Ograve;    | capital o, grave accent           |
		| Ó          | &#211;     | &Oacute;    | capital o, acute accent           |
		| Ô          | &#212;     | &Ocirc;     | capital o, circumflex accent      |
		| Õ          | &#213;     | &Otilde;    | capital o, tilde                  |
		| Ö          | &#214;     | &Ouml;      | capital o, umlaut mark            |
		| Ø          | &#216;     | &Oslash;    | capital o, slash                  |
		| Ù          | &#217;     | &Ugrave;    | capital u, grave accent           |
		| Ú          | &#218;     | &Uacute;    | capital u, acute accent           |
		| Û          | &#219;     | &Ucirc;     | capital u, circumflex accent      |
		| Ü          | &#220;     | &Uuml;      | capital u, umlaut mark            |
		| Ý          | &#221;     | &Yacute;    | capital y, acute accent           |
		| Þ          | &#222;     | &THORN;     | capital THORN, Icelandic          |
		| ß          | &#223;     | &szlig;     | small sharp s, German             |
		| à          | &#224;     | &agrave;    | small a, grave accent             |
		| á          | &#225;     | &aacute;    | small a, acute accent             |
		| â          | &#226;     | &acirc;     | small a, circumflex accent        |
		| ã          | &#227;     | &atilde;    | small a, tilde                    |
		| ä          | &#228;     | &auml;      | small a, umlaut mark              |
		| å          | &#229;     | &aring;     | small a, ring                     |
		| æ          | &#230;     | &aelig;     | small ae                          |
		| ç          | &#231;     | &ccedil;    | small c, cedilla                  |
		| è          | &#232;     | &egrave;    | small e, grave accent             |
		| é          | &#233;     | &eacute;    | small e, acute accent             |
		| ê          | &#234;     | &ecirc;     | small e, circumflex accent        |
		| ë          | &#235;     | &euml;      | small e, umlaut mark              |
		| ì          | &#236;     | &igrave;    | small i, grave accent             |
		| í          | &#237;     | &iacute;    | small i, acute accent             |
		| î          | &#238;     | &icirc;     | small i, circumflex accent        |
		| ï          | &#239;     | &iuml;      | small i, umlaut mark              |
		| ð          | &#240;     | &eth;       | small eth, Icelandic              |
		| ñ          | &#241;     | &ntilde;    | small n, tilde                    |
		| ò          | &#242;     | &ograve;    | small o, grave accent             |
		| ó          | &#243;     | &oacute;    | small o, acute accent             |
		| ô          | &#244;     | &ocirc;     | small o, circumflex accent        |
		| õ          | &#245;     | &otilde;    | small o, tilde                    |
		| ö          | &#246;     | &ouml;      | small o, umlaut mark              |
		| ø          | &#248;     | &oslash;    | small o, slash                    |
		| ù          | &#249;     | &ugrave;    | small u, grave accent             |
		| ú          | &#250;     | &uacute;    | small u, acute accent             |
		| û          | &#251;     | &ucirc;     | small u, circumflex accent        |
		| ü          | &#252;     | &uuml;      | small u, umlaut mark              |
		| ý          | &#253;     | &yacute;    | small y, acute accent             |
		| þ          | &#254;     | &thorn;     | small thorn, Icelandic            |
		| ÿ          | &#255;     | &yuml;      | small y, umlaut mark              |
		| N/A        | &#160;     | &nbsp;      | non-breaking space                |
		| ¡          | &#161;     | &iexcl;     | inverted exclamation mark         |
		| ¢          | &#162;     | &cent;      | cent                              |
		| £          | &#163;     | &pound;     | pound                             |
		| ¤          | &#164;     | &curren;    | currency                          |
		| ¥          | &#165;     | &yen;       | yen                               |
		| ¦          | &#166;     | &brvbar;    | broken vertical bar               |
		| §          | &#167;     | &sect;      | section                           |
		| ¨          | &#168;     | &uml;       | spacing diaeresis                 |
		| ©          | &#169;     | &copy;      | copyright                         |
		| ª          | &#170;     | &ordf;      | feminine ordinal indicator        |
		| «          | &#171;     | &laquo;     | angle quotation mark (left)       |
		| ¬          | &#172;     | &not;       | negation                          |
		| N/A        | &#173;     | &shy;       | soft hyphen                       |
		| ®          | &#174;     | &reg;       | registered trademark              |
		| ¯          | &#175;     | &macr;      | spacing macron                    |
		| °          | &#176;     | &deg;       | degree                            |
		| ±          | &#177;     | &plusmn;    | plus-or-minus                     |
		| ²          | &#178;     | &sup2;      | superscript 2                     |
		| ³          | &#179;     | &sup3;      | superscript 3                     |
		| ´          | &#180;     | &acute;     | spacing acute                     |
		| µ          | &#181;     | &micro;     | micro                             |
		| ¶          | &#182;     | &para;      | paragraph                         |
		| ·          | &#183;     | &middot;    | middle dot                        |
		| ¸          | &#184;     | &cedil;     | spacing cedilla                   |
		| ¹          | &#185;     | &sup1;      | superscript 1                     |
		| º          | &#186;     | &ordm;      | masculine ordinal indicator       |
		| »          | &#187;     | &raquo;     | angle quotation mark (right)      |
		| ¼          | &#188;     | &frac14;    | fraction 1/4                      |
		| ½          | &#189;     | &frac12;    | fraction 1/2                      |
		| ¾          | &#190;     | &frac34;    | fraction 3/4                      |
		| ¿          | &#191;     | &iquest;    | inverted question mark            |
		| ×          | &#215;     | &times;     | multiplication                    |
		| ÷          | &#247;     | &divide;    | division                          |
		+------------+------------+-------------+-----------------------------------+

	ELEMENTS: //(0x0000028e)➞
		<[type]( [options])>([...]</[type]>)
		>the smallest building block of an html document
		>holds information which must be interpreted
		>either ĐunpairedĐ or ĐpairedĐ
		>a ĐĐtagĐĐ is a part of an element which hold meta information;
		  it starts with a '<' and ends with a '>'
		>a ĐĐopening tagĐĐ is a tag which has no '\\' right after its '<';
		  if an element is ĐpairedĐ, the opening tag marks its beginging
		>a ĐĐclosing tagĐĐ is a tag which has a '\\' right after its '<'
		  if an element is ĐpairedĐ, the closing tag marks its end
		>ĐĐunpairedĐĐ elements consist of either and Đopening tagĐ or a Đclosing tagĐ
		>ĐĐpairedĐĐ elements consist of an Đopening tagĐ and a Đclosing tagĐ and optionally
		  (plain(, but possibly formated)) text between the two
		>read "<x>" as "x element"
		{ // these are not valid elements, as their type is valid
		    <example>       <hello_world> My best greetings! </hello_world>
		       A                  A              A                  A
		       |                   \-------------|------------------|-------- An opening tag          \
		    An unpaired element.                  \-----------------|-------- Text inside the element  } A paired element.
		    This one consisnts of                                    \------- A closing tag           /
		    an Đopening tagĐ
		}

	TEXT: //(0x0000028f)➞
		>text is un-break-able by default, ie. it will never be split;
		  even if that means that it overflows its container
		  or the page must be expanded horizontally

	ATTRIBUTE: //(0x00000290)➞
		<[type] [attribute]=[value]( )*>
		>lives inside an Đopening tagĐ
		>has a value
		>contains further interpretable (or scrappable) information
		>space seperated from the tag type and other attributes
		{ <example mytag="value"> }

	LAYOUT: //(0x00000291)➞
		Metadata: //(0x00000292)➞
			>doesnt have a hitbox
			>not physically represented
			>has no affect on the layout
			>used for seemless actions {including}
			{	@begin=html@
					<link rel="stylesheet" href="css.css">
				@end=html@
				┌─────Page─────┐
	  there --> │              │	// only technically
				│              │
				│              │
				│              │
				│              │
				└──────────────┘
			}
			-elements:
		Block:				//(0x000001e2)➞
			>fills the width of its parent
			>as high as its contents
			-the screen can be visualized as a ĐĐstackĐĐ of blocks, optionally of different height:
				Red(      ##### )
				Blue(     ##### )
				Blue(     ##### )
				Yellow(   ##### )
				Yellow(   ##### )
				Yellow(   ##### )
				Green(    ##### )
				Green(    ##### )
			>forces itself to the begining of the line
			>forces elements after it to a new line
			{	@begin=html@
					<p syle="background:red">
						Text
					</p>
					<p syle="background:red">
						Text
					</p>
				@end=html@
				// the text would not be red, just the background
				┌─────Page─────┐
				│Red(Text     )│
				│Red(Text     )│
				│              │
				│              │
				│              │
				└──────────────┘
			}
		Inline: //(0x00000293)➞
			>as high as its contents
			>as wide as its contents
			>CANNOT contain a Đblock elementĐ
			>if an element which is inline by default, has its display changed with css to "block"
			  it shall still NOT contain Đblock elementĐs
			>their width and height CANNOT be set
		   (>their top and bottom paddings are not respected; see AT "/CSS/Box modell/Padding")
			{	@begin=html@
					<a syle="background:blue">
						i
					</a>
					<a syle="background:Blue">
						i
					</a>
				@end=html@
				┌─────Page─────┐
				│Blue(i)Blue(i)│
				│              │
				│              │
				│              │
				│              │
				└──────────────┘
			}
		-Block with inline:
			{	@begin=html@
					<a syle="background:blue">
						i
					</a>
					<p syle="background:red">
						Text
					</p>
					<a syle="background:Blue">
						i
					</a>
				@end=html@
				┌─────Page─────┐
				│Blue(i)       │
				│Red(Text     )│
				│Blue(i)       │
				│              │
				│              │
				└──────────────┘
			}



	PARTS: //(0x00000294)➞
		HTML: //(0x00000295)➞
			<html>[...]</html>
			>the element highest up the hierarchy
			>all elements (must) exist inside of it
			>"root element"
		Head: //(0x00000296)➞
			<head>[...]</head>
			>a container for metadata (data about data)
			>metadata typically defines the documents title, character set, style, scripts, etc.
			>its placed inside the <html> tag next to (preferably above) the <body> tag
			Attributes:
				dir="[ltr||rtl]"		: specifes which way the text should flow	
				lang="[country code]"	: specifes language of the page	
		Body: //(0x00000297)➞
			<body>[...]</body>
			>has a margin by default

	TYPES: //(0x00000298)➞
		Legend: //(0x00000299)➞
			[pairedness]; [display]; "[meaing]"
			¤[pairedness]
			>"pair" in the description signals that *this is ĐpairedĐ
				<exaple> 	: this is an exaple; pair
			>if *this is ĐunpairedĐ, the field is left empty
	Purple(	>"inline" signals that the tag will insert a new line in the document;
			   considering that offically and by common sense inline should signal the
			   oppisite case, this convention is indeed deeply counter intuitive, however
			   marking the tags which add a '\n' is better logistically as theres less of those)
		<html>		: pair; block
		<head>		: pair; metadata
		<body>		: pair; block
		Head: //(0x0000029a)➞
			>elemets which are only valid inside the <head>
			<title> <string> </title>											: sets title of the tab to <string>
			<style> [tag||pseudo class] {[css option]:[value];} </style>		: add attributes to tags in CSS format
			<meta [options]>													: adds meta information
				charset="[encoding]"							: sets character set to [encoding]
		Body: //(0x0000029b)➞
			>elemets which are only valid inside the <body>
			<p>						: pair; block; paragraph
			<div>					: pair; block; division or a section; useful for adding custom stuff
			<a> 					: pair; inline; achor; intended for hyperlinks
				<a href="[url||path]"> [] </a>		: adds hyperlink; blue and underlined by default
			<span>					: pair; inline; intended for usage when no other tag is appropriate
			Text_style: //(0x0000029c)➞
				<b> 					: pair; metadata; "bold"
				<u>						: pair; metadata; "underlined"
				<i> 					: pair; metadata; "italics"
				<strong>				: pair; metadata; "strong"; like <b>
				<em>					: pair; metadata; "emphesised (like <i>)"
				<strike> 				: pair; metadata; "strikethrough"
				<sup> 					: pair; metadata; "superscript"
				<tt> 					: pair; metadata; monospaced font
				<h[int 1-6]> 			: pair; metadata; header sizes 1-6; the larger the int the smaller the font
				<small>					: pair; metadata; one font size smaller than the rest of the text surrounding it
				<big>					: pair; metadata; one font size larger than the rest of the text surrounding it
				<font>					: allows font editing with attributes
					¤attributes
						size
						color
			Text_placement: //(0x0000029d)➞
				</br>					: new line(=='\n'); inline																						//why was it written as <b> when i even remembered it was </br>
				<left>					: aligns text to left; pair
				<center>				: centers text; pair
				<right>					: aligns text to right; pair
				<hr>					: horizontal line in new line; inline
			<pre>					: preserve original formating (enters, etc.); practically a raw string; pair
			lists:
				<ul>		: unordered list; all items are marked the same way; pair
				<ol>		: ordered list; all items are marked with an id; pair
				<li>		: list item; used inside a list tag { <ul>; <ol>}; pair; inline
				attributes:
					type	: type of ordering symbols
					i		: roman numbers
			Media: //(0x0000029e)➞
				<img src="[url||path]" alt="" width="<int>" height="<int>">		: inserts image
				<video> src="[url||path]" type="video/mp4" </video>				: inserts video (full size)
				<style></style>				: adds inline css
				<?php [code] ?>				: adds inline php code; its server side
				<script> [code] </script>	: adds inline javascript code; its client side
			Graphics:
				<svg>[SVG]</svg>
				<canvas></canvas>
			Forms: //(0x0000029f)➞
				<form> [...] </form>
				¤atrributes
					accept-charset
					action
					autocomplete
					enctype
					method
					post
					name
					novalidate
					rel
					target		
				¤sub elements				
					<input>
					<textarea>
					<button>		: clickable button
						¤atrributes
							"reset"		: empties out the form
							"submit"	: sends <form>
					<select>
					<option>
					<optgroup>
					<fieldset>
					<label>
					<output>
		List_by_layout: //(0x000002a0)➞; ?!; the lists were written by retards, a bunch from inline would belong under metadata
			¤metadata
				<base>
				<command>
				<link>
				<meta>
				<noscript>
				<script>
				<style>
				<title>
			¤block:
				<address>
				<article>
				<aside>
				<blockquote>
				<details>
				<dialog>
				<dd>
				<div>
				<dt>
				<fieldset>
				<figcaption>
				<figure>
				<footer>
				<form>
				<h1>, <h2>, <h3>, <h4>, <h5>, <h6>
				<header>
				<hgroup>
				<hr>
				<li>
				<main>
				<nav>
				<ol>
				<p>
				<pre>
				<section>
				<table>
				<ul>
			¤inline
				<a>
				<abbr>
				<acronym>
				<audio>
				<b>
				<bdi>
				<bdo>
				<big>
				<br>
				<button>
				<canvas>
				<cite>
				<code>
				<data>
				<datalist>
				<del>
				<dfn>
				<em>
				<embed>
				<i>
				<iframe>
				<img>
				<input>
				<ins>
				<kbd>
				<label>
				<map>
				<mark>
				<meter>
				<noscript>
				<object>
				<output>
				<picture>
				<progress>
				<q>
				<ruby>
				<s>
				<samp>
				<script>
				<select>
				<slot>
				<small>
				<span>
				<strong>
				<sub>
				<sup>
				<svg>
				<template>
				<textarea>
				<time>
				<u>
				<tt>
				<var>
				<video>
				<wbr>

#define css: //(0x000002a1)➞\
I----------------------------------------------\
I----------------------------------------------\
I----------------------------------------------\
I          /$$$$$$   /$$$$$$   /$$$$$$         \
I         /$$__  $$ /$$__  $$ /$$__  $$        \
I        | $$  \__/| $$  \__/| $$  \__/        \
I        | $$      |  $$$$$$ |  $$$$$$         \
I        | $$       \____  $$ \____  $$        \
I        | $$    $$ /$$  \ $$ /$$  \ $$        \
I        |  $$$$$$/|  $$$$$$/|  $$$$$$/        \
I         \______/  \______/  \______/         \
I----------------------------------------------\
I----------------------------------------------\
I----------------------------------------------I
	>"Cascading Style Sheets"
	>used for customizing markup languages
	>most associated with html
	>NOTE: please, PLEASE let go of perfection; 20% of the things you do will not look exactly like you wanted it to be;
	        just ignore it, no body will have to ever know; its not worth the effort to fix


Red(	Dunno: )	//?!
			content: <string>		: works only with ::before and after


	COMMENTS: //(0x000002a2)➞
 		/* [...] */				: multiline html comment; applies only in a html ĐcontextĐ



	RULES: //(0x000002a3)➞
		>all css "code" is rule based
		[selector](, [...]){
			[option]: [value]( [mode]);
			[...]
		}
		¤[selector]			//(0x000001f4)➞
			([class-1])([operator][class-n]*)
			*	: selector for all elements
			¤[class]			//(0x000001f5)➞
				[class-base](\[[attribute]\])
				¤[class-base]
					TLDR:
						 x	: targets <x>
						.x	: targets class="x"
						#x	: targets id="x"
					-true class		//(0x000001f6)➞
						[class]
						>plain name of a markup tag { div, a }
						{    p {
								font-size: 18;
							 }
						}
					-pseudo class	//(0x000001f7)➞
						.[class]
						>starts with a dot
						>specific to elements with [class] as a class assigned to them
						{    .red_block {
								background: red;
							 }
							 // applies to: 
							 <p class="red_block">
								Im a red block!
							 </p>
						}
						¤list:
					-id				//(0x000001f8)➞
						#[class]
						>starts with a hashtag
						>specific to an element with [class] id as its ĐattributeĐ
						{    #blue_block {
								background: blue;
							 }
							 // applies to: 
							 <p id="blue_block">
								Im the blue block!
							 </p>
						}
				¤[attribute]	//(0x000001f9)➞
					[attribute]([operator][value])
					[attribute]		: selects elements which have an [attribute] assigned
					¤[operator]
						>NOTE: ĐĐfiltesĐĐ here means Đfilters inĐ and not Đfilters outĐ;
								when talking about [value] always the same attribute is converned
						=	: filters elements which have [value] as their this->value
						*=	: filters elements which contain [value] as a substring of this->value
						~=	: filters elements which contain [value] as a word of this->value (ĐwordĐ being in a regex context)
						^	: filters elements which starts with [value] as a substring of this->value
						$	: filters elements which ends with [value] as a substring of this->value
				Pseudo: ?!
					:hover			: when hovered over
					:link			: link that has not been visited yet
					:visited		: a link that has been visited
					:active			: represents an element (such as a button or link) that is being activated by the user
			¤[pseudo_element]
				>each one is prefixed with double colons
				>single colons might be used, but dont
				>the inner text of pseudo elements cant be selected
				::before					: an inline element inserted before *this
				::after						: an inline element inserted before *this
				::backdrop 
				::cue
				::cue-region
				::first-letter				: great for creating initials
				::first-line
				::file-selector-button
				::grammar-error
				::marker
				::part()
				::placeholder
				::selection
				::slotted()
				::spelling-error
				::target-text
		¤[operator]
			none	: and operator; selects elements which are in both class-es; 
					   none here means an empty string { [class][class] }; { .myClass#myId }
			' '		: in operator; selects elements which are in [class-n] and are nested inside [class-1];
					   ' ' here means a single char of space { [class] [class] }; { .myDiv .myA }
			,		: or operator; selects elements which are in either of the class-es
			>		: parent operator; selects elements which are in [class-1] and are nested inside [class-n]
		¤[mode]
			!important	: all subsequent rules on an element are to be ignored, 
						   and the rule denoted by !important is to be applied. 
						   this rule overrides all previous styling rules.
						   the !important property increases its priority.	



	VALUES: //(0x000002a4)➞
		Size: //(0x000002a5)➞
			[double][measurement]	: specifies a size
			auto					: either all avaliable space (whichs calculation is element dependent) or 0px
			¤[measurement]
				px	: pixels
				%	: parent element percentage
				em	: a relative unit to the closest "font-size" property; default-s to 16
				rem	: root em; a relative unit to <html>s "font-size" property; default-s to 16
		Pos: //(0x000002a6)➞
			center
			left
			right
		Angle: //(0x000002a7)➞
			[double][measurement]	: specifies an angle
			>if [double] > 0, the rotation will be clockwise
			>if [double] < 0, the rotation will be counter clockwise
			¤[measurement]
				deg		: degrees
				rad		: radian
				grad	: gradian
				turn	: full turns ( 1turn == 360deg )
		Color: //(0x000002a8)➞
			[hex] || rgb() || [name]	: specifies a color
			¤[hex]
				#[hex_values]
			¤[name]
				>alias of a [hex]
			     |         name         |  value  |
			     | :------------------: | :-----: |
				 | AliceBlue			| #F0F8FF |
				 | AntiqueWhite			| #FAEBD7 |
				 | Aqua					| #00FFFF |
				 | Aquamarine			| #7FFFD4 |
				 | Azure				| #F0FFFF |
				 | Beige				| #F5F5DC |
				 | Bisque				| #FFE4C4 |
				 | Black				| #000000 |
				 | BlanchedAlmond		| #FFEBCD |
				 | Blue					| #0000FF |
				 | BlueViolet			| #8A2BE2 |
				 | Brown				| #A52A2A |
				 | BurlyWood			| #DEB887 |
				 | CadetBlue			| #5F9EA0 |
				 | Chartreuse			| #7FFF00 |
				 | Chocolate			| #D2691E |
				 | Coral				| #FF7F50 |
				 | CornflowerBlue		| #6495ED |
				 | Cornsilk				| #FFF8DC |
				 | Crimson				| #DC143C |
				 | Cyan					| #00FFFF |
				 | DarkBlue				| #00008B |
				 | DarkCyan				| #008B8B |
				 | DarkGoldenRod		| #B8860B |
				 | DarkGray				| #A9A9A9 |
				 | DarkGrey				| #A9A9A9 |
				 | DarkGreen			| #006400 |
				 | DarkKhaki			| #BDB76B |
				 | DarkMagenta			| #8B008B |
				 | DarkOliveGreen		| #556B2F |
				 | DarkOrange			| #FF8C00 |
				 | DarkOrchid			| #9932CC |
				 | DarkRed				| #8B0000 |
				 | DarkSalmon			| #E9967A |
				 | DarkSeaGreen			| #8FBC8F |
				 | DarkSlateBlue		| #483D8B |
				 | DarkSlateGray		| #2F4F4F |
				 | DarkSlateGrey		| #2F4F4F |
				 | DarkTurquoise		| #00CED1 |
				 | DarkViolet			| #9400D3 |
				 | DeepPink				| #FF1493 |
				 | DeepSkyBlue			| #00BFFF |
				 | DimGray				| #696969 |
				 | DimGrey				| #696969 |
				 | DodgerBlue			| #1E90FF |
				 | FireBrick			| #B22222 |
				 | FloralWhite			| #FFFAF0 |
				 | ForestGreen			| #228B22 |
				 | Fuchsia				| #FF00FF |
				 | Gainsboro			| #DCDCDC |
				 | GhostWhite			| #F8F8FF |
				 | Gold					| #FFD700 |
				 | GoldenRod			| #DAA520 |
				 | Gray					| #808080 |
				 | Grey					| #808080 |
				 | Green				| #008000 |
				 | GreenYellow			| #ADFF2F |
				 | HoneyDew				| #F0FFF0 |
				 | HotPink				| #FF69B4 |
				 | IndianRed			| #CD5C5C |
				 | Indigo				| #4B0082 |
				 | Ivory				| #FFFFF0 |
				 | Khaki				| #F0E68C |
				 | Lavender				| #E6E6FA |
				 | LavenderBlush		| #FFF0F5 |
				 | LawnGreen			| #7CFC00 |
				 | LemonChiffon			| #FFFACD |
				 | LightBlue			| #ADD8E6 |
				 | LightCoral			| #F08080 |
				 | LightCyan			| #E0FFFF |
				 | LightGoldenRodYellow	| #FAFAD2 |
				 | LightGray			| #D3D3D3 |
				 | LightGrey			| #D3D3D3 |
				 | LightGreen			| #90EE90 |
				 | LightPink			| #FFB6C1 |
				 | LightSalmon			| #FFA07A |
				 | LightSeaGreen		| #20B2AA |
				 | LightSkyBlue			| #87CEFA |
				 | LightSlateGray		| #778899 |
				 | LightSlateGrey		| #778899 |
				 | LightSteelBlue		| #B0C4DE |
				 | LightYellow			| #FFFFE0 |
				 | Lime					| #00FF00 |
				 | LimeGreen			| #32CD32 |
				 | Linen				| #FAF0E6 |
				 | Magenta				| #FF00FF |
				 | Maroon				| #800000 |
				 | MediumAquaMarine		| #66CDAA |
				 | MediumBlue			| #0000CD |
				 | MediumOrchid			| #BA55D3 |
				 | MediumPurple			| #9370DB |
				 | MediumSeaGreen		| #3CB371 |
				 | MediumSlateBlue		| #7B68EE |
				 | MediumSpringGreen	| #00FA9A |
				 | MediumTurquoise		| #48D1CC |
				 | MediumVioletRed		| #C71585 |
				 | MidnightBlue			| #191970 |
				 | MintCream			| #F5FFFA |
				 | MistyRose			| #FFE4E1 |
				 | Moccasin				| #FFE4B5 |
				 | NavajoWhite			| #FFDEAD |
				 | Navy					| #000080 |
				 | OldLace				| #FDF5E6 |
				 | Olive				| #808000 |
				 | OliveDrab			| #6B8E23 |
				 | Orange				| #FFA500 |
				 | OrangeRed			| #FF4500 |
				 | Orchid				| #DA70D6 |
				 | PaleGoldenRod		| #EEE8AA |
				 | PaleGreen			| #98FB98 |
				 | PaleTurquoise		| #AFEEEE |
				 | PaleVioletRed		| #DB7093 |
				 | PapayaWhip			| #FFEFD5 |
				 | PeachPuff			| #FFDAB9 |
				 | Peru					| #CD853F |
				 | Pink					| #FFC0CB |
				 | Plum					| #DDA0DD |
				 | PowderBlue			| #B0E0E6 |
				 | Purple				| #800080 |
				 | RebeccaPurple		| #663399 |
				 | Red					| #FF0000 |
				 | RosyBrown			| #BC8F8F |
				 | RoyalBlue			| #4169E1 |
				 | SaddleBrown			| #8B4513 |
				 | Salmon				| #FA8072 |
				 | SandyBrown			| #F4A460 |
				 | SeaGreen				| #2E8B57 |
				 | SeaShell				| #FFF5EE |
				 | Sienna				| #A0522D |
				 | Silver				| #C0C0C0 |
				 | SkyBlue				| #87CEEB |
				 | SlateBlue			| #6A5ACD |
				 | SlateGray			| #708090 |
				 | SlateGrey			| #708090 |
				 | Snow					| #FFFAFA |
				 | SpringGreen			| #00FF7F |
				 | SteelBlue			| #4682B4 |
				 | Tan					| #D2B48C |
				 | Teal					| #008080 |
				 | Thistle				| #D8BFD8 |
				 | Tomato				| #FF6347 |
				 | Turquoise			| #40E0D0 |
				 | Violet				| #EE82EE |
				 | Wheat				| #F5DEB3 |
				 | White				| #FFFFFF |
				 | WhiteSmoke			| #F5F5F5 |
				 | Yellow				| #FFFF00 |
				 | YellowGreen			| #9ACD32 |
		List_Style_Type: //(0x000002a9)➞
			symbols()					: defines an anonymous style of the list
			<string>					: the specified string will be used as the item's marker
			none						: no item marker is shown
			disc						: a filled circle (default value)
			circle						: a hollow circle
			square						: a filled square
			decimal						: decimal numbers, beginning with 1
			cjk-decimal					: han decimal numbers
			decimal-leading-zero		: decimal numbers, padded by initial zeros
			lower-roman					: lowercase roman numerals
			upper-roman					: uppercase roman numerals
			lower-greek					: lowercase classical Greek
			lower-alpha and				: lowercase ASCII letters
				lower-latin
			upper-alpha and 			: uppercase ASCII letters
				upper-latin
			arabic-indic and 			: arabic-Indic numbers
				-moz-arabic-indic
			armenian					: traditional Armenian numbering
			bengali, -moz-bengali		: bengali numbering
			cambodian/khmer				: cambodian/Khmer numbering
			cjk-earthly-branch and 		: han "Earthly Branch" ordinals
				-moz-cjk-earthly-branch
			cjk-heavenly-stem and 		: han "Heavenly Stem" ordinals
				-moz-cjk-heavenly-stem
			cjk-ideographic				: identical to trad-chinese-informal
			devanagari and 	: devanagari numbering
				-moz-devanagari
			ethiopic-numeric			: ethiopic numbering
			georgian					: traditional Georgian numbering
			gujarati and -moz-gujarati	: gujarati numbering
			gurmukhi and -moz-gurmukhi	: gurmukhi numbering
			hebrew						: traditional Hebrew numberin
			hiragana					: dictionary-order hiragana lettering
			hiragana-iroha				: iroha-order hiragana letterin
			japanese-formal				: japanese formal numbering to be used in legal or financial documents;
										   the kanjis are designed so that they can't be modified to look like another correct one
			japanese-informal			: japanese informal numbering
			kannada and -moz-kannada	: kannada numbering
			katakana					: dictionary-order katakana letterin
			katakana-iroha				: iroha-order katakana letterin
			korean-hangul-formal		: korean hangul numbering
			korean-hanja-formal			: formal Korean Han numbering
			korean-hanja-informal		: korean hanja numbering
			lao and -moz-lao			: laotian numbering
			lower-armenian				: lowercase Armenian numbering
			malayalam and				: malayalam numbering
				-moz-malayalam
			mongolian					: mongolian numbering
			myanmar and -moz-myanmar	: myanmar (Burmese) numbering
			oriya and -moz-oriya		: oriya numbering
			persian  and -moz-persian	: persian numberin
			simp-chinese-formal			: simplified Chinese formal numbering
			simp-chinese-informal		: simplified Chinese informal numbering
			tamil and -moz-tamil		: tamil numbering
			telugu and -moz-telugu		: telugu numbering
			thai and -moz-thai			: thai numbering
			tibetan						: tibetan numbering
			trad-chinese-formal			: traditional Chinese formal numbering
			trad-chinese-informal		: traditional Chinese informal numbering
			upper-armenian				: traditional uppercase Armenian numbering
			disclosure-open				: symbol indicating that a disclosure widget such as <details> is opened
			disclosure-closed			: symbol indicating that a disclosure widget, like <details> is closed
			Non-offical:
				-moz-ethiopic-halehame
				-moz-ethiopic-halehame-am
				ethiopic-halehame-ti-er, -moz-ethiopic-halehame-ti-er
				ethiopic-halehame-ti-et, -moz-ethiopic-halehame-ti-et
				hangul, -moz-hangul
				hangul-consonant, -moz-hangul-consonant
				urdu, -moz-urdu



	VARIABLES: //(0x000002aa)➞
		{	--[name]: [value];
			//---
			var(--[name])
		}
		>"custom properties"
		>macro behaviour
		>must be refrenced with the var() function
		>scooped
		>exists inside a rule and then inherits


#define css_complementary:: //(0x000002ab)➞\
I------------------------------------------------------------------\
I    ___                _                   _                  _   \
I   / __|___ _ __  _ __| |___ _ __  ___ _ _| |_ __ _ _ _ _  _ (_)  \
I  | (__/ _ \ '  \| '_ \ / -_) '  \/ -_| ' \  _/ _` | '_| || | _   \
I   \___\___/_|_|_| .__/_\___|_|_|_\___|_||_\__\__,_|_|  \_, |(_)  \
I                 |_|                                    |__/      \
I------------------------------------------------------------------I
	
	BACKGROUND: //(0x000002ac)➞
		style="background-color:[color]"		: sets background to [color]
		style="background-image:[url||path]"	: sets background to image
		style="background-repeat: repeat-y"		: repeats; (lets say the background is a gif)


	TEXT: //(0x000002ad)➞
		Fonts: //(0x000002ae)➞
			font-family: "[font]"	: specifies font
			font-size: [size]		: size
			¤[font]
				>any installed font
				-generic:
					>used to ensure every user will see something similar
					  as noone garantees that the she will have a specific font on her machine
					+ serif
					+ sans-serif
					+ monospace
					+ cursive
					+ fantasy
					+ system-ui
				-global values:
					+ inherit
					+ initial
					+ unset
		Writing_mode: //(0x000002af)➞
			>controls the direction of ĐstackingĐ
			>the naming is very counter intuitive
			>it is ĐrelativeĐ to how the things would be layed out by default
			horizontal-tb	: "horizontal tab"; default (if youre white)
			verticlal-lr	: "vertical left-right"
			verticlal-rl	: "vertical right-left"
			sideways-lr		: "sideways left-right"
			sideways-rl		: "sideways right-left"
			{	// Let us grab an example text
					var originalText = "Original\ntext"
				// Represent it in a way that is "rotatable" in plain text
					########
					OOOO
				// Different writing modes:
					vertical-lr:	|    vertical-rl:    |    sideways-lr:    |    sideways-lr:
						#O      	|        O#          |        #           |        O#
						#O      	|        O#          |        #           |        O#
						#O      	|        O#          |        #           |        O#
						#O      	|        O#          |        #           |        O#
						#       	|         #          |        #O          |         #
						#       	|         #          |        #O          |         #
						#       	|         #          |        #O          |         #
						#       	|         #          |        #O          |         #
				NOTE: the the way letter face relative to each other never changes
			}
		text-decoration	[options||none]	: apply more options at once; separated by spaces; (color; dotted; underline)



	SIZE: //(0x000002b0)➞
		width: [size];
		height: [size];
		Calculation:
			box-sizing: content-box || border-box
			content-box		: when calculating the size only the contents are taken into acount; default
			content-height	: when calculating the size the contents and the border are taken into acount



	BOX_MODELL: //(0x000002b1)➞
		>applies to every non-metadata element
		Padding: //(0x000002b2)➞
			padding	[size]	: empty space that must be left around element
			>relative to the width (both vertical and horizontal)
			NOTE: the top and bottom padding of inline elements are not respected (ignored)
		Border: //(0x000002b3)➞
			border-[specification1]-[specification2]: [options]
				¤[specification]
					top
					bottom
					left
					right
				¤[specifications2]
					radius: <int>px		: to make it round
					style: [solid || dotted || double || dashed] : duh
			border-color: [colors]	: sets border color
		Margin: //(0x000002b4)➞
			margin [size]	: margin of element
			>an outer circle around the element which cannot by benetrated by the hitbox of other elements,
			  but not part of the hitbox per se
			>ĐĐmargin collapsingĐĐ happens when two elements with margins are adjacent;
			  than only the larger margin is taken into account
			 { @begin=html@
				   <a style="margin-right: 20px;">_im text_</a>
				   <a style="margin-left: 10px;">_so am i_</a>
			   @end=html@
				   _im text_[20px]_so am i_
			  }
			>not affected by background (color)
			NOTE: the <body> has a margin by default
			NOTE: the top and bottom margin of inline elements are not respected (ignored)
Green( 	Fullsize = Content + Padding + Border + Margin)
		Content	: inner text
		Red		: padding
		Border	: border
		Purple	: margin
		// Content < Padding < Border < Margin
			Purple(XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)
			Purple(XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)
			Purple(XXX)+------Border-------+Purple(XXX)
			Purple(XXX)|Red(##############)|Purple(XXX)
			Purple(XXX)|Red(##############)|Purple(XXX)
			Purple(XXX)|Red(#)ContentRed(#)|Purple(XXX)
			Purple(XXX)|Red(##############)|Purple(XXX)
			Purple(XXX)|Red(##############)|Purple(XXX)
			Purple(XXX)+-------------------+Purple(XXX)
			Purple(XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)
			Purple(XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)




	OVERFLOW: //(0x000002b5)➞
		@begin=html@
			<style>
				overflow: visible || hidden || clip || scroll || auto;
			</style>
		@end=html@
		>the property of what shall be done with nested elements when they are larger than their container
		visible		: ignore, let it grow and be displayed; default
		hidden		: crop the display of overflowing items; only show the parts that fit inside
		clip		: similar to hidden (see ABOVE), but forbids any kind of inner scrolling
		scroll		: both scroll bars are always shown and if the content overlows one way
					  the corresponding one becomes functional
		auto		: adds a scroll bar to every side which overflows



	POSITION: //(0x000002b6)➞
		position: static || relative || absolute || fixed || sticky
		top: ;
		bottom: ;
		left:	;
		right:	;
		>the top, bottom, left and right attributes together are called the ĐĐdirectional attributesĐĐ
		>controls how the Đdirectional attributesĐ affect the element;
		  also decides how other elements shall interact with it
		>NOTE: non-static elements disown their parents for the next non-static element up the hierarcy or <html>
			    (this affects every attribute)
			{@begin=html@
				<div id=1 style="width: 800px; position: relative">
					<div id=2 style="width: 600px">
						<div id=3 style="width: 100%; position: absolute">
							<!-- has a with of 800px as Đ2Đ is ignored, because its static -->
						</div>
					</div>
				</div>
			@end=html@}
		static		: behave normally, as specified by ĐdisplayĐ; the Đdirectional attributesĐ 
					   have no effect; default
		relative	: behave normally, as specified by ĐdisplayĐ; when a Đdirectional attributeĐ is set,
					   only move the element visually, keeping its hitbox in place, therefor never
					   affecting the position of any other element; for the rules of displaying
					   over/under see "stacking" BELOW
		absolute	: remove the element from the flow, ie. as if it were ĐmetadataĐ, other elements	// ignore static elemts as parents
					   have no concern over its position or size; for the rules of displaying
					   over/under see "stacking" BELOW
		fixed		: ?!
		sticky		: ?!



	STACKING: //(0x000002b7)➞
		z-index: <int>;
		>concerned with the alignment of the elements along with the Z axes (the one perpendicular to the screen)
		-basic order (ascending):
			1. The background and borders of the root element
			2. Descendant non-positioned blocks, in order of appearance in the HTML
			3. Descendant positioned elements, in order of appearance in the HTML
		>z-index sets which layer it should be displayed on; only works on non static-ally positioned elements
		   of the elements to the center point of the cross axes




	LAYOUT: //(0x000002b8)➞
		None: //(0x000002b9)➞
			@begin=html@
				<style>
					display: none;
				</style>
			@end=html@
			>the element is not rendered graffically nor its Đpseudo elementsĐ
		Inline_Block: //(0x000002ba)➞
			@begin=html@
				<style>
					display: inline-block;
				</style>
			@end=html@
			>its top and bottom margins and paddings are respected
			>doesnt capitalize an entire row, ie. other elements can fit next to it
			>they dont seek upwards
			{	@begin=html@		// notice how "char" is not an actually valid value type
					<style>
						div {
							display: inline-block;
						}
						big {
							width: 3 char;
							height: 3 char;
						}
						small {
							width: 2 char;
							height: 2 char;
						}
					</style>
					<div class="big" style="background: blue"></div>
					<div class="big" style="background: yellow"></div>
					<div class="small" style="background: red"></div>
					this text examples float-ing around
				@end=html@
				┌─────Page─────┐
				│### OOO       │ // read about the gap BELOW
				│### OOO ++    │   // NOTE: how the small one sticks to the bottom
				│### OOO ++    │
				│              │
				│              │
				└──────────────┘
			}
			>next to inline-block elements a invisible, uninspectible ĐĐgapĐĐ will be created
			>do remove the ĐgapĐ one must -i kid you fucking not- uncomment any whitespaces
				{	@begin=html@		// notice how "char" is not an actually valid value type
						<style>
							div {
								display: inline-block;
								width: 3 char;
								height: 3 char;
							}
						</style>
						<div style="background: blue"></div><!--	// NOTE: the html comment
					 --><div style="background: yellow"></div>
						this text examples float-ing around
					@end=html@
					┌─────Page─────┐
					│###OOO        │
					│###OOO        │
					│###OOO        │
					│              │
					│              │
					└──────────────┘
				}
		Float: //(0x000002bb)➞
			@begin=html@
				<style>
					float: none || left || right || inline-start || inline-end
				</style>
			@end=html@
			>allows inline elements to ĐflowĐ around it
			>specifies a direction where the element shall be justified inside its container
			{	@begin=html@		// notice how "char" is not an actually valid value type
					<p syle="float: left;\
						width: 2 char;\
						height: 2 char">
					</p>
					this text examples float-ing around
				@end=html@
				┌─────Page─────┐
				│##this text   │
				│##examples    │
				│float-ing     │
				│around        │
				│              │
				└──────────────┘
			}
		Flex: //(0x000002bc)➞
			@begin=html@
				<style>
					display: flex;
					flex: <int> <int> [fval];
					alias flex-1 flex-grow
					alias flex-2 flex-shrink
					alias flex-3 flex-basis
				</style>
			@end=html@
			>a modell of container which allows for various layout options
			>were originally made with single access layout manipulation in mind, ie. being 1 dimensional;
			  thats no longer the case however
			>an element with its display property set to flex is called the ĐĐflex containerĐĐ
			>the Đflex containerĐ behaves as a block element
			>elements directly nested inside a Đflex containerĐ are called ĐĐflex itemsĐĐ
			>each Đflex containerĐ has 2 dimensions called the ĐĐmain axesĐĐ and the ĐĐcross axesĐĐ,
			  whichs correspondence to the vertical and horizontal axes are decided by the flex-direction property;
			  (by default the main is horizontal and the cross is vertical)
			>each Đflex containerĐ has 2 points called the ĐĐstartĐĐ and ĐĐendĐĐ
			  whichs corresponde to a side of the Đmain axesĐ;
			  (by default the start is on the left and the end is on the right)
			>the cross element officially doesnt have named points, however thats retarded as flex-es are
			  neither 1 dimensional nor they behave like it; therefor im naming
			  its end points ĐĐcstartĐĐ and ĐĐcendĐĐ
			>if the flex is horizontal ĐcstartĐ is the top most and ĐcendĐ is the bottom mostpoint of the cross axes
			>if the flex is vertical ĐcstartĐ is the left most and ĐcendĐ is the right most point of the cross axes;
			  (left and right being relative to the screen)
			{	flex-direction: row;
Green(			┌───┤ Flex container ├───┐)- <-- CStart
Green(			│                        │)A
Green(			│                        │)|
Green(			│                        │)| Cross Axes
Green(			│                        │)|
Green(			│                        │)V
Green(			└────────────────────────┘)- <-- CEnd
				|<------Main Axes------->|
				A                        A
				|                        |
			  Start                     End
			}
			Direction: //(0x000002bd)➞
				flex-direction: row || row-reverse || column || reverse-column
				set on ĐcontainerĐ
				-row
					>main:	 horizontal
					>cross:	 vertical
					>start:  left
					>end:	 right
				   (>cstart: top
				    >cend:	 bottom)
				-row-reverse
					>main:	 horizontal
					>cross:	 vertical
					>start:  right
					>end:	 left
				   (>cstart: top
				    >cend:	 bottom)
				-column
					>main:	 vertical
					>cross:	 horizontal
					>start:  top
					>end:	 bottom
				   (>cstart: left
				    >cend:	 right)
				-column-reverse
					>main:	vertical
					>cross:	horizontal
					>start: right
					>end:	left
				   (>cstart: left
				    >cend:	 right)
			-free space:
				free space = containers main axes size - items main axes sizes
				{  |<------------------Container----------------->|
				   ┌──────┐┌──────┐┌──────┐
				   │   |  ││  ||  ││  ||| │
				   │   |. ││  ||. ││  |||.│
				   └──────┘└──────┘└──────┘<------Free space----->|
				}
			Grow: //(0x000002be)➞
				flex-grow: <int>;
				set on ĐitemĐ
				>has effect when theres spare space in the Đflex containerĐ
				><int> represents *this items ratio
				><int> is ĐĐretative to the size basesĐĐ (see basis BELOW),
				  meaning larger elements will seize more space
				>0 signals that the item shall not be resized
				{ // theres 180 pixels of avalible space
				  // all 3 items have the same default size
				    #i {
						flex-grow: 6;
					}
				    #ii {
						flex-grow: 2;
					}
				    #ii {
						flex-grow: 4;
					}
				  // this results in a ratio of 3:2:1
				   |<------------------Container----------------->|
				   ┌──────────────────────┐┌──────┐┌──────────────┐
				   │   |                  ││  ||  ││  |||         │
				   │   |.                 ││  ||. ││  |||.        │
				   └──────────────────────┘└──────┘└──────────────┘
				}
			Shrink: //(0x000002bf)➞
				set on ĐitemĐ
				flex-shrink: <int>;
				>0 signals that the item shall not be resized
				>negative version of flex-grow (see ABOVE)
				>what rules are followed when theres unbreakable text int the way?	// ?!;
				  We. Just. Dont. Know.
			Basis: //(0x000002c0)➞
				flex-grow: <int> || [auto];
				set on ĐitemĐ
				>decides what is considered the items size when calculating the available space
				>[auto] makes the browser use the items actual size for the calculation; default
				><int> is an actual size value override-ing the elements actual size
				NOTE: setting it to 0 on all items and guarantees to have
					   them occupy as large of a space ratio as specified by flex-grow (see ABOVE)
			Justifying: //(0x000002c1)➞
				// bullshit; css is an unjustifiable crime against humanity
				justify-content: start || end || center ||
								  space-around || space-between || space-evenly
				set on ĐcontainerĐ
				>controls how items are layed out on the main axis
				start			: align elements to ĐstartĐ
				end				: align elements to ĐendĐ
				center			: align the center of the elements to the center of the main axis
				space-between	: evens the free space between elements
				space-around	: evens the free space the sides of the container and the far most elements
								   and between elements with a 1:2 ratio
				space-evenly	: evens the free space the sides of the container and the far most elements
								   and between elements with a 1:1 ratio
				NOTE: the ĐĐfree spaceĐĐ in this context means free space calculated after flex-grow has taken effect
				{  // Space Between:
				   |<------------------Container----------------->|
				   ┌──────┐            ┌──────┐            ┌──────┐
				   │   |  │            │  ||  │            │  ||| │
				   │   |. │<---------->│  ||. │<---------->│  |||.│
				   └──────┘     X      └──────┘     X      └──────┘
				   // Space Around:
				   |<------------------Container----------------->|
				       ┌──────┐        ┌──────┐        ┌──────┐
				       │   |  │        │  ||  │        │  ||| │
				   |<->│   |. │<------>│  ||. │<------>│  |||.│<->|
				    X/2└──────┘   X    └──────┘   X    └──────┘X/2
				   // Space Evenly:
				   |<------------------Container----------------->|
				         ┌──────┐      ┌──────┐      ┌──────┐
				         │   |  │      │  ||  │      │  ||| │
				   |<--->│   |. │<---->│  ||. │<---->│  |||.│<--->|
				      X  └──────┘  X   └──────┘  X   └──────┘  X 
				}
			Alignment: //(0x000002c2)➞
				align-items: stretch || start || end || center;
				set on ĐcontainerĐ
				>dont ask what it does, poor thing has an identity crisis and thats a trigger for him;
				  you dont want this faggot to have a nervous break down, do you?
				stretch		: fill all available space on the cross axes
				start		: use only as much space on the cross axes as needed and align elements to ĐcstartĐ
				end			: use only as much space on the cross axes as needed and align elements to ĐcendĐ
				center		: use only as much space on the cross axes as needed and align the center
		Grid: //(0x000002c3)➞
			@begin=html@
				<style>
					display: grid;
					grid: <int> <int> [fval];
					grid-template-columns: ;
				</style>
			@end=html@
			>a modell of container which is centered around ordering elements in rows and columns
			struct:
				grid-template-columns [size]+ || repeat()	: controls the amounts and the individual sizes of columns
				grid-template-rows [size]+ || repeat()		: controls the amounts and the individual sizes of rows
			Spacing:
				grid-column-gap: [size]		: decides how wide of a gap shall be between columns
				grid-row-gap: [size]		: decides how wide of a gap shall be between rows
				grid-gap: [size]			: decides how wide of a gap shall be between columns and rows 

	

	LISTS: //(0x000002c4)➞
		list-style-type: [list_style_type]		: decides what text precieds the lists elements
		list-style-image: [url]					: decides what image precieds the lists elements(;
												   where [url] points to an image)
		list-style-position: ?!

--
#define I----------------------------------------------------------I
#define I----------------------------------------------------------I
#define I----------------------------------------------------------I



	FUNCTIONS: //(0x000002c5)➞
		[name]([args])
		repeat([size_t], [value]+)	: repeats [value] [size_t] times; no it cant be used as a macro, that would be too useful;
									   has its own return "type" and used in secial case-s (see AT "?!/Grid/Struct")
		Math:
			calc([eq])			: returns [size] calculated from equasion [eq]
			>var() can be nested inside (thank fucking God);
			>on ĐĐsubtractionĐĐ and ĐĐadditionĐĐ the operator-s ('-' && '+') must be surrended by whitespace
			>ĐĐdivisionĐĐ and ĐĐmultiplicationĐĐ has to have its second operand an int
				{ calc(30px / 10)		// Fine
				  calc(30px / 10px)		// Trash fire
				  calc(50px * 25)		// All good
				  calc(50px * 25px)		// Major earth quakes
				}
		Transform:
			transform: [transform_function];
			>functions which are used as a value for the transform property
			matrix()		: the default state of any element is equivalent to matrix(1, 0, 0, 1, 0, 0)
			Rotation:
				>the letter in the naming signals which axis stays in place
				rotateZ([angle])	: rotates the element on the x-y plain according to [angle]; this transformation doesnt affect the  
								   	   elements hitbox
				rotateX([angle])	: rotates the element on the y-z plain according to [angle]; this transformation doesnt affect the  
								   	   elements hitbox
				rotateY([angle])	: rotates the element on the x-z plain according to [angle]; this transformation doesnt affect the  
								   	   elements hitbox
				alias rotate([angle]) rotateZ([angle])
				rotate3d([int-1], [int-2], 		: translates to { rotateX([int-1] * [angle]) rotateY([int-2] * [angle]) rotateZ([int-3] * [angle]) }
							[int-2], [angle])
			Translate:
				>what faggot thought its a good idea of calling this shit "translate" insead of "shift" or "move"?
				translateX([size])		: shifts the center of the element on the horizontal axes by [size];
										   positive [size] values "right", negative one mean "left"
				translateY([size])		: shifts the center of the element on the vertical axes by [size]
										   positive [size] values "down", negative one mean "up"
				translate([size-1],		: translates to { translateX([size-1]) translateY([size-2]) }
						   [size-2] = 0)
				translateZ()			: ?!
				translate3d([size-1],	: translates to { translateX([size-1]) translateY([size-2]) translateZ([size-3]) }
					[size-2], [size-3])

			Scale:
				scaleX([size])		: resizes, ie. stretches the element on the horizontal axes;
									   ratios and therefor angles are not affected
				scaleY([size])		: resizes, ie. stretches the element on the vertical axes;
									   ratios and therefor angles are not affected
				scale([size-1],		: translates to { scaleX([size-1]) scaleY([size-2]) }
						[size-2])
				scaleZ([size])		: ?!
				scale3d()			: translates to { scaleX([size-1]) scaleY([size-2]) scaleZ([size-3]) }
			Skew:	?!
				skewX([angle])
				skewY([angle])



	HACKS: //(0x000002c6)➞
		Width_dependent_height: //(0x000002c7)➞
			>"Since height percentages are relative to the height of the parent element,\
			   we can't rely on it. We must rely on something else. Luckily padding is\
			   relative to the width - whether it's horizontal or vertical padding.\
			   In padding-xyz: 100%, 100% equals 100% of the box's width.\
			   Unfortunately, padding is just that, padding. The content-box's height is 0. No problem!\
			   Stick an absolutely positioned element, give it 100% width, 100% height\
			   and use it as your actual content box. The 100% height works because percentage heights\
			   on absolutely positioned elements are relative to the padding-box of the box their relatively positioned to."
				{	@begin=html@										- Alexis Wilke
					ĐĐ_CSS_ĐĐ:
						<style>
							#base {
								width: 400px;
							}

							#wrapper {
							  position: relative;
							  width: 100%;
							  padding-bottom: 100%;
							}

							#to_scale {
							  background: blue;
							  position: absolute;
							  width: 100%;
							  height: 150%;
							}
						</style>

					ĐĐ_HTML_ĐĐ:
						<div id="base">
							<div id="wrapper">
							  <img id="to_scale" src="deer.jpg">
							</div>   
						</div>   
					@end=html@
				}


#define xml: //(0x000002c8)➞\
I-----------------------------------------------\
I-----------------------------------------------\
I-----------------------------------------------\
I		 /$$   /$$ /$$      /$$ /$$      		\
I		| $$  / $$| $$$    /$$$| $$      		\
I		|  $$/ $$/| $$$$  /$$$$| $$      		\
I		 \  $$$$/ | $$ $$/$$ $$| $$      		\
I		  >$$  $$ | $$  $$$| $$| $$      		\
I		 /$$/\  $$| $$\  $ | $$| $$      		\
I		| $$  \ $$| $$ \/  | $$| $$$$$$$$		\
I		|__/  |__/|__/(xml)|__/|________/		\
I-----------------------------------------------\
I-----------------------------------------------\
I-----------------------------------------------I
Extensible Markup Language                                 
-----------------------------------------------------------
#define xpath: //(0x000002c9)➞\
I----------------------------------------------------\
I----------------------------------------------------\
I----------------------------------------------------\
I  /$$   /$$ /$$$$$$$             /$$     /$$        \
I | $$  / $$| $$__  $$ (xpath)   | $$    | $$        \
I |  $$/ $$/| $$  \ $$ /$$$$$$  /$$$$$$  | $$$$$$$   \
I  \  $$$$/ | $$$$$$$/|____  $$|_  $$_/  | $$__  $$  \
I   >$$  $$ | $$____/  /$$$$$$$  | $$    | $$  \ $$  \
I  /$$/\  $$| $$      /$$__  $$  | $$ /$$| $$  | $$  \
I | $$  \ $$| $$     |  $$$$$$$  |  $$$$/| $$  | $$  \
I |__/  |__/|__/      \_______/   \___/  |__/  |__/  \
I----------------------------------------------------\
I----------------------------------------------------\
I----------------------------------------------------I
XML Path Language
XPath is for locating information inside xml/html files
NOTE: see example html BELOW
it's like as if tags were folders:
	{	
		/html/body/employees
	}
child nodes of a tag are accessed by using a '/'
if there are multiple matches inside the specified tag, they behave like an array except they are 1 indexed:
	{	
		/html/body/employees[1]							//selects <employee id=12> és ami annak a "gyermeke"; emloyee[0] does not exist
	}
one can also filter by ĐĐtag valueĐĐ:

or ĐĐattributeĐĐ:
	{
		/html/body/employee[@id = "4"]					//selects <employee id=4> és ami annak a "gyermeke";
	}
select parent:




#define tex
#define latex: //(0x000002ca)➞\
I------------------------------------------------------------------\
I------------------------------------------------------------------\
I------------------------------------------------------------------\
I             /$$              /$$$$$$$$        /$$   /$$          \
I            | $$             |__  $$__/       | $$  / $$          \
I            | $$        /$$$$$$ | $$  /$$$$$$ |  $$/ $$/          \
I            | $$       |____  $$| $$ /$$__  $$ \  $$$$/           \
I            | $$        /$$$$$$$| $$| $$$$$$$$  >$$  $$           \
I            | $$       /$$__  $$| $$| $$_____/ /$$/\  $$          \
I            | $$$$$$$$|  $$$$$$$| $$|  $$$$$$$| $$  \ $$          \
I            |________/ \_______/|__/ \_______/|__/  |__/          \
I------------------------------------------------------------------\
I------------------------------------------------------------------\
I------------------------------------------------------------------I
//(0x00000221)➞

	>descendant of tex
	>pro scientific document markup language
	>due to the indifference in function/block syntax while packages being state machines,
	  and not all blocks having to be closed, there is no way to indent it right;
	  it will be unreadable either way
    >absolute worst fucking "community" of retards obsessing over this piece of shit

    Pros:
        >block floating
        >proper multi-language hyphenation
        >math notation
        >(physical print) page optimization

	Programs:
        Compilers:
            >used for generating output documents from latex markup {pdf}
            pdflatex
            lualatex
        Distibutions:
            >latex is very incapable without packages,
              distributions provide ways to manage them
            texlive
                tlmgr       : "TeXLive ManaGeR"; latex package manager
            miktex
        Editors:
            texstudio	    : the recommended editor by pro-s (not me);
                               has live previews, do use it even if you edit the source extern
            overleaf.com    : online editor; useful if you dont have the hair to spare to install
                               latex and its bullshit

    Files:
        .tex    : latex document


	Commenting:
		>vertical-editing-lets are fucked
		% <...>		: single line comment


	Commands:
		\<name>([<optional_arguments>]){<arguments>}+
		{
			\documentclass[a4paper,12pt]{article}
			\PassOptionsToPackage{defaults=hu-min}{magyar.ldf}
		}


    Environments:
        {
            \begin{<env>}
            <...>
            \end{<env>}
        }
        >a section of markup marked to be treated specially
        >NOTE: further marked with the leading keyword "env";
                this has nothing to do with LaTeX syntax, its my own brain damage
                trying to classify stuff in a readable manner
        // ?!
		env center		: aligns the contents horizontally on the page
        env minipage    : emulates a sandboxed page which becomes its own atom;
                           sort off, footnotes? work. pagecolor? nope.;


	Document:
		{
			<preandum>
			<document_body>
			[discarded]
		}
		Preandum:
            >commands which dont have an immediate visual representatition go here
            document_class:
                -the documents class determines much about what commands are available and
                  how the compiled document will look:
                    >available parting expressions { \chapter{}; \section{} }
                    >available env expressions
                    >image rendering
                >sensible defaults? fuck you! it must be explicitly set
                \documentclass[]{<class>}   : defines what type of document this is
                    book:
                        >differentiates between left and right pages {margin sizes}
                        \chapter{<name>}
                        \section{<name>}
                        \subsection{<name>}
                        \subsubsection{<name>}
                    article:
                        env abstract
                    report:
                        env abstract
                    draft:
                        >NOTE: disables image rendering completely and inserts placeholders;
                                this is only useful if you know you wish to insert images later on,
                                but you dont have any of them yet, so you wish to insert the image
                                directives, but do not want error outs on missing files
                        >otherwise behaves like a book (i think?)
                    letter:
                        env letter
                        \address{<string>}
                        \signature{<string>}
                        \opening{<string>}
                        \closing{<string>}
            metadata:
                >stored for later use
                \title{<...>}
                \author{<...>}
                \date{<...>}
		Document_body:
		    env document	: the body of the document
			substance:
				\maketitle
					\title
					\author
					\date
				\tableofcontents

    Floating:
        >the one feature every latexfag is very proud of
        >floated objects {figures} are not placed where you specify them,
          but rather where it is calculated they make the most typographical sense
          (save the most for Mr. Printerstein)
        >floating works perfectly fine for printed documents because the reader
          can usually see it on the next page and its pretty clear where his butchered
          paragraph will continue; however when using a pdf reader on a screen,
          it gets very annoying real fast
	
    Title:
        \maketitle  : creates a title page where called;
                       utalizes metadata set by other commands
        >what? you want subtitles? lol!
          lmao even.
        {
            \documentclass{book}
            \title{The art of fedposting}
            \author{Ciarán McGlow}
            \date{2016}

            \begin{document}
            \maketitle
            \end{document}
        }

	Lists:
		\item[] <...>   : list item; used inside all list environments
        env enumerate   : creates an ordered list (numbered)
        env itemize     : creates an unordered list (rulletpoints)
        env description : creates a dictionary list
            \item[<name>]

		
	Special_characters:
		~		: non-breaking space
		\,		: short non-breaking space
		\dots	: 3 dots...
		--		: wide '-'
		^		: super script
		_		: lower script
        \\      : line break

	Math:
		$<math_sublang>$
		>its '$' because printing math notation used to cost a fortune

	Tables:
		>the worse DSL ive ever seen
		{
			\begin{tabular}{<style>+}
				(<string> (& <string>)* \\)*
			\end{tabular}
		}
		<style>:
			[|]<align>
				l	: left
				r	: right
				c	: center
		\hline
		\cline{<int-1>-<int-2>}
		{@begin=tex@
			\documentclass[]{book}
			\begin{document}
				\begin{tabular}{|l|r|}
					\hline
					header$_1$ & header$_2$ \\		
					\hline
					data$_1$ & data$_2$ \\
					\hline
				\end{tabular}
			\end{document}
		@end=tex@}

	Packages:
		\usepackage{<package>}
        >NOTE: ??? seems to be the least painful way of managing packages

	?!:
		>NOTE: always use
			\usapackage[T1]{fontenc}
		  when using Hungarian
		\emph{<...>}	: emphasise
		\par			: starts new paragraph
		\textsc			: "TEXT Small Capital" (for names)
		\LaTeX          : LaTeX with offical formatted
		\footnote{<string>}
        \the            : makes variable printable
        \-              : soft hypen; override-s where a word can be split
    ?!:
		\year           : current year
        \month          : current month
        \day            : current day

	Packages:
		\usepackage[<options>]{<package_name>}
        ><options> are passed to the package; each defined their own
        Babel:
            >defacto language pack
            ¤affects
                >hypenation
                >paragraph indentation
                >foot notes
                >quotation marks
		Graphicx:
				\usepackage{graphicx}
            >used to include images
			>surpasser of "graphics"
			\graphicspath{{<path>}+}
			\includegraphics{<path>}
                height
                width
        Xcolor:
                \usepackage{xcolor}
		Siunitx:
			\num{<...>}		: break up \num according to babel { \num{1000000} -> 1.000.000 }
        Mdframed:
            >used for boxes which can be broken up to multiple pages
		Multicol:
				\usepackage{multicol}
			\[begin|end]{multicols}{<int>}
        Coffee_stains:
                \usepackage{coffeestains}
            >coffee stain effects on the paper
            \coffeestainA{alpha}{scale}{angle}{xoff}{yoff}
            \coffeestainB{alpha}{scale}{angle}{xoff}{yoff}
            \coffeestainC{alpha}{scale}{angle}{xoff}{yoff}
            \coffeestainD{alpha}{scale}{angle}{xoff}{yoff}
            {
                \coffeestainA{0.9}{0.85}{-25}{5cm}{1.3cm}
                \coffeestainB{0.7}{1}{-30}{18 pt}{-135 pt}
                \coffeestainC{1}{1}{180}{0}{-5 mm}
                \coffeestainD{0.4}{0.5}{90}{3 cm}{4 cm}
            }
        Listings:
                \usepackage{listings}
            >source code printer
            env lstlisting  : source code environment
            \lstset{}       : configures the following listing environments
                language=<lang>                 : programming language preset
                keywords={<string>(,<string>)+} : extra keywords to emphasize
                numbers=left                    : display line numbers
                keywordstyle=<style>            : override-s the default bold display of all keywords

.       ### Latex callouts ###
            >everything but minipages will result in a bunch of problems
            >fbox/framebox chimps out with wrapping color commands, so fcolorbox must be used
            {@begin=latex@
                \documentclass{book}
                \usepackage{xcolor,graphicx}
                \usepackage{afterpage}

                \begin{document}

                \fcolorbox{black}{violet!20}{
                \begin{minipage}{10cm}
                    \includegraphics[width=4mm,height=4mm]{danger.png}
                    {\bf This is my title}

                    This is my test callout!
                \end{minipage}
                }

                \end{document}
            @end=latex@}
            >yet better, macro it
            {@begin=latex@
                \documentclass{book}
                \usepackage{xcolor,graphicx}
                \usepackage{afterpage}

                \newcommand{\noticecallout}[2]{
                    \fcolorbox{black}{violet!20}{
                    \begin{minipage}{10cm}
                        \includegraphics[width=4mm,height=4mm]{danger.png}
                        {\bf #1!}

                        #2
                    \end{minipage}
                    }
                }

                \begin{document}
                    \noticecallout{This is my title}{This is my text callout!}
                \end{document}
            @end=latex@}
#

.       ### Latex is fucking retarded ###
            The following is the description of the graphicx package:
                "\
                The package builds upon the graphics package,         \
                providing a key-value interface for                   \
                optional arguments to the \\includegraphics command.  \
                This interface provides facilities that go far beyond \
                what the graphics package offers on its own.          \
                For extended documentation, see epslatex.             \
                The package is part of the latex-graphics bundle,     \
                which is one of the collections                       \
                in the LaTeX ‘required’ set of packages.              \
                "
            Based on that, now tell me, what the fuck does it do?
            OH! IT INCLUDES IMAGES? I WOULD HAVE NEVER GUESSED, I WONDER WHY!
#


#define m4: //(0x000002cb)➞\
I-------------------------------\
I-------------------------------\
I     /$$      /$$ /$$   /$$    \
I    | $$$    /$$$| $$  | $$    \
I    | $$$$  /$$$$| $$  | $$    \
I    | $$ $$/$$ $$| $$$$$$$$    \
I    | $$  $$$| $$|_____  $$    \
I    | $$\  $ | $$      | $$    \
I    | $$ \/  | $$      | $$    \
I    |__/     |__/      |__/    \
I-------------------------------\
I-------------------------------I
//(0x00000222)➞
	>macro based text generation language
	>part of standard *nix distributions

	YYY:
		info m4

	Macro:
		<name>			: simple macro
		<name>(<arg>+)	: function like macro, can arbitrary use all arguments passed in
		{ // Example
			define(macro, my_text)dnl
			define(macro2, `my_text is $1')dnl
			macro
			macro2(lovely)
		  // Result
			$ m4 example.m4
			my_text
			my_text is lovely
		}
	Expansion:
		>text is subject to macro expansion given its recognized as a macro
		Quoting:
			``<literal>''
			>quoted text expand to itself without quotes
			>NOTE: literals start with a back tick ('`') and end with a apostrophe ('\'')
	Variables:
		$1 $2 $3 $4 $5 $6 $7 $8 $9
		>recognized inside the deplaration of function like macros
		>expand to arguments
	Builtin_Macros:
		dnl<comment>			: "Delete New Line"; deletes everything to the right of the macro on the same line, including the '\n';
									used for truncating whitespace in the output and or for commenting
		include(<file>)			: expands to the contents of <file>
		define(<name>, <value>)	: creates a new macro named <name> expanding to <value>


#define php: //(0x000002cc)➞\
I-----------------------------------------------\
I-----------------------------------------------\
I-----------------------------------------------\
I		  /$$$$$$$  /$$   /$$  /$$$$$$$ 		\
I		 | $$__  $$| $$  | $$ | $$__  $$		\
I		 | $$  \ $$| $$  | $$ | $$  \ $$		\
I		 | $$$$$$$/| $$$$$$$$ | $$$$$$$/		\
I		 | $$____/ | $$__  $$ | $$____/ 		\
I		 | $$      | $$  | $$ | $$      		\
I		 | $$      | $$  | $$ | $$      		\
I		 |__/ (php)|__/  |__/ |__/      		\
I-----------------------------------------------\
I-----------------------------------------------\
I-----------------------------------------------I
//(0x00000223)➞
Hypertext Preprocessor

	>server side
	>whitespace insensitive
	>semicolons are required at the end of every line (expression, but you know);
	>C like operators
---------
   php
--------
	php <options> <file>	: PHP interpreter commandline interface
		-S <addr>:<port>		: built it webserver; NOTE: INCREADIBLY, THIS IS THE BEST WEBSERVER DEVELOPER SERVER ONE CAN GET FOR PHP { $ php -S 127.0.0.1:8000 }

--------
	
	COMMENTING: //(0x000002cd)➞
		# || //					: single line comment
		/* [...] */				: multi line comment
	
	VARIABLES: //(0x000002ce)➞
		>variable names must begin with a letter or underscore character
		>every variable name starts with a '$'
		>therefor if you wanna use '$' as a char, escape it ('\$')
		¤types:
			>int
			>double
			>bool
			>string							//no such a thing here as a char type
			-array
				array([values]+)	: returns array
				[(values)]			: short-hand alias of the ABOVE
				>associative
			>class objects
			>null							: special type that only has one value: NULL.
			>resources						: special variables that hold references to resources external to PHP (such as database connections)
		Setting:
			>what other languages would call definition or (wrongly) construction
			(const) $[name] = [value];
	
	LOGIC: //(0x000002cf)➞
		if									: as in c++				//(c)

	LOOPS: //(0x000002d0)➞
		while								: as in c++				//(c)
		do [...] while						: as in c++				//(c)
		for									: as in c++				//(c)
		foreach([array] as [var]){[...]}	: [var] will take up the values of the elements of [array]
		Broken_up:
			>php allows loops to start and end in different php tags
			>anything between a broken up loop start and end considered conditional (including html)
			[loop]:		: broken up loop start
			end[loop]	: broken up loop end
			{// repeating a html span 10 times with php
			  <?php
				for($i = 0; $i < 10; $i++):
			  ?>
			      <span>Some text<span>
			  <?php
			  	endfor;
			  ?>
			}




	OPERATORS: //(0x000002d1)➞
			echo <string>					: echoes (prints) <string>; faster than "print"
			print <string>					: prints <string>; do { print <<<END } to add new line



	INCLUSION: //(0x000002d2)➞
		include [path]		: insert all text from [path]
		include_once [path]	: insert all text from [path] if it wasnt done so before in the current document
		require [path]		: insert all text from [path]; die if [path] doesnt exist
		require_once [path]	: insert all text from [path] if it wasnt done so before in the current document; die if [path] doesnt exist



	BUILTINS: //(0x000002d3)➞
		>i dont know by what fucked logic the std is organized, but quite frankly i dont actually give a shit
		EXECUTION:
			exit()					: the only line every php program should contain
			die()					: equivalent to exit()
		VARIABLE_MANAGEMENT:
			isset([var])						: returns whether [var] has been defined
			unset([var])						: delete-s [var]
		IO:
			var_dump([var])					: prints information regarding [var] and its value
			print_r([array])				: prints all elements of array [array]
			get_object_vars([object])		: returns an associative array of non static member variables of [object]
			error_log([string])				: log [string] to the execution logs; this could be stdout or a server log
			Filesystem_operations:
				basename(<string>)				: supposing <string> is a path to a file, it will return the file name { "/asd/das.php" => "das.php" }
				dirname(<string>)				: supposing <string> is a path to a file, it will return the path name { "/asd/das.php" => "/asd" }
				file_exists(<string>)			: checks whether <string> dir/file exists; returns bool
				is_file(<string>)				: checks whether <string> file exists; returns bool
				realpath(<string>)				: returns absulute path of <string> file
				filesize([file])				: returns file size
				mkdir([name])					: makes dir with [name]
				copy([file1], [file2])			: copies [file1] as [file2]
				rename([file1], [file2])		: renames [file1] to [file2]
				unlink([file])					: deletes [file]
				file_get_contents([file])		: returns [file]s content
			File_operations:
				fopen([FILE], [mode])			: returns handle to [file] with intent of [mode]
					modes:
						'r'		: read
						'r+'	: read and write
						'w'		: write
						'w+'	: read and write; if doesnt exist create it
						[...]	//the rest are only useful in very specific cases
				fread([file handle], <int>)		: returns <int> much of [file]s content
				fwrite([file handle], <string>) : 
				fclose([file hanle])			: should always be called when done working with [file]
				file_get_contents([path])		: returns the a string constructed from the text contents of file [path]
		INT:
			round()
		STRING:
			strlen(<string>)					: returns the number chars (maybe bytes ?!) in <string>
			strtolower(<string>)				: returns <string> converted to all lower case
			explode([string-1], [string-2])		: returns an array constructed from [string-2] split at every occurence of [string-1]
			substr(<string>, [int-1], [int-2])	: returns [int-2] chars from position [int-1] of <string>
			is_numeric(<string>)				: returns whether <string> is a valid number
		ARRAY:
			array_key_exists(<string>, [array])	: returns weather associative array [array] has a member with the key <string>
			key_exists(<string>, [array])		: alias of the ABOVE
			in_array([val], [array])
			array_push([array], [value])
			count([array])
		REGEX:
			preg_match([regex], <string>)		: returns whether <string> matches regex string [regex]
		SESSION:
			session_start()
			session_destroy()
		HTML:
			header(<string>)		: sets document header to <string>;
									   commonly used to redirect by setting: "Location: [page]"
		HTML_DOC:
			>php can edit html files as a struct-ed document, not just plain text
			>modelled after javascript
			Classes:
				class DOMDocument;
					Member_functions:
						loadHtml([html])	: properly constructs DOMDocument
			Functions:
				getElementsByTagName()
				getElementsByClassName()
			Dom_element:
				textContent
				item(<int>)					: returns <int>th child as dom element
				getAttribute(<string>)
		MYSQL:
			class mysqli([host], [user], [password], [db])
			>NOTE: mysql will not allow php to connect as root and rightfully so
			Member_variables:
				bool connect_error		: whether a database connection error was encountered; should be called after construction
			Member_Functions:
				query([SQL])	: performs SQL query; returns:
									false         - on error
									true          - on success
									mysqli_result - if SELECT, SHOW, DESCRIBE or EXPLAIN query was passed
				close()
			class mysqli_result
				fetch_assoc()		


#define laravel:: //(0x000002d4)➞\
I-------------------------------------------\
I     _                               _     \
I    | |                             | |    \
I    | |     __ _ _ __ __ ___   _____| |    \
I    | |    / _` | '__/ _` \ \ / / _ \ |    \
I    | |___| (_| | | | (_| |\ V /  __/ |    \
I    \_____/\__,_|_|  \__,_| \_/ \___|_|    \
I-------------------------------------------I

	>php framework
    -NOTE: its so fucking bloated you wont believe me:
        {@begin=sh@
            $ date
            Wed Jul  3 10:36:17 AM CEST 2024
            $ composer.phar create-project --prefer-dist laravel/laravel projectName
            # ...
            $ tree projectName/
            # ...
            1239 directories, 7975 files
            $ statAlias projectName/
            # ...
            77M     projectName
        @end=sh@}

	CLI:
		composer (<options>) <action>	: dependency manager
			<action>:
			 	<verb> (<options>) (<args>)
					create-project --prefer-dist laravel/laravel <name>
		php artisan <action>
			migrate:<specific>
				rollback
				reset
				status
			serve
			make:<subject> <name>
				controller
				view
				migration
				seeder
				command

	Structure:
		/routes/web.php		: used for defining routes
		/resources/
		  ├── css
		  ├── js
		  └── views

	CRUD:
		Classes:
			>models
			member_functions:
				all()		: returns all records
				create(<request>)	
				find(<id>)
				delete(<id>)
				delete()
		Controllers:
			{
				public function index() {
					$data = ['example' => 'value'];

					return view('index', $data);
				}
			}
		Routes:
			use Illuminate\Support\Facades\Route;
			Route::<method>(<route: string>, [<controller: class>, <function: string>])
			{
				Route::post("/example", [ExampleController::class, "myMemberFunction"])->name("example_name");
			}
		Templates:
			>view
			*.blade.php
			{@begin=html@
				<!DOCTYPE html>
				<html>
					<head>
						<title>{{ $pageTitle ?? 'Default Title' }}</title>
					</head>
					<body>
						<h1>{{ isset($header) ? $header : 'Default Header' }}</h1>
						<div>
							@if($showContent)
								<p>Welcome to the content section!</p>
							@else
								<p>Content is not available.</p>
							@endif
							<ul>
								@foreach($items as $item)
									<li>{{ $item }}</li>
								@endforeach
							</ul>
						</div>
						<footer>
							<p>&copy; {{ date('Y') }} My Laravel App</p>
						</footer>
					</body>
				</html>
			@end=html@}
		Migrations:
			up()
			down()
			Seeders:
				{
					public function run()
					{
						DB::table('admins')->insert([
							'name' => 'Anon Anonson',
						]);
						// Add more seed data as needed
					}
				}
		Forms:
			{
				<form action="/your-route" method="post">		// action="{{ route('example.route') }}"
					@csrf
					<!-- ... -->
				</form>
			}
	Authentication:
		class User	
			>builtin
		class Auth
			login(<...>)
			logout()

			
---------------------------------------
#define js: //(0x000002d5)➞\
I------------------------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------------------------\
I		 /$$$$$                                /$$$$$$                      /$$             /$$    	   \
I	    |__  $$                               /$$__  $$                    |__/            | $$    	   \
I		   | $$  /$$$$$$  /$$    /$$ /$$$$$$ | $$  \__/  /$$$$$$$  /$$$$$$  /$$  /$$$$$$  /$$$$$$  	   \
I		   | $$ |____  $$|  $$  /$$/|____  $$|  $$$$$$  /$$_____/ /$$__  $$| $$ /$$__  $$|_  $$_/  	   \
I	  /$$  | $$  /$$$$$$$ \  $$/$$/  /$$$$$$$ \____  $$| $$      | $$  \__/| $$| $$  \ $$  | $$    	   \
I	 | $$  | $$ /$$__  $$  \  $$$/  /$$__  $$ /$$  \ $$| $$      | $$      | $$| $$  | $$  | $$ /$$	   \
I	 |  $$$$$$/|  $$$$$$$   \  $/  |  $$$$$$$|  $$$$$$/|  $$$$$$$| $$      | $$| $$$$$$$/  |  $$$$/	   \
I	  \______/  \_______/    \_/    \_______/ \______/  \_______/|__/      |__/| $$____/    \___/  	   \
I		                                                                       | $$                	   \
I		                                       (((javascript || java script))) | $$                	   \
I		                                								       |__/ 				   \
I------------------------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------------------------\
I------------------------------------------------------------------------------------------------------I
	>modern web browsers are glorified JavaScript interpreters,
	  ie. its sent as plain text and ran user-side (allowing for some juicy tricks)
	>tries to mimic Java, meaning its similar to C (see AT "/C++")
	>semi-colons are allowed, but no way necessary; recomended tho for readability
	>camelCase is the standard (see AT "/Theory/Naming/camelCase")

	FILES: //(0x000002d6)➞
		.js

	COMMENTING: //(0x000002d7)➞
		>C style (see AT "/C++/Commenting")

	Literals:
		>C style
		/<...>/<flags>	: regex literal

	VARIABLES: //(0x000002d8)➞
		var [name]		: declares a gf-scooped variable named [name]
		let [name]		: declares a b-scooped variable named [name]
		const [name]	: declares a b-scooped const variable; must be assigned imidiatly; cannot be reassigned
		gf-scoope:
			>global or function scooped
			>exists globally or inside a function
		b-scoope:
			>block scooped
			>exists only inside the neerest curly braces ("{}"), C style
		>case sensitive naming
		-mostly C style
			>assignment
		Data_types:
			>automatic type conversions
			>declaration(, but not assignments, even if they are chained together)
			  are always moved to the top of the scoope by the JS engine
			  {
			  	console.log(msg);			//undefined, but not undeclared
				var msg = "weird shit";
					// ==
				var msg;
				console.log(msg);
				msg = "weird shit";
			  }
			null		: nullptr
			undefined	: held by all variables not assigned a value
			>NOTE: null and undefined are evaluated equal
			-Bools:
				>false/true
			-Numbers:
				>holds ints or floats
				>C style
			-Symbols:
				>returned by the Symbol() function
				>a unique value
			-Objects:
				>a data group
				>holds key-value pairs
				>uses json syntax (see AT /JSON)
				>members can be accessed with dot notation { Vera.Hight }
			-Arrays:
				[[element1](, [...])]	: silently returns array
				{ let myArray = [1, 2, 3]; }
				>more like a tuple
			-Stacks:
				>also tuple-ish
				>FIFO data structure
			-Queues:
				>reversed, more reality rooted sides ( the end is the First-In )
			-Functions:
				>refers to a function (see BELOW)
			-Element:
				>represents a DOM element (see AT ?!)
		Special_values:
			Infinity	: infinity
.			-Infinity	: negative infinity
			Nan			: Not a Number

	OPERATORS: //(0x000002d9)➞
		C_style:
			=
			+
			++
			+=
.			-
.			--
.			-=
			*
			*=
			/
			/=
			%
			%=
			&&
			||
			|=
			!
			^
			^=
			==
			!=
.			>
.			>=
			<
			<=
.			>>
			<<
		Logical:
			===		: strict equals to comperason operator; does no type conversion
				{  let a = 10;
				   let b = "10";
				   console.log( a == b );  // true
				   console.log( a === b ); // false
				}
		Artimetric:
.			-[...]		: returns [...] with the logically corresponding sign
.			+[...]		: returns [...] with the logically corresponding sign 
			{ let a = 10;
			  let b = -10;
			  let sa = -a; // -10
			  let sb = -b; //  10
			  let ra = +a; //  10
			  let rb = +b; // -10
			}
		Bitwise:
			&=		: bitwise and assignment
		Keyword:
			typeof [...]			: returns type of [...]; ?!
			[...] instanceof [type]	: returns whether [...] is of type [type]
	
	LOGIC: //(0x000002da)➞
		if
		?:
		else
		switch case
		>C style

	LOOPS: //(0x000002db)➞
		C_style:
			for
			while
			do while
			break
			continue
		For_in:
			for(<var> in <enumarable>){ <...> }
			>iterate over the properties of <object> with the value of <var>
			>NOTE: arrays will enum to objects with the array indexes as their properties
			{ // Iterating over an objects properties
				var language = {
				  name: "Javascript",
				  tier: "C-",
				  year_of_origin: 1995
				};

				for(var i in language){
				  console.log(i);
				}
			  // output:
				name
				tier
				year_of_origin
			}
			{ // Using for-in on an array
				var languages = ['JavaScript', 'Python', 'C++', 'Go', 'Rust'];
				for(var i in languages){
				  console.log(i);
				}
			  // output:
				0
				1
				2
				3
				4
			}
		for_of:
			for(<var> of <iteratable>){ <...> }
			>iterate over the values of <iteratable> with the value of <var>
			{ // Iterating an array
				var languages = ['JavaScript', 'Python', 'C++', 'Go', 'Rust'];
				for(var i of languages){
				  console.log(i);
				}
			  // output:
				JavaScript
				Python
				C++
				Go
				Rust
			}
			{ // Mistaking an object as an iteratable
				var language = {
				  name: "Javascript",
				  tier: "C-",
				  year_of_origin: 1995
				};

				for(var i of language){
				  console.log(i);
				}
			  // output:
				Uncaught TypeError: language is not iterable
			}


	FUNCTIONS: //(0x000002dc)➞
		function [name]([args]){ [...](return [...]) }	: declares function
		[name]([args])									: calls function
		>every function returns Undefined unless specified otherwise
		>every function has an internal (public) array, named "arguments";
		  it holds unnamed arguments
		{  function log(){
		       for(let i = 0; i < arguments.length; i++){
			       console.log(arguments[i]);
			   }
		   }
		}
		>function declarations are always moved to the top of the code by the JavaScript engine,
		  therefor they can be called before they are (visibly/humanly) declared
		Anon:
			function(){ [...](, return [...]) }		: silently creates a Function (variable)
			>"anonymous function"
			>by surrounding them with parenthasies they can be called imidiately
			{ (function(){
			      console.log(10);
			  })();		// -> 10 printed
			}
			Short_hand:	// i remember typing this before; ?!
				<head> => <body>
				>"arrow function"/"lambda"
				<head>
					([var]+)	: syntax for anon function taking N arguments
					[var]		: short hand syntax for anon function taking 1 arguments
					()			: short hand syntax for anon function taking 0 arguments
				<body>
					{...}	: full, normal body; 
					<value>	: a single value which is returned
					{ // NOTE: object creation notation clobbers with shorthand lambda bodies,
					  //        they must be parenthesized
					  i => { value : i }	// PARSE ERROR
					  i => ({ value : i })	// totally fine
					}
		Generators:
			function* [name](){ [...] }	: defines generator
			[name]()					: contructs a generator object
			>ĐĐgeneratorsĐĐ are functions which execute in steps, return-ing a value at the end of each
			>return behaves as regular inside a ĐgeneratorĐ
			>the keyword yield signals the end of a step; uppon encountering it execution stops and a value is ĐyieldedĐ back
			>yield can take up a value passed uppon execution continuation (see BELOW)
			Member_functions:
				next(([val]))	: starts/continue-s execution;
								   returns an object:
								   	.value	- yield-ed/return-ed value
									.done	- whether the generator has return-ed
								   by passing an argument ([val]) sets the value of the yield expression


	VARIABLE_MEMBERS: //(0x000002dd)➞
		valueOf()		: returns primitive underleing value
		[Bool]:
			.toString()				: returns [Bool] converted to string ("true"/"false")
		[Number]:
			.toString((<int> = 10))				: returns [Number] converted to string, in base <int>
			.toLocaleString((<int> = 10))		: returns [Number] converted to locale specific string, in base <int>
			.toFixed(<int>)						: returns [Number] converted to string, rounded/chopped (implementation dependent) to <int> decimal places
			.toExponential()					: returns [Number] converted to string, in exponential notation
			.toPrecision((<int>))				: returns [Number] converted to string, ?!
		<string>:
			.length							: length/size; can be reassigned to chop off closing elements
			[<int>]							: returns <int>th char; 0 indexed
			.charAt(<int>)					: returns <int>th char; 0 indexed
			.toLowerCase()					: returns <string> converted to lower case
			.toUpperCase()					: returns <string> converted to upper case
			.concat(<string>)				: returns <string> with <string> concatonated to it
			.substr([int1], [int2]) 		: returns [int2] chars staring from index [int1]
			.substring([int1], [int2])  	: returns chars from index [int1] till index [int2] exclusive
			.indexOf(<string>(, <int>))		: searcehes for <string> in <string> starting from index <int>;
											   returns the starting index
			.lastIndexOf(<string>(, <int>))	: reverse searcehes for <string> in <string> starting from index <int>;
											   returns the starting index
			.trim()							: returns <string> with leading and trailing white spaces removed
			.trimStart()					: returns <string> with leading white spaces removed
			.trimEnd()						: returns <string> with trailing white spaces removed
			.replace([string1], [string2])	: returns <string> with all instances of [string1] with [string2]
			.includes(<string>(, <int>))	: returns whether <string> contains <string>, starts searching from <int>
		[Array]:
			.length						: highest index + 1; can be reassigned to chop off closing elements
			[<int>]						: returns <int>th char; 0 indexed
			.push([...])				: appends [...] to the end of [Array]
			.indexOf([...](, <int>))	: searcehes for [...] in [Array] starting from index <int>;
			.isArray([...])				: returns whether [Array] contains [...]
		[Stack]:
			.push([...])			: pushes [...] to the top of the stack
			.pop([...])				: pops and returns the top of the stack
		[Queue]:
			.push([...])			: pushes [...] to the back of the queue
			.shift()				: pops and returns the front element of the queue
			.peek()					: returns the front element of the queue
		[Element]:
			.remove()			: delete-s *this node
			.revomeChild()		: delete-s all child nodes of *this
			.innerHTML			: variable representing the visible text of *this (feel free to reassign it)
			.addElementListener([event], [func]) : listens for [even] on *this and calls [func] func when it happens



	BUILTIN_FUNCTIONS: //(0x000002de)➞
		alert(<string>)						: throw-s a massive, annoying and invasive error popup
		setTimeout([func], [size_t])		: waits [size_t] miliseconds before calling [func]
		requestAnimationFrame([callback])	: calls [callback] the next time whenever the screen is ready to be rendered;
											   a timestamp is passed to [callback] so it can determine the state of the animation;
											   [callback] should call requestAnimationFrame(this) (recursively) to get a smooth animation



	GLOBALS: //(0x000002df)➞
		Data_storing:
			Cookies:
			Storage:
				>min. 2 MB allowed
				>this data is not sent to sites on each request
				>allows key/value pairs (refered to as a pair from now on) to be saved
				>pair can only consist of strings (NOTE: auto conversion is still a thing)
				localStorage:
					>persists between requests
				sessionStorage:
					>persists between browsers sessions (closing && starting)
			  ĐĐShared_members:_ĐĐ
					setItem([string1], [string2])	: stores a pair
					getItem(<string>)				: returns value by key look up
					removeItem(<string>)			: delete-s pair by key look up
					clear()							: delete-s all members
					key(<int>)						: returns key of pair at index <int>
					length							: number of stored items
		Browser:
			console:
				>the little tab under the dev tools
				.log([...])			: print [...] to the console
				.table([...])
				.trace()
			document:
				>the whole bloody page
				manuvering:
					getElementById(<string>)		: returns reference to first element with id=<string>
					getElementClassName(<string>)	: returns an array like object with references to elements with class=<string>
					getElementTagName(<string>)		: returns an array like object with references to elements with tag=<string>
					querySelector(<string>)			: returns first element matching CSS selector <string> or NULL
					querySelectorAll(<string>)		: returns NodeList of elements matching CSS selector <string>

	OBJECTS: //(0x000002e0)➞
		>javascript is NOT object oriented; do not believe anyone who tells you otherwise
		-it has class-es, but you should not use them they are cancer
			>an object is considert to be an instance of a class only if it was constructed using that particular class-es constructor
			>any object parsed from JSON will be a plain Object
			>Objects act like dynamic associative arrays, for this reason the behaviour of instanceof is non-consistent and non-sensical



	ASYNC: //(0x000002e1)➞
		>other sources will try to sell you that javascript is single threaded
		>NOTE: javascript is NOT single theaded and also uses event loops
		class Promise([function])
			>an object symbolizing the execute of a function
			>reading the state of a ĐpromiseĐ can indicate the status of its execution
			>[function] starts async execution immediately uppon construction
			Member_functions:
				resolve([object])
				all()
				then([function])	: sets callback to be executed when promise has return-ed successfully
				catch([function])	: sets callback to be executed when promise failed
				reject()			: returns failed promise




	EVENTS: //(0x000002e2)➞
		>javascript is a misunderstood language; because it has C style syntax people think it should be written as C,
		  while in reality javascript ment to be fully event oriednted; by the seems of it current standart writers
		  are confused too
		>javascript is so misunderstood that over the years even the devs got confused in the making;
		  now its a ruined incomrehansible mess that belongs to hell
		>NOTE: do not attempt to treat javascript as it were not event oriented and
		        do not indulge yourself with the lie that OOP has not partially replaced its
				event orientedness,
				because youre going to shoot yourself in the foot (see AT "./Observers")
		class Event
			>propagates upwards; ie. after the most specific elements event fired, the event progresses upwards calling all listenners in the way
				{ // in the bellow example both handlers are called
				  //  IF innerDiv is clicked
					<div id=outerDiv onclick="myHandlerFucktion1">		// called second
						<div id=innerDiv onclick="myHandlerFucktion1">	// called first
						</div>
					</div>
				  // ----
					div {
						width: 50%;
						height: 50%;
						border: solid black 3px;
					}
				}
			Handler_chain:
				// what order are per element handlers fired?
				most specific -> least specific -> action /*?!*/ -> default
			Member_function:
				preventDefault()						: do not call browser defined event handler
				stopPropagation()						: do not propagate upwards
			Member_variables:
				target									: the source element which fired *this
			¤types
				animationend
				transitionend	// CSS transition finished (or Rust dev loaded the page)
				click 
				message			// only relevant for ĐworkersĐ
				mouseover
				mouseout
				mousedown
				mouseup
				mousemove
				Keydown
				focus
				submit
				blur
				change
				load			// browser finished loading page
				unload
				resize
		Relevant_language_elements:
			[element].addEventListener([type], [func], [bool])	: when [type] is fired [func] will be called;
																   if bool is true the event takes precendence over the elements childrens
																   akin listenners and will not be called on upwards propagation
			[element].removeEventListener([type], [listener], bool)
			string element.on[Type]								: script to be ran when [type] is fired;
																   if a single function is set parenthases can be ommited;
																   NOTE: [type]s first letter is capitalized
																   { myElement.onClick = () => { console.log("msg") }; }
		Observers:
			-problem statement:
				>browsers attempt to optimize
				-lets suppose we have the following code:
					{ // HTML
						<div id=myDiv style="width: 100px; height: 100px; background: green;">
						</div>
					  // JavaScript
						let hMyDiv = document.getElementById('a'); // Handle for myDiv (our single tag)

						function reeeeeeSize(){
							hMyDiv.style.width = Math.floor(Math.random() * 1000) + 100 + "px";	// Resize myDivs width randomly
						}

						while(true){	// Repeatedly resize
							reeeeeeSize(hMyDiv);
						}
					}
					>the browser thinks: hm, i have no reason to render all these rapid changes the user only needs the end result anyways
					>following this logic NO CHANGES ARE VISUALLY RENDERED UNTIL THERE ARE SYNCRONOUS SCRIPTS EXECUTING
					>result the above example to never render
				-consequences:
					1. Animations cannot be programmed using the Main thread performing iteration
					2. Querying rendered positions is border line useless
				-example for the second point (modified from the previous):
					{ // HTML
						<div id=myDiv style="width: 100px; height: 100px; background: green;">
						</div>
					  // JavaScript
						let hMyDiv = document.getElementById('a'); // Handle for myDiv (our single tag)

						function reeeeeeSize(){
							hMyDiv.style.width = Math.floor(Math.random() * 1000) + 100 + "px";	// Resize myDivs width randomly
						}

						reeeeeeSize();										// Resize
						console.log(hMyDiv.getBoundingClientRect().width);	// Query size
					}
					>when we query the width, the return-ed value corresponds to the divs size before it was altered
			>ĐobserversĐ are the OO solution to an event driven problem in an event oriented language
			>an ĐĐobserverĐĐ waits/monitors for some kind of change and executes a callback uppon encountering it
			>out of pure retardation ĐobserversĐ are implemented as class-es instead of being integrated into the language
Purple(		// fucking depricated
			Variable_observer:	
				>used for monitoring the changes of an object |such as value changes|
				[var].observe||)
			Design_pattern:
				class Observer([callback])
					Member_Functions:
						observe([target], [options])
			class MutationObserver()
		Workers:
			class Worker([path])	: creates worker executing script at [path]
			>true multithreading threading
			>worker scopes are separeted from the main thread (and eachother)
			>to transfer data to/from a worker so called ĐĐmessagesĐĐ must be used
			>interchangung messages is done by a set of functions and callback; see BELOW
			Member_variables:
				onmessage			: callback function to be executed when the worker calls the global posMessage()
			Member_Functions:
				postMessage([val])	: sends a message to *this with [val]; inturn the workers internal onmessage callback is fired
				terminate()			: kills *this
			Globals_inside_worker_namespace:
				>become available inside the script *this executes
				onmessage			: callback function to be executed when *this.postMessage() is called
				postMessage([val])	: sends message outwards; calls *this.onmessage
			>the way the worker and main threads message related functions/variables are named makes describing the process confusing;
			  the example below should clarify
			  { // Forwarding a message to a worker
			      // Main thread
					const w = new Worker("myWorker.js");
					w.postMessage("Good morning Sirs!");
				  // myWorker.js
					onmessage = (msg) => {
						console.log("Message from main thread: " + msg.data);
					};
			    // Receiving a message from a worker
				  // Main thread
					const w = new Worker("myWorker.js");
					w.onmessage = (msg) => {
						console.log("Message from worker thread: " + msg.data);
					};
				  // myWorker.js
					setTimeout(
						(msg) => {
							postMessage("Please do the needful and dont redeem!");
						},
						3000
					);
					/* NOTE: the reason we set a time out (ie. wait 3000 miliseconds) is that so
					 *        we can set the onmessage handler before the message is posted;
					 *        normally a the worker would be created, the handler set,
					 *        a message sent to it and one received back, but that would overcomplicate the example
					 */
			  }




	MISC_KEYWORDS: //(0x000002e3)➞
		debugger		: functions as a stand-alone instruction; if a debugger is available it functions as a breakpoint (auto called)



	RELATED_PROGRAMS:   // ?!
		>see all AT "/Programs"
		Browsers:
			Explorer/Edge
			Chrome
			Brave
			Firefox
			Firefox-developer-edition
		rhino	: interactive javascript interpreter developed by Mozilla
		node.js	: non browser runtime environment
            npm     : package manager for node
            {
                cd project
                npm install
                npm start
            }

#define sql: //(0x000002e4)➞\
I------------------------------------------------------\
I------------------------------------------------------\
I------------------------------------------------------\
I			   /$$$$$$   /$$$$$$  /$$      			   \
I			  /$$__  $$ /$$__  $$| $$      			   \
I			 | $$  \__/| $$  \ $$| $$      			   \
I			 |  $$$$$$ | $$  | $$| $$      			   \
I			  \____  $$| $$  | $$| $$      			   \
I			  /$$  \ $$| $$/$$ $$| $$      			   \
I			 |  $$$$$$/|  $$$$$$/| $$$$$$$$			   \
I			  \______/  \____ $$$|________/			   \
I			 				 \__/          			   \
I------------------------------------------------------\
I------------------------------------------------------\
I------------------------------------------------------I
Structured Query Language
	
	>database management language
	>initially developed by IBM
	>attemptsed to be usable by bussinessmen, hence the aspiration to resemble natural language;
	  failed miserably
	>structually and logically good, the language semantics are highly questionable

        Example_Data: //(0x000002e5)➞
            >the following descibes an insane asylum
            >in this hypotetical place patients dont age after entry
            +====================================================================+
            |								Patient								 |
            +====================================================================+
            | name           | biological_age | room | entered    | illness_type |
            +====================================================================+
            | Alice          | 17             | 2    | 1866-07-01 | 10           |
            | Kaffka Tibor   | 41             | 18   | 2020-04-05 | 6            |
            | Mia            | 21             | 2    | 2132-02-17 | 2            |
            | Mumus          | 45             | 2    | 2120-09-30 | 2            |
            | Sam Lowry      | 38             | 22   | 1985-08-30 | 2            |
            | Sitka          | 19             | 24   | 2019-09-04 | 7            |
            | Tinta Vince    | 16             | 23   | 2006-01-06 | 1            |
            | Tyler Durden   | 24             | 2    | 1999-10-15 | 9            |
            | William Dickes | 43             | 11   | 1884-04-04 | 3            |
            +----------------+----------------+------+------------+--------------+
            +===============================================================+
            I						Illness States							I
            +===============================================================+
            I psychopaty | delusion | obsession | ADHD | schizophrenia | id I
            +===============================================================+
            | 1          | 0        | 0         | 0    | 0             | 1  |
            | 0          | 1        | 0         | 0    | 0             | 2  |
            | 0          | 0        | 1         | 0    | 0             | 3  |
            | 0          | 0        | 0         | 1    | 0             | 4  |
            | 0          | 0        | 0         | 0    | 1             | 5  |
            | 1          | 1        | 0         | 0    | 0             | 6  |
            | 1          | 0        | 0         | 1    | 0             | 7  |
            | 1          | 1        | 0         | 1    | 0             | 8  |
            | 1          | 0        | 1         | 0    | 1             | 9  |
            | 0          | 1        | 0         | 0    | 1             | 10 |
            +------------+----------+-----------+------+---------------+----+
            +====================+
            |		 Room		 |
            +====================+
            | num | floor | beds |
            +====================+
            | 2   | 1     | 4    |
            | 11  | 2     | 3    |
            | 18  | 2     | 2    |
            | 22  | 2     | 1    |
            | 23  | 2     | 1    |
            | 24  | 2     | 1    |
            | 25  | 2     | 1    |
            +-----+-------+------+
            ¤reproduce with
              { @begin=sql@
                CREATE DATABASE Asylum;
                CREATE TABLE patient (name VARCHAR(128) DEFAULT "N/A" NOT NULL,
                                        biological_age INT NOT NULL,
                                        room INT,
                                        entered DATE DEFAULT CURRENT_TIMESTAMP NOT NULL,
                                        illness_type INT NOT NULL);
                CREATE TABLE room (num INT not NULL,
                                        floor INT DEFAULT 1 NOT NULL,
                                        beds INT DEFAULT 1);
                CREATE TABLE illness_type (psychopaty BOOLEAN DEFAULT FALSE,
                                        delusion BOOLEAN DEFAULT FALSE,
                                        obsession BOOLEAN DEFAULT FALSE,
                                        ADHD BOOLEAN DEFAULT FALSE,
                                        schizophrenia BOOLEAN DEFAULT FALSE);
                ALTER TABLE patient ADD PRIMARY KEY(name);
                ALTER TABLE room ADD PRIMARY KEY(num);
                ALTER TABLE illness_type ADD id INT AUTO_INCREMENT PRIMARY KEY;
                INSERT INTO room (num, floor, beds) VALUES (2, 1, 4),
                                                            (11, 2, 3),
                                                            (18, 2, 2),
                                                            (22, 2, 1),
                                                            (23, 2, 1),
                                                            (24, 2, 1),
                                                            (25, 2, 1);
                INSERT INTO illness_type (psychopaty, delusion, obsession, ADHD, schizophrenia)
                        VALUES (TRUE, FALSE, FALSE, FALSE, FALSE),
                                (FALSE, TRUE, FALSE, FALSE, FALSE),
                                (FALSE, FALSE, TRUE, FALSE, FALSE),
                                (FALSE, FALSE, FALSE, TRUE, FALSE),
                                (FALSE, FALSE, FALSE, FALSE, TRUE),
                                (TRUE, TRUE, FALSE, FALSE, FALSE),
                                (TRUE, FALSE, FALSE, TRUE, FALSE),
                                (TRUE, TRUE, FALSE, TRUE, FALSE),
                                (TRUE, FALSE, TRUE, FALSE, TRUE),
                                (FALSE, TRUE, FALSE, FALSE, TRUE);
                INSERT INTO patient (name, biological_age, room, entered, illness_type)
                            VALUES ("William Dickes", 43, 11, DATE("1884-04-04"), 3),
                                    ("Tinta Vince", 16, 23, DATE("2006-01-06"), 1),
                                    ("Mumus", 45, 2, DATE("2120-09-30"), 2),
                                    ("Kaffka Tibor", 41, 18, DATE("2020-04-05"), 6),
                                    ("Alice", 17, 2, DATE("1866-07-01"), 10),
                                    ("Sitka", 19, 24, DATE("2019-09-04"), 7),
                                    ("Tyler Durden", 24, 2, DATE("1999-10-15"), 9),
                                    ("Mia",21, 2, DATE("2132-02-17"), 2),
                                    ("Sam Lowry", 38, 22, DATE("1985-08-30"), 2);
                ALTER TABLE patient ADD CONSTRAINT FOREIGN KEY (illness_type) REFERENCES illness_type(id);
                ALTER TABLE patient ADD CONSTRAINT FOREIGN KEY (room) REFERENCES room(num);
              @end=sql@}

    PROGRAMS: //(0x000002e6)➞
----------------------
        sqlite: //(0x000002e7)➞
----------------------

	>disributed model
	>reads/writes directly to memory
	>can use (single) files, runtime memory or be embeded into the executable

	sqlite3 [options] [FILE] [sql]	: interactive sqlite shell

	Commands:
		.shell [...]
		.schema [table]
		.exit
		.quit

    YYY:
        "C/3th party libraries/sqlite3"

--------------------------
        postgresql: //(0x000002e8)➞
--------------------------

	>server-client model

	psql [options] -U <username> -d <database>	: interactive postgresql shell

	Commands:
		\d <table>	: describe <table>

---------------------
        mysql: //(0x000002e9)➞
---------------------
	>server-client model

	XXX:
		>running mariadb
		mysql [...]

	Set_up:	
.		### Running Mariadb ###
			1. Install the mariadb package
			2. Install mariadb		// necessery only once on a given system
				mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
			3. Run the daemon
				systemctl start mariadb
		#
        
		### Using mysql as a normal user ###    //(0x00000234)➞
			>since sql uses an inner system for identifying users a few hoops must be jumped
			>root is always preregistered
			1. Log in as root
				sudo mysql
			2. Create a new user
				CREATE USER '[your_name]'@'localhost' IDENTIFIED BY '[password]';
				>NOTE: [password] doesnt have to be the same as the users system log in password
			3. Grant privileges to the new user
				GRANT ALL PRIVILEGES ON *.* TO '[your_name]'@'localhost';
				FLUSH PRIVILEGES;
				>NOTE: this grants all privileges, which may not be a very bright idea on a shared system;
						granting partial privileges is recommended and detailed BELOW
			4. Exit
				exit
			5. Log in as yourself
				mysql --user=[your_username] -p
				-NOTE: the following alias is recommended (see AT "/Bash/Builtins/alias")
					alias mysql="mysql --user=${USER} -p"
		#

	mysql [options]		: starts (interactive) sql client
		--host=[domain]		: sets host
		--port=<int>		: sets port
		--user=<string>		: specifies username to use
		--password=<string>	: specifies pass-word to use
		-p					: prompt for pass-word; recommended over "--password" (see ABOVE)
		XXX:
			GNU Readline library	: used for all input operations (see AT "C++/Readline\/History")
		Files:
			.mysql_history	: contains the list of previously interactively entered lines
		Environment_variabes:
			${EDITOR}		: read by the "edit" command (see BELOW)
			${MYSQL_PS1}	: prompt string 1; the string which is displayed each time before the interpreter allows for input
		Commands:
			edit || \e		: opens a temporary file with the users set ${EDITOR}; uppon reaching the
							   next ';' the text from this temporary file is run as a script
			source [file]	: run [file] as a script
			use [database]	: selects [database] as the database to operate on
			exit			: terminate normally


	mycli [options]	: mysql wrapper with auto completion and syntax highlighting
		NOTE: flag -p is a pitfall, see BELOW
		-p <string>		: pass authentication password as <string>;
						   if ommited, securely asking on stdin is the default
		-u <string>		: pass user to use as <string>; the default is mysql

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Other_implementations: //(0x000002ea)➞
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+---------------------------+---------------------------+
|      Parent Company       |          Database         |
+---------------------------+---------------------------+
| Microsoft Corporation     | Microsoft SQL Server      |
| Oracle Corporation        | Oracle Database           |
| IBM                       | IBM Db2                   |
| Amazon Web Services (AWS) | Amazon Aurora             |
| Google                    | Google Cloud Spanner      |
+---------------------------+---------------------------+
	
//------------------------------------
//------------------------------------

	FILES: //(0x000002eb)➞
		.sql		: SQL script
		.pls		: PL/SQL script
		.pks		: SQL package
		.pkb		: SQL package body
		.tab		: SQL script for table creation
		.tbl		: SQL script for table creation

	COMMENTS: //(0x000002ec)➞
		-- <string>		: single line comment

	SEMICOLONS: //(0x000002ed)➞
		>all sql statements are terminated by a single semicolon ';'
		>sql statements are not run until a semicolon is encountered
		>interpreter commands (see ABOVE) however dont take semicolons {exit}

	typenameS: //(0x000002ee)➞
		Logical:
			BIT
			BOOLEAN
		Numeric:
			Integer:
				+-----------+---------+--------------------+----------------+
				| Name		| Storage |	   Signed Range    | Unsigned Range |
				+-----------+---------+--------------------+----------------+
				| TINYINT	|		1 |	         -128, 127 |         0, 255 |
				| SMALLINT	|		2 |      -32768, 32767 |       0, 65535 |
				| MEDIUMINT |		3 |  -8388608, 8388607 |    0, 16777215 |
				| INTEGER	|		4 |      -2^31, 2^31-1 |      0, 2^32-1 |
				| BIGINT	|		8 |      -2^63, 2^63-1 |      0, 2^64-1 |
				+-----------+---------+--------------------+----------------+
			DECIMAL
			NUMERIC
			FLOAT
			REAL
			DOUBLE PERCISION
		Time:
			DATE
			TIME
			DATETIME
			TIMESTAMP
			YEAR
			-zero values:
				+------------+---------------------+
				| Data Type  |    “Zero” Value     |
				+------------+---------------------+
				| DATE       |          0000-00-00 |
				| TIME       |            00:00:00 |
				| DATETIME   | 0000-00-00 00:00:00 |
				| TIMESTAMP  | 0000-00-00 00:00:00 |
				| YEAR       |                0000 |
				+------------+---------------------+
		String:
			CHAR(<int>)			: <int> long char array; uninitialized indexes are filled in with a specific value (usually spaces);
								   used when the data is known to have a consistent length
			VARCHAR(<int>)		: "VARiable CHAR"; <int> long char array; uninitialized indexes are ignored, however preserved regardless
			BINARY
			VARBINARY
			BLOB
			TEXT
			ENUM
			SET 

	OPERATORS: //(0x000002ef)➞
		General:
		Logical:
			[column] = [value]			: equals; NOTE: SQL uses a single '=' instead of 2 for
										   comparisons oppose to most computer languages;
										   however its only logical as it doesnt have an assignment operator
			[column] != [value]			: not equals
			[column] > [value]			: greater than
			[column] < [value]			: lesser than
			[column] >= [value]			: greater than or equals to
			[column] <= [value]			: lesser than or equals to
			[column] BETWEEN [value-1] AND [value-2]
			NOT [bool]
			[bool-1] AND [bool-2]
			[bool-1] OR [bool-2]
			[string-1] LIKE [string-2] : regex match
			[regex]:
				%	: match any number of chars
				_	: match exactly one char
		Numeric:
			-
			+
			*
			/
			%	MOD
		String:
			||		: concatenation; support is disabled by default; XXX: SET sql_mode='PIPES_AS_CONCAT';
		IN:
			pass
		¤examples:
			{@begin=sql@
			  -- LIKE; select patients with 'y' char in their name;
			  --	NOTE: normally either LOWER() or UPPER would be
			  --	called for humanly logical results,
			  --	however the example tries to keep it simple
			  > SELECT p.name FROM patient p WHERE p.name LIKE '%y%';
			  -- -----------
			  -- --- IN ---
			  > DELETE FROM patient WHERE biological_age IN (SELECT biological_age FROM patient p WHERE p.biological_age > 40);
			@end=sql@}

	?!:
		HAVING
		PROCEDURE

	DATA_DEFINITION_LANGUAGE: //(0x000002f0)➞
		CREATE [object]		 	: creates [object]
			DATABASE <string>							: database named <string>
			TABLE <string> ([decl-1(, [decl-num])*])	: table named <string> with columns defined by [decl-uint]
				[decl]:
					<string> <typename>( DEFAULT [value]( NOT NULL))
					[value]:
						<int>
						"<string>"
						CURRENT_TIMESTAMP

	DATA_MANIPULATION_LANGUAGE: //(0x000002f1)➞
		DELETE FROM [table] ([where])	: NOTE: not specifying [where] will select (ie. delete) all rows
		DROP [object] <string>
		INSERT INTO [table] ([columns]+) VALUES ([value]+)
		UPDATE [table] SET ([column] = [value])+ ([where])
		COMMIT	//?!
		ALTER TABLE <string> [cmd]
			ADD [?!]
				[column]
				PRIMARY KEY([column name])
				CONSTRAINT [constraint]
					[constraint]
						<string> [type]
							[type]
								[column_type] [column]+
									PRIMARY KEY
									UNIQUE
								[check_type]
									CHECK([logic])
						FOREIGN KEY [column] REFERENCES [column] [on_delete]
							[on_delete]:
									>the action to perform when the referenced column is delete-d
								ON DELETE [wat_do]
									[wat_do]
										CASCADE		: remove children too
			DROP [column]
			MODIFY [column]
			RENAME COLUMN [string-1] TO [string-2]
			[var] = [value]
				AUTO_INCREMENT
		{@begin=sql@
		  // --- CHECK constraint ---
		  > ALTER TABLE room ADD CONSTRAINT floor_num CHECK(floor BETWEEN -2 AND 100);
		@end=sql@}

	DATA_QUERY_LANGUAGE: //(0x000002f2)➞
		SHOW [object]
			DATABASES
			TABLES
			COLUMNS FROM [table]
		DESCRIBE [table]
		Selecttion:
			[select] ([where] ([order]) ([limit]))
			[select] ([having] ([order]) ([limit]))
			[select]:			// note how select can select any value
				SELECT [subject] (AS <string>) FROM [table] (AS <string>)	: returns information according to [subject] from inside [table];
																			   see explanation of "AS" keywords BELOW as alias-ing
					Aliasing:
						[...] AS <string>		: gives [...] a temporary name for the span of the query; column names given by
												   functions are not very human readable, therefor its good practice to always alias these
					[subject]:
						[column]
						([rep])  *
							[rep]:
								ALL
								DISTINCT
			[where]:
				WHERE [logic]	: specifies criteria to be met by selected data; [logic] is a sane logical
								   expression composed of operator-s and data (see AT "../Operators")
			[having]:
				>as oppose to WHERE, its logic can contain aggregate functions
				HAVING [logic]
			[order]:
				ORDER BY [column] [aspect]
					DESC
					ASC
					RAND()
			[limit]:
				LIMIT <int>			: limits the amount of records return-ed to a maximum of <int>
			GROUP BY
		View:
			CREATE VIEW [name] AS [selection];
			>a saved and named select query
			>NOTE: '*' expansion causes new columns to show up
		¤examples
			{ @begin=sql@
			  -- Most basic querry
			  > SELECT * FROM patient;
			  +----------------+----------------+------+------------+--------------+
			  | name           | biological_age | room | entered    | illness_type |
			  +----------------+----------------+------+------------+--------------+
			  | Alice          | 17             | 2    | 1866-07-01 | 10           |
			  | Kaffka Tibor   | 41             | 18   | 2020-04-05 | 6            |
			  | Mia            | 21             | 2    | 2132-02-17 | 2            |
			  | Mumus          | 45             | 2    | 2120-09-30 | 2            |
			  | Sam Lowry      | 38             | 22   | 1985-08-30 | 2            |
			  | Sitka          | 19             | 24   | 2019-09-04 | 7            |
			  | Tinta Vince    | 16             | 23   | 2006-01-06 | 1            |
			  | Tyler Durden   | 24             | 2    | 1999-10-15 | 9            |
			  | William Dickes | 43             | 11   | 1884-04-04 | 3            |
			  +----------------+----------------+------+------------+--------------+
			  -- -----------
			  -- DISTINT; list all rooms with someone living in it, discard duplicates
			  > SELECT DISTINCT p.room FROM patient p;
			  2
			  11
			  18
			  22
			  23
			  24
			  -- -----------
			  -- ORDER BY; list names in reverse alphabetical order
			  > SELECT p.name FROM patient p ORDER BY name DESC;
			  "William Dickes"
			  "Tyler Durden"
			  "Tinta Vince"
			  "Sitka"
			  "Sam Lowry"
			  "Mumus"
			  "Mia"
			  "Kaffka Tibor"
			  "Alice"
			  -- -------------
			  -- --- JOIN ---
			      -- INNER
				  > SELECT patient.name, room.floor FROM patient INNER JOIN room ON patient.room = room.num;
				  Alice          | 1
				  Mia            | 1
				  Mumus          | 1
				  Tyler Durden   | 1
				  William Dickes | 2
				  Kaffka Tibor   | 2
				  Sam Lowry      | 2
				  Tinta Vince    | 2
				  Sitka          | 2
			  -- -------------
			  -- VIEW
			  > CREATE VIEW allp AS SELECT * FROM patient;
			  > SELECT * FROM allp;
			  ...
			  -- HAVING; listing the room which have more than one occupant
			  > SELECT num FROM (room LEFT JOIN patient ON room.num = patient.room) HAVING COUNT(room.num) > 1;
			  -- -----------
			  -- NESTED SELECT; people who are older than the average
			  > SELECT name FROM patient WHERE biological_age > (SELECT AVG(biological_age) FROM patient);
			@end=sql@}

	DATA_CONTROL_LANGUAGE: //(0x000002f3)➞
		>deals with users and user permissions
		GRANT [what] TO [who]
			[what]:
				[role]
				[privilege] [subject]
					[privileges]:
						ALL PRIVILEGES
						SELECT
						UPDATE
						DELETE
					[subject]:
						ON [database].[table]
						ANY TABLE
			[who]:
				[user]
				[role]
		CREATE USER '[string-1]'@'[string-2]' IDENTIFIED BY '[string-3]'
		CREATE ROLE <string>

	TRANSACTION_CONTOL_LANGUAGE: //(0x000002f4)➞
		pass


	Functions: //(0x000002f5)➞
		RAND()
		NVL([value-1], [value-2])	: returns [value-1] unless it is NULL, in which case it returns [value-2]
		COALESCE([...])				: returns the first argument which is not NULL
		Column_oriented:
			COUNT([column])
			AVG([column])
			Number_specific:
				MIN([column])
				MAX([column])
				SUM([column])
		Num_oriented:
			ROUND([int-1], [int-2])		: returns [int-1] rounded to [int-2] nums of decimal places
			TRUNC([int-1], [int-2])		: returns [int-1] truncated to [int-2] nums of decimal places; [int-2] is free to me negative
			ABS([num])					: returns the absolute value of [num]
			POWER([num], <int>)			: returns [num] raised to the <int>th power
			SQRT([num])					: returns the square root of [num]
			Trigonometry:
				SIN([num]) 		: returns the sine
				COS([num]) 		: returns the cosine
				TAN([num]) 		: returns the tangent
				COT([num]) 		: returns the cotangent 
				ASIN([num]) 	: returns the arc sine
				ACOS([num]) 	: returns the arc cosine
				ATAN([num]) 	: returns the arc tangent 
		String_oriented:
			ASCII([char])						: returns [char]s ascii code
			UPPER(<string>)						: returns <string> converted to all upper case
			LOWER(<string>)						: returns <string> converted to all lower case
			INITCAP(<string>)					: returns <string> with initials capitalized
			LENGTH(<string>)					: returns <string>s length; when operating on CHAR(<int>) the length is always equal to <int>
			TRIM(<string>)						: returns <string> with all preceding and leading whitespaces removed
			TRIM([string-1] FROM [string-2])	: returns [string-2] with all preceding and leading chars contained in [string-1] removed
			REPLACE([string-1], [string-2])		: returns [string-1] with all occurrences of [string-2] delete-d
			REPLACE([string-1], [string-2], [string-3])	: returns [string-1] with all occurrences of [string-2] replaced with [string-3]
			SUBSTR(<string>, [int-1], [int-2])	: returns [int-2] chars from <string>s [int-1]th positions;
												   [int-1] is 1 indexed and negative values are counted from the back
			LPAD([string-1], <int>, [string-2])	: returns [string-1] cropped/left padded to <int> chars; [string-2] is the padding
			RPAD([string-1], <int>, [string-2])	: returns [string-1] cropped/right padded to <int> chars; [string-2] is the padding
			MD5(<string>)						: returns md5 hash of <string>
		Date_oriented:
			STR_TO_DATE("<string>", "[format]")		: returns DATE constructed from <string> which is of format [format]
			DATE("<string>")						: returns DATE constructed from <string> which is of format <string> is of the format "%Y-%m-%d"
			EXTRACT([dpart] FROM [DATE])			: return [dpart] value from [DATE]
			[dpart]([DATE])							: return [dpart] value from [DATE]
			[dpart]:
				YEAR
				MONTH
				DAY
				HOUR
				MINUTE
				SECOND
			[format]:
				%a	: abbreviated weekday name (Sun to Sat)
				%b	: abbreviated month name (Jan to Dec)
				%c	: numeric month name (0 to 12)
				%D	: day of the month as a numeric value, followed by suffix (1st, 2nd, 3rd, ...)
				%d	: day of the month as a numeric value (01 to 31)
				%e	: day of the month as a numeric value (0 to 31)
				%f	: microseconds (000000 to 999999)
				%H	: hour (00 to 23)
				%h	: hour (00 to 12)
				%I	: hour (00 to 12)
				%i	: minutes (00 to 59)
				%j	: day of the year (001 to 366)
				%k	: hour (0 to 23)
				%l	: hour (1 to 12)
				%M	: month name in full (January to December)
				%m	: month name as a numeric value (01 to 12)
				%p	: aM or PM
				%r	: time in 12 hour AM or PM format (hh:mm:ss AM/PM)
				%S	: seconds (00 to 59)
				%s	: seconds (00 to 59)
				%T	: time in 24 hour format (hh:mm:ss)
				%U	: week where Sunday is the first day of the week (00 to 53)
				%u	: week where Monday is the first day of the week (00 to 53)
				%V	: week where Sunday is the first day of the week (01 to 53). Used with %X
				%v	: week where Monday is the first day of the week (01 to 53). Used with %X
				%W	: weekday name in full (Sunday to Saturday)
				%w	: day of the week where Sunday=0 and Saturday=6
				%X	: year for the week where Sunday is the first day of the week. Used with %V
				%x	: year for the week where Monday is the first day of the week. Used with %V
				%Y	: year as a numeric, 4-digit value
				%y	: year as a numeric, 2-digit value
		Case:
			CASE [logic] (THEN [value])+ (ELSE [value]) END
		¤examples
			{ @begin=sql@
			  -- AVG
			  > SELECT AVG(p.biological_age) FROM patient p;
			  29.3333
			  -- -----------
			  -- COUNT
			  > SELECT COUNT(p.name) FROM patient p;
			  9
			  -- -----------
			  -- MIN/MAX
			  > SELECT MIN(p.biological_age) FROM patient p;
			  16
			  -- -----------
			  -- SUM
			  > SELECT SUM(p.biological_age) FROM patient p;
			  264
			  -- -----------
			  -- ROUND
			  > SELECT ROUND(AVG(p.biological_age), 0) FROM patient p;
			  29
			  -- -----------
			  -- STR_TO_DATE
			  > SELECT SUM(p.biological_age) FROM patient p;
			  "Alice"
			  "William Dickes"
			  -- -----------
			  -- CASE logic
			  > SELECT name, CASE WHEN biological_age > 35 THEN "old" ELSE "young" END AS "Youth" FROM patient;
			  +----------------+-------+
			  | name           | Youth |
			  +----------------+-------+
			  | Alice          | young |
			  | Kaffka Tibor   | old   |
			  | Mia            | young |
			  | Mumus          | old   |
			  | Sam Lowry      | old   |
			  | Sitka          | young |
			  | Tinta Vince    | young |
			  | Tyler Durden   | young |
			  | William Dickes | old   |
			  +----------------+-------+
			  -- -----------
			  -- New domain specific database/user
			  > CREATE DATABASE spring;
			  > CREATE USER 'spring'@'localhost' IDENTIFIED BY 'passwd';
			  > GRANT ALL PRIVILEGES ON spring.* TO 'spring'@'localhost';
			  > FLUSH PRIVILEGES;
			@end=sql@}

	COMPLEX_EXAMPLES: //(0x000002f6)➞
		{ @begin=sql@
		-- Using the ANSII concatenation operator
			> SET sql_mode='PIPES_AS_CONCAT';
			> SELECT p.name || " is insame." AS Fact FROM patient p ORDER BY RAND() LIMIT 1;
			+------------------+
			| Fact             |
			+------------------+
			| Alice is insame. |
			+------------------+
		-- Getting average of literals
			> SELECT SUM(t.s)/COUNT(t.s) FROM (SELECT 10 AS s UNION
												SELECT 90 AS s UNION
												SELECT 42 AS s) t;
			> SELECT AVG(t.s) FROM (SELECT 10 AS s UNION
									SELECT 90 AS s UNION
									SELECT 42 AS s) t;
		-- Getting the name of the youngest
			> SELECT p.name FROM (SELECT * FROM patient ORDER BY biological_age LIMIT 1) as p;
			-- OR
			> SELECT p.name FROM patient p WHERE biological_age = (SELECT MIN(i.biological_age) FROM patient i);
			"Tinta Vince"
		-- Getting the minimum and maximum biological age from patients who entered durring the XXI. century
			> SELECT MIN(p.biological_age) AS "Min age", MAX(p.biological_age) AS "Max age"
				FROM patient p WHERE YEAR(p.entered) BETWEEN 2001 AND 2100;
			| Min age | Max age |
			| 16      | 41      |
		-- Getting average age of floor 1
			> SELECT AVG(p.biological_age) "Average of floor 1"
				FROM (SELECT patient.biological_age, room.floor
						FROM patient INNER JOIN room ON patient.room = room.num) p
				WHERE p.floor = 1;
			26.7500
		-- Getting average age by floor
			> SELECT AVG(p.biological_age) "Average age",
					p.floor
				FROM (SELECT patient.biological_age, room.floor
						FROM patient INNER JOIN room ON patient.room = room.num) p
				GROUP BY p.floor;
			26.7500  | 1
			31.4000  | 2
		-- Getting a list of the psychopaths
			> SELECT p.name FROM patient p
				INNER JOIN illness_type t ON p.illness_type = t.id
				WHERE t.psychopaty = TRUE;
			"Tinta Vince"
			"Kaffka Tibor"
			"Sitka"
			"Tyler Durden"
		-- Getting the number of occuped rooms
			> SELECT COUNT(DISTINCT p.room) FROM patient p;
			6
		@end=sql@}

~~~~~~~~~~~~~~~~~~~~
	EMBEDDED SQL
~~~~~~~~~~~~~~~~~~~~

	>also made by IBM
	>the idea is to place literal SQL statements to source files of compiled programming languages
	>a special preprocessor generates regular source code with library calls and macros substituted to the place of the SQL statements

	Support:
		DB2:
			dclgen
			>"IBM Database 2"
			>embedding is part of the toolkit
			¤languages
				>C/C++
				>FORTRAN
				>COBOL
				>REXX
		DBMS:
			>no info on how the tool chain is implemented
			¤languages
				>C/C++
				>COBOL
				>MUMPS
		PostgreSQL:
			ecpg
			>seems to be the only FOSS implementation in existence
			¤languages
				>C/C++
		Pro*C:
			>for Oracle Database

	
	Extensions:
		.ec(pp)		: C source with embeded SQL; referes to ESQL/C(++)
		.sqc		: C source with embeded SQL; combination of SQL and C
		.pgc		: C source with embeded SQL; PostgreSQL specific


	Syntax:
		<start_token> <statement> <end_token>
			<start_token>  -  EXEC SQL
			<statement>    -  spiced SQL statement; see BELOW
			<end_token>    -  ';' not inside a string literal

		Special_Statements:
			CONNECT TO <db> AS <connection>;
			DISCONNECT <con>
				<connection>	: one specific connection
				ALL				: every connection

		Variables:
			:<name>
			>native language variable interfering with sql
			{}

	Example:
		{@begin=sql@
			$ psql -U anon -d testdb
			psql (15.2)
			Type "help" for help.

			testdb=> \d test
							  Table "public.test"
			 Column |     Type     | Collation | Nullable | Default
			--------+--------------+-----------+----------+---------
			 i      | integer      |           |          |
			 text   | character(4) |           |          |

			testdb=> select * from test;
			 i | text
			---+------
			 1 | aaaa
			 3 | bbbb
			(2 rows)
		@end=sql@}
		{ // embeded_test.sqc
			// @COMPILECMD ecpg $@
			#include <stdio.h>

			signed main(){
				EXEC SQL BEGIN DECLARE SECTION;
				int i;
				char c[4];
				EXEC SQL END DECLARE SECTION;

				EXEC SQL CONNECT TO testdb AS myconnection;
				EXEC SQL SELECT i, text INTO :i, :c FROM test WHERE i = 1;

				puts(c);

				return i;
			}
		}

#define nosql: //(0x000002f7)➞\
I----------------------------------------------------------\
I----------------------------------------------------------\
I----------------------------------------------------------\
I     /$$   /$$            /$$$$$$   /$$$$$$  /$$          \
I    | $$$ | $$           /$$__  $$ /$$__  $$| $$          \
I    | $$$$| $$  /$$$$$$ | $$  \__/| $$  \ $$| $$          \
I    | $$ $$ $$ /$$__  $$|  $$$$$$ | $$  | $$| $$          \
I    | $$  $$$$| $$  \ $$ \____  $$| $$  | $$| $$          \
I    | $$\  $$$| $$  | $$ /$$  \ $$| $$/$$ $$| $$          \
I    | $$ \  $$|  $$$$$$/|  $$$$$$/|  $$$$$$/| $$$$$$$$    \
I    |__/  \__/ \______/  \______/  \____ $$$|________/    \
I                                        \__/              \
I----------------------------------------------------------\
I----------------------------------------------------------\
I----------------------------------------------------------I

    >umbrella term for databases which do no support SQL
    >does not deserve their their own chapters because they tend to be shit

    Mongodb:
        >NoSQL database
        >nudev solution for data management
        >uses OO javascript
        >each records are stored as JSON
        >no tables, only ĐĐcollectionsĐĐ which are arbitrary clusters of records
        >NOTE-TO-SELF: (You) fucking hate it; enough chances were given to it, its trash
        Programs:
            daemon mongodb
            mongo           : shell
        Language:
            >based on js
            use <database>      : select the current database to <databases>;
                                   if no such databse exists, its created
            namespace db
                <database>
                    insertMany(list)
                    find(object)

#define os\
#define operating_systems: //(0x000002f8)➞\
I--------------------------------------------\
I--------------------------------------------\
I--------------------------------------------\
I              /$$$$$$   /$$$$$$             \
I             /$$__  $$ /$$__  $$            \
I            | $$  \ $$| $$  \__/            \
I            | $$  | $$|  $$$$$$             \
I            | $$  | $$ \____  $$            \
I            | $$  | $$ /$$  \ $$            \
I            |  $$$$$$/|  $$$$$$/            \
I             \______/  \______/             \
I--------------------------------------------\
I--------------------------------------------\
I--------------------------------------------I

	Resposabilities:
		>protecting the hardware and data from programs and the user
        >facading hardware interfaces
		-sharing resources between programs
			>allocating memory
			>processor scheduling
		>error detecting

	Important_operating_systems:
        Multix
		Unix
		Linux
		FreeBSD
		OpenBSD
		Plan9
		DOS
		Windows <...>
		OS X
		IOS
		Android
        Nix_family:
                             .- Linux --- distros {Android}
                            /
            Multix --- Unix --- *BDS
                            \
                             '- Plan9

    System_calls:
        >an API defined by the OS
        >exposes hardware operations to the user in a controlled (safe) manner

    Process:
        >a running instance of software
        >modern OS-es are capable of ĐĐmultiprocessingĐĐ;
          where multiple run seemingly or actually at the same time

    Memory:
        >an ĐĐaddress spaceĐĐ is a range of memory; it is used as an umbrellaterm
        Virtual_memory:
            >"virtual address space"/"linear address space"
            >the operating system may virtualize memory for each program
            >from the programs perspective, they are the only ones using memory

    Privelage_separation:
        >operating systems would like to make sure random processes
          owned by Bob the janitor cannot crash everything
        Mode_separation:
            kernel mode: trusted internal software
            user mode:   anything else installed/executed by the user
            >basic method of separation
            >modes have their own address spaces

    Modules:
        { drivers }
        >a kernel module is an potional component of the kernel
        >module-s are often allowed to define their own systemcalls
        Static:
            >compiled into the kernel
            >generally considered more secure
        Dynamic:
            >"Loadable Kernel Module"/"LKM"/"KLD" // ?!
            >separetly compiled binaries enableable at runtime
            >primary way to implement rootkits

	File_fragmentation: // is this not a filesystems thing?; ?!
		>when files are delete-d gaps are left in memory
		>if the operating system decides it may break a file into multiple smaller pieces an save them not directly next to each other
		>a file being stored in non continuous blocks is called ĐĐfragmentedĐĐ
		>used to maximize data capacity/spare disk health
		>causes I/O overhead
		>handled seamlessly by modern operating systems
		>the process of ĐĐdefraggingĐĐ (removing ĐfragmentationĐ) used to be a giant concern (and pain in the ass)

    Boot_loading:
        >the code responsible for fully booting a machine
        >the first thing executing after a successful POST and after whatever mobo firmware exits
        >an OS could contain its own boot loader or depend on an external program to pass control to it
        >a boot loader could support launcing multiple OS types/versions
        >when multiple OS-es are installed side by side, its called ĐĐdual bootingĐĐ;
          NOTE: even if there are more than 2 OS-es
        >during Đdual bootingĐ, an interactive menu is presented to the user;
          usually with a timeout to launch a default OS
        GRUB:
            >the most common boot loader used with linux
        Raspi_Arm_magick:
            cmdline.txt     : specifies commandline arguments to pass to the kernel;
                               space separated list; must not contain new lines
            config.txt      :

#define ios: //(0x000002f9)➞\
I---------------------------------------------------\
I---------------------------------------------------\
I---------------------------------------------------\
I            /$$$$$$  /$$$$$$   /$$$$$$	            \
I           |_  $$_/ /$$__  $$ /$$__  $$            \
I             | $$  | $$  \ $$| $$  \__/            \
I             | $$  | $$  | $$|  $$$$$$	            \
I             | $$  | $$  | $$ \____  $$            \
I             | $$  | $$  | $$ /$$  \ $$            \
I            /$$$$$$|  $$$$$$/|  $$$$$$/            \
I           |______/ \______/  \______/             \
I---------------------------------------------------\
I---------------------------------------------------\
I---------------------------------------------------I

	>"Internetwork Operating System"
	>operating system for cisco routers
	>its terribly executed, its insane these guys managed to stay in business considering how much thought went into their software
	>not allowing CIDR notation was a great mistake; have fun typing 255 and 0 left and right

	CONFIGURATION_DIALOG:
		>shown the first time the router is booted
		>shit
		>skip it; whatever you want will be faster that way

	COMMENTS:
		! <...>
		>must be at the begining of the line (white space is ignored)
		>cannot stand after a command

	MODES:
		>child modes are NOT supersets of their parents
		.
		├── User EXEC mode ("enter")	// '>'
		│   │
		│ (pass)  
		│   └── Privileged EXEC mode ("enable")	// '#'
		│       └── Global configuration mode ("configure terminal")
		│           ├── Interface configuration mode ("interface <interface-name>")
		│           ├── DHCP configuration mode ("ip dhcp <dhcp-subcommand>")
		│           ├── Line configuration mode ("line <line-type> <line-number>")
		│           ├── Router configuration mode ("router <routing-protocol>")
		│           ├── VLAN configuration mode ("vlan <vlan-id>")
		│           ├── Security mode ("security")
		│           ├── NTP configuration mode ("ntp <ntp-subcommand>")
		│           └── Policy-map configuration mode ("policy-map <policy-map-name>")
		├── ROM monitor mode ("rommon")
		└── Setup mode ("setup")

	GLOBALS:
		exit
		end

	HELP:
		?
		>the question mark can be used in any context to list all possible valid inputs (sometimes regex clustered)

	SHORT_CUTS:
		>UNIX style
		[ctrl] + [a]	: beginning of the line
		[ctrl] + [e]	: end of the line
		[ctrl] + [b]	: back 1 char
		[ctrl] + [f]	: forward 1 char
		[ctrl] + [d]	: delete (as in the key)
		[ctrl] + [n]	: delete line
		[ctrl] + [k]	: delete from cursor until the end of the line

	SECRET:
		>the ĐsecretĐ is a password separating Privileged EXEC mode from User EXEC mode
		(config) enable secret

	STATE:
		>config operations are done in memory
		>on each boot the "startup-config" is read
		# save run start	: save the current configuration (in memory) to startup-config (to disk)

	DHCP_CONFIGURATION_MODE:
		(config) ip dhcp pool <pool-name>
		>IOS itself will select you which interface the pool belongs to by pattern matching
		>unless you hack/dork better than me, you cant use 1 pool for multiple interfaces
		Pool:
			(dhcp-config)# network <ip-start> <subnet-mask>		: specify from which address to start assigning from and
																   how many host are there (indirectly through the subnet mask),
																   thereby defining the boundaries of the pool
			(dhcp-config)# default-router <ip>					: specify default gateway for clients of the pool
		

	STATIC_ROUTING:
		(config) ip route <destination> <mask> <forward_to>

	RIP:
		(config) router rip
		(config-router) network <network>		: enable advertising <network> over RIP; if an interface
												   is not specified, it will not be routed using RIP;
												   (ie. please specify serial and ethernet too)

	?!:
		# show <noun>
			interfaces
			ip dhcp pool
		(config-if)# no shutdown
		(config-if)# ip <?!>
							address <ip> <subnet-mask>		: assign ip to the routers interface; NOTE: it does no magic over the network
							dhcp pool <pool-name>

#define routeros: //(0x000002fa)➞

	>you guessed it, its an OS for routers
	>Linux based
	>used in less complex environments than where cisco devices/IOS was designed for
	-developed by the company Microtik, which is known for being the company with
	  the worst software naming in existance:
		> OS?                      -> RouterOS
		> System shell?            -> CLI
		> Network management tool? -> Winbox

	DEFAULT_LOGIN:
		Username: admin
		Password: ¬			/* blank */
		>NOTE: must be changed after the first login

	CLI:
		>the RouterOS shell, is literally just refered to as CLI
		>the shell seems to be using GNU Readline or something close enough
		-all arguments follow the form of:
			key=value
        >${PS1} := ${current_section}" > "
		Tree:
			>commands are organized into a tree
			>branches are refered to as sections
			>leafs are refered to as actions
			>actions are executable
			>sections are openable
			>analogous to directory traversing (i also suspect thats how its implemented)
			>multiple segments of the tree may be specified by them being separated by a '/'
			>'/' (at the front) referes to the root of the tree
			>".." will traverse the tree upwards
			>tab completion represents sections and actions with different colors
			{ // Mikrotik command execution example
				> beep			// the beep action executes from root
				
				> port/			// the port section is opened
				/port >	beep	// in the port section, beep is not a valid action
				bad command name beep (line 1 column 1)
				/port > print	// the print action inside the port section prints port information
				#  NAME     CHANNELS  USED_BY         BAUD-RATE
				0  serial0         1  Serial Console       9600
				/port > /beep	// giving the absolute path of beep works from anywhere

				/port > ..		// we move back to root
				>
			}
		certificate/	: manages ssl certificates {webfig}
		console/
		disk/
		file/
		ip/
		ipv6/
		log/
		mpls/
		port/
		ppp/
		queue/
		radius/
		routing/
		snmp/
		special-login/
		system/
            shutdown
		task/
		tool/
		user/		: user management; multiple users are allowed; after setup, deleting "admin" is recommended
			add
			remove
		beep
		quit
		redo
		undo
		password	: interactively configure login credentials
		ping
		import
		export file=<path>  : same the current configuration as a CLI script to <path>;
                               accessable from any section;
                               saves only the configuration of the invoking section
                               and its subsections

	Webfig:
		>webadmin
		>available over http by default, quickly setting up ssl is recommended
		>as capable as the cli

#define linux: //(0x000002fb)➞\
I--------------------------------------------------------------------\
I--------------------------------------------------------------------\
I--------------------------------------------------------------------\
I			  /$$       /$$                              			 \
I			 | $$      |__/                              			 \
I			 | $$       /$$ /$$$$$$$  /$$   /$$ /$$   /$$			 \
I			 | $$      | $$| $$__  $$| $$  | $$|  $$ /$$/			 \
I			 | $$      | $$| $$  \ $$| $$  | $$ \  $$$$/ 			 \
I			 | $$      | $$| $$  | $$| $$  | $$  >$$  $$ 			 \
I			 | $$$$$$$$| $$| $$  | $$|  $$$$$$/ /$$/\  $$			 \
I			 |________/|__/|__/  |__/ \______/ |__/  \__/ (linux)	 \
I--------------------------------------------------------------------\
I--------------------------------------------------------------------\
I--------------------------------------------------------------------I      
//(0x00000245)➞
	>I’d just like to interject for a moment. What I'm referring to as Linux, is in fact, GNU/Linux, 
	  or as I’ve recently taken to calling it, GNU plus Linux. Linux is not an operating system per se, 
	  but rather another free component of a fully functioning GNU system made useful by the GNU corelibs,          
	  shell utilities and vital system components comprising a full OS as defined by POSIX.                                                                       
	  Many computer users run a modified version of the GNU system every day, without realizing it.                                                                
	  Through a peculiar turn of events, the version of GNU which is widely used today is often called Linux,                                                     
	  and many of its users are not aware that it is basically the GNU system, developed by the GNU Project.                                                      
	  There really is a Linux, and these people are using it, but it is just a part of the system they use.                                                       
	  Linux is the kernel: the program in the system that allocates the machine’s resources to the other programs that you run.                                    
	  The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system.          
	  Linux is normally used in combination with the GNU operating system: the whole system is basically GNU with Linux added, or GNU/Linux.
	  All the so-called Linux distributions are really distributions of GNU/Linux!
	>Counter point: long live alpine; Total GNU Death
			Blue(Tux:		     _nnnn_
								dGGGGMMb
							   @p~qp~~qMb
							   M|@||@> M|
							   @,----.JM|
							  JS^\__/  qKL
							 dZP        qKRb
							dZP          qKKb
						   fZP            SMMb
						   HZM            MMMM
						   FqM            MMMM
						 __| ".        |\dS"qML
						 |    `.       | `' \Zq
						_|      \.___.,|     .'
						\____   |MMMMMP|   .'
							 `-'       `--' hjm)
	XXX:
		>basic knowledge of what a ĐcommandlineĐ is is required; see AT ?!
	NOTE:
		¤this section contains:
			>kernel information
			>Unix/Linux system theory
			>convention description
			>programs that are essential
			  for a usable system
		¤this section doesnt contain:
			>operating system theory
			>non essential programs that
			  can run on Linux
			  (see those AT "/Programs/")
	>Đ[options]sĐ are also commonly called as ĐflagsĐ		// bullshit; make "/Commandline" chapter and give nice better definitions; ?!
	>single letter flags are prefixed with a single, while longer flags are prefixed with double hyphens, by convention
	-by convention most programs have the following flags
		--help || -h		  : prints help and exits
		--version || -v || -V : prints version and exits
		--verbose || -v		  : prints output verbosely
		>the long versions are more reliable for the ABOVE mentioned surprise
		-			: when a file is expected, this specifies stdin
		--			: no more flags are being provided so hyphens can be taken literally { fgrep -- - pufka.cdd }


	HELP: //(0x000002fc)➞
        XXX:
            documentation/man
            https://github.com/agvxov/bashtutor
		[command] -h|--help			: show a programs own help message; might not work
        man <thing>                 : see AT "documentation/man"
        info <thing>
	

	FILE_SYSTEM: //(0x000002fd)➞
		>uses Ext 4 nowdays (see AT "/File Systems/Ext")
		>hierarchical
		>called a Đfile treeĐ
		¤composed of:
			-files
				>file names shall not (but can) contain spaces (i wish everyone would obey that rule, including myself)
				>file names shall not (but can) contain endlines
			>folders
			>links
				>file pointers really
				¤special links:
				.				: the current working directory
				..				: the current working directories parent directory ("../.." is also valid)
				-				: the previous working directory
				~([user])		: [user]s home directory; [user] defaults to the user calling the command
		>'/' is the root directory, meaning every other directory and file are under this directory;
		  the root is a parent of all other things on the filesystem and a child of none
		-NOTE: tho theoretically the root directory should be the absolute root and the end of the filesystem
				{ $ cd /
				  $ cd $PWD/..
				}
			   or
			    { $ cd //
				}
			   leads to an interesting result, namely opening "//", which so it seems is the parent of '/'
			   however
			    { $ cd //
				  $ cd $PWD/..
				}
			   lands one at '/'
			   >"//" behaves exactly as '/' as far as its know{, meaning "/var" and "//var"
			     are the same directories}
			   >it is rumored that one can ĐsomehowĐ go up as high as 125 '/'s
			   >using "//" may or may not result in your mother dying in her sleep
		¤conventional contents of the root directory ('/')
			>the contents of /proc/sys/ is not list-ed here for the sake of my sanity,
			  however they are documented AT ../Kernel/Variables
			/bin/		: binaries			
			/boot/		: system start up files
			/dev/		: devices
			 ├── disk/		: folder containing storage devices
			 ├── full		: a virtual device which upon writing always returns ENOSPC and upon reading infinite NULL bytes; 
			 │				   exists for program testing purposes
			 ├── null		: a virtual device which is used for discarding data by writing to it { notroot@arch$ grep -r my_file -- / 2> /dev/null }
			 ├── mem		: a virtual device which can be read to access RAM contents
			 ├── random		: a virtual device which serves as a pseudo-random number generator
			 ├── stderr
			 ├── stdin
			 ├── stdout
			 ├── zero		: a virtual device that returns an arbitrary number of NULL bytes
			 └── snd/		: folder containing sound devices
			/etc/		: "Everything To Configure"; does root from "ET Cetera" tho
			 ├── fstab			: read at boot to decide which filesystems are essential to mount; dee details BELOW
			 ├── protocols		: describes internet protocols available from the TCP/IP subsystem
			 │					   everything inside is specified by IANA; Red(DO NOT EDIT)
			 │					   syntax: [protocol] [id_number] ([aliases])
			 ├── os-release		: basic OS (Distro) information
			 └── resolve.conf	: configuration file for the (hostname) resolver; see details AT /Linux/Networking
			/home/		: hub of the users personal directories
			/lib/		: libraries
			/media/		: where storage devices are automatically mounted
			/mnt/		: where storage devices are (meant to be) manually mounted
			/opt/		: where builds (should) land
			/proc/		: process informations
			 ├── cmdline	: arguments passed to the kernel on boot
			 ├── cpuinfo	: CPU information
			 ├── devices	: list of all connected devices
			 ├── filesystems: list of all supported filesystems by the kernel
			 ├── dma		: "Direct Memory Access"
			 ├── loadavg	: average CPU usage (last_minute, last_5_minutes, last_10_minutes, mun_of_processes)
			 ├── uptime 	: system up time and time spent idle
			 ├── meminfo	: memory and memory usage data
			 └── ${PID}		: directory specific to a (running) process; for detailed contents of such a directory see AT "../Processes/PID_folder"
			/root/		: home directory of the superuser
			/run/		: system processes store temporary data here
			/sbin/		: superuser bin
			/usr/		: either chaos or aliased directories
			/srv/		: data for servers
			/sys/		: system information and config
			/tmp/		: temporary file
			/var/		: variable; files whichs sizes are subject to change (databases, sites, etc.)
		Fstab:
			>/etc/fstab
			>plain text config file
			>declares what filesystems should be mounted upon boot
			>comment by starting the file with a '#'
			>each line is an ĐentryĐ
			YYY:
				fstab(5)
			Entry:
				>every ĐentryĐ describes one mount
				>separated by any amounts of whitespace
				-each entry has 6 ĐfieldsĐ:
					|    UUID     |  Mnt point  |  Filesystem  |  Options  |  Backup  |  Checker  |
					| :---------: | :---------: | :----------: | :-------: | :------: | :-------: |
					| UUID=[UUID] |  [folder]   |  <typename>  | [options] |  <int>   |   <int>   |
					UUID:
						>unquoted
						>get "blkid" (see ABOVE) to get
					Mnt_point:
						>mount point
						>what folder shall the filesystem correspond to
					Options:
						[option](,[option]([...]))
						>column separated list of keywords
						¤[option]
							ro		   : read only mode
							rw		   : read/write enabled
							exec	   : allow binary execution
							noexec	   : forbid binary execution
							owner	   : allow only device owner to mount
							group 	   : allow device owners group members to mount
							user	   : allow all users to mount
							suid	   : respect seuid and setid bits
							nofail	   : do not report errors for this device if it doesnt exists
							noauto	   : do not mount at "mount -a" (boot time) (see ABOVE)
							auto	   : do not use noauto feature (see ABOVE)
							async	   : I/O operations should be asyncronious
							sync	   : I/O operations should be syncronious (which in flash drives may cause cycle shortening)
							noatime	   : never update inode access times (and gain speed by doing so)
							atime	   : do not use noatime feature (see ABOVE)
							nodiratime : never update folder inode access times
							dev		   : interpret character or block special devices on the filesystem
							nodev	   : do not use dev feature (see ABOVE)
							defaults   : rw,suid,dev,exec,auto,nouser,async
					Backup:
						>used by dump back up utilities
						0	: should not be backed up (use this if you dont use dump back ups)
						1	: should be backed up
					Checker:
						>specifies the order by which ĐfsckĐ will check the systems
						>non 0 value specify a hierarchical order, however multiple file systems can have the same rank
						>checking should always start at '/' (root)
						0	: should not be checked
						1	: first to be check (should always be '/' and Red(nothing else))
						2	: second to be checked (any data system but root normally should have this value)
						[n]	: [n]th to be checked
					{ UUID=5bnafbc9-1069-49fe-a245-cf9cbcc4e96d    /   ext4    rw,relatime    0    1 }
		Disk_management: //(0x000002fe)➞
			mount [partition] [path]	: mounts [partition] to [path]
				>prints devices information when ran without arguments
				-r							: read only
				-a							: perform mount operations as described in /etc/fstab (see BELOW);
											   ran at each boot time
			umount [device] 	: unmounts [device]
			lsblk				: lists (mounted) block devices
			blkid ([blk])		: prints information about all block devices (drives) or just about [blk], if specified
			df [options] [file]	: shows information about filesystems
				-h	: use human readable output format
			du [options] [folder]	: displays disk space usage recursively
				-h			: use human readable output format
				-d <int>	: sets <int> as the maximum dept of recursion
			fsck [option] [device]		: checks and/or repairs filesystems
			ntfsfix [partition]	: attempts to fix common ntfs file system problems on [partition]
			smartctl [options]	: manages drive SMART ("Self-Monitoring Analysis and Reporting Technology") (see AT "/Hardware/?!")
				-i [blk]			: prints basic information (such as SMART support and whether its turned on) on [blk]
				-s [on || off] [blk]: turns smart on/off on [blk]
				-a [blk]			: prints analysis
					¤output
						¤Vendor Specific SMART Attributes with Thresholds:
							>dont get scared by the output, it doesnt mean what you first think it does
							VALUE		: a value signaling the current condition of the drive; either an arbitrary value {temperature}
											or a statistic in percentage, normalized to 200 (its up to the manufacturer)
							WORST		: a value signaling the worst condition of the drive; see ABOVE
							THRESH		: the value which the manufacturer specified is the border of normal functioning
							TYPE		: what it means if VALUE is lesser or equal to THRESH
							>if VALUE is lesser or equal to TRESH your drive is in trouble
				-t [test] [blk]		: initiates test on device [blk]; the test runs in the background
					short				: ~2 mins
					long				: ~160-240 mins
				-l [...] [blk]		: lists information on [...]
.					selftest			: information of tests (initated with -t; see ABOVE)
					¤output
.						LifeTime	: the amount of time the drive has run (NOT its life expectancy)
			badblocks [options] [device]	: searches for bad blocks on [device]
		### Formating under Linux ###	//(0x00000249)➞
			1. Making a partition table
				fdisk				: modifies filesystems
				cfdisk				: pseudo graphical version of fdisk
			2. Creating a filesystem
				mkfs.[filesystem] [partition]
					btf
					btrfs
					cranfs
					ext2
					ext3
					ext4
					fat
					minix
					msdos
					ntfs
					vfat
					xfs
		#
		### Making bootable USBs ###	//(0x0000024a)➞
			1. Download a bootable .iso image
			2. Format the drive with a filesystem that is compatible with your image
			    (should be stated on the download side; FAT is always a safe bet however)
			3. Copy the image to the drive
				>NOTE: do not copy to a partition, copy to the ĐĐdeviceĐĐ
				cp [image] [device]
		#
		### Renaming partitions under Linux ###		//(0x0000024b)➞
			>ie. giving the partition a new label
			>the following commands all rename a specific kind of partition of a device to [name]
			swaplabel -L "[name]" [partition]			: swap
			e2label [partition] "[name]"				: ext2, ext3 or ext4
			btrfs filesystem label [partition] "[name]" : btrfs
			jfs_tune -L "[name]" [partition]			: jfs
			xfs_admin -L "[name]" [partition]			: xfs
			mlabel -i [partition] ::"[name]"			: fat or vfat
			exfatlabel [partition] "[name]" 			: exfat
			ntfslabel [partition] "[name]"				: ntfs
		#

	
	
	SWAP:
		>virtual RAM created from disk
		>often labeled "useless" on modern systems, but could save the system a few crashes
		>does wonders to single board computers



	BOOT: //(0x000002ff)➞
		YYY:
			"/Linux/File\ System/fstab"
		Parameters:
			YYY:
				bootparam(7)
				kernel-command-len(7)
			>passed at boot time
			>a boot loader is requited (BIOS wont suffice)
			debug				: hand kernel messages to logger daemon
			init=[path]			: execute [path] when done booting; default-s to: /sbin/init /etc/init /bin/init /bin/sh
			root=[dev]			: device to mount as root filesystem
			rootwait			: wait for the root filesystem indefinitely to show up
			rootdelay=<int>		: wait for the root filesystem for <int> seconds to show up
			Files:
				/boot/cmdline.txt		: specifies parameters to be passed to the kernel on boot; only conventional
				/proc/cmdline			: list of parameters the currently loaded kernel booted with
		Initramfs:
			>successor of initrd
			>a "dummy" kernel which loads the actual kernel
			>used for setting up XXX-s the actual kernel needs {mounting / (its not trivial if its located on a network or encrypted)}



	SHUTTING_DOWN: //(0x00000300)➞
		shutdown [options] [time]
			now		: do not wait
			-H		: halt
			-P		: poweroff
			-r		: reboot
			-c		: cancel pending shutdown



	LOGGING: //(0x00000301)➞
		YYY:
			dmesg(1)
		>there are 8 loglevels; 0 to 7
		>the smaller the loglevel the more important the message is
		>each message has a loglevel associated with it
		>the kernel has a set loglevel which acts as a filter what messages to log
		>if a messages loglevel is over (as in it is a higher num) than the kernels set loglevel, it is ignored
		¤log levels by name
			0	Red(    KERN_EMERG   )
			1	Red(    KERN_ALERT   )
			2	Red(    KERN_CRIT    )
			3	Red(    KERN_ERR     )
			4	Yellow( KERN_WARNING )
			5	Yellow( KERN_NOTICE  )
			6	Green(  KERN_INFO    )
			7	Green(  KERN_DEBUG   )
		Files:
			/proc/sys/kernel/printk		: contains 4 log level values
				| console loglevel | default message loglevel | minimum loglevel | default loglevel |
				|      int-1       |           int-2          |       int-3      |      int-4       |
				{ // taken from my live gentoo system
				|        0         |             4            |         1        |        7         |
				}
				console loglevel: 			currently set log level
				default message loglevel:	if a message doesnt have log level specified then apply this one to it
				minimum loglevel:			the loglevel cannot be set bellow this value; hardcoded 1, ie. KERN_EMERG will always show
				default loglevel:			loglevel applied during boot time



	SYSTEM_TIME: //(0x00000302)➞
		>NOTE: a wrong system time may cause various problems with many apps,
			    since modern secure authentication often requires accurate timestamps
		Hardware_clock:
			>independent of Linux
			>always ticks, even when the system is powered off
			>has a tendency stray from real time
			hwclock [options]	: interacts with the hardware clock
				--show				: display time kept by it
				--systohc			: sync hardware clock to system clock
		System_clock:
			>kept by the Linux kernel
			>upon start up the value of the hardware clock is read, copied,
			  but after wards the system clock runs independently
			timedatectl [options] [command]	: interacts with the system clock
				[command]:
					status				: print settings (including current time)
					set-date [date]		: manually sets date; [date] is given in the format of "yyyy-MM-dd hh:mm:ss"
										   { timedatectl set-time "2022-04-08 22:18:30" }



	KERNEl: //(0x00000303)➞
		>kernel module-s have the ".ko" (Kernel Object) extension
.		lsmod							: lists loaded kernel modules
		modinfo [module]				: display information about [module]
		modprobe [options] [module]		: add and remove kernel modules
							--remove		: remove
							--force			: force
							-n				: dry-run; do not execute, just print
		sysctl [options] ([variable]=[value])	: read/write and configure kernel parameters at runtime
			--ingore		: ignore errors
			--quiet         : do not echo variable set
			-p				: Load sysctl settings from the file specified or /etc/sysctl.conf if none is
			-w				: all arguments prescribe a variable to set
		dmesg			: prints or manipulates the kernel ring buffer	// gracefully handle how its mentioned twice
		Variables:
			>variables corresponding files at /proc/sys/
			>these files contain nothing, but a value
			>to find the correct path to a variable, one must replace all '.'-s with '/'-s
				{ kernel.randomize_va_space  ->  /proc/sys/kernel/randomize_va_space }
			¤
				kernel.randomize_va_space	: int; turns ASLR on/off
					0 - no randomization
					1 - shared libraries, stack, mmap(), VDSO and heap are randomized
					2 - brk() is also randomized
				net.core.dev_weight			: int number of packets that the kernel can handle on a NAPI interrupt; default 64
				net.core.netdev_max_backlog : int; maximum number of packets, that can be queue-d on the INPUT side
				net.core.somaxconn			: int; number of incoming connections?; ?!
				net.core.optmem_max			: maximum ancillary buffer size allowed per socket
				net.core.rmem_max			: int; maximum receive socket buffer size
				net.core.wmem_max			: int; maximum send socket buffer size
				net.ipv4.tcp_ecn			: int; controls TCP ECN
					0 - disable
					1 - accept incoming connections with ECN and request it on outgoing ones
					2 - accept incoming connections with ECN, but never request it
				net.ipv4.tcp_window_scaling : enable window scaling as defined in RFC1323; ?!
				net.ipv4.tcp_orphan_retries : ?!
				net.ipv4.tcp_max_tw_buckets	: maximal number of timewait sockets held by system simultaneously;
											   exists solely to prevent simple DOS attacks; the higher the better
			 	vm.drop_caches				: int; Linux clears its caches depending its value;
											   upon writing to *this, the clearing is performed, the value is reset to 0
					0 - default
					1 - pagecaches
					2 - slab objects
					3 - pagecaches and slab objects
				vm.min_free_kbytes			: int; specifies the number of KB-s to be on special reserve
 			   	vm.oom_kill_allocating_tas		: bool; if 0 (default), in out-of-memory situations the memory hog will be hunted down and killed;
			  						   		   if 1, the program triggering the out-of-memory will be killed
		Building:
			-common make targets:
				make menuconfig
				make
				make install
				make modules_install


	
	PERMISSION: //(0x00000304)➞
		>the admin/most_powerful user is called ĐĐrootĐĐ or ĐĐsuperuserĐĐ
		>all users have an id
		>roots user id is always 0
		sudo		: runs command with admin privileges
			-E			: preserve user environment
		umansk		: ?!
		System: //(0x00000305)➞
			/etc/shadow
		Users: //(0x00000306)➞
			Query: //(0x00000307)➞
				whoami				: prints the user name associated with the current effective user ID
				users				: prints who is logged in
				w					: prints who is logged in  \
				who					: prints who is logged in   } they are not the same, tho only differ slightly
				finger				: prints who is logged in  /
			Modify: //(0x00000308)➞
				adduser [options] [username]	: user creation tool;
                                                   friend-lier than useradd;
                                                   interactive
					Files:
						/etc/
						 ├── adduser.conf
						 └── /skel/			: default SKEL (skeleton) directory for user home creation
				userdel	[user]					: deletes [user]
				usermod [options] [user]		: modify a user account
					-a								: append; used together with "-G"
					-G [group]						: overwrite [user]s groups with [group]
					-d [path]						: modify [user]s home directory to [path]
				passwd [user]					: changes password for [user]; will need sudo/singed in as [user]; 
		Groups: //(0x00000309)➞
			groups [user]					: lists what groups [user] belongs to
			groupadd [groupname]			: creates group
		Files: //(0x0000030a)➞
			chown [user] [file]				: changes owner of a file
			chgrp [options] [group] [file]	: changes group of file
			chmod [options] [mode] [file]	: change mod (grant [file] privileges)
				options:
					-R			: give to all files in folder
					-f			: force
				actions:
						r : read
						w : write
						e : execute	
				mode:
					octal:
							owner		group	    others
						   r  w  x	   r  w  x     r  w  x
						  (4)(2)(1)   (4)(2)(1)   (4)(2)(1)
											  
						{
							 chmod -R 734 something.py
						}
					
					symbolic:
						[mode] syntax == [references][operators][action]
						references:
							u : owner of the file
							g : users who are part of files group
							o : users who are nether u or g
							a : all; everyone
							
						operator:
							+ : adds mode to specified classes
							- : removes mode
							= : exacts mode to specified classes

						{
							chmod u+x something.py
						}


				

	MANUVERING: //(0x0000030b)➞
			pwd 	: "Print Working Directory"; outputs the current path
			
			cd [directory name]	: change directory
				-		: extends to previous directory
				
			ls [options] [file||dir]	: lists contents of directory
					-a	: list all files including hidden files starting with '.'
					-F 	: postfix directories with a '/', executables with a '*' and links with an '@'
					-i 	: list file's inode index number
					-l 	: list with long format - show permissions
					-r 	: list in reverse order
					-R 	: list recursively the directory tree
					-s 	: list file size
					-S 	: sort by file size
					-t 	: sort by time & date
					-X 	: sort by extension name
					-1	: list every entry in a separate line

			stat [options] [file||dir]	: prints requested statistics of file; default: name, size, inode, access, access times
					-L						: deference (follow links)
					--printf=[format]		: specifies the formatting of the output
			
			locate [options] <string>: searches for <string> in a file (no, not on the disk) which supposedly has all files and folders listed on	//move; ?!
					-c			: count results
					-i			: case insensitive search
					-n [num]	: return a maximum of [num] results
					-s			: information about that file (with the list)
					("sudo updatedb" will update the database (of files that locate uses))
					/var/lib/mlocate/mlocate.db
		
			find [path = ${PWD}] [options]	: searches for files
				-maxdepth <int>					: specify max dept of folders to descend into
				Condition:
					-type [option]					: match type
						d								: directory
						f								: regular file
					-name <string>					: match basic regex <string> in name
					-iname <string>					: same as ABOVE, but case insensitive
					-regex <string>					: match extended regex <string> in name
					-iregex <string>				: same as ABOVE, but case insensitive
				Logic:
					>can be used between 2 conditional options
					-o		: or
					-a		: and
				Action:
					-exec ({}) \;

			grep [options] [pattern] [file]	: "Global Regular Expression Print"		//?!; reorder
				[options]:
					-E 	: [pattern] is extended regular expression
					-F	: [pattern] is string
					-G	: [pattern] is basic regular expression
					-P	: [pattern] is Perl regular expression
					-v	: invert match; return non matching lines
					-i	: case insensitive match
					-r	: recursive
				[file]:	either a file or piped in data
				NOTE:
					>the grep utility has some variants which behave very similarly,
					  but are short hands for different purposes:
					  	([arch])([specifier])grep
						[specifier]
.							e	: "Extended regex"; equivalent to Yellow(  [grep] -E  )
.							f	: "File"; equivalent to Yellow(  [grep] -F  )
.							p	: "Process"
						[arch]
							>used for searching in compressed files {tar, zip} (ie. archives)
							>all are supposedly equivalent
						-Archive greps:
						-list
							grep
							egrep
							fgrep
							pgrep
							zgrep
							lzegrep
							lzfgrep
							lzgrep
							msggrep
							pcre2grep
							pcregrep
							xzegrep
							xzfgrep
							xzgrep
							zegrep
							zfgrep
							zipgrep
							zstdgreprep

			awk 

			whereis	[exec]	: prints full path to executable (program) [exec]
			



	FILE_MANAGING: //(0x0000030c)➞
			>see ls AT "/Linux/Maneuvering"

			file [file]  : determine file type, architecture, linking, etc.

			touch [name] : makes file with [name]
			
			mkdir [name] : makes directory with [name]
				-p			: creates parents too if they dont exist already
		
			rmdir [name] : removes directory with [name]	
		
			cp [options] [name] [destination directory] : copies [name] to [destination directory]
				-r					: recursive copy (copies folder content's too)
				--attributes-only	: copies attributes; ie leaves files empty 
				--no-dereference	: no not follow symlinks; NOTE: highly useful when making backups

			dd [operands]	: copys a file, converting and formatting according to the operands
				ibs=[N]			: "Input Block Size"; specifies the number of bytes to read at a time
				obs=[N]			: "Output Block Size"; specifies the number of bytes to write at a time
				bs=[N]			: "Block Size"; overwrites the values of "ibs" and "obs"
				count=[N]		: copy [uint] input blocks
				if=[file]		: "Input File"; specifies that input shall be read from [file]
				of=[file]		: "Output File"; specifies that output shall be written to [file]
				skip=[N]		: start reading after [uint]*"ibs"
				seek=[N]		: start writing after [uint]*"obs"
				oflag=[of]		: specifies output flags
				[N]:
					[uint]([size = c])
					[size]:
						c	: 1
						w	: 2
						b	: 512
						kB	: 1000
						K	: 1024
.						KiB	: K
						MB	: 1000*1000
						M	: 1024*1024
.						MiB	: M
.						xM	: M
						GB	: 1000*1000*1000
						G	: 1024*1024*1024
.						MiB	: M
						TB	: 1000*1000*1000*1000
						T	: 1024*1024*1024*1024
.						TiB	: T
						PB	: 1000*1000*1000*1000*1000
						P	: 1024*1024*1024*1024*1024
.						PiB	: P
						EB	: 1000*1000*1000*1000*1000*1000
						E	: 1024*1024*1024*1024*1024*1024
.						EiB	: E
						ZB	: 1000*1000*1000*1000*1000*1000*1000
						Z	: 1024*1024*1024*1024*1024*1024*1024
.						ZiB	: Z
						YB	: 1000*1000*1000*1000*1000*1000*1000*1000
						Y	: 1024*1024*1024*1024*1024*1024*1024*1024
.						YiB	: Y
				[of]:
.					append		: append to output file
				
			rm [options] [file] : removes [file]
				-d		: remove directories too
				-r		: remove recursively
				-i		: prompt before removal			
				-I		: prompt before removal of more than 3 files	//aliasing sound like a good idea to me

			mv [name] [destination dirctory] : moves [name] (file/dir) to [destination directory] 
		
			xdg-open  	 : opens a file or URL in the user's preferred application 	
							{xdg-open [path].} opens [path] in folder manager
	
			zip <file-output> <file>+	 	: zips <file>(-s) into [file-output]
				-r		: recursive

			unzip [file] 			: unzips [file]

			ln [options] [target] [link name]	: creates links to files (soft or hard)
				-s	: soft link
				-r	: relative (soft link only)

			lsof [options]		: lists currently open files
				-p [PID]			: only list file held open by process [PID]

			lsdf [options]		: Linux specific replacement for ĐlsofĐ
				-p [PID]			: only list file held open by process [PID]

			TEXT_FILES: //(0x0000030d)➞
				cat [options] [file] : displays contents of file
						-n 	: number lines
						-b	: number non-blank output lines
						-T	: display tabs as "^I"
						-v	: display non-printable chars

				more		: a pager program (outputs text in screen sized chucks)
					Commands:
						>entered while the program is running
						>unsigned int $k = [current screen size]
						[h]							: display help page
						(<int> = $k) + [SPACE]		: display next <int> lines
						(<int> = $k) + [z]			: $k = <int> and display next $k lines
						[RETURN]					: display next line
						(<int> = 1) + [s]			: skip <int> lines and display $k lines
						[=]							: display current line number
						[:f]						: display file name and current line number
						[/] && [regex]				: searches for [regex]
						[!] && [shell command]		: execute [shell command] in a subshell
						[v]							: start up "/usr/bin/vi" at current line as a child process
						[CTRL] + [l]				: redraw screen
						[.]							: repeat previous command
						[q] || [Q] || <interrupt>	: exit
					NOTE:
						>if run on a directory { more ~/Desktop }, it gives the following error message 
						 "magic failed"		//genius, i should use it too

				less		: improved "more"; a pager program(outputs text in screen sized chucks)
					>less is more
					Commands:
						>entered while the program is running
						>unsigned int $k = [current screen size]
						[h]							: open help file with more as a child process
						(<int> = $k) + [SPACE]		: display next <int> lines
						(<int> = $k) + [z]			: $k = <int> and display next $k lines
						[RETURN]					: display next line
						[u]							: moves up half a screen
						[d]							: moves down half a screen
						[CTRL] + [l] || r			: redraw screen
						[s] && [FILE NAME]			: save buffer to [file] (useful when less is run with a pipe)
						[v]							: start up $VISUAL or $EDITOR as a child process
						[V]							: print version number
						[q] || [Q] || <interrupt>	: exit

				head [options] [file] : outputs first x (10 by default) lines of file
					-n <int>	: output <int> number of lines
					-c <int>	: output <int> number of bytes
					-f			: output appended data as the file grows

				tail [options] [file] : outputs last x (10 by default) lines of file
					-n <int>	: output <int> number of lines
					-c <int>	: output <int> number of bytes
					-f			: output appended data as the file grows

				NOTE: an interesting hack is using head and tail together to display the <int>th line of some text:
						{ ls -a | head -n 10 | tail -n 1	# display 10th file report }
					  which is smart, but useless if one knows ĐsedĐ
					  	{ ls -a | sed -n "10p" 				# same as ABOVE}

				fmt [options] [file] 	 : format text
					>attempts to format [file] in such a way to fulfill [options], but not
					  cut words in half
					>prints resulted formatting to stdout
					-w [num]		: sets [num] as the maximum num of chars to display in a single line
					-s				: split only, do not fill short lines	

				#define sed\
				I   ___         _  \
				I  / __| ___ __| | \
				I  \__ \/ -_| _` | \
				I  |___/\___\__,_| I
				//(0x0000025b)➞
					sed [options] : "Stream EDitor" for filtering and transforming text
						-n			: quite; do not echo the whole input
						-f	[file]	: read commands from script file
						-i			: edit files inplace (instead of printing to stdout)
						>sed operates on the bases of ĐcommandsĐ to edit text, which
						  can be supplied on the command line or read from a file (ie. script)
						Commands:
							[addr][char][options]			: basic sed command syntax
							[addr]{[char][options][...]}	: group syntax; all sed commands between the parentheses
															   will be applied to [addr]
							[addr]:
								>signals which lines the command shall be applied on
								>default-s to all
								<int>			: a single <int>th line
								<int-1>,<int-2>	: a range from <int-1> till <int-2>
								<regex>			: all lines matching <regex>
								{ sed "12,54d" input.txt	# cats input.txt to stdout with lines 12-54 delete-d }
							[char]:
								a:
									>"Append"
									a <string>	: appends <string> after a line, in a new line
								b:
									>"Brench"
									b [label]	: jumps to label (and continue-s execution from there)
									>see labels AT ../Scripting
								c:
									>"Change"
									c <string>	: replaces the whole line with <string>
								d:
									>"Delete"
									>delete-s [addr]
									{ seq 5 | sed "3,4d" 
									  1
									  2
									  5
									}
								f:
									>"Filename"
									F	: prints the filename of the current input file
								p:
									>"Print"
									>echos [addr] to stdout
								s:
									>"Subsitute"
									s/[regex]/<string>/[flags]	: replaces [regex] with <string>
										[flags]:
											g		: all matches in the line
											<int>	: <int>th match (line wise)
											p		: print result

										{ echo "my-lil-string" | sed "s/-/#/g"
										  my#lil#string
										}
								q:
									>"Quit"
									q<int>		: quits with exit status <int>
								w:
									>"Write"
									w [filename]	: ?!
						Exit_status:
							0	: success
							1	: invalid command
							2	: some script files were unreadable and therefor skipped
							4	: I/O error; aborted
							>sed can quit with any int, if it was specified by a 'q' command
						Scripting:
							>sed scripts have ".sed" extension by convention
							>all commands have to be separated by a new line or a ';' (except 'a', 'c', 'i')
							>single line expressions can be split to multiple lines by appending a '\\'
							#[...]		: comments line
							: [name]	: creates label called [name]; ?!

				xxd [options] [file]	 : print file contents in formatted or plain hex or binary
					-b			: print in binary

				hexdump [options] [file] : display files in various formats; hex is the default
					-c			: display by chars; escape sequences included

				expand [options] [file]	: writes [file] to stdout with its tabs converted to spaces
					-t=<int>				: set number of spaces to expand tabs to; default is 8

				sort [options] [file]   : writes sorted contents of [file] to stdout; (do not redirect ('>' || ">>") to itself!)
					-r						: reverse sort
					-n						: sort by strings numeric value

				wc							: print newline, word, and byte counts; very useful with pipes
					-c							: print bytes		\
					-m							: print characters	 } all are enabled by default; specifying one will disable the others
					-l							: print lines		/
					-w							: print words
	
				uniq [options] [file]	: writes [file] to stdout with its adjacent lines merged
					-s						: report when two files are identical
					-c						: prefix lines with the number of occurrences (before the operation)

				diff [file1] [file2]	: searches for differences in the supplied files line by line
					--side-by-side			: output in columns
					--suppress-common-lines	: do not output lines which dont differ
					NOTE: vimdiff is superior for non-auto usage in every aspect

				tee [options] [file]	: copy stdin to file and stdout
					>meant to be used with pipes

				unix2dos [file]			: converts windows (DOS) end of line chars to Linux (Unix) end of file chars
				dos2unix [file]			: converts Linux (Unix) end of line chars to windows (DOS) end of file chars

				Editors:
					ed		: ancient command line based editor
					ex		: eds descendant; fullscreen
					vi		: vim's ancestor; the two are partially compatible (see BELOW)
					vim		: see AT /?!
					emacs	: just forget about it; only its evil mode is not evil



	PROCESSES: //(0x0000030e)➞
		>all Linux processes have an id number assigned to them, the process id or PID
		Signals: //(0x0000030f)➞
			>a way Linux communicates with processes
			>SIG always stands for "SIGnal"
			>Yellow() is how it can be sent through a terminal
			SIGABRT : "ABoRt signal"; ĐĐrequestsĐĐ process abortion
			SIGALRM : "ALaRM signal"; sent when the time interval specified to alarm() expired
			SIGBUS  : "BUS error signal"; sent whenever memory request is impossible; alias of SIGUNUSED
			SIGCHLD : "CHiLD terminated signal"; sent whenever a child process terminated
			SIGCONT : "CONTinue signal"; requests execution continue-ation after SIGSTOP
			SIGFPE  : "Float-ing Point Exception signal"
			SIGHUP  : "Hang Up signal"; sent when the controlling terminal is closed
			SIGILL  : "ILLegal instrruction signal"; sent whenever the program executes an unknown or privileged instruction
			SIGINT  : "INTerupt signal"; user ĐĐrequestedĐĐ execution stop; Yellow( Ctrl + c )
			SIGIO   : "Input/Output is possible signal"
			SIGIOT  : "Input/Output Trap"; alias of SIGABRT
			SIGKILL : "KILL signal"; ĐĐforcefullyĐĐ terminates the program; cannot be intercepted or ignored
			SIGLOST : "power LOST signal"; alias of SIGPWR
			SIGPIPE : "PIPE signal"; sent when a process attempts to write to a pipe that doesnt have another process at the other end
			SIGPOLL : "POLL signal"; see AT "/Hardware/Computer models"; alias of SIGIO
			SIGPROF : "PROFiling alarm clock signal"; sent whenever a CPU usage timer, set by the process, expires
			SIGPWR  : "PoWeR lost signal"
			SIGQUIT : "QUIT signal"; sent by the controlling terminal upon a core dump; Yellow( Ctrl + \ )
			SIGSEGV : "SEGmentation Violation signal"; sent upon segfault
			SIGSTKFLT : "STacK Fault signal"; alias of SIGUNUSED
			SIGSTOP : "STOP signal"; ĐĐforcesĐĐ execution suspension; cannot be intercepted or ignored
			SIGSYS  : "SYStem signal"; alias of SIGUNUSED
			SIGTERM : "TREMiantion signal"; ĐĐrequestsĐĐ termination
			SIGTRAP : "TRAP signal"; sent by debuggers to initiate an execution break
			SIGTSTOP : "Temprorary STop signal"; ĐĐrequestsĐĐ execution suspension; Yellow( Ctrl + z )
			SIGTTIN : "TTy Input error signal"; sent whenever a process running on the background attempts to read stdin
			SIGTTOU : "TTy OUtput error signal"; sent whenever a process running on the background attempts to write stdout
			SIGUNUSED : "UNUSED signal signal"; sent whenever an unrecognized signal is sent; exists for platform compatibility reasons
			SIGURG  : "URGent signal"; sent whenever a socket has urgent data to read
			SIGUSR1 : "USeR-defined signal 1"; custom
			SIGUSR2 : "USeR-defined signal 2"; custom
			SIGVTALRM : "Virtual ALaRM clock signal"
			SIGWINCH  : "WINdown CHange signal"; sent whenever the controlling window changes size
			SIGXCPU : "eXeeded CPU usage signal"; sent whenever a process exceeds a certain allowed CPU usage duration, usually because malformed code
			SIGXFSZ : "eXeeded File SiZe signal"; sent whenever a file exceeds the maximum allowed file size
		PID_folder:
			>virtual
			¤${PID}/
				cwd		: symlink to current working directory
		ps [options]			: report on current processes
			-A						: all processes
			-u [user]				: only processes owned by [user]
			u						: more information
		>see lsof AT ("/Linux/File managing")
		top						: displays running processes; updated real-time
		nice -n <int> [command]		: affect process scheduling; from -20 to 19, the LOWER the number the MORE CPU time it gets
		renice -n <int> -p [PID]	: affect already running processes niceness; from -20 to 19, the LOWER the number the MORE CPU time it gets;
									   ([PID] stands for process ID)
		pstree					: prints process tree
		pgrep [pattern]			: grep that returns pids
		kill [options]			: sends a signal to a specified process; the default is SIGTERM (see ABOVE)		// SIGTERM only requests termination!
			-<int> [PID]			; <int> specifies the signal to process [PID]
			-s <string> [PID]		: <string> specifies a signal by name to process [PID]
			-l						: lists signals with their corresponding numbers
			>NOTE: SIGKILL is num 9



	JOBS: //(0x00000310)➞			// probably move under bash; ?!
		>NOTE: the concept of jobs only exists on the shell level; it is an abstraction, it has no real kernel-wise representation
		>every process invoked interactively is a ĐĐjobĐĐ
		>jobs are bound to the invoking shell instance and therefor do not overlive it
		>the job blocks the shell for reprompting is said to be running in the ĐĐforegroundĐĐ
		>the job(s) which do not run in the ĐforegroundĐ are said to be running in the ĐĐbackgroundĐĐ
		>both ĐforegroundĐ and ĐbackgroundĐ jobs stdout and stderr outputs are displayed in terminal (if not redirected)
		>jobs run in the foreground by default
		[cmd] & 	: invokes a process in the background; NOTE: '&' is just the pure parallel execution operator
					   without a second argument, see "/Bash/Execution/Paralel/Pure"
		jobs		: lists background jobs;
					   '+' marks the default job
					   '-' marks the reserve job, which will become the default that terminates
		bg ([job])	: makes previously stopped job [job] resume execution in the background; if [job] is not specified the default is used
		fg ([job])	: moves [job] to the foreground; if [job] is not specified the default is used
		[job]:
			%<int>	: by id
			%+		: default job
			%-		: reserve job
		{ // running a job in the background
			// this operation takes a considerably long time to finish
			$ find / -iname '*a*' &> files_with_a_in_their_names.list
			  // long long thinking
			$
		    // however, by running it in the background we dont have to wait before we can run another command from the same shell
			$ find / -iname '*a*' &> files_with_a_in_their_names.list &
			$
		  // moving a job from the background to the foreground 
		  	// start a few jobs so we have a few options to choose from
			$ find / -iname '*a*' &> files_with_a_in_their_names.list &
			$ find / -iname '*b*' &> files_with_a_in_their_names.list &
			$ find / -iname '*c*' &> files_with_a_in_their_names.list &
			$ find / -iname '*d*' &> files_with_a_in_their_names.list &
			[1] 17156
			[2] 17157
			[3] 17158
			[4] 17159
			// listing the background jobs because in this example im a goldfish with a very small terminal
			$ jobs
			[1]   Running                 find / -iname '*a*' &> files_with_a_in_their_names.list &
			[2]   Running                 find / -iname '*b*' &> files_with_a_in_their_names.list &
			[3]-  Running                 find / -iname '*c*' &> files_with_a_in_their_names.list &
			[4]+  Running                 find / -iname '*d*' &> files_with_a_in_their_names.list &
			// bring the 3th one into the foreground
			$ fg %3
		  // moving a job from the foreground to the background
		  	// start in the foreground
			$ find / -iname '*a*' &> files_with_a_in_their_names.list
			// stopping it explicitly
			# Yellow( Ctrl+z ) key combination hit
			^Z
			[1]+  Stopped                 find / -iname '*a*' > files_with_a_in_their_names.list
			// resume in the background
			$ bg %1
		}



	NETWORKING: //(0x00000311)➞
		Config_files: //(0x00000312)➞
			/etc/hostname		: device name is read from this file on boot
			/etc/resolv.conf	: configuration file for the (hostname) resolver
				Syntax:
					search <string>	: specifies what to try to auto-complate FQDN-s when no domain suffix is supplied;
									   only the last one is interpreted
					nameserver [ip] : specifies a DNS server to be used;
									   a maximum of MAXNS (3) entries will be interpreted;
									   [ip] must be either a ipv4 address in dot notation or
									   a ipv6 address in either colon or dot notation
					options [option]: controls internal resolver variables
						debug			: debug mode
						ndots:<int>		:
						timeout:<int>	: sets the amount of time the resolver will wait for a response from a name server
										   measured in seconds; default is 5
						attempts:<int>	: sets the amount of times the resolver will query before giving up;
										   default is 2
						rotate			: rather then always trying the first set name sever first, rotate their priority,
										   there by spreading query load
						no-check-names	: dont check hostnames for bad chars
						inet6			: 
						ip6-bytesting	:
						ip6-dotint		:
						no-ip6-dotint	:
						ends0			: 
						single-request	: dont perform ipv4 and ipv6 lookups simultaneously as some name servers cant handle that
						single-request-reopen	:
						no-tld-querry	:
						use-vc			: forces TCP for DNS resolution
						no-reload		: disables auto reloading of a changed config file
						trust-ad		: 

		Routing_subsystem: //(0x00000313)➞
			YYY:
				"../Programs/iptables"	// for configuring the routing subsystem
			>all packets go through it; no userspace applications can intercept it
			>made up of ĐtablesĐ containing ĐchainsĐ containing firewall rules called ĐverdictsĐ

											XXX XXX XXX XXX
										 XXX    Network    XXX
											XXX XXX XXX XXX
												   +
												   |
												   v
			 +-------------+              +------------------+
			 |table: filter| <---+        | table: nat       |
			 |chain: INPUT |     |        | chain: PREROUTING|
			 +-----+-------+     |        +--------+---------+
				   |             |                 |
				   v             |                 v
Green(		 [local process])	 |  /*Yes*/  ****************  /*No*/  +--------------+
				   |             +---------+ Routing decision +------> |table: filter |
				   v                         ****************          |chain: FORWARD|
			****************              /*Is the dest local?*/       +------+-------+
			Routing decision                                                  |
			****************                                                  |
				   |                                                          |
				   v                        ****************                  |
			+-------------+       +------>  Routing decision  <---------------+
			|table: nat   |       |         ****************
			|chain: OUTPUT|       |                +
			+-----+-------+       |                |
				  |               |                v
				  v               |      +-------------------+
			+--------------+      |      | table: nat        |
			|table: filter | +----+      | chain: POSTROUTING|
			|chain: OUTPUT |             +---------+---------+
			+--------------+                       |
												   v
											XXX XXX XXX XXX
										 XXX    Network    XXX
											XXX XXX XXX XXX

			Tables:
				>conceptionally connected collections of ĐchainsĐ
				>each table has their own, differing set of chains
				filter	: used for most firewall purposes; default on CLI
					¤chains
						INPUT		: packets destined to local sockets
						FORWARD		: packets being routed through the box
						OUTPUT		: locally-generated packets
				nat		: used for network address translation (port forwarding)
					¤chains
						PREROUTING	: for altering packets as soon as they come in
						INPUT		: for altering packets to local sockets
						OUTPUT		: for altering locally-generated packets 
						POSTROUTING	: fpr altering packets as they are about to go out
				mangle	: used for specialized packet alteration
					¤chains
						PREROUTING
						INPUT
						FORWARD
						OUTPUT
						POSTROUTING
				raw		: used for configuring packets so that they are exempt from connection tracking
					¤chains
						PREROUTING
						OUTPUT
				security: used for Mandatory Access Control
					¤chains
						INPUT
						FORWARD
						OUTPUT					
			Chains:
				>can be user defined
				>named lists of rules
				>chains of the same ĐtableĐ are not necessary (and most often are not) eval-ed sequentially
				>the default policy is RETURN
			Verdicts:
				>ĐĐverdictsĐĐ are rules to determine a packets fate
				¤builtin
					ACCEPT	: the packet wont be matched against any more rules in any of the chains of *this(!) table
					DROP	: the packet is discarded
					REJECT	: an ICMP error is returned then the packet is discarded
					QUEUE	: pass the packet to userspace ?!
					RETURN	: stop executing the current chain, continue the execution otherwise normally
					LOG		: the packet will get logged before execution continues normally
							   NOTE: having a log chain instead of repeatedly marking LOG as a target is preferable
			File:
				/var/log/messages	: packets receiving a LOG ĐverdictĐ are logged in this file

		Programs: //(0x00000314)➞
			Iptables: //(0x00000315)➞
				>user space program for controlling the Linux kernels routing subsystem
				iptables/ip6tables [options]	: administration tool for IPv4/IPv6 packet filtering and NAT
							>NOTE: local processes start at [local processes];
									tables "raw", "mangle" and "security" are missing since they are rarely used
					¤[address]
						>either an ip(/mask) or a host name
						>specifying a hostname of whichs look up requires a remote query is a "bad idea"
					¤[states]
						NEW				: first packet of a connection
						ESTABLISHED		: not the first packet of a connection
						RELATED			: a packet of a connection spawned by an ESTABLISHED connection
						INVALID			: packet that cannot be identified
					¤[options]
						-L					: list all current rules
						--line-numbers		: display line numbers on output
						-t [table]			: specifies table to operate on (see BELOW); filter is the default
						-Z					: zero *this tables packet counter
						-A [chain]			: append *this rule to chain [chain]
						-I [chain] <int>	: insert *this rule to chain [chain] at position <int>
						-D [chain] <int>	: deletes <int>th rule from [chain]
						-D [chain] [...]	: deletes rule matching [...] from [chain]
						-F [chain]			: flush; deletes all rules from [chain]
						-N <string>			: creates a new chain called <string>
						-p [protocol]		: specifies protocol used (all protocol names from /etc/protocols are allowed)
						-s [address]		: specifies source address
						-d [address]		: specifies destination address
						-j [target]			: jump to [target]
						-m [extension]		: specifies extension module to be used
					¤[extension]
						>can be listed with "iptables-extentions" (see BELOW)
						>makes variable extra options available, resulting in the following syntax:
							iptables [options] -m [extras] ([...])
						Standard_extentions:
							owner:
								>operates on packet creator for locally generated packets
								>only valid in OUTPUT and POSTROUTING chains
								[extras]:
									--uid-owner [username||user_id]		: matches user
									--gid-owner [groupname||group_id]	: matches group
									--suppl-groups						: causes groups specified to be matched in the supplementary groups of a process
									--socket-exists						: match if the packet is associated with a socket
					Files:
						/etc/iptables/
							├── empty.rules
							├── ip6tables.rules
							├── iptables.rules			: configuration file that is loaded on first start up
							└── simple_firewall.rules
						/etc/sysconfig/iptables		: system-wide admin created configuration file
					Config:
						>no variables and shit
						#[...]	: leaves a comment
						syntax:
							*[table]
								:[chain] [target] [[packet_counter]:[byte_counter]]
								[RULE]
								([...])
							COMMIT
							([...])
						[RULE]:
							>normal iptables rules with the "iptables" chopped off from the front
							>since rules are ordered as is "-A" will be used almost always, as that
							  is by definition the current position
			Purple(
				iptables-extentions 		: lists available extension modules)

				iptables-save [options]		: saves iptables rules in a iptables script format
					-c			: include byte and packet counters; zerod by default
					-t [table]	: specifies table to save; by default all are saved
					-f [file]	: specifies output file
				iptables-restore [options] [file]	: runs iptables script


			arp 				: Address Resolution Protocol 		//move and correct; ?!
				-a					: list all devices (ip, mac) on the connected networks

			ip [options] <object>	: shows and or manipulates routing, network devices, interfaces and tunnels
                -s  : statistics
                <object> [<verb>]
                    a(ddress)			: lists interfaces and their statuses
                        [filter]
                            <interface>
                    l(ink)
                        <verb>
                            link [up|down]
                        [filter]
                            dev <interface>
                    route
                    neighbor
                common verbs:
                    s(how) [filter]    : print relevant information; default

			ifconfig 			: ==ipconfig	
			
			nslookup [website] 	:
			
			ss					: shows open ports on the localhost //move; ?!

			netstat 			: shows open ports on the localhost	//move; ?!
				-a

			route 				:

			ping [options] [destination]		: send ICMP ECHO_REQUESTS to network host; networking debugging tool
					-c <int>	: stop after <int> requests
					Errors:
						Name or service not known	: DNS resolution failed
						Destination Net Unreachable : destination is either nonexistent, offline or refuses to respond
						Request timed out			: no response was received from the router in time

			traceroute [options] [destination]	: print the route packets trace to network host; networking debugging tool
				NOTE: '*'s in the output are servers who refuse to answer

			networkmanager	: service responsible for managing network connections
				XXX:
					>networkmanager daemon
					{ systemctl start NetworkManager }
				Files:
					/etc/NetworkManager/
						 └── conf.d/
						 	(└── 90-dns-none.conf )	: file specifying that /etc/resolve.conf shall not be overwritten
													   because the admin would like to config by hand		// definitly not how it should be stored; ?!
													   { [main]
														 dns=none
													   }

			curl [options] [url]		: tool to transfer data from or to a server (outputs the whole website)
										   (please specify the protocol in url {https})
					-X [method]				: sends [method] request
					-d <string>				: sends the specified data in a POST request to the HTTP server
					-H [file||string]		: passes custom header information
					-b [file||string]		: sends cookie data from [file||string]
					-c [path]				: specifies file to save cookies to
					-L						: follow redirects
				Download_relevant:
					--parallel						: send requests simultaneously
					-O								: download into [file] with default name (specified by the server)
					-o [file]						: download into output [file]
					--connect-timeout [seconds]		: Maximum time allowed for connection

			wget [options] [url]	: non-interactive network downloader
				-O [file]		: save output as [file]
				-i [file]		: download all pages listed in [file] (plain text file)
				-p				: download with prerequisites too (*.css, *.js)
				-k				: convert link to local relative
				-r				: recursive
					--level=<int>	: dont go deeper than <int> layers
				-np				: no parent; do not save upwards (as sometimes a site will link upwards),
								   when recursively downloading
				-nc				: no clobber; do not re-download files already saved
				--random-wait	: wait random integrals so [url] may not ban you for extensive, obviously auto bandwidth usage
				--restrict-file-names=<string>	: do not use chars specified by <string> in file names, rather replace them
					¤<string>
						>options are comma-separated
						unix		: escape: '/', control chars 0-31 128-159
						windows		: escape: '\\', '|', '/', '"', '*', '<', '>'; '?' -> '@'; ':' -> '+'
						nocontrol
						ascii
						lowercase
						uppercase
                Command_to_archive_site:
                    \wget --verbose --show-progress --restrict-file-names=windows --recursive --no-parent --convert-links --page-requisites --no-clobber --continue -e robots=off <link>



	DEVICES: //(0x00000316)➞
		Printers:
			cup:
				>a standards-based, open source printing system
				XXX:
					systemctl start cups
			lp [options] [file]		: printing utility
		Scanners:
			sane:
				>"Scanner Access Now Easy"
			GNOME Document Scanner	: sane front end; based
	


	MISC:
		which [program]				: returns where [program] is located			//move; ?!

		neofetch					: shows Linux system information with distribution logo

		echo [options] <string>		: "echos" (prints) <string> appropriate of [options]
			-n	: do not print trailing new line
			-e	: enable escape sequence interpretation
			-E	: disable escape sequence interpretation; default

		printf <string>				: prints formatted string; as far as i can tell it is literally the C printf without "()"-s
  
		date						: prints current date and time

		cal							: prints a calendar
			-n [num]					: show [num] months starting from the current one
			-y							: show the whole current year

		sleep [number][sufix]		: wait (||sleep) for [number] of [sufix]-es; [number] may be an <int> or [float]
			sufixes:
				s		: seconds (default)
				m		: minutes
				h		: hours
				d		: days

		time [command]				: outputs how much time [command] took to execute
			-print						: print the timing summary in the portable Posix format

		shuf						: shuffle input
			-n <int>					: return the first <int> elements
			--random-source=[file]		: collects bytes from [file] to improve the pseudo randomness

		xargs [options] [commad]	: runs [command] with everything it gets from a pipe
			-i							: allows the input to be symbolized as "\"{}\""; { locate asd | xargs -i cat "{}" }
	 		-d [char]					: use [char] as custom delimiter
		
		tty				: display terminal path

		stty [options]	: display terminal information
			--all
		
		xclip [options]				: clipboard
			[pipe]						: save output of other command to xclip
			-o							: print to stdout
		
		od							: dump files in octal and other formats

		tput [...]		: initialize or query terminal properties
			colors			: prints the number of colors supported by the terminal (emulator)

		notify-send [options] [string1] [string2]	: sends desktop notification;
													   [string1] is the title (and usually displayed accordingly);
													   [string2] is the main message
			-u [urgency]	: specifies urgency
				low
				normal
				critical
			-i [icon]		: specifies icon
				>icons are Đdesktop icon-theme dependentĐ


	dirname <string>		: prints path of the last (deepest) file or directory in <string>
	basename <string>		: prints file name of the last (deepest) file or directory in <string>; { /home/you/Desktop/your_file.txt -> your_file.txt }
	tr [options]			: translates, squeezes and or deletes chars from stdin
	seq [options] [int1] [int2]	: prints a sequence of numbers
	uptime					: prints logged in users and for how long has the season going on
	hostname: prints the hostname 
	clear 	: clears terminal

	SHELLS:
		chsh [user]		: change login shell of [user]
		>command interpreter
		Builtins:
			>commands that are built into the shell { echo }
			>any command ĐcouldĐ be a builtin
			>builtins are faster then actual processes
			>commands are checked against builtins before programs
		¤common shells:
			>sh
			>bash
			>dash
			>tcsh
			>fish
			>zsh
		Login_files:
			>in hierarchical order
			/etc/profile	: system wide
			[shell specific files]

#define distros
#define distributions::: //(0x00000317)➞(\
I------------------------------------\
I  ____   _      _                   \
I  |   \ (_) ___| |_  _ _  __   ___  \
I  | |) || |(_-<|  _|| '_|/ _ \(_-<  \
I  |___/ |_|/__/ \__||_|  \___//__/  \
I                                    \
I------------------------------------I
//(0x00000265)➞
	>a Linux distributions is no more then a (possible modified) Linux kernel
	  with some software already installed from which the most important is the
      package manager and its preset repos

	Table_of_default_credentials:	// ?!
		Alpine	    ¬
		Kali	    toor
        Mikrotik    admin:¬

	Debian: //(0x00000318)➞
Red(		   _,met$$$$$gg.
			,g$$$$$$$$$$$$$$$P.
		  ,g$$P"     """Y$$.".
		 ,$$P'              `$$$.
		',$$P       ,ggs.     `$$b:
		`d$$'     ,$P"'       $$$
		 $$P      d$'         $$P
		 $$:      $$.       ,d$$'
		 $$;      Y$b._   _,d$P'
		 Y$$.    `.`"Y$$$$P"'
		 `$$b      "-.__
		  'Y$$
		   `Y$$.
			 `$$b.
			   `Y$$b.
				  `"Y$b._
					  `""""
)
	>grandpa of most distros
	>very stable (that is, the stable releases)
	>ideal for servers

	Ubuntu: //(0x00000319)➞
Yellow(				.-/+oossssoo+/-.
				`:+ssssssssssssssssss+:`
			  -+ssssssssssssssssssyyssss+-
			.ossssssssssssssssssdMMMNysssso.
		   /ssssssssssshdmmNNmmyNMMMMhssssss/
		  +ssssssssshmydMMMMMMMNddddyssssssss+
		 /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/
		.ssssssssdMMMNhsssssssssshNMMMdssssssss.
		+sssshhhyNMMNyssssssssssssyNMMMysssssss+
		ossyNMMMNyMMhsssssssssssssshmmmhssssssso
		ossyNMMMNyMMhsssssssssssssshmmmhssssssso
		+sssshhhyNMMNyssssssssssssyNMMMysssssss+
		.ssssssssdMMMNhsssssssssshNMMMdssssssss.
		 /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/
		  +sssssssssdmydMMMMMMMMddddyssssssss+
		   /ssssssssssshdmNNNNmyNMMMMhssssss/
			.ossssssssssssssssssdMMMNysssso.
			  -+sssssssssssssssssyyyssss+-
				`:+ssssssssssssssssss+:`
					.-/+oossssoo+/-.
)
		>most used
		>Debian based
		>windows of linuxes
		>botnet


	Kali: //(0x0000031a)➞
Blue(				..,;:ccc,.
				  ......''';lxO.
		.....''''..........,:ld;
				   .';;;:::;,,.x,
			  ..'''.            0Xxoc:,.  ...
		  ....                ,ONkc;,;cokOdc',.
		 .                   OMo           ':ddo.
							dMc               :OO;
							0M.                 .:o.
							;Wd
							 ;XO,
							   ,d0Odlc;,..
								   ..',;:cdOOd::,.
											.:d;.':;.
											   'd,  .'
												 ;l   ..
												  .o
													c
													.'
													 .
)
		>Ubuntu/Debian based
		>for Penetration testing
		>pretty fucking good
		>ideal for beginners on desktop who want to become power users



	Arch: //(0x0000031b)➞
Blue(					   -`                    
						  .o+`                   
						 `ooo/                   
						`+oooo:                  
					   `+oooooo:                 
					   -+oooooo+:                
					 `/:-:++oooo+:               
					`/++++/+++++++:              
				   `/++++++++++++++:             
				  `/+++ooooooooooooo/`           
				 ./ooosssso++osssssso+`          
				.oossssso-````/ossssss+`         
			   -osssssso.      :ssssssso.        
			  :osssssss/        osssso+++.       
			 /ossssssss/        +ssssooo/-       
		   `/ossssso+/:-        -:/+osssso+-     
		  `+sso+:-`                 `.-/+oso:    
		 `++:.                           `-/+/   
		 .`                                 `/
)
		>bare bones
		>pretty good
		>rolling realise
		>Unstable as always																																	//, come down. Everything else is just dust and sound
		>for newbies its hard to set up
		>ideal for desktop for intermediate users

        Fuck_arch:
                >the reasons while i slowly grew resentful of the distro
                  and also the people surrounding it
            >systemd
            >partial upgrades are trivial to perform and give no warning,
              but can cause serious damage
            -"pacman -S PACKAGE: error: could not determine cachedir mount point"
              /var/cache/pacman/pkg
                >this error is absolutely retarded and cryptic
                -the attitude of the maintiner is bloodbloiling:
                    https://bugs.archlinux.org/task/46169
                    A: "I'd rather not explain how to fix a broken chroot in an error message.\
                        Suggesting that a user disable an important safety feature isn't really wise, either.\
                        For your own sake, perhaps you could use official installation scripts,\
                        rather than random things found on the wiki."
                    Q: "Why do you think the chroot is broken? [...]"
                    A: "But here you are using some \"hacked script\" you found rather than just\
                        \"pacstrap -d /path/to/chroot\" or \"arch-chroot /path/to/chroot\"."
                    Q: "I am afraid you still don't get the point.\
                        I have no pacstrap nor arch-chroot on my host system."
                    A: <no answer>
                    >he could have just pointed the guy towards how to get the magick script,
                      instead he choose to be an unuseful stuck up asshole;
                      a pattern really
            -"==> ERROR: Running makepkg as root is not allowed as it can cause permanent,\
              catastrophic damage to your system."
                >remind me, am ĐiĐ root or are you?
                >be sensible warn and require a flag and or a timeout {like znc}
            >vi(m) does not come with the core install; NOTE: this is not alpine or gentoo
            >yay cannot be installed through pacman, wasting the users time;
              enforcing speudo-security and "good practices"
            >/etc/sudoers came read-only?
            >windows tier attitude towards power users
            YYY:
                https://bbs.archlinux.org/viewtopic.php?id=237614
                https://bbs.archlinux.org/viewtopic.php?id=237616
                https://bbs.archlinux.org/viewtopic.php?id=270700

		### Arch instalation guide ###	//(0x0000026a)➞
			+ this will leave you with a usable system
			+ this guide assumes a cabled internet connection
			+ the real redpill is that arch installation never ends
			+ NOTE: read all the way through before starting
			1. In the BIOS enable UEFI/EFI and disable
				secure booting
			2. Boot into an installation pendrive
			3. Load appropriate keyboard
				   localectl list-keymaps	: returns [keymap]s
				   loadkeys [keymap]		: sets [keymap] as new keymaps
			4. Create sufficient partitions
				   >preferably dont fuck up this part
				   cfdisk
				   +---------------------------------------------------------------+
				   |					Partitions to create					   |
				   +------------------+-----------+--------------------------------+
				   |       type       |   size    |    command(s) to run on it     |
				   +------------------+-----------+--------------------------------+
				   | EFI system       | >550MB    | mkfs.fat -F32 [this]           |
				   | Linux swap       | 2GB       | mkswap [this] && swapon [this] |	//not technically neceserry
				   | Linux filesystem | the rest  | mkfs.ext4 && mount [this] /mnt |
				   +---------------------------------------------------------------+
				   >[this] stands for the created partition
			5. Install linux
				   pacstrap /mnt base linux linux-firmware
			6. Generate file system table
				   genfstab -U /mnt >> /mnt/etc/fstab
			7. "login" as root of the new system
				   arch-chroot /mnt
			8. Set basic system information
				   ${EDITOR} /etc/hostname
						>setting a hostname
						>choose a host name and write it in the file
						>this "hostname" is going to be the name of
						  the machine, visible to the users and on 
						  the network
						>commonly some permutation of the distros name
				   ${EDITOR} /etc/hosts
						¤insert:
							127.0.0.1	localhost
							::1			localhost
							127.0.1.1	[hostname].localdomain [hostname]
				   ${EDITOR} /etc/locale.gen
						>setting a locale
						>uncomment (delete the '#' from the begining
						  of the line) a line that suites you
						>choose something starting with your 
						  country code and containing "UTF-8"
				   locale-gen				: generates locale
				   ${EDITOR} /etc/locale.conf
						¤insert:
							LANG=[locale]
						>[locale] is the line that got uncommented
						  in /etc/locale.gen
				   ${EDITOR} /etc/vconsole.conf
						>saving keyboard prefrence
						¤insert:
							KEYMAP=[keymap]
			9.  Update pacman databases
					pacman -Syu
			10. Install grub
				>EFI booting must be enable for this step
				>EFI booting can be enabled inside the system BIOS
					pacman -S grub efibootmgr dosfstools os-prober mtools
					mkdir /boot/EFI
					mount [EFI_partition] /boot/EFI
						>[EFI_partition] is most likely /dev/sda1
					grub-install --target=x86_64-efi\
						--bootloader-id=grub_uefi --recheck
				>NOTE: the target might be different for you, but
				  I bet it isnt
					grub-mkconfig -o /boot/grub/grub.cfg
			11. Secure internet connection
					pacman -S networkmanager
					systemctl enable NetworkManager
			12. Make a new user
				>[name] is your freely choosen username
					useradd -m [name]
					passwd [name]
						-> enter choosen password 
					usermod -aG wheel,audio,video,optical,storage [name]
			13. Install sudo
					pacman -S sudo
					visudo
						-> uncomment (delete the '#' from the begining
							of the line) the following lines:
								%wheel ALL=(ALL) ALL
			14. Install a desktop envirement (xfce4)
					pacman -S xorg xfce4 xfce4-goodies lightdm lightdm-gtk-greeter
					systemctl enable lightdm
			15. Pray
			16. Enjoy your new sense of superiority
			>I use arch btw
		#

	Gentoo: //(0x0000031c)➞
Purple(
				 -/oyddmdhs+:.             
			 -odNMMMMMMMMNNmhy+-`          
		   -yNMMMMMMMMMMMNNNmmdhy+-        
		 `omMMMMMMMMMMMMNmdmmmmddhhy/`     
		 omMMMMMMMMMMMNhhyyyohmdddhhhdo`   
		.ydMMMMMMMMMMdhs++so/smdddhhhhdm+` 
		 oyhdmNMMMMMMMNdyooydmddddhhhhyhNd.
		  :oyhhdNNMMMMMMMNNNmmdddhhhhhyymMh
			.:+sydNMMMMMNNNmmmdddhhhhhhmMmy
			   /mMMMMMMNNNmmmdddhhhhhmMNhs:
			`oNMMMMMMMNNNmmmddddhhdmMNhs+` 
		  `sNMMMMMMMMNNNmmmdddddmNMmhs/.   
		 /NMMMMMMMMNNNNmmmdddmNMNdso:`     
		+MMMMMMMNNNNNmmmmdmNMNdso/-        
		yMMNNNNNNNmmmmmNNMmhs+/-`          
		/hMMNNNNNNNNMNdhs++/-`             
		`/ohdmmddhys+++/:.`                
		  `-//////:--.
)
	>bare bones
	>source based (ie. self compiled kernel and software)
	>better than arch in terms of stability
	>takes effort to set up properly even with routine
	>ideal for desktop for power users and supreme /g/entoomen

	?!:
		make && make modules_install && make install


#define init_system:: //(0x0000031d)➞\
I---------------------------------------------------\
I   ___      _ _     ___         _                  \
I  |_ _|_ _ (_) |_  / __|_  _ __| |_ ___ _ __  ___  \
I   | || ' \| |  _| \__ \ || (_-<  _/ -_) '  \(_-<  \
I  |___|_||_|_|\__| |___/\_, /__/\__\___|_|_|_/__/  \
I                        |__/                       \
I---------------------------------------------------I
//(0x0000026c)➞

	>a program reliable for starting the system properly
	>invoked at boot time
	>runs a set of selected programs {networking, desktop manager} to ensure a usable system for the user
	>a program which is meant to be ran by the init system is called a ĐĐserviceĐĐ
	>ĐservicesĐ are most often daemons, but not necessary

--------
 openrc
--------
//(0x0000026d)➞

    YYY:
        https://github.com/OpenRC/openrc/blob/master/service-script-guide.md
	
	rc-service [options] [service] [verb]
		[verb]
			stop
			start
			restart
			status
	
	rc-status [option]
		--servicelist	: lists all installed service
		--all			: lists all serveces enabled
		--list			: lists all ĐrunlevelsĐ

	rc-update [verb] [service] [runlevel]
		>a single service service can be added to multiple runlevels
		add		: enables [service] to be ran at [runlevel]
		del		: disables [service] at [runlevel]; undoes a previous "add" command

---------
 systemd
---------
//(0x0000026e)➞
#define systemd

	systemctl [options] [command]	: queries or sends control commands to the system manager
					>NOTE: [options] are written below [command] here
					status				: opens process tree in a pager
						--no-pager			: do not page
					start [service]		: starts [service]
					restart [service]	: restarts [service]
					stop [service]		: stops [service]

	journalctl [options]	: view service logs
		-u [service]


#define terminal\
I-----------------------------------------------\
I	 _____                   _             _ 	\
I	|_   _|                 (_)           | |	\
I	  | | ___ _ __ _ __ ___  _ _ __   __ _| |	\
I	  | |/ _ \ '__| '_ ` _ \| | '_ \ / _` | |	\
I	  | |  __/ |  | | | | | | | | | | (_| | |	\
I	  \_/\___|_|  |_| |_| |_|_|_| |_|\__,_|_|	\
I-----------------------------------------------I
//(0x0000026f)➞
	EMULATORS: //(0x0000031e)➞
		Common_terminal_emulators:
			xfce4-terminal
			qterminal
			st

		st:
			>simples or suckless terminal
			>ironically, it sucks a shit ton, ĐĐ_avoid at all costs_ĐĐ
			st [options]		: opens st
				-a	: sets alternative screen mode to false
				-c	:
				-e	:
				-f	:
				-g	:
				-i	: sets resizeableness to false
				-o	:
				-l	:
				-n	:
				-t	: sets title
				-w	:
				-v	: version

	MULTIPLEXERS: //(0x0000031f)➞
		>technically they are considered emulators, however they are very distinct in that
		  they dont necessary have graphical front ends (they need another terminal (emulator) to run inside of),
		  and they can emulate multiple terminals without window magic (ie. tabs and windows are displayed with text)
		>server-client based
		>greatly improve workflow especially on systems with a single display
		screen:
			>GNUware
            >NOTE: has the worst name imaginable; theres little info on it online to begin with (as usual with GNUware),
                    but googling it is borderline impossible;
                    this is the single reason that i decided to go with tmux instead
			screen [options]		: terminal manager; great for making shells independent from terminal emulator windows
									and thereby sending them to the background
									pass no arguments(/[options]) to create a screen session
				[options]:
					-S <string>				: create screen session named <string>
					-ls						: list running screen sessions
					-r (<string>)			: reattach to screen session; if passed in the program will try to match <string>
					-X [screen] [command]	: pass [command] into [screen]; (specify with an -S [...])

				short cuts:
                    >NOTE: <leader> is user defined, but "CTRL + b" by default
                            and often rebound to "CTRL + a"
                    <leader> + [c]      : create new window
                    <leader> + <int>    : swap to window <int>
					<leader> + [d]		: detach from screen session
					<leader> + [k]		: quit (Kill) screen session
					[ctrl] + [d]			: terminate screen session

				commands inside screen:
					quit					: closes screen session
		tmux:
			tmux [options] [verb]
				>with no options a new session is created
				[verb]:
					attach ([session])		: connect to existing session
					new-session [options]	: creates now session
						-t [session]			: attaches to an existing session as a group session;
												   ie. tabs and processes are synced, but the sessions in the group can
												   work (view tabs/type) independently; great if one wishes to work inside
												   the same session on multiple monitors
					list-sessions			: list running sessions
		Zellij:
			pass


#define PKG_manager:: //(0x00000320)➞\
I-----------------------------------------------------------------------\
I	______ _   _______                                               	\
I	| ___ \ | / /  __ \                                              	\
I	| |_/ / |/ /| |  \/  _ __ ___   __ _ _ __   __ _  __ _  ___ _ __ 	\
I	|  __/|    \| | __  | '_ ` _ \ / _` | '_ \ / _` |/ _` |/ _ \ '__|	\
I	| |   | |\  \ |_\ \ | | | | | | (_| | | | | (_| | (_| |  __/ |   	\
I	\_|   \_| \_/\____/ |_| |_| |_|\__,_|_| |_|\__,_|\__, |\___|_|   	\
I													  __/ |          	\
I	                                                 |___/           	\
I-----------------------------------------------------------------------I

	>a program thats responsible for installing, upgrading, syncing and uninstalling
	  software programs and libraries

	Common_pakage_managers:
		apt      ->      Debian Linux based systems
		rpm      ->      Redhat Linux based systems
		portage  ->      Gentoo Linux based systems
		pacman   ->      Arch Linux based systems

-----------
    apt: //(0x00000321)➞   
-----------
	dpkg 	:																																			(
		-i [file]	: install [file]; (.deb)
		-l			: lists installed apps 

	apt([specifier]) [options]		: invokes apt command
		[specifier]:
			-get		: for installation; default
				install	[options] [package]	: installs package
					--only-upgrade				: upgrades package only if its installed already
				update						: updates local database of packages
				upgrade						: updates all packages to the versions specified by the local database
			-cache		: for local package database
				search <string>		: search local database of packages for <string>
		remove [package]		: removes [package]
		purge  [package]		: removes [package] and its config files
		search <string>			: searches for package
		autoremove				: removes automatically all unused packages
		moo						: (__)
								  (oo)
			                /------\/
			               / |    ||
			              *  /\---/\
			              	 ~~   ~~
					..."Have you mooed today?"...


--------------
    pacman: //(0x00000322)➞   
--------------
	makepkg [otions]	: package build utility
		-s		: sync dependencies; install missing ones with pacman
		-i		: install
		-c		: clean up work files after build
		-L		: create log

	pacman [operation] [options] (<string>)
		>operations and options can be glued together under one hypen { -Qiv }
		[operation]:
			-D		: database
			-Q		: query database of local packages
			-R		: remove
			-S		: sync database of online pacman packages
			-T		: test dependencies
			-U		: upgrade
			-F		: files
		[options]:
			>the letters at the start of the lines are indicators of which operations 
			  the options are compatible with
			>if the options mean different things in different contexts, the meanings are presented
			  in the same order as the letters at the start of the lines and separated with double ';'s
all			-V							: prints version and quits
all			-h							: prints help and quits
all			-v							: verbose
all			-q							: quite
all			--color=<string>			: sets output color; "never" color off; "always" color on; 
										   "auto" color on when outputting to a terminal
all			--noconfirm					: bypass any "are you sure" messages
all			--confirm					: cancels previous --noconfirm
.			--disable-download-timeout	: disables timeouting
SQ			-g ([group])				: lists all groups or all members of [group]
SQ			-i ([package])				: prints informations of [package]
SQR			-s ([regex])				: searches for regular expression (SQ);; recursive (remove dependences too if no other package uses them)
Q			-m							: lists foreign packages (the ones that are not in the sync database)
QR			-n							: lists native packages (the ones that are in the sync database);;
											nosave; do not backup anything
SR			-c							: clean; remove no longer installed packages and old local package databases;; 
										   cascade; forced recursive (remove dependencies too)
SR			-u							: system upgrade (upgrade all packages);; unneeded (no longer needed dependencies)
S			-w							: download only (do not update or install)
FS			-y							: forced update of all databases

.		### Troubleshooting ###
			404 error on install	: the local database of available packages is out-of-date; solve by specifing the "-y" flag (see ABOVE)
			conflicting files		: try "pacman -Sc" and reattempt; if it doesnt work delete the files manually, pray and reattempt
		/var/lib/pacman	: ?!


#define portage
---------------
    portage: //(0x00000323)➞   
---------------
    >build around source based distribution (the client compiles)
    >supports bin packages
    -easy to make your own overlay
        >can host it on a git server (or just about anything else)
        >can host it over tor

	Files:
		/etc/portage/
			make.conf
		/var/lib/portage/
			world	: list file of all explicitly installed packages


	emerge [options] <action>		: used for installing/uninstalling packages
		--ask				: detail what will be done and ask back
		--fetchonly			: download, but do not install
		--keep-going=y		: ignore as many errors as possible
		--resume			: when installing multiple packges, do not exit when one fails, if possible
		--usepkgonly        : install binary package or fail
		<action>
			<package>			: installs [package] { emerge sys-boot/grub }
			--search <string>	: searches for packages containing <string> in their names; prepend <string> with '@' to perform a regex search
			--sync				: update package database
			--unmerge [package]	: uninstall [package]

	equery [options] <action>		: used for getting information on installed packages
        XXX:
            app-portage/gentoolkit
        YYY:
            --help  // its so good i have no reason to explain the tool in detail
		<action>
			list <string>		: list all installed packages matching <string>;
                                   string may contain '*'s as wildcards

    e-file <file>   : locates upstream packages which provide the file <file>
        XXX:
            app-portage/pfl

	etc-update	: interactive program to manage required/suggested /etc/ file changes

	eBuilds:
        YYY:
            man 5 ebuild
		<category>/<name>-<version>.ebuild
		>the mechanism portage uses to build/install packages
		>an ebuild file makes a package
		>bash script obeying special portage conventions
        -conventional categories which are useful for your own ebuilds:
            ${BLOATED_THING}-${MODULE}/
            acct-group/
            acct-user/
            app-${PLATFORM}/
            app-${PROGRAM}/
            app-accessibility/
            app-admin/
            app-alternatives/
            app-antivirus/
            app-arch/
            app-backup/
            app-benchmarks/
            app-cdr/
            app-containers/
            app-crypt/
            app-dicts/
            app-doc/
            app-editors/
            app-emulation/
            app-forensics/
            app-metrics/
            app-misc/
            app-office/
            app-officeext/
            app-shells/
            app-text/
            dev-${LANGUAGE}/
            dev-build/
            dev-db/
            dev-debug/
            dev-embedded/
            dev-games/
            dev-gap/
            dev-lang/
            dev-libs/
            dev-util/
            dev-vcs/
            games-${genre}/
            games-util/
            gnome-base/
            gnome-extra/
            gui-apps/
            gui-libs/
            gui-wm/
            mail-client/
            mail-filter/
            mail-mta/
            media-fonts/
            media-gfx/
            media-libs/
            media-plugins/
            media-radio/
            media-sound/
            media-tv/
            media-video/
            net-${PROTOCOL}/
            net-analyzer/
            net-firewall/
            net-im/
            net-libs/
            net-misc/
            net-print/
            net-proxy/
            net-voip/
            net-vpn/
            net-wireless/
            sci-${FIELD}/
            sci-libs/
            sci-visualization/
            sec-keys/
            sec-policy/
            sys-apps/
            sys-auth/
            sys-block/
            sys-boot/
            sys-cluster/
            sys-devel/
            sys-fabric/
            sys-firmware/
            sys-fs/
            sys-kernel/
            sys-libs/
            sys-power/
            sys-process/
            virtual/
            www-apps/
            www-client/
            www-misc/
            www-plugins/
            www-servers/


    Overlays:
        YYY:
            /etc/portage/repos.conf/eselect-repo.conf
            https://gpo.zugaina.org/
        NOTE: dont forget to update references:
		    $ emaint --auto sync

.	### Gentoo System Upgrade ###
		emaint --auto sync
		emerge -DavuN --keep-going y --backtrack 100 @world
		emerge --ask --depclean
		emerge --ask @preserved-rebuild

.	### Copy source to $PWD ###
		DISTDIR=$(realpath .) ebuild <path_to_<package>.ebuild> fetch

.	### Emerge Touble shooting ###
		-required flag:
			{
				"The following REQUIRED_USE flag constraints are unsatisfied:\
				 <foo>? ( <bar> )"
			}
			+ for using a USE another must be USE-d too
			+ in the example above "<foo>" requires "<bar>"
			+ you either add "<bar>" to the use flags or remove "<foo>"
			+ the error mentions "REQUIRED_USE", but that's their retarded way
			   of saying "required USE"


#define X11\
I----------------------------------\
I    							   \
I     /$$   /$$   /$$     /$$      \
I    | $$  / $$ /$$$$   /$$$$      \
I    |  $$/ $$/|_  $$  |_  $$      \
I     \  $$$$/   | $$    | $$      \
I      >$$  $$   | $$    | $$      \
I     /$$/\  $$  | $$    | $$      \
I    | $$  \ $$ /$$$$$$ /$$$$$$    \
I    |__/  |__/|______/|______/    \
I                              	   \
I----------------------------------I
//(0x00000276)➞

	xset [options]		: user preference utility for X
		-q						: queries current user preferences
		r rate [delay] [rate]

	setxkbmap [options]	: configure virtual X keyboard
		{ setxkbmap -layout hu,ru -option grp:rwin_toggle }

#define xfce4\
I----------------------------------\
I    __   __ __            ___     \
I    \ \ / // _| (Xfce4)  /   |    \
I     \ V /| |_ ___ ___  / /| |    \
I     /   \|  _/ __/ _ \/ /_| |    \
I    / /^\ \ || (_|  __/\___  |    \
I    \/   \/_| \___\___|    |_/    \
I----------------------------------I
//(0x00000277)➞

	FILES:
		pass

	Shortcuts:
		[Alt] + [Tab]							: cycle windows focus
		[Alt] + [F1]							: starts xfhelp4
		[Alt] + [F2]							: starts xfrun4
		[Alt] + [F4]							: closes window
		[Alt] + [F5]							: maximizes window
		[Alt] + [F6]							: maximizes vertically
		[Alt] + [F7]							: maximizes horizontally
		[Alt] + [F8]							: hides window
		[Alt] + [F9]							: shades window
		[Alt] + [F10]							: sticks window
		[Alt] + [F11]							: toggles full screen
		[Alt] + [Ctrl] + [Delete]				: lock the screen
		[Shift] + [Alt] + [Up_Arrow]			: resizes window up
		[Shift] + [Alt] + [Down_Arrow]			: resizes window down
		[Shift] + [Alt] + [Left_Arrow]			: resizes window left
		[Shift] + [Alt] + [Right_Arrow] 		: resizes window right
		[Shift] + [Alt] + [Page_Up]				: raises window
		[Shift] + [Alt] + [Page_Down]			: lowers window
		[Ctrl] + [Shift] + [Alt] + [Up_Arrow]	: moves window up
		[Ctrl] + [Shift] + [Alt] + [Down_Arrow]	: moves window down
		[Ctrl] + [Shift] + [Alt] + [Left_Arrow]	: moves window left
		[Ctrl] + [Shift] + [Alt] + [Right_Arrow]: moves window right
		workspaces: ;
			[Ctrl] + [F(N)]					: goes to workspace number N (1-9)
			[Alt] + [Insert]				: adds a new workspace
			[Alt] + [Delete]				: delete-s a workspace
			[Ctrl] + [Alt] + [Right_Arrow]	: swaps to next workspace
			[Ctrl] + [Alt] + [Left_Arrow]	: swaps to previous workspace
			[Alt] + [Ctrl] + <int>			: moves a window to workspace number N (1-9)
			[Alt] + [Ctrl] + [Home]					: moves the window to previous workspace
			[Alt] + [Ctrl] + [End]					: moves the window to next workspace

	xdotool:
		pass
						  
--------------------------------------------------------------------
#define bash: //(0x00000324)➞\
I----------------------------------------------------------------\
I----------------------------------------------------------------\
I----------------------------------------------------------------\
I			  /$$$$$$$                      /$$      			 \
I			 | $$__  $$                    | $$      			 \
I			 | $$  \ $$  /$$$$$$   /$$$$$$$| $$$$$$$ 			 \
I			 | $$$$$$$  |____  $$ /$$_____/| $$__  $$			 \
I			 | $$__  $$  /$$$$$$$|  $$$$$$ | $$  \ $$			 \
I			 | $$  \ $$ /$$__  $$ \____  $$| $$  | $$			 \
I			 | $$$$$$$/|  $$$$$$$ /$$$$$$$/| $$  | $$			 \
I			 |_______/  \_______/|_______/ |__/  |__/			 \
I----------------------------------------------------------------\
I----------------------------------------------------------------\
I----------------------------------------------------------------I
//(0x00000278)➞

	>"Bourne Again SHell"

	XXX:
		GNU Readline library	: used for all input operations (see AT "C++/Readline\/History")

	NOTE:
		>as bash uses readline for input, all readline shortcuts apply (in theory however
		  terminal emulators may have confronting bindings) (see AT "C++/Readline\/History")

	bash [options]		: launches interactive bash session
		-f					: disable globing (see AT "./Globs")
		--noprofile			: ignore bash profile files (/etc/profile, ~/.bash_profile, ~/.bash_login, ~/.profile)
		--norc				: ignore bashrc files (~/.bashrc)

	Files: //(0x00000325)➞
		.bashrc			: where settings and preferences are read from
		.bash_profile	: where strictly interactive shell settings and preferences are read from 
		.bash_history	: where command history is stored
		.bash_logout	: where commands to be executed on log out are read from

	Builtins: //(0x00000326)➞
		>see controlling builtins under ĐĐenableĐĐ, BELOW
		. [file]	: execute bash script [file], in the current shell
			{ $ bat example.sh
			  ───────┬───────────────────
			         │ File: example.sh
			  ───────┼───────────────────
			     1   │ goo="nar"
			  ───────┴───────────────────
			  $ ./example.sh
			  $echo ${goo}

			  $ . ./example.sh
			  $ echo ${goo}
			  nar
			}
		:		: null command; does nothing; its exit status is always success
		[ 																																						]
		alias	: lists defined aliases
			alias [name]="[command]" : creates alias
			unalias [name]			 : deletes alias
			>to add a permanent alias one must specify it in a config file {".bashrc"} (see AT "/Bash/Files")
			>[alias] [...] will append [...] to the called command as argument(s)
			>NOTE: to never use an alias or alternatively put, escape it, one can prefix any bash command with a '\\' char
				{ $ alias pwd="echo Dunno mate, somewhere..."
				  $ pwd
				  Dunno mate, somewhere...
				  $ \pwd
				  /home/user
				}
		bg		: see AT /Linux/Processes
		bind	: sets readline keybinding from the command line
		break  	: exits the current loop
		builtin [builtin] [args]	: executes [builtin] with [args] passed;
									   never does a binary lookup
		caller
		cd [folder]					: changes directory
		command
		compgen
		complete
		compopt
		continue
		declare [options] [var declaration]	: declares var with special traits
						>use a '+' to instead remove an attribute from a var (yes, yes really)
						-a		: array
						-f		: function name
						-i		: int
						-r		: read only
						-x		: export; make global
		dirs				: prints directory stack; see AT ../Directory_stack
		disown						: disown (separate; make independent of) a program from the shell; use with '&'
										{mousepad & disown}
		echo <string>		: echoes <string> back
		enable [options]	: controls builtins
			-a || -p			: prints all builtins
			-n [builtin]		: disables [builtin]
			-s					: prints POSIX "special" builtins
			-f [file]			: load builtin
			-d [builtin]		: unload builtin [builtin] loaded with -f
		eval <string>			: evaluates <string> as a bash command
		exec
		exit
		export
		false
		fc
		fg					: foreground; brings background process to the foreground
		getopts	<string> [name]		: utility for easy option parsing;
									   stores parsed options in [name];
									   <string> is a not separated list of expected options;
									   options expecting a meta option shall have a ':' after them;
									   meant to be used in a while loop;
									   saves progress index into ${OPTIND};
									   if calling getopts multiple times is desired ${OPTIND} must be manuali reset to 1
									   saves the meta option to ${OPTARG}
				{@begin=sh@
				  while getopts "hvo:" MYVAR; do		// please ignore the '(' at the start of the lines
				    case "$MYVAR" in
(				      h) my_help ;;
(				      v) my_version ;;
(				      o) my_option=${OPTARG} ;;
				    esac
				  done
				@end=sh@}
		hash
		help		: display information about builtins
		history
		jobs
		kill
		let
		local
		logout
		mapfile
		popd				: pops directory stack; see more AT ../Directory_stack
		printf
		pushd				: pushes a path to the directory stack; see more AT ../Directory_stack
		pwd
		read [options] [var] : reads a line and stores it in [var]
			-r	: do not allow backslashes to escape any chars
		readarray
		readonly [var-name]	: makes [var-name] readonly (const); [name] must be assigned after hand
		return
		set
		shift <int>		: shift positional parameters;
						   rename the positional parameters $<int>+1,$<int>+2... to $1,$2... if <int> is
						   not given, it is assumed to be 1
		shopt			: "SHell OPTion"; controls internal bash options
		source [FILE]	: alias of '.'; see ABOVE
		suspend
		test
		times
		trap
		true
		type
		typeset
		ulimit
		umask
		unalias
		unset [var-name]	: delete-s [var-name]; NOTE: [var-name] is only the name, no '$' is needed;
								readonly variables cannot be unset
								{ $ MYVAR="my value"
								  $ echo $MYVAR
								  my value
								  $ unset MYVAR
								  $ echo $MYVAR
								  
								  $ 
								}
		wait

	Globs: //(0x00000327)➞
		>sometimes also called ĐwildcardsĐ
		>used for matching patterns
		>do not match hidden files (see AT ./Glob_related_options)
		>can be escaped { \* }
		?		: any (one) char
		*		: any or none chars
		[(!||^)[...]||[keyword]] : a list of chars from which one is to be matched { [02468] }; '!' and '^' mean not { [!a] }
			>case sensitive
			>'-' can be used to symbolize a range { [0-9] } { [a-z] } { [A-Z] }
			[keyword]:
				[:alnum:]	: any alphanumeric char
				[:space:]	: any whitespace char
				[:digit:]	: any digit char, '_' or '.'
		Extended_globs:
			>turned off by default
			XXX:
				shopt -s extglob
			>can be nested
			[specifier]([pattern](|pattern[|[...]]))
				[specifier]:
					?	: matches zero or one occurrences of the patterns
					*	: matches zero or more occurrences of the patterns
					+	: matches one or more occurrences of the patterns
					@	: matches occurrences of atleast one of the patterns
					!	: matches anything not containing any of the patterns
				[pattern]:
					>string { ls @(M|S)* -> all files starting with an 'M' or 'S' }
					>not necessary, but sometimes a glob expression (particularly in '!' expressions) { ls !(*.jpg|*.gif) -> all non-jpgs and non-gifs}
				{ ls !(*Megadeth*|*01.*) -> lists all albums (presuming a nice and orderly naming of them) except the
						the first ones of a band and the ones made by Megadeth }
		Glob_related_option:
			extglob			: see ABOVE
			nullglob		: expands non-matching glob extension to an empty string rather then itself
			dotglob			: makes the '*' glob match hidden files too, but not .. or .
			globstar		: makes "**" match all files and folders recursively; "**/" will only match folders
			failglob		: reports an expansion error if no matches are found

	Directory_stack: //(0x00000328)➞
		>a container of stored directories
		>for fast and easy directory manouvering
		>the directory on the top of the stack is always the current working directory
		>the stack is 0 indexed
	   (>all following commands are builtins)																												(
		dirs					: prints directory stack
		pushd ([path]) ([num])	: pushes [path] to the top of the stack; if no [path] is supplied, swaps the top two directories;
								   [num] is an index to bring forward other stack members
		popd ([num])			: removes the [num] indexed directory from the stack; if no [num] is supplied, the top is defaulted

	SCRIPTING: //(0x00000329)➞
		#!/bin/bash
		>you are obviously gonna be using bash commands and variables
		Comments: //(0x0000032a)➞
			#[comment]		: single line
			>multi line comments are feasible, but not intended; just use '#'

		Variables: //(0x0000032b)➞
			>every variable behaves as a string being copy pasted left and right
			¤list of builtins which manipulate variables
				>readonly
				>unset
			[name]=[value]			: assign variable a variable; do not use whitespaces
			$[name] || ${[name]}	: reference an already declared variable
										>it is recommended to use curly braces whenever referencing one ( ${[name]} ),
										 otherwise it might be subject to word splitting
									{ $ MYVAR="some value"
									  $ echo ${MYVAR}                                                                                                                                 
									  some value                                                                                                                                                   
									}
			${#[name]}				: expands to the length of [name]
			Strings:
				>0 indexed
				${[name]:<int>}				: expands to ${[name]} from the <int>th char until the end
				${[name]:[int-1]:[int-2]}	: expands to ${[name]} from the [int-1]th char until the [int-2]th char
			Arrays:
				>always 1 dimensional
				Indexable:
					>not required to be continuous 
					>every unassigned position will return an empty string
					[name]=([values])			: declares and assigns an array; [values] is a ${IFS} separated list of strings
					[name]<int>=[value]			: declares an array and assigns a single, arbitrary index of it
					[name]+=([values])			: concatenates [values] to an array
					$[array-name]				: expands to the first member of [array-name]
					${[array-name][<int>]}		: expands to the <int>th member of [array-name]
					${[array-name][*]}			: expands to every member of the array separated by the first char of ${IFS}
				Associative:
					pass
			Default: //(0x0000032c)➞
				>otherwise called keyword variables
				<int>			: argument(/positional parameter) number <int>; between 1-9, to access later arguments see AT "../Builtins/shift";
								   0 is always the scripts name
				@				: array of arguments(/positional parameters) (starting from one);
								   NOTE: for POSIX compliance reasons it expands to all elements instead of just the first
				*				: ${@}, BUT when used between quotes it uses ${IFS} (see BELOW) to separate them on return
				#				: number of arguments(/positional parameters) (-1)
				$				: process id of the shell
				!				: process id of the most recently executed background process
				?				: return value of the most recently executed program
				-				: set builtin command?!
				_				: last argument to the previous command; at shell startup, set to the absolute pathname
				auto_resume		: if set to 1, the last background process can be brought to the foreground without a preceding '%'
				BASH			: the full path to file used to invoke current bash instance { /bin/bash }
				BASH_ALIASES	: array of all bash aliases
				BASH_ARGC		: array of all stack frame argument counts; XXX: shopt -s extdebug
				BASH_ARGV		: array of all stack frame arguments; XXX: shopt -s extdebug
				BASH_ARGV0		: $0 (see ABOVE)
				BASH_CMDS		: ?!
				BASH_COMMAND	: the command currently being executed or about to be executed
				BASH_COMPAT		: ?!
				BASH_LINENO		: ?!
				BASHOPT			: a colon-separated list of enabled shell options
				BASHPID			: the process id of current bash instance
				BASH_REMATCH	: ?!
				BASH_SOURCE		: ?!
				BASH_SUBSHELL	: ?!
				BASH_VERSINFO	: array whose members hold version information about this bash instance
						0			: release number
						1			: version number
						2			: patch level
						3			: build level
						4			: release status
						5			: value of MACHTYPE (?!)
				BASH_VERSION	: a string representing the version of the version of the instance of bash
				BASH_XTRACTEFD	: ?!
				CDPATH			: a colon separated list of directories which will be searched by cd for subdirector before . is
				CHILD_MAX		: ?!
				COLUMNS			: number of available columns to print to (width in chars)
				COMP_CWORD		: ?!
				COMP_KEY		: ?!
				COMP_POINT		: ?!
				COMPRELY		: ?!
				COMP_TYPE		: ?!
				COMP_WORDBREAKS : ?!
				COMP_WORDS		: ?!
				COPROC			: ?!
				DIRSTACK		: ?!
				EMACS			: ?!
				ENV				: ?!
				EPOCHREALTIME	: the number of seconds since epoch as a float
				EPOCHSECONDS	: expands to the number of seconds since epoch
				EUID			: expands to the used ID of the current user
				FCEDIT			: ?!
				FIGNORE			: colon separated list of suffixes to never auto complete files possessing them
				FUNCNAME		: ?!
				FUNCNEST		: maximum function nesting, surpassing this value will result in an abort; its for excaping infinite recursiveness
				GLOBIGNORE		: colon separated list of patterns to never match paths possessing them with globs
				GROUPS			: array whose members are the groups the current user is a member of
				histchars		: ?!
				HISTCMD			: ?!
				HISTCONTROL		: colon separated list of options to be used on saving the history
					ignorespace 	: dont save lines beginning with a space
					ignoredups		: dont save lines matching the previous one
					ignoreboth		: short for ignorespace:ignoredubs
					erasedups		: remove all lines matching the current one before saving
				HISTFILE		: the file to be used for saving history
				HISTSIZE		: number of commands to remember; set to 0 to disable history; set to a negative number to make it unlimited
				HISTTIMEFORMAT	: format string to mark the time of execution
				HOME			: the home directory of the current user
				HOSTFILESIZE	: maximum number of lines in $HISTFILE
				HOSTFILE		: the file that contains hostnames that the shell might need to complete
				HOSTIGNORE		: colon separated list of patterns to ignore commands on save
				HOSTNAME		: the host's name {kali}
				HOSTTYPE		: the host's type {x86_64}
				IFS				: Internal Field Separator; expands to space, tab and newline; { ls$IFS-l }
				IGNOREEOF		: number of consecutive EOF signals ([ctrl] + [d]) to be required before exiting the shell
				INPUTRC			: ?!
				LANG			: locale
				LC_ALL			: ?!
				LC_COLLATE		: ?!
				LC_CTYPE		: ?!
				LC_MESSAGES		: ?!
				LC_NUMERIC		: ?!
				LINENO			: the line where its referenced if in a script, otherwise no meaning is guaranteed, but seems to be the number of the commands run from the bash instance
				LINES			: number of lines of the console
				MACHTYPE		: "[CPU]-[manufacturer]-[system]" ($HOSTTYPE-[manufacturer]-$OSTYPE)  {x86_64-pc-linux-gnu}
				MAILCHECK		: specifies how often to check for mail in seconds
				MAILPATH		: colon separated list of file names to be checked for mail
				MAPFILE			: ?!
				OLDPWD			: the previous working directory
				OPTARG			: ?!
				OPTERR			: ?!
				OPTIND			: ?!
				OSTYPE			: operating system type {linux-gnu}
				PATH			: colon separated list of directories to search for commands
				PIPESTATUS		: ?!
				POSIXLY_CORRECT	: ?!
				PPID			: Parents Process ID
				PROMPT_COMMAND	: ?!
				PROMPT_DIRTRIM	: ?!
				PS0				: "Prompt String 0"; displayed before output messages of programs
				PS1				: "Prompt String 1"; the string which is displayed before the shell takes a command
				PS2				: "Prompt String 2"; displayed whenever the shell continues to take commands after a command {multi lines; bash statements {if}}
				PS3				: "Prompt String 3"; displayed inside select (builtin) loops
				PS4				: ?!
				PWD				: the working directory
				RANDOM			: a random number between 0 and 32767
				READLINE_LINE	: ?!
				READLINE_POINT	: ?!
				REPLY			: ?!
				SECONDS			: number of seconds since the current shell was invoked
				SHELL			: full path name of the shell
				SHELLOPTS		: colon separated list of enable shell options
				SHLVL			: Shell Level; number of bash instances running on top of each other
				SRANDOM			: a 32 bit random number
				TIMEFORMAT		: ?!
				TMOUT			: ?!
				TMPDIR			: name of the directory where bash shall place temporary files
				UID				: User ID


		Execution: //(0x0000032d)➞
			[cmd-1] [operator] [cmd-2]
			>by placing operatirs between individual commands the nature of there execution can be altered
			Sequentual:
				>usual behaviour
				>each command in the line waits for the previous to finish execution
				Pure:
					operator:	;
					>experienced through the commandlines basic usage
					>implicitly invoked when a new line is encountered and a builtin doesnt override the behaviour
					>explicit-ly invoked by a semi-colon
					{ // Echo "Done" after sleep-ing is finished
						sleep 10; echo "Done"
					}
				And:
					operator: &&
					>only execute the second command if the first one exited successfully
					{ // only output the contents of my_file.txt if it contains any 'a' letters
						grep 'a' my_file.txt && cat my_file.txt
					}
					>notice how its behaviour is best explained from the perspective of execution,
					  but its perfectly equivalent to a logical and operator
					{ // Echo "True" if ${EXAMPLEVAR} equals "test"
						read EXAMPLEVAR
						[ "$EXAMPLEVAR" == "test" ] && echo "True"
					  // Extending an 'if' statement;
					  //  is ${EXAMPLEVAR} both larger than 10 and lesser than 100?
						read EXAMPLEVAR
					  	if (( 10 < $EXAMPLEVAR )) && (( $EXAMPLEVAR < 100 )); then
							echo "It is."
						fi
					}
				Or:
					operator: ||
					>only execute the second command if the first one exit value indicates failure
					{ // only output the contents of my_file.txt if it does not contain any 'a' letters
						grep 'a' my_file.txt || cat my_file.txt
					}
					>notice how its behaviour is best explained from the perspective of execution,
					  but its perfectly equivalent to a logical or operator with short circuiting
					{ // Echo "True" if ${EXAMPLEVAR} equals "test"
						read EXAMPLEVAR
						[ "$EXAMPLEVAR" == "test" ] || echo "True"
					  // Extending an 'if' statement;
					  //  is ${EXAMPLEVAR} either lesser than 100 or larger than 200?
						read EXAMPLEVAR
					  	if (( $EXAMPLEVAR < 100 )) || (( 200 < $EXAMPLEVAR )); then
							echo "It is."
						fi
                    }
			Paralel:
				>run multiple commands at the same time
				>do not wait for finish
				Pure:
					operator:	&
					>closest thing Bash has to multithreading
					{ // Run 2 functions simultaneously
					  // Just to be perfectly clear: this examples aim is to show that
					  //  we DO NOT get a homogeneous sequence
						#// function 1
						function my_fun1(){
							for i in $(seq 1 1 100); do
								echo $i
							done
						}
						#// function 2
						function my_fun2(){
							for i in $(seq 100 1 200); do
								echo $i
							done
						}
						#// execute
						my_fun1 & my_fun2
					}
					>can be used during interactive usage to "put something to the background" (obviously stdout wont just magically disappier)
				Pipe:
					operator:	|
					>by far the most powerful feature of Bash
					>hooks the first commands stdout to the seconds stdin creating a chain of sorts
					>all common pajeet "tutorials" fail to mention that the two commands run simultaneously
					// include some examples; ?!
			


		Operators: //(0x0000032e)➞
			var:
				${<var>/[str1]/[str2]]}		: replaces first occurrences of [str1] with [str2]; NOTE: do not prefix [variable] with a '$'
				${<var>//[str1]/[str2]]}	: replaces all occurrences of [str1] with [str2]; NOTE: do not prefix [variable] with a '$'
				${#<var>}					: expands to string length
				${<var>#[regex]}			: expands to <string> with the shortest match of [regex] deleted from the beginning
				${<var>##[regex]}			: expands to <string> with the longest match of [regex] deleted from the beginning
				${<var>%[regex]}			: expands to <string> with the shortest match of [regex] deleted from the end
				${<var>%%[regex]}			: expands to <string> with the longest match of [regex] deleted from the end

		Logic: //(0x0000032f)➞
			NOTE: spaces mater hardcore
			Comparison_operators:
			{
				if [condition]; then
						[...]
				(elif [condition]; then
					[...])
				(else
					[...])
				fi	//yes, really
			}
			[condition]:
				>ĐifĐ tests the exit value of [condition]
				>bash provides many builtins with versatile operators to ease writing conditions
				>to deploy logic between conditions one must deploy builtin sequential execution operator-s (see AT "../Execution/Sequentual")
				Builtin!:
					! [condition]
					>performs logical not on the [condition] to its right
				Builtin[]:
					[ [operator] ]
					>NOTE: whitespace sensitive
					{@begin=sh@
						if [ $1 == "-h" ]; then
							show_my_help_message
						fi
						# ---
						[ -v myvar ] || myvar="default"
					@end=sh@}
					Strings:
						[string-1] == [string-2]	: equals
						[string-1] != [string-2]	: not equals
						[string-1] =~ [string-2]	: regex equals
						[string-1] >  [string-2]	: greater than
						[string-1] <  [string-2]   	: less than
						[string-1] >= [string-2]	: greater than or equal to
						[string-1] <= [string-2]	: less then or equal to
						-n <string>					: is not null (ie. not empty)
						-z <string>					: is null (ie. empty) 
					Integers:
						[int-1] -eq [int-2]	: equals
						[int-1] -ne [int-2]	: not equals
						[int-1] -gt [int-2]	: greater than
						[int-1] -lt [int-2]	: less than
						[int-1] -ge [int-2]	: greater than or equal to
						[int-1] -le [int-2]	: less than or equal to
					FILE:
						-d [path]	: is directory path
						-e [path]	: is existing path
						-s [path]	: is not an empty file
						-O [path]	: is owned by ${USER}
						-r [path]	: is readable by ${USER}
					Misc:
						-v [var]	: is set
				Builtin(()):
					(( [operator] ))
					>NOTE: whitespace sensitive
					{
						if (( $1 > 100 )); then
							show_my_error_message
						fi
					}
					[int-1] == [int-2]	: equals
					[int-1] != [int-2]	: not equals
					[int-1] >  [int-2]  : greater than
					[int-1] <  [int-2]  : less than
					[int-1] >= [int-2]	: greater than or equal to
					[int-1] <= [int-2]	: less then or equal to

		Loops: //(0x00000330)➞
			While:
				{	while [condition]
						do
							[...]
						done
				}
			Until:
				{	until [condition]
						do
							[...]
						done
				}
				>opposite of while; runs while condition is false
			For:
				{	for (([initialize var]; [condition]; [increment]))	
						do
							[...]
						done
				}
				>pay special attention to the braces
			For_each:
				{	for [var] in [list]
						do
							[...]
						done
				}
			   (>[list] can be an array or files)
			    >for gods sake, do not do { for i in ${ls .} };
				  do { for i in * } instead!
			Select:
				>intended for easy interactive menus
				>enum-s a [list] of options and takes input repeatedly
				>invalid input is discarded
				>ints in the enum range are accepted
				>a given var-s value is set to the chosen option
				>break/continue applies
				{ select [var] in [list]
					do
						[...]
					done
				}
			break				// what you
			continue			// would expect...

		Functions: //(0x00000331)➞
			{	(function) [name]() {
					[code]
					(return ([value]))
				}
			}
			NOTE:
				>the keyword "function" is optional, however if ones aiming for compatibility with other shells,
				  its best to not use it, but using it could prevent collisions with alias-es
			¤calling
				[name] (arguments)

	Redirections:
		[command] < [file]					: places [file]s contents to [command]s stdin
		[command] [source][mode] [file]		: redirects specified outputs of [command] to [file]
			[source]:
				> || 1>	: stdout
				2>		: stderr
				&>		: stdout and stderr
			[mode]:
				[none]	: overwrite
				|		: overwrite even if noclobber is set
				>		: append
			{ echo "asd" >> ./my_file.log /*appends "asd" to my_file.log*/ }


	![...]	: runs a command from the command history
		!		  : previous command; useful for running a command again with sudo {sudo !!}
		[num]	  : [num]th command from history
	   -[num]	  : relative position in command history; -1 being the previous command
	    <string>  : most recent command from history STARTING with <string>
	   ?<string>? : most recent command from history CONTAINING <string>
	   #		  : the current command, from beging till itself { printf !# -> printf printf -> "printf" printed}
	   $		  : last argument of the last command
	   {[...]}	  : clarifies that only the text between the curly braces are meant to be interpreted 
	   				 { echo Vera; {!-1}nda; NOTE: the ';' is not literal, commands executed in the same line are
					    written to the history file at the same time therefore literal "; {!-1}" will result in
						non-sense}


#define gnu\
I----------------------------\
I 	  _____  _   _ _   _	 \
I 	 |  __ \| \ | | | | |	 \
I 	 | |  \/|  \| | | | |	 \
I 	 | | __ | . ` | | | |	 \
I 	 | |_\ \| |\  | |_| |	 \
I 	  \____/\_| \_/\___/	 \
I----------------------------I
//(0x00000286)➞
	GNU_Project:
		>"Gnu is Not Unix"
		/*
			  ,           , 
			 /             \
			((__-^^-,-^^-__)) 
			 `-_---' `---_-' 
			  `--|o` 'o|--' 
				 \  `  / 
				  ): :( 
				  :o_o: 
				   "-" 
		*/

	YYY:
		https://www.gnu.org/software/software.html


----
 ld
----
	//(0x00000288)➞
	>"gnu Linker"; not an anagram

	ldconfig 	: configure dynamic linking
		-p			: list installed C++ libraries


#define gcc\
#define gpp\
#define g++\
---------\
 gcc/g++ \
---------I
	//(0x00000289)➞
    >"Gnu Compiler Collection"
	>"Gnu C Compiler/GNU C++ Compiler (GNU Compiler)"
    >GCC (C compiler) is part of GCC (compiler collection)
	
	g++ [options] [files]			: compiles [files]
		General:
			-o [name]		: output file will be named [name]
			-W<string>		: turns on <string> warning
			-fpermissive	: downgrade some diagnostics about nonconforming code from errors to warnings; 
							   thus, using -fpermissive allows some nonconforming code to compile
			-x [lang]		: explicitly specifies [lang] language to input file be interpreted as
		Compialation:
			-E							: preprocess only
			-S							: compile only; do not assemble or link
			-c							: compile and assemble; do not link; results in an object file
			Preprocessor:
				-D [name](=[...])			: define a macro expanding to 1 or [...]
			Compialation:
				-O[l]								: adjust optimization level to [l]
					0	-	dont optimize; default
					1	-	optimize
					2	-	optimize even more
					3	-	optimize yet more
					fast-	optimize for speed
					s	-	optimize for size
					g	-	optimize for debuging; this option is crap, -O0 works much better for debugging
				-mpreferred-stack-boundary=<int>	: attempt to keep the stack boundary aligned to 2 raised to <int> byte boundary; the default is 4
				-f-stack-protector					: enabled by default; uses a Canary as stack smashing protection
				-fno-stack-protector				: turns off the Canary; ([above])
				-z execstack						: allow to execute stack
			Linking:
				-l[library]					: links [library]
				-std=[v]					: use standard template library version [v] for compilation
				-static						: do static linking
				-iquote [path]				: add directory to the #include "[...]" preprocessor directories to be searched; thats why no sane devs
											   do "../include/[...].h" you moron; searched before the standard paths, therefor can be used to override
											   standard headers with ones own
			Debuging:
				-g			: supplies debugging symbols; made to be gdb compatible
				-ggdb		: "-g" plus extra symbols for gdb specifically
				-pg			: add gprof (execution profiler) support
				-fno-inline
				
	Flag_packs:
		-reasonable warnings:
.			-Wall -Wextra -Wpedantic
		-all warnings for real:
			?!
		-debugmaxxing:
.			-O0 -ggdb -pg -fno-inline
			

	Pragmas:
        #pragma once        : header guard alternative, but shittier
        #pragma GCC <...>   : GCC specific and reserved pragma namespace
            poison <symbol>+    : make any mentions of the listed symbols error out;
                                  used for ensuring no team member may use them
            system_header       : threat file as a system header
                >supresses all warnings except those by #warning
            dependency "<file>" : ?!
        regions:
            >used for defining an optionally named chunk of code
            >has no compiler effect
            >editors may recognize regions to apply folding
            >external tools may recognize regions for arbitrary reasons {grouping}
            {
                #pragma region <name>
                    <...>
                #pragma endregion <name>
            }

	Environment_variables:
		${GCC_COLORS}

	Include_order:
		${PWD}/<header>.gch  --->  -I dirs <header>.gch  --->  ${PWD}/<header>  --->  -I dirs <header>

#define make\
------\
 make \
------I
//(0x0000028c)➞

	>"gnu MAKE"
	>for make to know what to do a ĐmakefileĐ is needed

	make ([options]) ([target])	 : runs the make-script located at $PWD; if no [target] is passed the one at the top of the makefile will be called
		-e		: ensures that environment variables will be used when ever possible, unless the "override" keyword is used
		-n		: do not stop at errors and do not run the commands just print them; essentially a dry run
		-B		: execute even when all files are up to date
		--print-data-base	: prints default set of rules and variables
		--no-builtin-rules	: disables the usage of builtin pattern rules
	-the following file names will be automatically recognized by make as a ĐmakefileĐ:
		>GNUmakefile
		>makefile
		>Makefile		//GNU's recomendation

	Commenting: //(0x00000332)➞
		#[comment]	: single line comment
	Rules: //(0x00000333)➞
		{
			[target]:(:) ([prerequisite] [...]) 
			[.RECIPEPREFIX][recipe]
			[...]
		}
		[target]:
			([specialty]) [name]
			>the argument you'll pass make
			>like a function name
			>can be a space separated list of multiple targets, in which case the following behaviour will be produced:
				{
					[target1] [targer2]: [rule1] [rule2] [rule3]
						[...]

				   //### Same As ###

					[target1]: [rule1] [rule2] [rule3]
						[...]

					[target2]: [rule1] [rule2] [rule3]
						[...]
				}
		[prerequisite]:
			>space separated list of other [target]s
			>will also be executed if they are not up to date
		[recipe]:
			([pre-line symbol]*)[command]
			[pre-line symbol]:
				-	: do not terminate Make execution if this command returns with an error code (non 0)
				@	: do not echo execution
						{	
							example:
								echo "echoing..."
								 |
								 V
							echo "echoing..."
							echoing...
						  //### ### ### ###
							example:
								@echo "echoing..."
								 |
								 V
							echoing...
						}
			[command]:
				>$(SHELL) commands
				>each is executed in its own sub shell
		>multi-lining is done by post fixing the continued line with a '\'
		>ĐĐnon-pattern rules cannot deppend on pattern rulesĐĐ
		>see Đrule specific variablesĐ AT ../Variables
		Conventional_and_common_make_rules:
			all			: builds the application
			install		: installs the application
			clean		: deletes binaries
			distclean	: deletes everything which is not in the distributed version
			TAGS		: generates tags table ?!
			info		: generates GNU info files
			check		: runs tests
		Pattern_rules:
			>NOTE: non-pattern rules cant depend on pattern rules
			>NOTE: pattern rules do not expand variables in dependencies
			>any rule containing a '%'
			>as the name suggests its pattern matched to see whether
			  executing it would help getting the desired target
			{	%.c: 
					g++ -c ${@} -o ${*}.o
			}
			Builtin_ones:
				%.o: %.c
					$(COMPILE.c) $(OUTPUT_OPTION) $<
				%.c: %.l
					@$(RM) $@
					$(LEX.l) $< > $@
				%: %.c
					$(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@
			Static:
				[subjects]: [pattern_rule]	: only do a matching on files that are in the [subjects] list
				{	$(OBJECTS): %.o : %c
						${CC} -c $(CFLAGS) $< -o $@
				}
		Suffix_rules:
			>predecessor of pattern rules
			>ĐĐout datedĐĐ
			[suffix2]([suffix1]([...])):
				[...]
			>[suffix] is meant to be a file extension suffix
			>only Đknown suffexesĐ are recognized
			>ĐĐknown suffexesĐĐ are defined with the help of a special target .SUFFIXES
			>ĐĐprerequisets are listed before the targetĐĐ, therefor:
				{	.c.o:
						$(COMPILE.c) $(OUTPUT_OPTION) $<
					// Is equivalent to
					%.o: %.c
						$(COMPILE.c) $(OUTPUT_OPTION) $<
				}
		Double_colon_rules:
		   {[target]:: [prerequisete1] ([...])
			[.RECIPEPREFIX][recipe]
			[...]
			
			[target]:: [prerequisete2] ([...])
			[.RECIPEPREFIX][recipe]
			[...]
			}
			>normally if a rule is defined multiple times only one would be run;
			  however, this way the "two" targets are going to be managed as a different entity
		Special_targets:
			>used for changing makes default behaviours
			.SUFFIXES:
				>defines Đknown suffexesĐ (see AT ../Suffix_rules)
				>default definition:
					.SUFFIXES: .out .a .ln .o .c .cc .C .cpp .p .f .F .r .y .l
			.PHONY: [target] : declares that [target] is under no circumstances should be treated as a file, (as in checking whether its up-to-date)
							   and should always be executed; used for avoiding things like {make: `clean' is up to date.}
							   and improving performance
			.ONESHELL:		: run all statements of individual targets in a single shell
	[?!]:
		vpath [pattern] [directory list]	: modifies where make looks for files matching [pattern]
											   { vpath %.c my_source_file_directory  }
	Variables: //(0x00000334)➞
		[name] [assignment_operator] [value] 	: defines variable
			[assignment_operator]:
				:= 	  : declares and assigns Đsimple variableĐ
				::=	  : declares and assigns Đsimple variableĐ
				=	  : declares and assigns Đrecursively expanded variableĐ
				?= 	  : declares and assigns Đrecursively expanded variableĐ only if it doesnt hold a value yet
				+= 	  : appends [value] to variable [name]
		[target]:(:) [name] [assignment_operator] [value]	: modifies [name]s value only inside the scope of [target]
		$([name])				: references variable
		${[name]}				: references variable
		-ĐĐsimple variablesĐĐ: 
			>evaluated on assignment
		-ĐĐrecursively expanded variablesĐĐ
			>evaluated upon expansion (each time)
		-ĐĐcanned sequanceĐĐ
			>practically a glorified copy-paste
			>described as variable tho
			>also used as functions
			>pseudo-functions really
			¤syntax
				{ define [name]
					  [...]
				  endef
				}
			¤calling 																																		(; fix your bloody syntax file; ?!
				$(call [name](,[args]))
			>[args] can be referenced to with "$[num]" where [num] is the n-th thing passed
		>escape '$' by using "$$"
		>system variables are automatically available to make
		>they used to be called macros
		>they hold string values which going to be substituted upon encountering their name prefix with 
		  a '$' and enclosed in parentheses (macro is more accurate to describe this behaviour in my opinion)
		>[name] can contain any characters except: '=', ':' and '#';
		  recommended to stick with ascii tho; 
		  "A variable name can contain almost any characters including most punctuation.\
		    Even spaces are allowed, but if you value your sanity you should avoid them."
		>variable names starting with '.' are reserved
		>ĐĐcommandline beats makefile beats envirementĐĐ
		Built_in:
			>not only predefined, but also used by builtin rules
			AR			: archive maintaining program
			ARFLAGS 	: flags for $(AR)
			AS			: assembly compiler
			ASFLAGS 	: flags for $(AS)
			CC			: C complier
			CFLAGS  	: flags for $(CC)
			CXX			: C++ compiler
			CXXFLAGS	: flags for $(CXX)
			CPP			: C preprocessor
			CPPFLAGS	: flags for $(CPP)
			FC			: Fortran compiler
			FFLAGS		: flags for $(FC)
			RFLAGS		: flags for $(FC)
			M2C			: Modula-2 compiler
			PC			: Pascal compiler
			PFLAGS		: flags for $(PC)
			CO			: program for extraction from RCS
			GET			: program for extraction from SCCS
			GFLAGS		: flags for $(GET)
			LEX			: Lex transformer
			LFLAGS		: flags for $(LEX)
			YACC		: Yacc transformer
			YFLAGS		: flags for $(YACC)
			LINT		: Lint program
			LINTFLAGS	: flags for $(LINT)
			MAKEINFO	: Texinfo - Info file transformer
			TEX			: TeX DVI - Tex source transformer
			TEXI2DVI	: TeX DVI - Texinfo transformer
			WEAVE		: Web - TeX transformer
			CWEAVE		: C Web - TeX transformer
			TANGLE		: Web - Pascal transformer
			CTANGLE 	: C Web - C transformer
			RM			: program to remove files
			LDFLAGS		: flags for ld (the GNU linker)
			LDLIBS		: library include flags { -lncurses } for ld (the GNU linker)
			COMPILE:
					COMPILE.*
				COMPILE.c	: ${CC} ${CFLAGS} ${TARGET_ARCH} -c
				COMPILE.cpp	: ${CXX} ${CXXFLAGS} ${TARGET_ARCH} -c
			LINK:
					LINK.*
				LINK.c		: ${CC} ${LDFLAGS}
				LINK.cpp	: ${CXX} ${LDFLAGS}
			Meta_informational:
				MAKE_VERSION	: version number of current make instance
				CURDIR			: directory from which make was invoked from ($(PWD))
				MAKEFILE_LIST	: a list of all files make has read (default, import-ed ones and command line specified ones)
				MAKECMDGOALS	: a list of all targets specified on the command line
				.VARIABLES		: a list of all variables read from the ĐMakefileĐ so far
		Special_variables:
			.RECIPEPREFIX		: the char that must go before every [recipe]; tab by default
			VPATH				: space separated list of folders to be searched for targets
			Automatic_variables:
				>initialized upon matching a rule
				@	: file name representing the target
				%	: roughly equivalent to the Bourne Again Shell's '*'
				<	: file name of the first prerequisite
				?	: names of all prerequisites that are newer than the target; separated by spaces
				+	: names of all prerequisites; separated by spaces
				^	: $+, but with duplicates removed
				*	: file name representing the target, with the (last) extension sliced off
				>NOTE: to get full paths, instead of just the file names, postfix the variables with a 'D' { $(@D) }
				>postfixing them with a 'F' indicates that you only want the file name (that's also the default behaviour tho)
	Logic: //(0x00000335)➞							//organize ?!
		if:
			{  [condition]
			   [...]
			   ([else]
			   [...]
			   )
			   endif
			}
		[conditions]:
			ifeq([string1], [string2])		: whether [string1] and [string2] are equal
		[...]:
			>ANY valid make statement
	Functions: //(0x00000336)➞	//?!
		-[text]:
			>a string, however meant to be a space separated list of semi-related words
			>a list of files for example
			>the words are always 1 indexed { word(), wordlist(), etc. }
		$(Name [Args])
		call [function](,[args])				: calls (user defined) canned sequence [function]
		strip <string>							: returns <string> with all whitespaces removed
		filter [pattern],[text]					: returns only the words from [text] which match [pattern];
												   [pattern] being a ĐmakeĐ style '%',
												   only the first '%' expands, the rest are treated literally
		filter-out [pattern],[text] 			: logical not of filter(); see ABOVE
		findstring <string>,[text]				: returns [text] if it contains <string> and nothing otherwise
		subst [string-1],[string-2],[text]		: substitute; replaces all occurrences of [string1] with [string2] in [text]
		patsubst [string1],[string2],[text]		: pattern substitute; same as ABOVE, however [string1] can contain a single '%'
		addprefix <string>,[array]				: prefixes all elements of [array] with <string>
		addsuffix <string>,[array]				: postfixes all elements of [array] with <string>
		words [text]							: returns number of words in [text]
		word <int>,[text]						: returns <int>th word from [text]
		wordlist [int-1],[int-2],[text]			: returns the words from [int-1] till [int-2] inclusively
		sort [text]								: returns [text] with the words arranged in lexical order
												   and with all duplicates removed
		shell [...]								: returns stdout output of shell command [...]
		warning <string>						: prints <string> as a warning message
		error <string>							: terminates makes execution and prints <string> as the error message
		dir <string>							: like dirname; removes all file name portions from <string>; nukes directory names with spaces
		notdir <string>							: like basename; removes all path name portions from <string>; nukes file names with spaces
		if <...>, <...>, <...>
	Who_knows:		//?!
		$([variable]:[string1]=[string2]) :replace; equivalent to $(subst [string1],[string2],${[variable]})
	Directives: //(0x00000337)➞
		>[var] stands for [variable]
		ifdef  [var]			: includes code till next ĐendifĐ if [var] is defined; an empty string is trated as not defined
		ifndef [var]			: includes code till next ĐendifĐ if [var] is not defined; an empty string is trated as not defined
		ifeq "[var1]" "[var2]"	: includes code till next ĐendifĐ if [var1] and [var2] are equal
		ifneq "[var1]" "[var2]"	: includes code till next ĐendifĐ if [var1] and [var2] are not equal
		endif					: marks the ending of an if directive
		define [name]			: starts definition of Đcanned sequenceĐ called [name] (see AT ../Variables)
		endef					: marks the ending of Đcanned sequanceĐ (see AT ../Variables)
		vpath [pattern] [paths]	: makes targets matching [pattern] search for targets in [paths],
								   which is a space separated list of paths; { vpath %.c scr }
		include [paths]			: open and interpret files specified by [paths], which is a space separated list of files
	Operators: //(0x00000338)➞
		[variable] ?= [value]	: assigns [value] to [variable] only if [variable] was defined previously
	Globs: //(0x00000339)➞
		>some times refer to as ĐwildcardsĐ
		>identical to the Bourne Again Shell globs (see AT Bash/Globs)

------
 gzip
------
	//(0x00000296)➞
	File_extentions:
		.gz		: gnu zip file, ie one that was (or atleast as if were) created with gzip

	gzip [options] [file]
		-d		: decompress
		-k		: keep original
		-v		: verbose
		-r		: recursive
		-1		: fast
		-9		: best
		--best	: alias of -9

-----
 tar
-----
	//(0x00000297)➞
	gnu Tape ARchive

	File_extentions:
		.tar	: a tape archive file, ie one that was (or atleast as if were) created with tar

	tar [options] [file]
		-A				: appends tar to an archive
		-c				: creates
		-r				: appends files to an archive
		-x				: extracts
		--list			: lists
		-f [file]		: specifies output file name; mandatory
		-v				: verbose; show the files being worked on; each instance of '--verbose' on the command line increases the verbosity level by one, 
						   so if you need more details on the output, specify it twice.
		--verify		: attempts to verify file integrity; cannot be used when compressing
		--remove-files	: remove the original files
		-z				: uses gzip on the file
		-I "[...]"		: specify compression program and pass options to it

----
 bc
----
	//(0x00000298)➞
	Basic Calculator

	bc [options] [file]


----
// autogen ?!

----------------------------------------------------------------
#define programs: //(0x0000033a)➞\
I-----------------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------------\
I			  /$$$$$$$                                                                         				\
I			 | $$__  $$                                                                        				\
I		 	 | $$  \ $$ /$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$  /$$$$$$  /$$$$$$/$$$$   /$$$$$$$				\
I			 | $$$$$$$//$$__  $$ /$$__  $$ /$$__  $$ /$$__  $$|____  $$| $$_  $$_  $$ /$$_____/				\
I			 | $$____/| $$  \__/| $$  \ $$| $$  \ $$| $$  \__/ /$$$$$$$| $$ \ $$ \ $$|  $$$$$$ 				\
I			 | $$     | $$      | $$  | $$| $$  | $$| $$      /$$__  $$| $$ | $$ | $$ \____  $$				\
I			 | $$     | $$      |  $$$$$$/|  $$$$$$$| $$     |  $$$$$$$| $$ | $$ | $$ /$$$$$$$/				\
I			 |__/     |__/       \______/  \____  $$|__/      \_______/|__/ |__/ |__/|_______/ 				\
I										  /$$  \ $$                                           				\
I										 |  $$$$$$/                                           				\
I										  \______/                                            				\
I-----------------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------------------------------I
//(0x00000299)➞

#define manuvering:: //(0x0000033b)➞
	
	ag (<typename>) ([options]) [pattern] ([path])	: recursively searches for [pattern] in all <typename> files AT [path]
													   and prints results dependent on [options]

#define binary:: //(0x0000033c)➞

hexedit     : trusty TUI hex editor
ImHex       : robust GUI hex editor // ATU's recommendation

#define text:: //(0x0000033d)➞\
I----------------------------\
I   _____ _______  _______   \
I  |_   _| ____\ \/ /_   _|  \
I    | | |  _|  \  /  | |    \
I    | | | |___ /  \  | |    \
I    |_| |_____/_/\_\ |_|    \
I----------------------------I
//(0x0000029a)➞
	>any program manipulating on text/plain text files

#define vim::: //(0x0000033e)➞\
I-----------------\
I __   ___        \
I \ \ / (_)_ __   \
I  \ V /| | '  \  \
I   \_/ |_|_|_|_| \
I-----------------I
//(0x0000029b)➞
	>"Vi IMpoved"
	
	vim [options] [file]	: "a programmer's text editor"
			-R			: read only
			-b			: binary mode
			-i [path]	: specifies [path] as the file to be used as .viminfo (see BELOW)

	vimdiff [file1] [file2]
		>alias of "vim -d"
		>allows for the user to easily compare differing version of the same file
		>highlights changes color marked by type side by side
		>matching regions are folded up
		>better alternative for diff

	>im not using the my usual square bracket - key-combination notation for a reference on vim
	  is almost entirely composed of key-combinations because such quantity of square brackets would
	  actually make it harder to read

	Files:
		.exrc		: ?!
		.vimrc		: where settings and prefrences are read from
		.viminfo	: where dynamically set informations are stored (marks/registers)


	Modes:
		Normal_mode:
			esc  		: to enter
			Integer_manipulation:
				ctrl + A    		: increment the number under the cursor
				ctrl + x    		: decrease the number under the cursor
			String_manipulation:
				x			: deletes char under cursor
				i			: enters insert mode at the cursor
				I			: enters insert mode before the cursor
				o			: starts new line after the cursors line and enters insert mode
				O			: starts new line before the cursors line and enters insert mode
				A			: jumps to the end of the last word in the line and enters insert mode
				r [char]	: replace the character under the cursor with [char]
			Operation:
				u			: undo
				U			: undo line
				crtl + r	: redo
				p			: put the previously deleted 
				P			: put the previously deleted before cursor
			Operators:
				[operator] ([num]) [motion]
				d			: delete
				J			: join ("$d")
				c			: delete and enter insert mode
				.			: repeat last operation
			Motion:
				([num]) [motion]
				+--------------------+	//move; ?!
				| A H        ^       |	H   : High		k	: up
				| │          k       |	M   : Middle	j	: down
				| │ M  < h       l > |	L	: Low		l	: right
				| │          j       |					h	: left
				| V L        v       |
				+--------------------+
				w			: start of the next word
				e			: end of the current word
				$			: end of the current line
			Movement:
				ctrl + u	: moves up half a screen
				ctrl + d	: moves down half a screen
				ctrl + b	: moves up a screen
				ctrl + f	: moves down a screen
				H			: jumps to first line on the screen
				M			: jumps to middle line on the screen
				L			: jumps to lowest line on the screen
				gg			: jumps to the start of the document (ctrl + home)
				G			: jumps to the end of the document (ctrl + end)
			Marks:
				>marks are file specific
				>stored season cross
				>they are not stored directly at the file, but rather at a ĐĐ.viminfoĐĐ file
				m & [char]	: places mark with ID [char]
				' & [char]	: jumps to the mark with the ID [char]
				:marks		: lists existing marks
			Searcing:
				/[regex]	: searches for [regular expression]
				?[regex]	: searches for [regular expression] from the end
				n 			: jumps to the next result of previous search
				N			: jumps to the previous result of previous search
				*			: searches for the word currently under the cursor
				#			: searches for the word currently under the cursor from the end
				Regex:
					\<			: beginning of a word
					\>			: end of a word
					.			: any char except '\n'
					\p			: printable char
					\P			: \p - \d
					>upper case not-ed { \d = digit; \D = not digit }
						\s			: whitespace
						\d			: digit
						\x			: hex digit
						\o			: octal digit
						\h			: ?!
						\w			: word char
						\a			: letter
						\l			: lower case char
						\u			: upper case char
			Camera_movement:
				zz	: center line to cursor
			Query:
				ga	: print value of the char under the cursor
		Insert_mode:
			>normal typing
			><int> is the times ti repeat the operation after return from insert mode
			Entering:
				(<int>) i		: enter before the cursor
				(<int>) a		: enter after the cursor
				(<int>) I		: enter at the beginning of the line
				(<int>) A		: enter at the end of the line
			Special_chars:
				>chars that normal people are not capable of entering with just their keyboards
				ctrl + k && [digraph]	: inserts [digraph] char (see BELOW)
				:digra					: brings up a list of [digraph]s
				ctrl + v && [code]		: inserts char by value
					 [num][num][num]							: by decimal value 	\
					O[num][num][num]	 					    : by octal value 	 } 0<= n <= 255
					x[num][num]			 					    : by hex value		/
					u[num][num][num][num]						: by hex value
					U[num][num][num][num][num][num][num][num]	: by hex value
		Visual_mode:
			v			: to enter regular visual mode
			shift + v	: to enter line visual mode
			ctrl + v	: to enter block visual mode
			u			: converts selection to lowercase
			U			: converts selection to uppercase
			=			: fix indentation
		Command_mode:
			:			: to enter
			Commands:
				:[command]
				q			: quit
				w			: write (save)
				echo [var]	: prints the value of vim variable [var]
				![cmd]		: spawns a shell and runs [cmd]
				r [file]	: insert the contents of [file] after the cursor
				r ![cmd]	: insert the output of [cmd] after the cursor
				>see window commands AT ../../Windows
				>see mark commands AT ?!
				>see register commands AT ../../Registers
				([range] = .)s/[pattern]/<string>(/[flags] [count])	: substitutes a maximum of [patern]s in [range] with <string> using [flags]
					[range]:
						%				: all lines
						[int1];[int2]	: from line [int1] till [int2]
						.				: current line
						$				: last line
						+<int> || -<int>: relative line to current line
					[flags]:
						g	: replace all occurrences of [pattern] in current line
						c	: ask for conformation before replacing (each)
						a	: case insensitive
					Notes:
						>use '\r' instead of '\n'
		Replace_mode:
			[R]			: to enter

	Short_cuts:
		>things that can be done with more key presses too
		dd	: "Vd"
	
	Windows:
		>not that kind of Windows!
		>a new window doesnt mean a new buffer
		ctrl + w && v					: split the document vertically
		ctrl + w && s	 				: split the document horizontally
		ctrl + w && [h || j || k || l]	: move the cursor to an adjacent window (the last letters correspond to motions)
		ctrl + w && [H || J || K || L]  : move window to far [position]
		ctrl + w && x					: swap this window with the next one
		ctrl + w && r					: rotate window positions
		crtl + w && c					: close the currently selected window
		ctrl + w && o					: close all windows but the one currently selected
		ctrl + +						: increase size of currently selected window horizontally
		ctrl + -						: decrease size of currently selected window horizontally
		:(vertical) res (+ || -)<int>	: resize currently selected window, <int> meaning rows by default or columns if "vertical" is specified
										   add a '+' or a '-' to make <int> be interpreted relatively

	Tabs:
		:ls								: list buffers
		(<int> &&) ctrl + 6				: switch to tab <int> or the previously used tab

	Registers:
		Commands:
			reg ([register])	: view contents of [register] or contents of main registers
		Operating:
"			"[register][operation]	: refers to register
			Operation:
				>please see the table AT the end of this section
				p		: paste 
				P		: paste before cursor
				y		: yank
				x		: cut
		Registers:
			-Unnamed register:
				>used in common copying and pasting (deleting and yanking)
			-Numbered registers:
				>0-9 (10 total)
				>store previous copies
			-Named registers:
				>a-z
				>refer to them as "A-Z" to append to contents of the corresponding register
			-Selection and drop registers
		   (>name; content)
			-Black hole register
				_	: abyss
				>exist so one can delete text without affecting any register values
				>always contains nothingness
			-Read-only registers:
				%	: file name
				:	: most recently executed command
				#	: alternate file (most recently edited file thats not the current one)
				.	: last edit (what '.' would do)
			-Expression register
				=	: ?!
			-Search register
				/	: last search expression

	Colorschemes:
		>default themes are stored at /usr/share/vim/vim[version]/colors
		>user specific themes are stored at ~/.vim/colors
		colo			: prints name of currently used colorscheme
		colo [scheme]	: loads [scheme]
		highlight		: brings up a list of the current colorscheme settings

	Macros:
		>stored in registers
		>a (literal) string of key presses which can be ĐplayedĐ to automate repetitive jobs
		q[char]<string>q		: records macro with a value of <string> stored in register [char]
		(<int>)@[char]			: plays macro [char] <int> times

	Marks:
		>way to navigate
		>marks are similar to registers in the sense that [a-zA-Z] are valid user marks
		  and there are special reserved ones
		m<id>	: sets mark to current line
		`<id>	: jumps to mark
		:marks	: shows a list of assigned marks
		Builtin:
			.	: last change
			'	: "jump back"; position from where the last jump occurred
			<	: last visual selection start
			>	: last visual selection end

	Programming:
		Autocomplete_menus:
			ctrl + n	: loads "Next" option
			ctrl + p	: loads "Previous" option
			ctrl + x	: ?!
				ctrl + f	: displays path autocomplete menu (see BELOW)
		Hints:
			ctrl + k	: open man page for the symbol under the cursor

	Scripting:
		Commenting:
			" [...]			: single line comment											//(")
		Settings:
			set [setting](=[value])		: sets a bool setting to [setting] otherwise sets a setting named [setting] to [value]
		Variables:
			let [scope]:[name] (= [value])	: declares variable called name visible at scope [scope] (and assignes it to [value])
				v	: global, predefined by vim
				g	: global
				b	: buffer
				w	: window
				t	: tab
				a	: "argument"; function
				l	: function
				s	: sourced vim script
			@[register]						: refers to a register as it were a variable


	Folding:
		>vim allows for "folding" multiple physical lines into one displayed line
		zc	: close under cursor
		zo	: open under cursor
		za	: toggle under cursor
		zR	: open all
		zM	: close all

    Spelling:
        :set spell
        z=      : suggest spelling correction for word under the cursor

(((
Yellow(
-----------------
)
--------
 Neovim
--------
	>Vim fork
	>Vim and Neovim features has branched

---------
 Kakoune
---------
	>Vim like text editor
    >reverse action order

-----
 bat
-----
 	>cat clone with syntax highlighting

#define tui:: //(0x0000033f)➞
--------
 figlet
--------
	>used for printing ĐbannersĐ
	>ĐĐbannersĐĐ are text composed of multiple ascii characters per letter
    >NOTE: (sub)chapter names use figlet in this document
	{ // $ figlet -f Small example
		                         _    
		 _____ ____ _ _ __  _ __| |___
		/ -_) \ / _` | '  \| '_ \ / -_)
		\___/_\_\__,_|_|_|_| .__/_\___|
		                   |_|
	}

----------
 whiptail
----------
	>displays dialog boxes
	>capable of creating forms and yielding their result on exit
	{ // $ whiptail --msgbox "Do you agree?" 7 17
		┌───────────────┐
		│               │
		│ Do you agree? │
		│               │
		│    <Ok>       │
		│               │
		└───────────────┘
	}

Yellow(
-----------------
)

--------
 aspell
--------
	>spell checking tool

	Files:
		/etc/aspell.conf		: global configuration file
		~/aspell.conf			: user spefific configuration file
		~/.aspell.[lang].pws	: personal directory (see BELOW)
		~/.aspell.[lang].prepl	: personal replacement directory (see BELOW)

	Personal_directory:
		metadata:
			personal_ws-1.1 [lang] [num] ([encoding])
			>the first Word is simply an indication, that this, indeed, is a personal dictionary
			>[lang] is the language the dictionary is for
			>[num] is the count of words, technically not important, might as well be any number
			>[encoding] represents the encoding, not mandatory
		dictionary:
			>simply a list of word each on new lines representing the correctly spelled word

	Personal_replacement_directory:
		>used for containing correction suggestions
		metadata:
			persoanl_repl-1.1 [lang] [num] ([encoding])
			>follows mostly the same logic as personal directories (see ABOVE)
			>[num] is unused and therefor is always 0
		dictionary:
			>a list of replacements, each on a new line
			[misspelled word] [correction]

	aspell [options] 	: performs specified spell checks
		-?					: displays short help message
		--help				: displays long help message
		-c [file]			: specifies [file] to be checked
		-l
		--lang=[lang]		: sets language of grammar
		config				: prints configuration
		[actions]:
			>commands after aspell interactive mode is entered
			[num]	: replace current word with suggestion number [num]
			a		: adds current word to personal dictionary
			A		: adds tolower(current word) to personal dictionary
			r		: replaces word with user entered input
			R		: replaces all occurrences of word with user entered input
			i		: ignores current occurrence of misspelled word
			I		: ignores all occurrences of misspelled word
			b		: exit without saving
			x		: save and exit

#define image:: //(0x00000340)➞\
I-----------------------------------\
I   ___ __  __    _    ____ _____   \
I  |_ _|  \/  |  / \  / ___| ____|  \
I   | || |\/| | / _ \| |  _|  _|    \
I   | || |  | |/ ___ \ |_| | |___   \
I  |___|_|  |_/_/   \_\____|_____|  \
I-----------------------------------I
//(0x0000029c)➞
-------------
 ImageMagick
-------------
	convert [files] ([options]) [file]	: manipulate images; [files] being source files; [file] being the output file
		>by changing the extension on the output file, convert will convert the file type
		-rotate <int>	: rotate image by <int> degrees
		-append			: append [files] vertically to each other
		+append			: append [files] horizontally to each other
		-resize [dim]	: resizes the input to resemble the given dimensions
			[spec]x[spec]([mark])
				¤[spec]
					[uint]([sign])	: [uint] is the desired number of pixels
						¤[sign]
							^	: follow exactly
				¤[mark]
					!	: do not preserve aspect ratios
		-crop [uint-1]x[uint-2]+[uint-3]+[uint-4]	: crops image; [uint-1] specifies desired width; [uint-2] specifies desired height;
													   [uint-3] specifies horizontal offset (from the left);
													   [uint-4] specifies vertical offset (from the top)
	identify [options] [files]		: displays information on image files

#define video:: //(0x00000341)➞\
I----------------------------------\
I  __     _____ ____  _____ ___    \
I  \ \   / /_ _|  _ \| ____/ _ \   \
I   \ \ / / | || | | |  _|| | | |  \
I    \ V /  | || |_| | |__| |_| |  \
I     \_/  |___|____/|_____\___/   \
I----------------------------------I
//(0x0000029d)➞
--------
 ffmpeg
--------
	
	>video converter

	ffmpeg [options]		: yes ;
		([input_options]) -i [file]	: specifies input file
		¤[input_options]
			-ss [pos]		: seeks file till [pos]
			-t  [dur]		: limit duration read from input
			-to [pos]		: stop reading the input at [pos]
		¤[output_options]
			-ss [pos]		: discards footage until [pos]
			-t  [dur]		: stop writing output after [dur]
			-to [pos]		: stop writing the input at [pos]
		>NOTE: "-t" and "-to" are mutually exclusive; "-t" takes priority
		¤[pos]
			>"position"
			>a time point in the video
			>uses Đtime_syntaxĐ
		¤[dur]
			>"duration"
			>an amount of time which is summed with a time point to determine its position
			>uses Đtime_syntaxĐ
		¤[time_syntax]
			(-)[<HH>](:<MM>(:<SS>)(.<m>))	: specifies duration
			(-)[<SS>](.<m>)					: specifies duration
			    '-' is a negative sign
			    <HH> marks the hour
			    <MM> marks the minute
			    <SS> marks the second
			    <m> marks the decimal fraction of <SS>
		¤[size]:
			>either a string as follows:
				[int1]x[int2]
			  or an ĐabbreviationĐ
			¤[abbreviation]
			  |  String   |  Meaning  |
			  | :-------: | :-------: |
				 tsc		 720x480
				 pal		 720x576
				 qntsc		 352x240
				 qpal		 352x288
				 sntsc		 640x480
				 spal		 768x576
				 film		 352x240
				 ntsc_film	 352x240
				 sqcif		 128x96
				 qcif		 176x144
				 cif		 352x288
				 4cif		 704x576
				 16cif		 1408x1152
				 qqvga		 160x120
				 qvga		 320x240
				 vga		 640x480
				 svga		 800x600
				 xga		 1024x768
				 uxga		 1600x1200
				 qxga		 2048x1536
				 sxga		 1280x1024
				 qsxga		 2560x2048
				 hsxga		 5120x4096
				 wvga		 852x480
				 wxga		 1366x768
				 wsxga		 1600x1024
				 wuxga		 1920x1200
				 woxga		 2560x1600
				 wqsxga		 3200x2048
				 wquxga		 3840x2400
				 whsxga		 6400x4096
				 whuxga		 7680x4800
				 cga		 320x200
				 ega		 640x350
				 hd480		 852x480
				 hd720		 1280x720
				 hd1080		 1920x1080
				 2k			 2048x1080
				 2kflat		 1998x1080
				 2kscope	 2048x858
				 4k			 4096x2160
				 4kflat		 3996x2160
				 4kscope	 4096x1716
				 nhd		 640x360
				 hqvga		 240x160
				 wqvga		 400x240
				 fwqvga		 432x240
				 hvga		 480x320
				 qhd 		 960x540
				 2kdci		 2048x1080
				 4kdci		 4096x2160
				 uhd2160	 3840x2160
				 uhd4320	 7680x4320
		-filter:v [...]
			fps=<int>

	Transcoding:
			_______              ______________
		   |       |            |              |
		   | input |  demuxer   | encoded data |   decoder
		   | file  | ---------> | packets      | -----+
		   |_______|            |______________|      |
													  v
												  _________
												 |         |
												 | decoded |
												 | frames  |
												 |_________|
			________             ______________       |
		   |        |           |              |      |
		   | output | <-------- | encoded data | <----+
		   | file   |   muxer   | packets      |   encoder
		   |________|           |______________|

	
	Examples:
		Concatanation:
			Same_codec:
				{@begin=sh@
				 	$ tree
					.
					├── 1.webm
					├── 2.webm
					└── 3.webm
					0 directories, 3 files
					$ for i in *; do
					> echo "file '$i'" >> files.list
					> done
					$ ffmpeg -f concat -safe 0 -i files.list -c copy output.webm
				@end=sh@}

-----------
    mpv    
-----------

    >"Media Player for the People"
    >pretty good
    >NOTE: for audio it can play on the cli, multimedia opens a dummy GUI for which
            you are supposed to get a 3th party full-fetched frontend of your liking,
            but the default is ok too

    mpv [options] <file>  : plays file
        --loop              : play while true

    CLI:
        /       : volume down
        *       : volume up


#define filesystem_management:: //(0x00000342)➞\
I------------------------------------------------------\
I  ______ _ _                      _                   \
I  |  ___(_) |                    | |                  \
I  | |_   _| | ___   ___ _   _ ___| |_ ___ _ __ ___    \
I  |  _| | | |/ _ \ / __| | | / __| __/ _ \ '_ ` _ \   \
I  | |   | | |  __/ \__ \ |_| \__ \ ||  __/ | | | | |  \
I  \_|   |_|_|\___| |___/\__, |___/\__\___|_| |_| |_|  \
I                         __/ |                        \
I                        |___/                         \
I------------------------------------------------------I
//₩

File_managers:
	¤tldr
		Terminal:
			ranger  : too slow. takes a gorillion years to start up
			nnn     : i dont remember what what wrong with it, but it was shit
			fff		: meh
			clifm   : very cool, but the defaults break too much and there is no documentation
		Gui:
			thunar	: xfce default; can recommend
			spacefm	: coonfiger's wetdream

-----
 fff
-----
	"Fucking Fast File-manager"

	Usage:
		>very vim-ish (see AT ../Text/Vim)
		j		  : scroll down
		k		  : scroll up
		h		  : go to parent dir
		l		  : go to child dir
		//
		down	  : scroll down
		up		  : scroll up
		left	  : go to parent dir
		right	  : go to child dir
		//
		enter	  : go to child dir
		backspace : go to parent dir
		//
		-		: Go to previous dir.
		//
		g		: go to top
		G		: go to bottom
		//
		:		: go to a directory by typing.
		//
		.		: toggle hidden files
		/		: search
		t		: go to trash
		~		: go to home
		e		: refresh current dir
		!		: open shell in current dir
		//
		x		: view file/dir attributes
		i		: display image with w3m-img
		//
		f		: new file
		n		: new dir
		r		: rename
		X		: toggle executable
		//
		y	: mark copy
		m	: mark move
		d	: mark trash (~/.local/share/fff/trash/)
		s	: mark symbolic link
		b	: mark bulk rename
		//
		Y	: mark all for copy
		M	: mark all for move
		D	: mark all for trash (~/.local/share/fff/trash/)
		S	: mark all for symbolic link
		B	: mark all for bulk rename
		//
		p		: paste/move/delete/bulk_rename
		c		: clear file selections
		//
		[1-9]	: favourites/bookmarks (see customization)
		//
		q		: exit with 'cd' (if enabled).
		[Ctrl] + [C]	: exit without 'cd'.

//-------
//-------
//-------

------
 luks
------

	$ cryptsetup luksFormat <partition>
	$ cryptsetup luksOpen <partition> <name>
	$ mount /dev/mapper/<name> <dest>
	$ umount /dev/mapper/<name>
	$ cryptsetup luksClose <name>

#define processes:: //(0x00000343)➞\
I---------------------------------------------------------\
I   ____  ____   ___   ____ _____ ____ ____  _____ ____   \
I  |  _ \|  _ \ / _ \ / ___| ____/ ___/ ___|| ____/ ___|  \
I  | |_| | |_| | | | | |   |  _| \__  \__  \|  _| \__  \  \
I  |  __/|  _ <| |_| | |___| |___ __| |__| || |___ __| |  \
I  |_|   |_| \_\\___/ \____|_____|____/____/|_____|____/  \
I---------------------------------------------------------I

Purple(
--------
 bpytop
--------
	>modern alternative for top
	>kinda bloated, looks amazing tho
)

------
 btop
------
	>modern alternative for top
    >rewrite of bpytop in C++, runs like lightning
	>looks amazing

#define virtualization:: //(0x00000344)➞\
I---------------------------------------------------------------------------------------\
I  __     _____ ____  _____ _   _    _    _    ___ ____    _   _____ ___   ___  _   _   \
I  \ \   / /_ _|  _ \|_   _| | | |  / \  | |  |_ _|_   |  / \ |_   _|_ _| / _ \| \ | |  \
I   \ \ / / | || |_| | | | | | | | / _ \ | |   | |  / /  / _ \  | |  | | | | | |  \| |  \
I    \ V /  | ||  _ <  | | | |_| |/ ___ \| |__ | | / /_ / ___ \ | |  | | | |_| | |\  |  \
I     \_/  |___|_| \_| |_|  \___//_/   \_\____|___|____/_/   \_\|_| |___| \___/|_| \_|  \
I---------------------------------------------------------------------------------------I
//(0x0000029f)➞

    Files:
        .ovf    : "Open Virtualization Format descriptor"
        .ova    : "Open Virtual Appliance"
            >preconfigured
            >archive format packed with individial files
			├── *.mf
			├── *.ovf
			└── *.vmdk


--------
 docker
--------
//(0x000002a0)➞

	XXX:
		systemctl start docker

	Files:
		~/.docker
        Dockerfile
        docker-compose.yaml

    Programs:
	    docker <operation>      : docker cli; the main docker tool
            // image_operations
            pull <image>	: downloads docker image [image]
            images			: lists installed images
            run <options> <image> <command> <arg>*		: runs an image inside a new container,
                                                           performing the specified action
                -v <volume-specification>	: binds host location to virtual location (see BELOW)
                --rm                        : auto delete the container on exit
            // container operations
            kill <container>+               : kill running cotainer
            rm <container>+                 : delete container
            inspect <container>             : dump data in json
            attach <container>              : hook the terminal to a container (running in the background)
            start [options] <container>     : runs an existing container
                -a                              : "attach"; hook up stdout && stderr
                -i                              : "interactive"; hook up stdin
            ps                              : print all running containers (as if they were normal processes)
                -a                              : print exited containers too
            stats                           : live "UNIX top" like view
            // volumes
            volume <verb>
                ls                      : list named volumes
                inspect <named-volume>  : dump volume info;
                                           NOTE: the dump contains what host filesystem directory it maps to
                                                  (should be somewhere in /var/lib/docker/volumes)
        docker-desktop          : nice gui wrapper for docker;
                                   NOTE: too bad that its a pain in the ass to install in 2024
        docker-compose          : utility to manage multi-containers
            up                      : execute the "docker-compose.yaml" in the current directory

	Docker_images:
		>read-only container templates (consisting of code, libraries and dependencies)
		>identified by a name or an ID number
        attaining:
            YYY: https://hub.docker.com/
            >use the verb "search" or the hub
	Docker_container:
		>writable initialazation of an image
        >each has a hash-like id and a name;
          these can be used to refer to the container in commands
	Volumes:
		>a physical directory that is mounted to the containers virtual filesystem
		>its purpise is to have data that persists between runs and or saving that data perminently
        >volumes must be specified when creating the image;
          they CANNOT be added to an existing container
        >a ĐĐnamed volumeĐĐ is storage manged by docker
        >a ĐĐbind mountĐĐ is a volume map-ping to a local directory;
          they are created by passing absolute paths
		volume_specification:
			<host-volume>:<virtual-path>	: meaning something along the lines of:
				slave@container$ mount <host_path> <virtual_path>
    Multi_containers:
        >a cluster of containers intended to work together

    Dockerfile:
        {
            (# comment)* | 
            (<keyword> <arguments>)+
        }
        >used to create docker images
        >the Dockerfile has an image working directory; it is used to alias '.'
        FROM <image>        : source image; the current image will be a moded version
                               of the source image; very common
        MAINTAINER <string> : arbitrary data identifying the maintainer of the image;
                                       NOT required
        RUN <string>        : arbitrary script to run while ĐĐbuildingĐĐ the image
        CMD <string>        : arbitrary script to run when ĐĐrunningĐĐ the image
        WORKDIR <path>      : change current working directory of the Dockerfile
        ADD <source> <destination>      : copy host file into the image
        EXPOSE <image-port>:<host-port> : proxy a port to the host machine;
                                           by default no ports are exposed;
                                           similar to how Tor handles it

    Compose:
        docker-compose.yaml
        >NOTE: fuck yaml, use the JSON subset
        "version"           // version number
        "services" : {      // dictionary of docker containers to be included in the multi-container
            <string>  : {       // arbitrarily named container
                "container_name"
                "image"
                "ports"
                "command"
                "volumes"
                "envirnment"
            }
        }


--------
 VMWare
--------

    Files:
        *.vmdk  : "Virtual Machine DisK"

------------
 virtualbox
------------
//(0x000002a1)➞

	XXX:
		linux-headers		// installed
		modprobe vboxdrv

	### Setting up a Virtualbox shared folder ###   //(0x000002a2)➞
		1. Start up the guest machine
		2. Install "guest additions"
			>lauch the virtual machine click "Devices/Insert Guest Additions CD image..." (on the top bar)
			>run the contents of the CD
		3. Configurate
			>in the main menu click the guest systems settings
			>find the "Shared Folders" tab
			>click the pluss folder sign
			input:
				Yellow( Folder path: ) [host machine folder path]
				[X] Yellow( Auto-mount )
				Yellow( Mount point: ) [guest machine folder path]
	#

------
 qemu
------
    
    >kernel level virtualization
    >runs smooth as hell
    >NOTE: much better than virtualbox

    Files:
        qcow2   : "Qemu Copy On Write 2"; disk image

    Deamons:
        libvirtd

    Programs:
        qemu-img <global-options> <verb>    : "disk IMaGe utility"
            -h      : print help; NOTE: lists supported image formats
            <verb>
                convert <input> <output>
                    -f <format>
        {
            $ qemu-img convert -f vmdk ubuntu/Ubuntu-20.04.5-EN-disk001.vmdk ubuntu.qcow2
        }
        Front_ends:
            >NOTE: qemu provides the virtualization and a communication protocol,
                    its up to specific and various front-ends to provide guis
            virt-manager    : pretty cool qemu front-end


#define networking:: //(0x00000345)➞\
I------------------------------------------------------------------\
I   _   _ _____ _______        _____  ____  _  _____ _   _  ____   \
I  | \ | | ____|_   _\ \      / / _ \|  _ \| |/ /_ _| \ | |/ ___|  \
I  |  \| |  _|   | |  \ \ /\ / / | | | |_| | ' / | ||  \| | |  _   \
I  | |\  | |___  | |   \ V  V /| |_| |  _ <| . \ | || |\  | |_| |  \
I  |_| \_|_____| |_|    \_/\_/  \___/|_| \_\_|\_\___|_| \_|\____|  \
I------------------------------------------------------------------I
--------------
    netcat: //(0x00000346)➞
--------------
    /*
          .       .       
          \`-"'"-'/       
           } 6 6 {        
          ==. Y ,==       
            /^^^\  .      
           /     \  )     
          (  )-(  )/     _
          -""---""---   / 
         /   Ncat    \_/  
        (     ____        
         \_.=|____E       
    */
    >"The Swiss Army Knife of Networking"
    >from a single implementation it has evolved into a whole family of similarly named
      and partially compatible software
    >the core idea is providing a cli utility to quickly spawn TCP(/UDP) clients/servers
      for testing mostly, but using it as a chat program or a reverse proxy service is
      not unheard of either

    Implementations:
        (Unix)    netcat
        (GNU)     netcat
        (OpenBSD) nc
        (BusyBox) nc
        (Nmap)    ncat

#define git:: //(0x00000347)➞\
I    ___ _ _    \
I   / __(_) |_  \
I  | (_ | |  _| \
I   \___|_|\__| I
	>made by Saint Linus Torvalds
	>project version tracking software, ie. a "version control system"
	>stores compressed stapshots of groups of files so they may be easily reverted, read back and or versions are easily comparable
	>used for easing software development
	>a ĐprojectĐ managed by git is called a ĐĐrepositoryĐĐ


	Files:
		[project_root]	: folder of a project managed by git
		  ├── .git/			: each ĐrepositoryĐ has one; used for storing development data {version, backups, branches}
		  ├── .gitignore	: plain text file for listing files in the project directory which shall be ignored by git {swap files left by editors}
		  └── .gitmodules	: ini file containing submodule information; see AT "../Nesting"

	git [options] [verb] [opts]
		[verb]:
.			init				: creates a ".git" folder in ${PWD}
			config [field] [value]	: sets config option [field] to [value]
				[field]:
					user.name
					user.email
.			status
			log
			branch [options]
			add [file]				: specify that [file] shall be included int the next commit
			restore
			clone [repository]		: copy [repository] to ${PWD}; [repository] is free to be an url
			diff [file]				: shows differences of [file] and its previous version commited (something like GNU diff)
.			commit [options]		: ?!; NOTE: added statuses reset on commit
				-m <string>				: specify message for the git log
			tag [options]			: manages ĐtagsĐ which are usually for realise marking;
									   without arguments it lists all tags
				[options]:
					<string>			: adds ĐtagĐ named <string>
					-d <string>			: delete-s ĐtagĐ named <string>
			submodule					: see AT "../Nesting"
			//
			format-patch <branch>	: create *.patch files for all commits on <branch>
			am <path>				: apply *.patch files from <path> to the current branch


	COMMIT:
		┏━━━━━━━━━━━━━━━━━━━━━┓
		┃        Commit       ┃
		┣━┯━━━━━━━━━━━━━━━━━━━┫
		┃ ├── hash            ┃
		┃ ├── parent          ┃
		┃ ├── message         ┃
		┃ ├── commiter        ┃
		┃ └── change snapshot ┃
		┗━━━━━━━━━━━━━━━━━━━━━┛

	REPOSITORY:
		-can be well abstracted as a stack of commits
			>past commits cannot be easily modified
			>you can only append to the top (or branch)
		┏━━━━━━━━━━━━┓
		┃ Repository ┃
		┃ ┌────────┐ ┃
		┃ │ Commit │ ┃
		┃ ├────────┤ ┃
		┃ │ Commit │ ┃
		┃ ├────────┤ ┃
		┃ │ Commit │ ┃
		┃ └────────┘ ┃
		┗━━━━━━━━━━━━┛
		>after you have shared your local changes, consider the online history immutable;
		  to change and resync it with others is a major pain and mostly not advised
		Visualizing_using_git_for_team_work:
					(You)       |  Server   |       Anon
			--------------------+-----------+--------------------
				┌───┐           |    .-.    |            .-.      
				│ C │           |   I\\ I   |           I\\ I     
				├───┤           |   I \\I   |           I \\I
				│ C │           |    ^-^    |            ^-^ 
				├───┤           |           |                
				│ C │           |     .     |             .  
				└───┘           |           |
				  |             |     .     |             .
				  +-------+     |           |                
						  |     |     .     |             .  
						  |     |           |                
				┓───┏     |     |   ┓───┏   |             .  
				┃ C ┃ <---+---> |   ┃ C ┃   |                
				┣━━━┫    push   |   ┣━━━┫   |             .  
				┃ C ┃           |   ┃ C ┃   |                
				┣━━━┫           |   ┣━━━┫   |             .  
				┃ C ┃           |   ┃ C ┃   |                
				┗━━━┛           |   ┗━━━┛   |             .  
								|           |                
				  .             |     .     |             .  
								|           |                
				  .             |     .     |           ┓───┏
								|           |           ┃ C ┃
				  .             |     .     |   pull    ┣━━━┫
								|           | --------> ┃ C ┃
				  .             |     .     |           ┣━━━┫
								|           |           ┃ C ┃
				  .             |     .     |           ┗━━━┛
								|           |             |  
				  .             |     .     |             |  
								|           |             |   commit -m "Added new bugs"
				  .             |     .     |             |  
								|           |             |  
				  .             |     .     |             V  
								|           |           ┌───┐
				  .        pull |     .     |           │ C │
			"Already up"  <---- |           |           ┓───┏
			"to date."          |     .     |           ┃ C ┃
								|           |           ┣━━━┫
				  .             |     .     |           ┃ C ┃
								|           |           ┣━━━┫
				  .             |     .     |           ┃ C ┃
								|           |           ┗━━━┛
				  .             |     .     |             |  
								|           |     +-------+  
				  .             |     .     |     |          
								|           |     |          
				┓───┏           |   ┓───┏   |     |     ┓───┏
				┃ C ┃           |   ┃ C ┃   | <---+---> ┃ C ┃
				┣━━━┫           |   ┣━━━┫   |    push   ┣━━━┫
				┃ C ┃           |   ┃ C ┃   |           ┃ C ┃
				┣━━━┫    pull   |   ┣━━━┫   |           ┣━━━┫
				┃ C ┃ <-------- |   ┃ C ┃   |           ┃ C ┃
				┣━━━┫           |   ┣━━━┫   |           ┣━━━┫
				┃ C ┃           |   ┃ C ┃   |           ┃ C ┃
				┗━━━┛           |   ┗━━━┛   |           ┗━━━┛
								|           |                
	HEAD:
		>an imaginary pointer that specifies which version is currently selected
		>the version pointed by ĐHEADĐ is the one that is currently located in ${PWD}

	Front_ends:
		>using git without a front-end is quite tiresome and tidious
		gitui	: tui for git; easy to get into, manouver and use; great for terminal based workflows

	Nesting:
		>makes the repository structure strictly hierarchical
		>practically marks the submodule as a dependency
		>submodules do not behave as regular subdirectories
		git submodule
			add
				<path>
				<remote>


	### Oh no, I fucked up and commited with Git ###    //(0x000002a5)➞
		1. Revert head until necessary
			$ git rebase -i HEAD~<int>	# where <int> the number of the commint counted from the last commit, starting from 1
			>NOTE: this command is perfectly safe, it does not automatically affect your history and or state just by invocation
		2. Read the help comment carefully
			>one thing it doesnt explicitly mention is that "pick" can be used for cherry-picking too
		3. ???
		4. Profit
	#

	### Managing git conflicts (with Vim) ###    //(0x000002a6)➞
		-git will place a ĐĐconflict markerĐĐ into a conflicting file:
			{
				<<<<<<< <version-1>
				    <Content from version-1>
				=======
				    <Content from version-2>
				>>>>>>> <version-2>
			}
		{// make sure to set the following in your .gitconfig:
			[merge]
				tool = vimdiff
		}
		{ // invocation / how to read
			$ git mergetool
			+-------+----------+--------+
			|       |          |        |
			| local | previous | remote |
			|       |          |        |
			+-------+----------+--------+
			|                           |
			|        resolution         |
			|                           |
			+---------------------------+
		}
		>the top 3 sections serve as cheatsheets
		>in the bottom, "resolution" area, delete either sections between the guards ("[<>=]+")
		  or mix (perhaps append) their contents to the desired effect
        >":qa" after all Đconflict markersĐ are done with; the next conflict will auto open
	#

	?!:
		git filter-branch --index-filter 'git rm -rf --cached --ignore-unmatch <file>' HEAD
		git log --follow -- <file>

------------
    peru: //(0x00000348)➞  
------------
    >submoduling tool
    >works better and is more general than Git submodules
    >integrates nicely with Make
    ¤supports:
        >git
        >hg
        >svg
        >curl
    
    XXX:
        pip install peru

    peru <verb>
        sync        : install modules
        clean       : delete modules; NOTE: only delete modules previously installed
                       according to .peru, reinstalling kinda breaks it
        reup        : fetch the newest versions and add "rev" entries to peru.yaml

    Files:
        peru.yaml   : main configuration file for modules
        .peru/      : local magic folder, keeping module information

    peru.yaml:
        {
            imports:
                (<name>: <destination_folder>)+
        }
        {
            <method> module <name>:
                <option>: <value>
        }
        <method>:
            git
                url
                pick: <file_list>   : only install these files
                rev: <commit>       : select exact commit instead of main/master
            curl
                url
                unpack  // {tar}

    Usage_with_make:
        {
            .peru/lastimports: peru.yaml
                peru sync
        }
            

#define tor::: //(0x00000349)➞\
I   _____         \
I  |_   _|__ _ _  \
I    | |/ _ \ '_| \
I    |_|\___/_|   I
//(0x000002a7)➞
	XXX:
		>tor daemon
	YYY:
		https://github.com/grugq/PORTALofPi	// ?!
	tor (-f <torrc>)
	>"The Onion Router"
	>connection-oriented anonymizing communication service
	>many layers of individual encryption, hence the ĐonionĐ
	>directory servers with an overview of all relays and their public keys
	>Đexit nodesĐ are essention man-in-the-middles, tho they dont know the source, they can see
	  all data as encrypted as they normally would be
	>both the local network and the remote target ĐshouldĐ have ĐĐno clue about the identity of a tor userĐĐ
	>both the local network and the remote target ĐĐcan easily tell if one is using torĐĐ
	>there are protocols to hide connections to tor from the local network (see AT /?!)
	>is tor the tor protocol safe?
		yes.
	>is tor browser safe?
		no, not with javascript enabled, it isnt.
	-clearnet sites may advertise their onion counterpart by adding a special HTTP header to the form:
		Onion-Location: http://vwc43ag5jyewlfgf.onion
	Files:
		/etc/tor/
			 └── torrc	: config file; see BELOW
	Config:
		>done throught a config file
		>all directives must have their own line
		>empty lines are ignored
		>C style escape sequances are allowed inside quotes
		#[...]					: comment
		[option] [value]		: sets [option] to [value]
		¤[options]
			User <string>							: who to use as; a literal user on ones machine (look inside /etc/shadow)
			DataDirectory [path]					: store working data in [path]
			ClientDNSRejectInternalAddresses [bool]	: reject any DNS anwares pointing to internal addresses { 168.192.0.1 } as
													   that allows for some types of attacks; default 1
		{@begin=sh@
			#
			# Minimal torrc so tor will work out of the box
			#
			User tor
			PIDFile /run/tor/tor.pid
			Log notice syslog
			DataDirectory /var/lib/tor/data
		@end=sh@}
	Dependant_programs:
		torbrowser	: webbrowser routing throught the tor network and having onion site support;
					   uses Modzilla Firefox as its backbone
Purple(				torghost [options]			: routes all traffic throught the tor network
			-s		: starts
			-r		: switches tor node
			-x		: exits)
		torctl [command]			: routes all traffic throught the tor network
			start		: starts
			stop		: stops
			restart		: restarts
			status		: displays status information
			ip			: prints current public ipv4 address
		Tor_services:
			>or "hidden services"
			> .onion sites
			>often mistakenly refered to as the Đdark webĐ while in reallity its only a sub-set of it
			>onion links are public key hashes
			### How to Set Up a Hidden (Tor) Service ###    //(0x000002a8)➞
				>insanely easy, especially compared to conventional web hosting
				1. Have a service running
					>this can be any service
					>write down what port its running on, this address will be referenced BELOW as <port>
					>for testing purposes lets use netcat
					{
						$ nc -l 1234
					}
				2. Configurate
					HiddenServiceDir <data_dir>
					HiddenServicePort <service_port> 127.0.0.1:<port>
					>open the torrc your daemon is using (/etc/tor/torrc by default)
					>tor will need to know where to store relevant information about the site
					  and which port it must mirror/proxy to the tor network
					>you will also have to specify the dir to create and store stuff to {"mynetcat"}
					>if youre planning on hosting multiple hidden services its a good idea
					  to create a designated directory to store all {"/var/lib/tor/hidden_service/"};
					  NOTE: double check permissions and owner (tor 7xx)
					><service_port> is the outbound port through which one must connect to the service to access it
					>NOTE: while <service_port> in our case will the same as <port>, this would not apply,
					  if say we had a gitea running on port 3000. there, <service_port> would
					  be set to 80, so it would behave normally from a browser
					{
						HiddenServiceDir /var/lib/tor/hidden_service/mynetcat
						HiddenServicePort 1234 127.0.0.1:1234
					}
                    >NOTE: for debugging "tor --runasdaemon 0 --verify-config" could be useful
				3. Restart tor
					$ sudo systemctl restart tor
				4. Get the address
					$ cat <data_dir>/hostname
					>an onion address is automatically created for your hidden service
					{
						$ cat /var/lib/tor/hidden_service/mynetcat/hostname
					}
				5. Verify
					>it should be online now, test it
					{
						$ torify nc jsBsjBsn2j59poqndnajk45ndtjsbA6bsjubyeqzfqhxcgujsadnmi5d.onion 1234
					}
			#
			### Git fails to clone/push/pull from my hidden (onion) service ###		//(0x000002a9)➞
				{ @begin=sh@
					$ [proxychains|torify] git clone http://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.onion/anon/test.git
					Cloning into 'test'...
					fatal: unable to access 'http://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.onion/anon/test.git/': Not resolving .onion address (RFC 7686)
				@end=sh@}
				>no clue why proxychains actually fails
				>the error has no mark in the source, not sure what throws it
				>not understanding the issue does not prevent us from solving it
				1. Configure git to consult a proxy for onion addresses
					>open your ".gitconfig" (presumably under "~/")
					-append:
					{
						[http "http://*.onion"]	# assuming the service is http, not https; you could add both by duplicating
							sslVerify = false
							proxy = "socks5h://127.0.0.1:9050"
					}
				2. Ensure Tor provides a socks5 proxy at the configured port (9050 in our case)
					>open your torrc (presuably under "/etc/tor/torrc")
					-ensure you have the following line
					{
						SOCKSPort 9050
					}
				3. Enjoy
					>from now on .onion urls will work for you as regular ones
					{
						$ git clone http://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.onion/anon/test.git
						Cloning into 'test'...
						remote: Enumerating objects: 112, done.
						remote: Counting objects: 100% (112/112), done.
						remote: Compressing objects: 100% (80/80), done.
						remote: Total 112 (delta 21), reused 89 (delta 17), pack-reused 0
						Receiving objects: 100% (112/112), 128.80 KiB | 241.00 KiB/s, done.
						Resolving deltas: 100% (21/21), done.
					}
			#


Purple(
SURPASSED BY YT-DLP
------------
 youtube-dl
------------
	>downloader
	>suitable for youtube videos, playlists and channels, but also for non-youtube content
	>when specifing a playlist make sure its not a video playing belonging to a playlist, 
	  but the unique page of the playlist where all members are listed
	youtube-dl [options] [url]
			-v					: verbose
			--write-thumbnail	: download thumbnail too
			--write-description	: download description too
			--write-sub			: download subtitles too
			-F					: list avalible [format]s
			-f [format]			: download in [format]
				bestaudio			: download only audio; in the best avalible format
									>specify multiple formats to (audio and video| by 
									  the use of a '+'
)
--------------
    yt-dlp: //(0x0000034a)➞  
--------------
	>video downloader
	>suitable for youtube videos, playlists and channels, but also for non-youtube content
	>when specifing a playlist make sure its not a video playing belonging to a playlist, 
	  but the unique page of the playlist where all members are listed
	yt-dlp [options] [url]
			-v					: verbose
			--write-thumbnail	: download thumbnail too
			--write-description	: download description too
			--write-sub			: download subtitles too
			-F					: list avalible [format]s
			-f [format]			: download in [format]
				bestaudio			: download only audio; in the best avalible format
									>specify multiple formats to (audio and video| by 
									  the use of a '+'

---------------------
    BitTorrenting: //(0x0000034b)➞  
---------------------
    // ?!; move
	>the protocol is called ĐĐBitTorrentĐĐ, but almost always shortened to "torrent"
	>the process is called torrenting
	>torrenting is p2p
	>peer discovery is federated; its either done using ĐtrackersĐ or a ĐDHTĐ, both requires servers
	File:
		*.torrent	: torrent file; contains information on files and trackers
	Programs:
		transmission	: fully featured torrent client
			>has a web interface on 9091
            transmission-create         : creates new torrent files
            transmission-edit           : edits torrent files
            transmission-show           : reads/info dumps torrent files
            transmission-daemon         : background process and server heavy lifting torrents
            transmission-cli            : CLI front end connecting to the daemon
            transmission-remote         : GUI front end connecting to the daemon
            transmission-remote-gtk     : GUI front end connecting to the daemon; in GTK

--------------
    httpie: //(0x0000034c)➞  
--------------
	>curl for humans

	http  [options] [METHOD] [URL]
	https [options] [METHOD] [URL]

	[options]:
		--verify=[yes|no]	: whether to check ssl certificates; NOTE: <---

-----------
    ftp: //(0x0000034d)➞  
-----------
	>"File Transfer Protocol"
	>interactive network connection handler
	>"modern" (shitware) browsers have removed builtin ftp support

	ftp [options] ([host])	: creates an ftp connection to [host]

	>after lauch the user has the option to enter commands
	¤commands
		>NOTE: the most important commands are marked with a 'Ж' at the begining of their line
		>[rfile] signals a remote file
		>[lfile] signals a local file
		!               
		$               
		account         
		append          
		ascii           
		bell            
		binary          
		bye             
		case            
Ж		cd              : change directory; operates on the remote machine; analogous to Linuxs ĐcdĐ (see AT "/Linux/Manuvering/cd")
		cdup            
		chmod           
		close           
		cr              
		delete          
		debug           
		dir             
		disconnect      
		epsv4           
		form            
		get [rfile]     : downloads [rfile] to ${PWD}; see also ĐmgetĐ BELOW
		glob            
		hash            
		help            
		idle            
		image           
		ipany           
		ipv4            
		ipv6            
Ж		lcd             : local ĐcdĐ; operates on the local machine; analogous to Linuxs ĐcdĐ (see AT "/Linux/Manuvering/cd")
		lpwd            
Ж		ls              : list; analogous to Linuxs ĐcdĐ (see AT "/Linux/Manuvering/ls")
		macdef          
		mdelete         
		mdir            
		mget [rfiles]   : downloads [rfiles] (notice the plural form) to ${PWD}; see also ĐgetĐ ABOVE
		mkdir           
		mls             
		mode            
		modtime         
		mput [lfiles]	: uploads [lfiles] (notice the plural form) to the remote machines ${PWD}; see also ĐputĐ BELOW
		newer           
		nmap            
		nlist           
		ntrans          
Ж		open            : connects to host; NOTE: you do NOT give the host address as an arguemnt, you will be promted to enter it
		passive         
		prompt          
		proxy           
		sendport        
Ж		put [lfile]		: uploads [lfile] to the remote machines ${PWD}; see also ĐmputĐ ABOVE
Ж		pwd             : "Print Working Directory"; outputs the current path
Ж		quit            : closes connection and exits ftp
		quote           
		recv            
		reget           
		rstatus         
		rhelp           
		rename          
		reset           
		restart         
		rmdir   
		runique  
		site
		size
		status
		struct
		system
		sunique
		tenex
		trace
		type
		user 
		umask 
		verbose
		?   			: alias of ĐhelpĐ


-----------
    ssh: //(0x0000034e)➞  
-----------
	>secure shell protocol and application implementation
	>server-client struct-ed

	XXX:
		>running ssh daemon on the target
		{ sudo systemctl start sshd }
		{ sudo rc-service sshd start }

	Programs:
		ssh [options] [target]									: login with a shell to a remote machine
			{ // Connecting to an ssh server
				Red(   root@Server )$ /usr/sbin/sshd
				Green( anon@Client )$ ssh myuser@192.168.0.176
			}
		scp [options] ([target]:)[path-1] ([target]:)[path-2]	: "Secure CoPy"; copy file(s) using ssh
			-P [port] 	: specifies port
			-r			: recursively
		[target]:
			([username]@)([ip]|[domain])	: [username] is the user one would like to login to the server; can be ommited if it maches ${USER}
											   ([ip]|[domain]) specifies the server

	### Set up key only auth for SSH ###    //(0x000002ae)➞
		XXX:
			>basic knowledge of public key cryptography
		>the server holds a public key, while the client has a private key
		  which it will use for authentication
		>this way we both protect from brute forcing attacks and
		  optionally avoid to ever have to enter a password for connecting
		1. Create a key pair
			Green( anon@Client )$ ssh-keygen
			"Generating public/private rsa key pair."
			"Enter file in which to save the key (/home/anon/.ssh/id_rsa):" <path>
			"Enter passphrase (empty for no passphrase):" (<password>)
			"Enter same passphrase again:" (<password>)
			"Your identification has been saved in ignore"
			"Your public key has been saved in ignore.pub"
			"The key fingerprint is:"
			"SHA256:sAswBDPwdk6wqK8HSOvDBRUrJmYbA0O9i8ZAmTbxve0 anon@Client"
			"The key's randomart image is:"
			"+---[RSA 3072]----+ "
			"|=o=.o o     *    | "
			"|.Xx+o+ +   a     | "
			"|+BB o.o .   b    | "
			"|*o*   o          | "
			"|+o* o...S        | "
			"|.=.B  .+    r    | "
			"|+ ..+ oE         | "
			"| + .jklas8u      | "
			"|  o.             | "
			"+----[SHA256]-----+ "
			¤NOTES:
				<path>			: if youre following this tutorial then the default probably good enough for you
				(<password>)	: optional password; your private key will be encrypted with this,
								   which makes it secure from being plainly stolen, however do note that youll have to enter it
								   whenever with every new ssh-agent session
		2. Get the servers identifier
			>if the server is located on the lan use:
				Red(   root@Server )$ ip a
				//look for the num string which fits the pattern:
					192.168.0.<int>
			>if the server is located on WAN look up its ip online
			>if the server has a register-ed domain use that
			>NOTE: use whatever you got as "<targer>" from now on
		3. Add the key to server
			Green( anon@Client )$ ssh-copy-id <target>
			>if the key location is not the default explicit-ly specify its path using the -i flag
		4. Login to the server
			>this step serves as both ground work for easing the next and as a test
			>if youre prompted for a password something went terribly wrong, do not proceed
			Green( anon@Client )$ ssh <targer>
		5. Disable password authentication
				Red(   root@Server )$ ${EDITOR} /etc/ssh/sshd_config
				¤add or modify lines to:
					PubkeyAuthentication yes
					PasswordAuthentication no
		6. Restart ssh server
				Red(   root@Server )$ systemctl restart sshd
		Troubleshooting:
			¤permissions
				>ssh is very sensitive at the correct permissions on the server (for security reasons)
				:--------------:------------------------:
				|  Permission  |          File          |
				:--------------:------------------------:
				:         755  : ~/                     :
				:         700  : ~/.ssh/                :
				:         600  : ~/.ssh/authorized_keys :
				:--------------:------------------------:
		#

-------
 tmate
-------
//(0x000002af)➞
	>ssh wrapper
	>provides one time secure sessions
	>uses a central server, dodging all difficulties arrising from ip / port forwarding

-------
 rhino
-------
//(0x000002b0)➞
	>Mozillas javascript interpreter

	rhino [options]	: runs javascript
		-w		: enable warnings

---------
 web-ext
---------
	>Mozillas command line tool for browser extension development

	web-ext [options] [verb]
		>Option values can also be set by declaring 
		  an environment variable prefixed with "WEB_EXT_"
		  { --source-dir="~/myExtention"
			// is the same as:
			WEB_EXT_SOURCE_DIR="~/myExtention"
		  }
		¤[options]
			-s [path]	: source directory; default-s to ./
		¤[verb]
			build	: builds an easily installable version of ones extension
			sign
			run		: fires up a dummy browser with the extension at ${PWD} installed
			lint
			docs

#define firefox::: //(0x0000034f)➞\
I-----------------------------\
I  ___ _          __          \
I | __(_)_ _ ___ / _|_____ __ \
I | _|| | '_/ -_|  _/ _ \ \ / \
I |_| |_|_| \___|_| \___/_\_\ \
I-----------------------------I
	>web browser

	Special_pages:
		>these pages are all imune to extension Đcontent scriptsĐ
		accounts-static.cdn.mozilla.net
		accounts.firefox.com
		addons.cdn.mozilla.net
		addons.mozilla.org
		api.accounts.firefox.com
		content.cdn.mozilla.net
		content.cdn.mozilla.net
		discovery.addons.mozilla.org
		input.mozilla.org
		install.mozilla.org
		oauth.accounts.firefox.com
		profile.accounts.firefox.com
		support.mozilla.org
		sync.services.mozilla.com
		testpilot.firefox.com

	Extentions:
		manifest.json	: the main firefox specific file which contains metadat and starts the control flow
			¤keys:
				>all are strings; the values are not neccesserly, but defaults to if not specified otherwise
				>mandatory pairs are marked with a '#'
				author			: the extensions creators name
				background		: specifies background execution with its properties
					scripts			: list of javascripts which should be treated as background scripts
					page			: a path to a html document which can have its own javascripts;
									   cant be used together with "scripts" (see ABOVE)
					persistent		: bool; whether the background page should be kept in memory
									   (and therefor preserve its state) when its not in use
				browser_action	: controls the ĐĐbuttonĐĐ added to the browser toolbar
					browser_style	: bool; whether to include firefoxs stylesheet
					default_area	: [area]; where the button shall be initally placed
						"navbar"			: main browser toolbar; default
						"menupanel"			: popup panel
						"tabstrip"			: tab toolbar
						"personaltoolbar"	: bookmarks toolbar
					default_icon	: string or object; the icon for the ĐbuttonĐ;
									   path(s) relative to the manifest.js;
									   specify multiple files for multiple sizes,
									   where the key is the image height
									   {	"default_icon": {
												"16": "MyFolder/pic16.png",
												"32": "MyFolder/pic32.png"
											}
									   }
					default_popup	: path to html file to be used as a popup when the ĐbuttonĐ
									   is clicked; if the page containts đembededđ javascript,
									   it will be threated as a ĐContent Violation Policy errorĐ
					default_title	: tooltip for the ĐbuttonĐ (hover)
					theme_icons		: [ThemeIcons] object; specifies what extension themes to be used
						¤			   acording to firefoxs theme
							properties:
								"light"	: path to the image to be used on light theme
								"dark"	: path to the image to be used on dark theme
								"size"	: size of the "light" and "dark" images
				commands			: defines key combinations which can be listened to with the API
					[name]				: the name of the feature
					suggested_key		: defines key; specific to subproperty
						"default"
						"mac"
						"linux"
						"windows"
						"chromeos"
						"android"
						"ios"
					description			: feature description
					-exceptions:
						>these builtin actions never fire (on the API)
						  when their shortcut is called
						_execute_browser_action
						_execute_page_action
						_execute_sidebar_action
				content_scripts		: specifies Đcontent scriptsĐ to be loaded
				default_locale		: specifies locale
				description			: a short description of the extension, 
									   intended for display in the browsers user interface
				devtools_page		: path to a html file; used to enhance devtools
#				manifest_version	: must always be 2
#				version				: float; specifies extension version
				browser_specific_settings	: application specific properties
					"gecko"		:
				chrome_setting_overrides	: override-s browser settings
					"homepage"			: url/path to new homepage
					"search_provider"	: adds new search engine
				chrome_url_override			: override-s local browser pages
					bookmarks	: bookmarks page
					history		: history page
					newtab		: new tab
					newtab		: new tab
				content_security_policy		: 
			-ĐĐcontent scriptĐĐ:
				>content scripts run on a particular page as embedded code
			-ĐĐbackground scriptĐĐ:
				pass

	Dev_tools:
		F12
		>since there are 2 usable web engines in existence, every browser supports it
		¤
			[CTRL] & [ALT] & [MOUSE1]	: expand element with all children


#define\
I----------------------------\
I   __  __ ___ ____   ____   \
I  |  \/  |_ _/ ___| / ___|  \
I  | |\/| || |\__  \| |      \
I  | |  | || | __| || |___   \
I  |_|  |_|___|____/ \____|  \
I----------------------------I

rsnapshot

XAMPP:
	>very popular
	>winhead cope over proper service management
	>trivially wraps some common webdev serves using a gui
	-the services include, but are not limited to:
		apache2
		mysql


#define termdev: //(0x00000350)➞\
I---------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------\
I                                                                                 \
I     /$$$$$$$$                                      /$$                          \
I    |__  $$__/                                     | $$                          \
I       | $$  /$$$$$$   /$$$$$$  /$$$$$$/$$$$   /$$$$$$$  /$$$$$$  /$$    /$$     \
I       | $$ /$$__  $$ /$$__  $$| $$_  $$_  $$ /$$__  $$ /$$__  $$|  $$  /$$/     \
I       | $$| $$$$$$$$| $$  \__/| $$ \ $$ \ $$| $$  | $$| $$$$$$$$ \  $$/$$/      \
I       | $$| $$_____/| $$      | $$ | $$ | $$| $$  | $$| $$_____/  \  $$$/       \
I       | $$|  $$$$$$$| $$      | $$ | $$ | $$|  $$$$$$$|  $$$$$$$   \  $/        \
I       |__/ \_______/|__/      |__/ |__/ |__/ \_______/ \_______/    \_/         \
I---------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------I

    >"terminal development"

	VT100: //(0x00000351)➞
		Escape_sequences:
            >named after how an ASCII escape char prefixes them
            >escape sequence are a fucking mess, they are poorly organized and
              their terminal support is all over the place
            \033[<format>m  : controls the display of subsequenty outputed characters                                               /**/]
                format := code
                    | code ';' format
                    ;
                // NOTE: codes with shit support are ommited from the table BELOW
                +==============+================================+
                I    Result    I              Code              I
                +==============+================================+
                | ############ |  foreground    | background    |
                +--------------+----------------+---------------+
                | black        |  30            |  40           |
                | red          |  31            |  41           |
                | green        |  32            |  42           |
                | yellow       |  33            |  43           |
                | blue         |  34            |  44           |
                | magenta      |  35            |  45           |
                | cyan         |  36            |  46           |
                | white        |  37            |  47           |
                | <8bit-color> |  38;5;<8bc>    |  48;5;<8bc>   |
                +--------------+----------------+---------------+
                | ############ |  on            |  off          |
                +--------------+----------------+---------------+
                | reset        |   0            | N/A           | // everything back to normal
                | bold/bright  |   1            | 21            | // often a brighter shade of the same colour
                | underline    |   4            | 24            |
                | inverse      |   7            | 27            | // swap foreground and background colours
                | crossed out  |   9            | 29            |
                ------------------------------------------------+
            \033[<int-1>;<int-2>H   : moves the cursor to line <int-1> column <int-2>                                               /**/]
            \033[s                  : save cursor position                                                                          /**/]
            \033[u                  : restore saved cursor position                                                                 /**/]
            \033[<int = 1><char>    : controls the cursor                                                                           /**/]
                +------+----------------------------+
                | Char |           Effect           |
                +------+----------------------------+
                |   A  | upward                     |
                |   B  | downward                   |
                |   C  | forward                    |
                |   D  | backward                   |
                |   E  | downward start of the line |
                |   F  | upward start of the line   |
                |   G  | <int>th column             |
                +------+----------------------------+

	VT320: //(0x00000352)➞
		>supports images through escape sequences in the formal of ĐĐsixelĐĐ ("SIX pixELs")

#define webdev: //(0x00000353)➞\
I---------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------\
I                                                                                       \
I            /$$      /$$           /$$             /$$                                 \
I           | $$  /$ | $$          | $$            | $$                                 \
I           | $$ /$$$| $$  /$$$$$$ | $$$$$$$   /$$$$$$$  /$$$$$$  /$$    /$$            \
I           | $$/$$ $$ $$ /$$__  $$| $$__  $$ /$$__  $$ /$$__  $$|  $$  /$$/            \
I           | $$$$_  $$$$| $$$$$$$$| $$  \ $$| $$  | $$| $$$$$$$$ \  $$/$$/             \
I           | $$$/ \  $$$| $$_____/| $$  | $$| $$  | $$| $$_____/  \  $$$/              \
I           | $$/   \  $$|  $$$$$$$| $$$$$$$/|  $$$$$$$|  $$$$$$$   \  $/               \
I           |__/     \__/ \_______/|_______/  \_______/ \_______/    \_/                \
I                                                                                       \
I---------------------------------------------------------------------------------------\
I---------------------------------------------------------------------------------------I

	Captcha: //(0x00000354)➞
		>"Completely Automated Public Turing test to distinguish between Computers and HumAns"

	Classical_web_workstack: //(0x00000355)➞
		>server	{Apache, Ngix, Lighttpd}
		>database {Mysql, Mongodb}
		>markup generator {php, Node.js}
		>markup {html, xml}
		>stylesheet {css, sass}
		>client side script {Javascript, Python}
        -stacks of well known combinations:
            >LAMP; "Linux Apache2 Mysql Php"
            >MERN; "Mongodb Express.js React.js Node.js"

	### Site rendering for dummies ###  //(0x000002b5)➞
		{// examples
			>the goal is the same with each methodology
			>we have data.txt
			>it contains key-value pairs
			¤its generated with this script
				{ @begin=sh@
					#!/bin/bash

					# generator.sh

					OUTPUT="data.txt"

					while true; do 
						rm $OUTPUT
						for i in {0..7}; do 
							(tr -dc A-Za-z0-9 </dev/urandom | head -c 8; echo ' : '$RANDOM ) >> $OUTPUT
						done
						sleep 5
					done
				 @end=sh@ }
			>each website will attempt to display the contents of data.txt
		}
		Static:
			>completely handwritten
			>old school
			>fast both server and client side
			>there are no rapidly changing elements as every modification is manual
			>works very well for small sites consistent in content
			{ // static.html
			  @begin=html@
				<div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
					<h1>Example webpage</h1>
					<div>
						<table>
							<tr><td>dYcoNjAe</td><td>15810</td></tr>
							<tr><td>aey3hj9V</td><td>30474</td></tr>
							<tr><td>w50EXL8K</td><td>9688 </td></tr>
							<tr><td>gt3qgccG</td><td>21265</td></tr>
							<tr><td>z63cbqAt</td><td>29301</td></tr>
							<tr><td>uchA1fn8</td><td>1941 </td></tr>
							<tr><td>YRxi9MrI</td><td>31986</td></tr>
							<tr><td>AMqnWWNZ</td><td>16368</td></tr>
						</table>
					<div>
				</div>
			  @end=html@
				>since its all manual, the values are hardcoded
				>was a chore just to create the example
			}
		Dynamic:
			>created at request
			>a (markup) generator must be used {php}
			{ // dynamic.php
			  @begin=php@
				<div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
					<h1>Example webpage</h1>
					<div>
						<table>
							<?php
								$file = fopen('data.txt', 'r');
								while(($line = fgets($file)) !== false):
									list($key, $value) = explode(':', $line, 2);
									$key = trim($key);
									$value = trim($value);
							?>
								<tr><td><?=$key?></td><td><?=$value?></td></tr>
							<?php
								endwhile;
								fclose($file);
							?>
						</table>
					<div>
				</div>
			  @end=php@
				>the file is actually opened and read
				>the websites content is guaranteed to correspond to data.txt's contents
			}
		Prerendered:
			>a dynamic is eval-ed before being deployed
			>at runtime the pregenerated version is being shipped
			>hybrid of static and dynamic
			>often also called static for simplicity
			>less typing than with static
			>contents might get out of the date
			>often used when the pages do not require updating, but all use the same template {every page needs the same header added}
			{ // dynamic.php
			  @begin=php@
				<div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
					<h1>Example webpage</h1>
					<div>
						<table>
							<?php
								$file = fopen('data.txt', 'r');
								while(($line = fgets($file)) !== false):
									list($key, $value) = explode(':', $line, 2);
									$key = trim($key);
									$value = trim($value);
							?>
								<tr><td><?=$key?></td><td><?=$value?></td></tr>
							<?php
								endwhile;
								fclose($file);
							?>
						</table>
					<div>
				</div>
			  @end=php@
			  // its rendered to disk
			  $ php dynamic.php > prerendered.html
			  // prerendered.html is shipped
			}
		Live:
			>the website is blank by default, the content is appended by communicating with the serve in the background
			>uses websockets
			>stateful connection
			>can update the contents without refreshing the page
			>most reliable regarding data freshness
			>requires by far the most work relative to the other methods
			>requires writting js, for this reason alone, it's cancer
			{ // Socks server using python
				#!/bin/python

				# sockets.py

				import asyncio
				import websockets
				import json

				async def send_data(ws):
					while True:
						j = {}
						with open('data.txt', 'r') as f:
							for line in f:
								key, value = map(str.strip, line.split(':', 1))
								j[key] = value
						await ws.send(json.dumps(j, indent=4))
						await asyncio.sleep(2)

				asyncio.get_event_loop().run_until_complete(websockets.serve(send_data, 'localhost', 8765))
				asyncio.get_event_loop().run_forever()
			  // Socks client using Javascript nested into the webpage
			  @begin=html@
				<div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
					<h1>Example webpage</h1>
					<div>
						<table>
						</table>
					<div>
				</div>
				<script>
					let socket = new WebSocket('ws://localhost:8765');

					socket.onmessage = (event) => {
						let table = document.getElementsByTagName('table')[0];
						table.innerHTML = '';
						data = JSON.parse(event.data)
						for(d in data){
							var row = table.appendChild(document.createElement('tr'));
							var key_cell = row.appendChild(document.createElement('td'));
							var value_cell = row.appendChild(document.createElement('td'));
							key_cell.innerText = d;
							value_cell.innerText = data[d];
						}
					}
				</script>
			  @end=html@
			  >looks cool, i know
			}
	#

	CORS: //(0x00000356)➞
		>"Cross-origin resource sharing"
		>web browser feature
		>the policy that forbids clients side scripts to issue request to arbitrary hosts
		>if one makes a client side request the CORS header is checked, if it does not contain
		  the issuing domain as authorized, it's hard denied
		>never relevant when requesting resources from the same domain
		>security concern
		>without CORS one could steal private data or outsource malicious work
		>it cripples user side scripts from doing legit work too

	Brython: //(0x00000357)➞
		>Javascript implementation of Python 3
		>can completely replace user side Javascript
		{@begin=html@
			<!-- Brython hello world; equivalent to a Javascript console.log() call -->
				<!-- Dependency for Brython; obviously could be served locally -->
  			<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/brython/3.10.0/brython.js"></script>
				<!-- Code section -->
			<script type="text/python">
			print("Hello world!")
			</script>
		@end=html@}
		>you will never have to write the shitshow that is Javascript again!!!
		>see AT "Python/Brython"
	
	CGI: //(0x00000358)➞
		YYY:
			rfc3875
		>"Common Gateway Interface"
		>old fashion (based) way of doing dynamic content
		>the server executes and passed data to binaries
		+========+   --->   +========+   --->   +=========+
		| client |          | server |          | process |
		+========+   <---   +========+   <---   +=========+
		>interpreters may be specified with arguments
		{ // CGI Hello World in C++
			// @BAKE g++ $@ -o $*.cgi
			#include <stdio.h>

			signed main(int argc, char * * argv, char * * envp) {
				fputs("Content-Type: text/plain\r\n\r\n", stdout);
				fputs("hello world", stdout);
				return 0;
			}
		}
		>"The script MUST return a Content-Type header field."
		Meta_variables:
			>passed in an implementation defined way, this in practice means environment variables
			AUTH_TYPE			: implementation defined
			CONTENT_LENGTH		: message body size
			CONTENT_TYPE		: mimetype
			GATEWAY_INTERFACE	: CGI version
			PATH_INFO			: access path
			PATH_TRANSLATED		: rendered ${PATH_INFO} { %20 translation }
			QUERY_STRING		: ?!
			REMOTE_ADDR			: clients address
			REMOTE_HOST			: clients domain
			REMOTE_IDENT		: ?!
			REMOTE_USER			: ?!
			REQUEST_METHOD		: method {GET|POST|PUT|DELETE}
			SCRIPT_NAME			: CGI script name
			SERVER_NAME			: server address
			SERVER_PORT			: server port
			SERVER_PROTOCOL		: server protocol with version number
			SERVER_SOFTWARE		: server name and version
	    FastCGI:
	    	>alternative to CGI
	    	>addresses the performance concern of spawning a new process at every request
	    	>a fastCGI script is a coroutine

       ### Everything wrong with the modern webstack ### //₩

            // NOTE: this is a WIP draft

            On one occasion I casually insulted HTML/CSS/Javascript mid sentence,
            only to be called out to explain my position.
            Before that moment I thought their poor quality was self-evident to every one.
            Not only did I turn out to be wrong,
            I also had to realize my inability to into words my frustration with the system.

            Therefor, bellow, I will be committing the ultimate example of making up a repost
            after one already walked away defeated from an argument.

            I think i would like to declare: "muh historical reasons!"
            is not a valid defense in the context of the
            most dynamic and volatile ecosystem in tech
            which continuously breaks compatibility
            (while how much this applies to core technologies is arguable,
            but the higher level abstractions everyone flees to ARE getting away with it).


            Lack_of_separation_of_structure_and_display:
                This is a string input:
                {@begin=html@
                  <input type="text" id="animal-input" name="animal" value="quokka">
                @end=html@}

                This is a select:
                {@begin=html@
                  <select id="animals-input" name="animal">
                    <option value="dog">Dog</option>
                    <option value="cat">Cat</option>
                    <option value="elephant">Elephant</option>
                    <option value="quokka" selected>Quoka</option>
                    <option value="giraffe">Giraffe</option>
                  </select>
                @end=html@}

                This is a radio:
                {@begin=html@
                  <label>
                    <input type="radio" name="animal" value="dog"> Dog
                  </label>
                  <label>
                    <input type="radio" name="animal" value="cat"> Cat
                  </label>
                  <label>
                    <input type="radio" name="animal" value="elephant"> Elephant
                  </label>
                  <label>
                    <input type="radio" name="animal" value="quokka" checked> Quokka
                  </label>
                  <label>
                    <input type="radio" name="animal" value="giraffe"> Giraffe
                  </label>
                @end=html@}

                Quick recap/reminder on the nature of a radio:
                    >radios are grouped together by their "name" attribute
                    >"A tree must not contain an input element whose radio button group contains only that element."
                    >only one from the group can be so called "checked" at any given time

                Self-evidently, the <radio> and the <select>
                are practically equivalent in functionality,
                but are very different from DOM-structure perspective.
                While the <select> is a single input element providing a value,
                in the meanwhile <radio> takes a many-to-one approach.
                So say we wanted gather all the values of all input tags,
                not with a form,
                but with a script.
                The text input and the <select> is collected flawlessly,
                but the <radio> would slip through our hands.

                However that should not be a problem, right?
                2 things are designed different and behave different,
                that's in fact consistent.

                Except <select> is always rendered either as a dropdown or
                an option list box if "multiple" is specified and
                <radio> necessary takes up the appearance of this markable circle thingy.
                So now we are torn: either we use the layout we want or take the look we want.
                We certainly cannot have both. Not without making our code a big hack anyways.

                One could argue that it's not HTML fault, per se,
                but rather all implementation went astray from the true path.
                Thing is: it could have not happened if only had HTML defined
                -say- an attribute to specify how to display inputs.


            Tag_and_style_redundancy:

                This text is italics:
                {@begin=html@
                    <i>text</i>
                @end=html@}
                This text is also italics:
                {@begin=html@
                    <span style="font-style: italics;">text</span>
                @end=html@}

                This text is underlined:
                {@begin=html@
                    <u>text</u>
                @end=html@}
                This text is also underlined:
                {@begin=html@
                    <span style="text-decoration: underline;">text</span>
                @end=html@}

                This text is bold:
                {@begin=html@
                    <b>text</b>
                @end=html@}
                This text is also bold:
                {@begin=html@
                    <span style="font-weight: bold;">text</span>
                @end=html@}

                This text is very bold (supposedly, but rendered exactly like bold):
                {@begin=html@
                    <strong>text</strong>
                @end=html@}
                This text is also very bold:
                {@begin=html@
                    <span style="font-weight: bolder;">text</span>
                @end=html@}

                This text is subscripted:
                {@begin=html@
                    <sub>text</sub>
                @end=html@}
                This text is also subscripted:
                {@begin=html@
                    <span style="vertical-align: sub; font-size: smaller;">text</span>
                @end=html@}

                This text is superscripted:
                {@begin=html@
                    <sup>text</sup>
                @end=html@}
                This text is also superscripted:
                {@begin=html@
                    <span style="vertical-align: supper; font-size: smaller;">text</span>
                @end=html@}

                ...And I could go on.


            Two_wrongs_regarding_OOP_do_not_make_one_right: // ?! no clue what this title supposed to mean
                CSS:
                    A key feature of CSS are classes.
                    Classes allow for arbitrary distinction between
                    (otherwise possible equivalent) elements.
                    Classes use the "." notation, clownishly mocking OOP.
                    The way a CSS rule is structured is in many ways extremely similar to object notation:
                    {
                        .example {
                          color: blue;
                          font-size: 18px;
                        }
                    }
                    It's a unique name identifying a group of key-value pairs.
                    So say we have another rule:
                    {
                        .special_example {
                          background-color: lightgray;
                        }
                    }
                    It is clear that every "special_example" is also an "example".
                    The display of each special_example is eternally dependent on the display of example.
                    Yet there are no good ways to define this relationship.
                    While there is inheritance in CSS,
                    it does something else and is also outstandingly sinister,
                    but I digress, fear comes later.
                    So the point is, all of our special example elements will have to look like this:
                    {@begin=html@
                        <span style="vertical-align: supper; font-size: smaller;">text</span>
                    @end=html@}
                    Which is error prone, undebuggable and takes longer to type.

                    Something similar goes for the times when one would like to
                    group multiple style classes into one by polygamous inheritance. 

                Javascript:
                    // i forgot what i wanted to say

                CSS inheritance:
                    "\
                    In CSS, inheritance controls what happens when no value is specified for a property on an element.\
                    \
                    CSS properties can be categorized in two types:\
                    \
                    inherited properties, which by default are set to the computed value of the parent element\
                    non-inherited properties, which by default are set to initial value of the property\
                    "

                You may ask to yourself: "What rules determine whether a property is inherited or not?".<br>
                The answer is simple: "Lmao RTFM frfr no cap 😜😜😜".<br>
                And I wish i was joking.
                I mean yeah some are self evident I guess, but not most of the time.

                // the original version was in html; theres no good way to convert this to cdd
                {@begin=html@
                    <style>
                        .spoiler {
                            background: black;
                        }
                        .spoiler:hover {
                            background: initial;
                        }
                    </style>
                    Here, take a trial in it:
                    <ol>
                        <li><b>color:</b>              <span class=spoiler>yes</span></li>
                        <li><b>background (color):</b> <span class=spoiler>no</span></li>
                        <li><b>opacity:</b>            <span class=spoiler>no</span></li>
                        <li><b>scrollbar-color:</b>    <span class=spoiler>yes</span></li>
                        <li><b>background-repeat:</b>  <span class=spoiler>no</span></li>
                        <li><b>text-decoration:</b>    <span class=spoiler>no</span></li>
                        <li><b>text-shadow:</b>        <span class=spoiler>yes</span></li>
                        <li><b>scale:</b>              <span class=spoiler>no</span></li>
                        <li><b>word-break:</b>         <span class=spoiler>yes</span></li>
                        <li><b>box-sizing:</b>         <span class=spoiler>no</span></li>
                        <li><b>paint-order:</b>        <span class=spoiler>yes</span></li>
                    </ol>
                    Might as well email me your score.
                    </p>
                @end=html@}

            Resource_management:
                The browser consistently uses the "src" attribute
                to fetch various external resources
                then use (render) them according to the parent tag.
                This gives an easy,
                highlevel solution to what otherwise would be tedious.

            Scripts on the other hand can create "lower level" request and or sockets
            to then do whatever with the raw response.
            This allows for much more flexibility.

            The problem arises from the absolute disconnect between the two.

            Say we have the following page:
            {@begin=html@
                <html>
                    <img id='pic' src='example.jpg'>
                </html>
                <script>
                    // ...
                </script>
            @end=html@}
            Extremely simplistic.
            Now say we magically know (perhaps from a socket) that #pic changed.
            The resource "example.jpg" was rewritten on the server.
            Obviously the browser has no clue about this,
            good thing we know about the change,
            so all we need to is tell the browser too.
            Except our tip meets deaf ears.

            I'm fairly confident the browser internally uses a fetch queue to load resources and
            there is some sort of mapping between resource and requesting tag to enable caching.
            Yet is no way to interact with this queue. It's totally unexposed, 	

            // ?! elaborate!!!

            Cookies:
                Let me quote "https://www.w3schools.com/js/js_cookies.asp>https://www.w3schools.com/js/js_cookies.asp":
                    "The document.cookie property looks like a normal text string. But it is not."
                They have unironically abstracted cookies into a pseudo-string type.
                A high level concept. abstracted. into. a string.
                    "\
                    Deleting a cookie is very simple. [...]\
                    Just set the expires parameter to a past date.\
                    "
                No fucking comment.


            PHP:
                >yet another analysis of why PHP is terrible
                >i would like to clarify, im aware that PHP is no longer considered
                  "modern", yet it refuses to die for some reason

                Error_reporting:
                    // <img src=media/Screenshot_2023-07-07_17-27-02.jpg></img>
                    Great.
                    Except it specifies nowhere how "error reporting is done".
                    As far as I'm concerned it might as well be
                    a single underpaid 3th worlder delivering mail by foot across the globe.
                    But assuming we limit our imagination to the rational
                    (which is quite generous with PHP), it could be:
                        >stored in a global waiting to be queried
                        >pasted into the server logs
                        >pasted into special error logs
                        >returned back to the user


            Defaults:
                Please read the code bellow:
                {@begin=html@
                    <html>
                        <head>
                            <style>
                                #mydiv {
                                    /* set the vertical size of of mydiv exactly
                                       to the 100% of the screen size
                                    */
                                    height: 100vh;
                                    /* set the background so the result is more visible
                                       if you decide to run this in your browser
                                    */
                                    background: red;
                                }
                            </style>
                        </head>
                        <body>
                            <div id='mydiv'>
                            <div>
                        </body>
                    </html>
                @end=html@}
                Now let me ask a simple question: how tall will the website be?

                You may logically think that
                if the only element we have is as tall as the screen,
                then the page will surely be as tall as the screen, right?

                Well, no.

                I will give you a hint,
                save out the above code to a file,
                open it in your browser,
                open the Inspector,
                select body
                and view its CSS properties.

                Extra hint:
                if you are on Firefox, get fucked.

                The body element has the implicit styling of:
                "body { display: block; margin: 8px; }" (Chromium 110.0.5481.30).
                These stylings are part of the default stylesheet.
                Firefox is also so kind that it simply just doesnt display
                such defaults while inspecting elements.

                Because of this, our webpage is 16 pixels too tall,
                unless we manually override the relevant CSS rule.

                Ok,
                so now we know that defaults exist,
                but how do we know what ĐareĐ the defaults?

                On firefox, you may consult the 922 lines long stylesheet (LibreWolf 125.0.3-1)
                "resource://gre-resources/forms.css".
                Which is an internal page, so websites cannot dynamically access it.
                Or for chrome you may look it up online. Some where.
                These are your options,
                since browsers may make them whatever the fuck they want them to be.

                I will note this here: this is plain sloppiness.
                Designing anything on a sloppy framework
                is like building a house of cards on a moving train:
                you can do it if you hate yourself,
                but claiming it to be a great and simple experience is retarded.

            Alignments:
                I hope you hate centered things buddy,
                or this is going to be extremely painful for you.
                // ?! TODO

            Forms:
                The following is a perfectly valid html form:
                {@begin=html@
                    <form action='/destination_path' method='POST'>
                        <textarea name='body'><textarea>
                        <button type='submit'>Submit</button>
                    </form>
                @end=html@}
                It sends a POST request to the site path "/destination_path"
                with the user input of the text area when the button is pressed.
                Its a marvel of modern computer engineering.
                A complex operation have been abstracted away to markup in a non-tedious way!

                Oh, what do you mean you dont want the page to automatically refresh
                because its CURRENT_YEAR and we no longer do stuff like that?

                Ugh, i got just the solution for you buddy, its easy:
                {@begin=html@
                    <form id="myform" action="/destination_path" method="POST" onsubmit="return handleSubmit(event)">
                        <textarea name="body" id="mytextarea"></textarea><br><br>
                        <button type="submit">Submit</button>
                    </form>
                    <script>
                        function handleSubmit(event) {
                            event.preventDefault();
                            const message = document.getElementById('mytextarea').value;

                            fetch('/destination_path', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'text/plain'
                                },
                                body: message
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.text();
                            })
                            .then(data => {
                                console.log('Message sent successfully:', data);
                                document.getElementById('mytextarea').value = '';
                            })
                            .catch(error => {
                                console.error('There was a problem with the fetch operation:', error);
                            });
                        }
                    </script>
                @end=html@}
                Questions?

            Documentation:
                The largest "documentation provider" is
                "https://developer.mozilla.org/en-US/docs/Web>https://developer.mozilla.org/en-US/docs/Web".
                Too bad it is in a constant identity crisis
                whether it's actual documentation or a pile of tutorials.

            Writer's YYY:
                https://stackoverflow.com/questions/311990/how-do-i-get-a-div-to-float-to-the-bottom-of-its-container
        #

#define graphics
#define simulations
#define gamedev: //(0x00000359)➞\
I-----------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------\
I                                                                                   \
I      /$$$$$$                                          /$$                         \
I     /$$__  $$                                        | $$                         \
I    | $$  \__/  /$$$$$$  /$$$$$$/$$$$   /$$$$$$   /$$$$$$$  /$$$$$$  /$$    /$$    \
I    | $$ /$$$$ |____  $$| $$_  $$_  $$ /$$__  $$ /$$__  $$ /$$__  $$|  $$  /$$/    \
I    | $$|_  $$  /$$$$$$$| $$ \ $$ \ $$| $$$$$$$$| $$  | $$| $$$$$$$$ \  $$/$$/     \
I    | $$  \ $$ /$$__  $$| $$ | $$ | $$| $$_____/| $$  | $$| $$_____/  \  $$$/      \
I    |  $$$$$$/|  $$$$$$$| $$ | $$ | $$|  $$$$$$$|  $$$$$$$|  $$$$$$$   \  $/       \
I     \______/  \_______/|__/ |__/ |__/ \_______/ \_______/ \_______/    \_/        \
I-----------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------\
I-----------------------------------------------------------------------------------I

    >NOTE: graphics belong here too
    >NOTE: simulations belong here too

    YYY:
        "Algorithms/Raster"

    Images:
        Channel:
            >refers to a visible component of a pixel
            >usually means a color or transparency
            >the most common channel width is 8 bits { standard grayscale: (black) 0 <---> 255 (white) }
            ¤Types
                grayscale   : single channel
                RGB         : "Red, Green, Blue"
                sRGB        : "Standard Red, Green, Blue"; ISO RGB standard; 8 bit
                RGBA        : "Red, Green, Blue, Alpha"
                CMYK        : "Cyan, Magenta, Yellow, Key"; used in printing
                Y'UV/YUV    : naming dreamed up by the utterly deranged
            |===============================|
            | Common Usage      | Channel   |
            |===============================|
            | Analogue displays | YUV       |
            | Printers          | CMYK      |
            | Screens           | *RGB*     |
            | Computer vision   | grayscale |
            |-------------------------------|
        DIP:
            >"Digital Image Processing"
            >any operation that manipulates an image
            >ĐĐquantizationĐĐ is the process of truncating real colors to digital values
            >Dense Vector ?!?!
            -LoG:
                >"Laplacian of Gaussian"
                >edge detection algorithm
                >outputs grayscale
            -CLIP:
                >"Contrastive Language–Image Pretraining"
                >uses vectorization
                >NN for describing images
            -SIFT:
                >"Scale-Invariant Feature Transform"
                >detects key points
            Color_inversion:
                >each channels value is subtracted from the maximum
                >if the channel width is a 2 power, bitwise or works
            Histogram:
                >creating a dictionary of {channel value : number of pixels averaging}
                >each pixel is iterated, the channel values are averaged after rounding,
                  the corresponding key is upped by one (starting from 0)
                >usually displayed visually and similar to a fire-chart
                -based on it its easy to tell over/under-exposure
                    ▁▁▄█ - right heavy -> OVER  exposure (too much   light)
                    █▄▁▁ - left  heavy -> UNDER exposure (too little light)
            Diffing:
                MSE:
                    >"Mean Square Error"
                    >the value of each pixel is compared to the corresponding pixel
                    >only works with equally sized images (still, resizing is a thing, you know)
                    .    identical: 0    <->    different: N
                SSIM:
                    >"Structural Similarity Index"
                    >consideres structural information, luminance and contrast
                    .    identical: 1    <->    different: 0
            Clustering:
                Isodata:
                    >gradually find clusters from random initial sets
            Convolutional_matrix:
                >dot prodroduct based
                ¤common matrixes
                /* for vertical edge detection */
                    -1 -2 -1
                     0  0  0
                     1  2  1
                /* for horizontal edge detection */
                    -1  0  1
                    -2  0  2
                    -1  0  1
                /* for bluring */
                    0.04 0.04 0.04 0.04 0.04

                    0.04 0.04 0.04 0.04 0.04

                    0.04 0.04 0.04 0.04 0.04

                    0.04 0.04 0.04 0.04 0.04

                    0.04 0.04 0.04 0.04 0.04
            Kernel_based:
                >"window"/"filter"
                >the ĐĐkernelĐĐ is a matrix iterating over the image
                >NOTE: true/false usually means the values of a binary image;
                        however they are arbitrary definable to colored images,
                        such as averaging the color values and checking for a threashold
                {
                    /* original */             /* kernel */
                    ┌─────────────────────┐    	█X
                    │                     │    	██
                    │     ███████         │
                    │    ██████████       │
                    │       ████████      │
                    │            ████     │
                    │      ██████████     │
                    │      █████████████  │
                    │           █████  █  │
                    │  ███    ███████     │
                    │   ███████████       │
                    │    ███████          │
                    │                     │
                    └─────────────────────┘
                    NOTE: the upper right corner of the kernel is marked, because that marks the "current pixel";
                           usually the middle pixel would be current one, but this highlights that thats arbitrary
                           (and a 3x3 kernel would be too large for ascii art)
                    /* Pixels marked for deletion */
                    /*  by erosion */
                    ┌─────────────────────┐
                    │                     │
                    │     ░██████         │
                    │    ░░░░██████       │
                    │       ░░░░░░██      │
                    │            ░███     │
                    │      ░█████████     │
                    │      ░░░░░░████░░░  │
                    │           ░████  ░  │
                    │  ░░█    ░████░░     │
                    │   ░░██████░░░       │
                    │    ░░░░░░░          │
                    │                     │
                    └─────────────────────┘
                    ┌─────────────────────┐
                    │                     │
                    │      ██████         │
                    │        ██████       │
                    │             ██      │
                    │             ███     │
                    │       █████████     │
                    │            ████     │
                    │            ████     │
                    │    █     ████       │
                    │     ██████          │
                    │                     │
                    │                     │
                    └─────────────────────┘
                    /* Pixels marked for filling */
                    /*  by dilation */
                    ┌─────────────────────┐
                    │     ░░░░░░░░        │
                    │    ░███████░░░      │
                    │    ██████████░░     │
                    │       ████████░     │
                    │      ░░░░░░████░    │
                    │      ██████████░    │
                    │      █████████████░ │
                    │  ░░░░   ░░█████░ █░ │
                    │  ███░░░░███████░    │
                    │   ███████████░      │
                    │    ███████░         │
                    │                     │
                    └─────────────────────┘
                    ┌─────────────────────┐
                    │                     │
                    │     ███████         │
                    │    ██████████       │
                    │       ████████      │
                    │            ████     │
                    │      ██████████     │
                    │      █████████████  │
                    │           █████  █  │
                    │  ███    ███████     │
                    │   ███████████       │
                    │    ███████          │
                    │                     │
                    └─────────────────────┘
                    /* closing */
                    ┌─────────────────────┐
                    │     ░███████        │
                    │    ███████████      │
                    │    ░░░█████████     │
                    │       ░████████     │
                    │      ░██████████    │
                    │      ░██████████    │
                    │      ░░░░███████░░█ │
                    │  ████   ████████ ░░ │
                    │  ░░███████████░░    │
                    │   ░░███████░░░      │
                    │    ░░░░░░░░         │
                    │                     │
                    └─────────────────────┘
                    ┌─────────────────────┐
                    │      ███████        │
                    │    ███████████      │
                    │       █████████     │
                    │        ████████     │
                    │       ██████████    │
                    │       ██████████    │
                    │          ███████  █ │
                    │  ████   ████████    │
                    │    ███████████      │
                    │     ███████         │
                    │                     │
                    │                     │
                    └─────────────────────┘
                    /* opening */
                    ┌─────────────────────┐
                    │      ░░░░░░░        │
                    │      ██████░░░      │
                    │        ██████░░     │
                    │             ██░░    │
                    │       ░░░░░░███░    │
                    │       █████████░    │
                    │            ████░    │
                    │    ░     ░░████░    │
                    │    █░░░░░████░      │
                    │     ██████░         │
                    │                     │
                    │                     │
                    └─────────────────────┘
                    ┌─────────────────────┐
                    │      ███████        │
                    │      █████████      │
                    │        ████████     │
                    │             ████    │
                    │       ██████████    │
                    │       ██████████    │
                    │            █████    │
                    │    █     ███████    │
                    │    ███████████      │
                    │     ███████         │
                    │                     │
                    │                     │
                    └─────────────────────┘
                }
                erosion:
                    /* Erosion in slow-mo */
                        /* Kernel over pixel 1-1 */
                        █X
                        ██\
                           \
                            ██      ░█
                            ██      ██

                        /* Kernel over pixel 1-2 */
                         █X
                         ██\
                            \
                            ░█      ░█
                            ██      ██

                        /* Kernel over pixel 2-1 */
                        █X
                        ██\
                           \░█      ░█
                            ██      ░█

                        /* Kernel over pixel 2-2 */
                         █X 
                         ██\  
                            \█      ░█
                            ░█      ░░
                    >the kernel is filled with true values
                    >logical and is performed (the pixel is only true, if all pixels under the kernel is true)
                dilation:
                    >the kernel is filled with true values
                    >logical or is performed (the pixel is true, if any of pixels under the kernel is true)
                opeing:
                    dilate(erode(${Image}))
                closing:
                    erode(dilate(${Image}))
        

    Models: //(0x0000035a)➞
        >describing 3D objects in computer readable format
        >most 3D models are shell like; only the surface is defined
        Poligon_mesh:
            >vertices, edges and faces are used
            VV:
                >"Vertex-Vertex"
                >vertexes and their connections are recorded
                >face data is implicit
                >minimalistic
                >much of what will be rendered could be precomputed
                +--------------------------------+   
                |           Vertex list          |   
                +------+----------+--------------+        v6 (0,1,1)    v7 (1,1,1)
                | Name | Position | Connected to |                .+------+
                +------+----------+--------------+    v2 (0,0,1).' |    .'|
                | - v0 | 0, 0, 0, | v1, v2, v4,  |             +------+'v3|(1,0,1)
                | - v1 | 1, 0, 0, | v0, v3, v5,  |             |   |  |   |
                | - v2 | 0, 0, 1, | v0, v3, v6,  |   v4 (0,1,0)|  ,+--|---+  v5 (1,1,0)
                | - v3 | 1, 0, 1, | v1, v2, v7,  |             |.'    | .'
                | - v4 | 0, 1, 0, | v0, v5, v6,  |             +------+'  v1 (1,0,0)
                | - v5 | 1, 1, 0, | v1, v4, v7,  |       v0 (0,0,0)
                | - v6 | 0, 1, 1, | v2, v4, v7,  |
                | - v7 | 1, 1, 1, | v3, v5, v6,  |
                +------+----------+--------------+
            FV:
                >"Face-Vertex"
                >most common
                >hardware support
                >faces are stored with vertexes
                >from a face points can be looked up,
                  from points neighbouring faces can be looked up
                +--------------------+    +---------------------------------------+  // NOTE: this cube still has a back side
                |      Face List     |    |               Vertex list             |  //  it would be just too awkward to draw
                +------+-------------+    +------+----------+---------------------+      v6       v7
                | Name |  Vertexes   |    | Name | Position |       Used in       |       .+------+
                +------+-------------+    +------+----------+---------------------+     .'f4'.f5.'|f3
                |  f0  | v0, v1, v2, |    | - v0 | 0, 0, 0, | f0, f6, f10, f11    | v2 +------+' .| v3
                |  f1  | v1, v2, v3, |    | - v1 | 1, 0, 0, | f0, f1, f2, f3, f10 |    |'. f1 | .'|f2
                |  f2  | v1, v5, v7, |    | - v2 | 0, 0, 1, | f0, f1, f4, f6, f7  |    |  '.  |.' + v5
                |  f3  | v1, v3, v7, |    | - v3 | 1, 0, 1, | f1, f3, f4, f5      |    | f0 '.|'.' 
                |  f4  | v2, v3, v6, |    | - v4 | 0, 1, 0, | f6, f7, f8, f9, f11 |    +------+'   
                |  f5  | v3, v6, v7, |    | - v5 | 1, 1, 0, | f2, f8, f10, f11    |   v0     v1
                |  f6  | v0, v2, v4, |    | - v6 | 0, 1, 1, | f4, f5, f7, f9      |
                |  f7  | v2, v4, v6, |    | - v7 | 1, 1, 1, | f2, f3, f5, f8, f9  |
                |  f8  | v4, v5, v7, |    +------+----------+---------------------+
                |  f9  | v4, v6, v7, |
                |  f10 | v0, v1, v5, |
                |  f11 | v0, v4, v5, |
                +--------------------+
        NURBS:
            >"Non-Uniform Rational B-Spline"
            >"the vector images of modelling"
            >defines a perfectly curved surface with end points and control weights
            >the weights are do NOT sit at the surface
            >the curves stay very accurate and easy to predict no matter the scale
            >described by precise mathematics
            >very hard to work with
            >mostly used in engineering software { CADs; vehicle blueprint modelling }
        Constructive_solid_geometry:
            >when complex objects are created from simple object by the means of bool operations
            { a sphere is subtracted from the edge of a cube }
        Surface_subdivision:
            >an algorithm that refines a mesh
            >hard to describe shapes may be approximated easily
            >recursive, the refined mesh is re-refined N times
            >every iteration results in more vertexes,
              complexity and compute exponentially grows
            >the methodology that defines how the vertexes change is called
              the ĐĐrefinement schemeĐĐ
            >a Đrefinement schemeĐ which perserves the original vertexes is called
              an ĐĐinterpolation schemeĐĐ
            >a Đrefinement schemeĐ which changes the original vertexes {move/delete} is called
              an ĐĐapproximation schemeĐĐ
        LODing:
            >"Level Of DetailING"
            >referes to the act of playing with mesh details
            >has performance benefits
            >object further from the viewport or moving with higher speeds can
              have lower levels of detail (vertex count) as the user will not notice
                { you are playing an FPS on a crappy machine, you zoom it with your sniper to
                   epically own some noob and get stunned regarding how shit the far away looks
                   for a second }


    Rendering: //(0x0000035b)➞
        >the process of displaying sprites or 3D models in 2D is called ĐĐrenderingĐĐ
        >models can be pre-rendered for a performance gain
          { 8 sides of a skeleton is rendered, changing as it turns,
            the player camera cannot be rotated }
        >a ĐĐwireframeĐĐ render is a render where only the vertexes
          and their connecting edges are visible { no textures added; no lighting }
        Clipping:
            >union operation on graphic objects
            >primarily deals with determining what fits into the viewport
            Cohen_shutherland:
                >rectangle-line clipping
                -the screen is split to regions based on bitmasks:

                    : LEFT =   : CENTRAL  :  RIGHT   :
                    : 0b0001   : 0b0000   :  0b0010  :
                    ..................................
                    :                                :
                    :  0b1001  |  0b1000  |  0b1010  : TOP     = 0b1000 
                    : ---------+----------+--------- :
                    :  0b0001  |  0b0000  |  0b0010  : CENTRAL = 0b0000
                    : ---------+----------+--------- :
                    :  0b0101  |  0b0100  |  0b0110  : BOTTOM  = 0b0100
                    :                                :
                    ``````````````````````````````````
                {
                    function shutherland(line):
                        if (is both enpoints central):
                            accept
                        elif (is both endpoints share plain):
                            reject
                        else:
                            shutherland(
                                modify_one_out_point_to_edge_intersection()
                            )
                }
        Visible_surface_determination:
            >an algorithm that decides what surfaces are visible to the camera
            Painters_algorithm:
                >named after the painting technique of painting distant objects first,
                  and partially painting over them closer objects later on
                >polygons are sorted from furthest to closest and each is drawn in order
                >far away polygons are usually overdrawn
                Pros:
                    >simple
                    >requires little memory (just a polygon list and a screen buffer)
                Cons:
                    >slow
                    >cyclical overlapping will fail; such as:
                        Yellow( ____  ____
                                \   \/   /
                                 \  /   /
                                  \/   /
                                  /   /\
                                 /   /  \
                                /   /\   \
                               /   /  \   \
                           ___/___/____\   \__
                          |             \   \_|
                           ‾/‾‾‾/‾‾‾‾‾‾‾‾\   \
                           /___/          \___\ )
                    >intersections will fail
                Reverse_painters:
                    >polygins are sorted from closest to furthest and drawn in order,
                      with the condition that pixels may not be overwritten
                    >considerably faster
                    >suffers the same errors
                Newells_algorithm:
                    >fixes the painters problems
                    >uppon overlapping splitting is done to new object
                      which appear in polygon list independently
            Z_buffering:
                >"Z-buffering"/"dept buffering"
                >a so called z-buffer is stored with pixel dept information which is used to
                  determine pixel overwritting

                          Frame Buffer                           Z-buffer
                ┌───────┬───────┬───────┬───────┐    ┌───────┬───────┬───────┬───────┐
                │ pixel │ pixel │ pixel │ pixel │    │ depth │ depth │ depth │ depth │
                ├───────┼───────┼───────┼───────┤    ├───────┼───────┼───────┼───────┤
                | pixel | pixel | pixel | pixel |    | depth | depth | depth | depth |
                ├───────┼───────┼───────┼───────┤    ├───────┼───────┼───────┼───────┤
                | pixel | pixel | pixel | pixel |    | depth | depth | depth | depth |
                ├───────┼───────┼───────┼───────┤    ├───────┼───────┼───────┼───────┤
                | pixel | pixel | pixel | pixel |    | depth | depth | depth | depth |
                └───────┴───────┴───────┴───────┘    └───────┴───────┴───────┴───────┘
        Lighting:
            >"shading"
            >the process of determining how bright parts of a model should be
            Static:
                >brightness of textures is determined at compile time
                >effitient
                >no cool lighting effects can be created { dynamic day cycle change; player flashlights }
            Ray_tracing:
                >rays of light are simulated
                >very expensive
                >used to be only for animation until hardware caught up so that
                  video games may utalize it too

    Camera:
        >common engine/renderer abstraction
        >represents a view into a map or UI
        >can move without affacting rendering
        >multiple cameras could be utalized for rapid display context switching

    Map_design:
        direction_of_progress:
            >(usually) it should be clear to the player which way to go
            >the optimal direction of progression should be clearly signalled
            >lighting is often used
            >in light rich environments the color yellow is often used

    Perspective:
        >the type of the ĐcameraĐs view
        -first person:
            >like inside someones head
            >the camera rotates in place
            { Call of Duty }
        -second person:
            >like a camera on the shelf
            >a first person like camera follows a foreign object
            { PS2 Resident Evil }
        -third person:
            >like a drone over someones shoulder
            >the camera rotates orbitally 
            { Dark Souls }
        -top-down:
            >like a bird-sight view
            >the camera is floating above
            { Catan }
            -iso-metric:
                >angled
                >often distorts the perspective
                >often pointed at the edges of a cube-ish world
                { XCOM }



#define links
#define useful_sites: //(0x0000035c)➞\
I----------------------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------------------\
I	  /$$   /$$                      /$$$$$$           /$$                 /$$   /$$                             \
I	 | $$  | $$  (((Useful sites))) /$$__  $$         | $$                |__/  | $$                             \
I	 | $$  | $$  /$$$$$$$  /$$$$$$ | $$  \__//$$   /$$| $$        /$$$$$$$ /$$ /$$$$$$    /$$$$$$   /$$$$$$$     \
I	 | $$  | $$ /$$_____/ /$$__  $$| $$$$   | $$  | $$| $$       /$$_____/| $$|_  $$_/   /$$__  $$ /$$_____/     \
I	 | $$  | $$|  $$$$$$ | $$$$$$$$| $$_/   | $$  | $$| $$      |  $$$$$$ | $$  | $$    | $$$$$$$$|  $$$$$$      \
I	 | $$  | $$ \____  $$| $$_____/| $$     | $$  | $$| $$       \____  $$| $$  | $$ /$$| $$_____/ \____  $$     \
I	 |  $$$$$$/ /$$$$$$$/|  $$$$$$$| $$     |  $$$$$$/| $$       /$$$$$$$/| $$  |  $$$$/|  $$$$$$$ /$$$$$$$/     \
I	  \______/ |_______/  \_______/|__/      \______/ |__/      |_______/ |__/   \___/   \_______/|_______/      \
I----------------------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------------------\
I----------------------------------------------------------------------------------------------------------------I
		https://www.felixcloutier.com/x86/index.html            : x86 and amd64 instruction reference                                                            
		http://cpp.sh/											: online c++ compiler
		https://www.onworks.net/								: online virtual machine
		http://goodsites.tech/									: technolo/g/ically good site list
		https://www.000webhost.com/								: free server provider that doesnt cuck your access


#define ai\
#define artificial intelligence\
#define machine_learning: //(0x0000035d)➞\
I------------------------------------------\
I------------------------------------------\
I                                          \
I              /$$$$$$  /$$$$$$            \
I             /$$__  $$|_  $$_/            \
I            | $$  \ $$  | $$              \
I            | $$$$$$$$  | $$              \
I            | $$__  $$  | $$              \
I            | $$  | $$  | $$              \
I            | $$  | $$ /$$$$$$            \
I            |__/  |__/|______/            \
I------------------------------------------\
I------------------------------------------I

	YYY:
        https://xkcd.com/1838/
		http://neuralnetworksanddeeplearning.com
        https://www.youtube.com/watch?v=4Gac5I64LM4
        https://www.youtube.com/watch?v=PGSba51aRYU&list=PLpM-Dvs8t0VZPZKggcql-MmjaBdZKeDMw

    >NOTE: "But bro, when will i ever use matrix operations and calculus?\
             Those are such a waste of time!"
           here. at the same time in fact. enjoy hell, stalker child.
    >think about it this way:
      we are trying to construct a function based on given inputs and outputs;
      most of the time these input-output pairs are partial too,
      meaning there are inputs for which we do not know the output for;
      mathematically speaking, we have no fucking clue what we are doing;
      if such function already exist we do not know about it;
      for this reason, we wish to deploy some method that approximates
      out desired function as much as possible;
      we constuct a model based our known input-output pairs,
      start with a random function and a way to measure how
      well it performs compared to the desired function
      by comparing it's and the desired outputs,
      then using derivatives we find what direction to tweak the
      values of our approximation function to get closer to our
      desired function

	NEURONS: //(0x0000035e)➞
		>imitates biological (human) neurons
		Perceptron: //(0x0000035f)➞
			>NOTE: also referes to "single layer neural network"
			¤components
				1. Inputs
				2. Weights
				3. Bias
				4. Threshold
				5. Output
			>the original virtual neuron
			>each input is binary, only the weights are fractions
			>every input and its corresponding weight is factored;
			  then summarized;
			  bias is added;
			  this sum is judged based on a threshold value
			>any minor change in the weights will most likely result in major changes in the output
			>one could set up the weights by hand or bruteforce them, but both are tedious
													Yellow(
			input-1 \
					 ‾‾\ __ 
			input-2 ----|  D>---> output
					   / ‾‾
			input-3 /‾‾
													)
					/ if Σⱼxⱼwⱼ =< threshold then 0
			output {
					\ if Σⱼxⱼwⱼ  > threshold then 1
		Logical_neuron: //(0x00000360)➞
			¤components
				1. Inputs
				2. Weights
				3. Bias
				4. Activation function
				5. Deactivation function
				6. Output
			>the output is a fraction, with most activation functions, between 0 and 1
                                                Yellow(
                I₁ ____
                       \ * W₁
                        ‾‾‾‾‾\__ .───┬───.
                         * W₂   \│   │    '─.
                I₂ --------------│ ∑ │ f[]   >----
                              __/│   │    .─'
                         * W₃/   '───┴───'
                I₃ ____/‾‾‾‾‾                         )
			-the original activation function is the Sigmoid function:
					 1
				────────────
				 1 + exp(x)
			>a minor change in a weight only results in a minor change in the output
			>the deciding property of an activation function's fitness is its shape
			{ // Shape of the Sigmoid function
				1.0 ├─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
					│                             ___...|
					│                      _..--``
					│                    ,'             │
					│                  ,‾
					│                 -                 │
					│                .
					│               -                   │
					│             _'
					│          _-'                      │
					│___...--""
				0.0 ┼─────────────────┼─────────────────┴
				.    -5               0                5
			}


	NEURAL_NETWORKS: //(0x00000361)➞
        >"NN"
		>this new and revolutionary technology that will give us AGI
		  within 2 more weeks without a paradigm shift is from 1957
		¤components:
			1. Neurons
			2. Architecture
			3. Loss function
			3. Learning algorithm
		¤typical visual representation of the neural network
												/*
			 Neuron-1             Neuron-2
			  _____                _____
			 /     \    Weight    /     \
			|       |____________|       |
			|       |            |       |
			 \_____/              \_____/
												*/
			Physical architecture of single perceptron: Yellow(
                        __ 
			  input ---|  D>---> output
                        ‾‾                                    )
			Virtualized architecture of single perceptron: Yellow(
				  _      _      _ 
				 { }--->{ }--->{ }
				  ‾      ‾      ‾                                )
			┃Input┃Hidden┃Output┃
			┃layer┃layers┃      ┃/*
			   _     _ 
			│ ( )-│-( )  │      │
			   ‾\\_//‾ \_
			│  _ /|\ _   \ _    │
			  ( )-|-( )--│( )
			│  ‾ \|/ ‾  _/ ‾    │
			   _//‾\\_ /
			│ ( )-│-( )  │      │
			   ‾     ‾           */
			Feedforward Network  /*
				_     _ 
			   ( )---( )
				‾\\_//‾ \_
				_ /|\ _   \ _ 
			   ( )-|-( )---( )
				‾ \|/ ‾  _/ ‾
				_//‾\\_ /
			   ( )---( )
				‾     ‾          */ Red(
		   ━━━━━━━━━━━━━━━━━━━━━▶      )
				  Dataflow              
		Architecture: //(0x00000362)➞
			>the method by which neurons are logically ordered,
			  in practice this means a web formed based on
			  output to input piping between neurons
            Layers: //(0x00000363)➞
                >a ĐĐlayerĐĐ is a group of neurons which do not communicate with eachother,
                  however do share their input and output neurons
                >the ĐĐinput layerĐĐ is a virtual layer that corresponds to the input
                >the ĐĐoutput layerĐĐ is a virtual layer that corresponds the output values
                  of the last physical layer
                >a ĐĐhidden layerĐĐ is a layer between the input and the output layers
                { /* "The activation function is applied once per layer"
                        - said my prof to my greatest surprise.
                      I'm no expert at all, but even the most simplistic
                     article will tell you that in a neuron, after the
                     weighted inputs are added together, the activation
                     function is applied. So clearly, the activation
                     function is applied in a layer as many times
                     as the number of neurons, right?
                      Well, kinda, however a (fully connected) layer can be
                    expressed as a matrix:
                        let n := the number of neurons
                        let m := the number of the number of inputs
                                  (ie. the number of weights per neuron)
                        myLayer :=
                             __              __
                            |                  |
                            | W₁₁ W₁₂  ... W₁ₙ |
                            |                  |
                            | W₂₁ W₂₂  ... W₂ₙ |
                            |                  |
                            | ... ...  '-. ... |
                            |                  |
                            | Wₘ₁ Wₘ₂  ... Wₘₙ |
                            |                  |
                            |__              __|

                     Now, if we make the activation function a matrix
                    operation, it is in fact applied once.
                  */
                }
			>a network where each layers outputs are fed as the next input,
			  but not elsewhere and always in one direction,
			  is called a ĐĐfeedforward networkĐĐ
			>a non-Đfeedforward networkĐ, where feedback loops are implemented
			  is called a ĐĐrecurrent networkĐĐ
			>Đrecurrent networksĐ are more similar to the human brain than Đfeedforward networksĐ
			>Đfeedforward networksĐ are easier to work with, so they enjoy the privilege of being
			  more researched
            Network_of_Perceptron_neurons: //(0x00000364)➞
                XOR_problem: //(0x00000365)➞
                    >cause of the first AI winter
                    >it is said that a perceptron is unable to learn calculating
                      the logical operaiotion explusive or
                    >Σⱼxⱼwⱼ is a linear equation; meaning in the plain it creates a line
                    >only linearly separable problems are solvable
                    { // Boolean values projected to the plain
                      1 │  x        x
                        │        
                        │        
                        │        
                        │        
                      0 │  x        x
                        ┼──────────────
                           0        1
                      // Our perceptron is able to place a single line on this plain
                      //  and label by it
                      1 │  x        x
                        │       A
                        │--..    
                        │    ``--..
                        │     B    ``--
                      0 │  x        x
                        ┼──────────────
                           0        1
                      // As represented like this, OR, AND and NAND are classifiable
                      //         OR                  AND                  NAND
                        1 │  x        x      1 │  x '.     x      1 │  x '.     x               
                          │'.                  │      '.  true      │      '.  false             
                          │  '.   true         │        '.          │        '.              
                          │    '.              │  false   '.        │  true    '.             
                          │false '.            │            '.      │            '.                   
                        0 │  x     '. x      0 │  x        x      0 │  x        x               
                          ┼──────────────      ┼──────────────      ┼──────────────                   
                             0        1           0        1           0        1                    
                      // NOTE: notice how the angle of the line is arbitrary,
                      //        there are multiple configurations that work just as well
                      // Now, if we wanted to do the same with XOR, we would be in trouble.
                      //  At least 2 lines would be required:
                        1 │  x/       x /
                          │? / ???     /
                          │ /         /
                          │/         /
                          │     ??  /   ??
                        0 │  x     /  x
                          ┼──────────────
                             0        1
                      // Now, i wish to show you a trick.
                      //  Assume the below data:
                                 ▲
                            X  X │   X
                                 │      X
                          X    A │A
                              A  │ AA   X
                        ◀────────┼────────▶
                              A A│ A   X
                          X      │
                              X  │      X
                                 │X
                                 ▼
                      // Clearly, there is no single line to separate 'A's from 'X's,
                      //  yet the border seems very trivial to us, if only could draw a cirle...
                      // However, we could represent our data in an alternative way,
                      //  say in a polar coordinate system, where horizontally we
                      //  represent the distence from the origo, and vertically the
                      //  angle closed with the original (positive) X axes.
                        ▲  π
                        │       X
                        │  A        X
                        │         X
                        │  A       X
                        │  A       X
                        │ AAA     X
                        ┼─────────────▶ R
                        │ A     X  
                        │A          X
                        │
                        │   A      X
                        │       X
                        │         X
                        ▼ -π
                      // With this transposed data set, we could do a linear separation and
                      //  there by teach it to a perceptron.
                      // You may ask, why can't we do something similar with the XOR problem?
                      // Well, we could. For example, if we order by the difference of the
                      //  input values, we would get something that is linearily separable.
                      // So, you ĐcanĐ trick a perceptron into solving the logical operation XOR.
                      // However, the take away is that thats not the point.
                      // We could only trick the perceptron because we knew the transformation perfectly
                      //  and applied some smart transformation.
                      // In the real word we hardly know the function of differenciating cats from
                      //  dogs, and perhaps there exists no representation where thats linear.
                      // The XOR problem is the difficulty it shows, not about how we were missing
                      //  an AI logic gate that we would have needed for ĐsomethingĐ.
                    }


    Training: //(0x00000366)➞
        >"learning"/"fitting"
        >the process of reassigning weights with the intend of gaining better outputs
        >ĐĐoverfittingĐĐ is the phenomenon when a model has adapted to the learning data
          so well, that it is unable to perform good on other data
		>the more complex the model, the more probable ĐoverfittingĐ is
        Supervision: //(0x00000367)➞
            Supervised_learning:
                >learning data is labeled
            Unsupervised_learning:
                >learning data is not labeled
                >the model forms its own concepts in the form of clusters
                >requires significantly more data for effective training
                >the resulting models tend to be more creative
                  {more reliable on data which was not in the learning set;
                    creates better AI art}
        Learning_rate: //(0x00000368)➞
            >when its calculated what direction to converge to, the value of the learning
              rate indicates the amount of change that should take effect
            >the learning rate doesnt actually "know" how much to change,
              its a (-n educated) guess
            >the learning rate could cause the model to continously over shoot the optimal
              values or to converge way too slow
            -typical value interpretations: // why do i feel like as if i were making notes of zodiac signs?
               ...  - 0.01  // small
               0.01 - 0.1   // medium
               0.1  - ...   // large
            optimizer:
                >an object or function which is in charge of dynamically chaning the learning rate
                >consults the loss
                -common optimizers:
                    >"Stochastic Gradient Descent
                    >"ADAptive Moment estimation"
                    >"Nonlinear ADAM"
        Weight_updating: //(0x00000369)➞
            >traditionally weights are updated once in every epoch
            >when weights are updated after each data point, that is called ĐĐonline learningĐĐ;
              its often the most simplistic approach when the dataset of an epoch cannot
              fit into memory at once
            Random:
                >the brute forcing of weights
                >can work ok-ish on very small networks
                >basically useless, mostly for demonstration purposes
                  or to serve as a baseline
            Finite_difference:
                △f(x) = f (x + b) − f (x + a)
                >derivative approximation
            Backpropagation:
                YYY:
                    https://towardsdatascience.com/understanding-backpropagation-algorithm-7bb3aa2f95fd
                    https://neptune.ai/blog/backpropagation-algorithm-in-neural-networks-guide
                    https://pyimagesearch.com/2021/05/06/backpropagation-from-scratch-with-python/
                >learning algorithm based on gradient descent and utalizing
                  the Leibniz chain rule
        Fine_tuning:
            >"transfer learning"
            >common technique
            >an already trained model being adapted to a more specific task
            >being given a pretrained model and fine-tuning it is significantly
              cheaper and faster than training from scratch
            >the fine-tuning can be done on proprietary or obscure data
            >ĐĐfull fine-tuningĐĐ is fine-tuning that uses an identical process
              to the initial training
            >ĐĐpartial fine-tuningĐĐ is fine-tuning where only a select subset
              of the weights are updated, the rest are kept intact;
              usually the outer layers are updated and the intuition
              of the deep layers are reused
            >ĐĐadditive fine-tuningĐĐ is fine-tuning where new parameters are inserted;
              sometimes entire layers are added; this helps the model retain its intelligence
              similar to Đfull fine-tuningĐ, but is significantly cheaper
            >ĐĐprompt tuningĐĐ involves preprocessing the user prompt;
              the preprocessing is usually done by another,
              significantly faster model that appends keywords,
              examples to the desired output format, tone or bias
            >ĐĐRAGĐĐ involves vector searching a document based on the user input
              and further prompt tuning with this additional context;
              traditionally not considered fine-tuning


    Dataset: //(0x0000036a)➞
        >the available data at during development time to train/test on
        -the data set is usually split:
            >training data; fed to the machine while it learns
            >testing data; allocated for testing after learning is finished;
              useful for finding out how well the model does on data that
              it has never seen before, but in quality is equal to the training data
        Augmentation:
            >the process of generating more training data from the initial training data
            >used for avoiding overfitting
            -usually done by applying basic transformations to the dataset
                >rotation
                >zoom
                >flipping
        PCA: //(0x0000036b)➞
            >"Pricipal Component Analisys"
            >in datasets, often times the same variable is encoded multiple times
            >finding and removing redundancy in data
            >"reducing dimension while perserving the variance present"
            >in the context of NNs, it referes to optimizing the input
              for training times
            { downsizing images to the edge of recognizability;
              removing noise and color from images;
              stripping one of height in cms/inches of horse when both are available
            }
        Batching: //(0x0000036c)➞
            >packing the dataset in smaller collections
            >each batch is used independently to adjust weights
            Pros:
                >smaller memory footprint
                >the training data can be arbitrary large and still processable
                >more frequient weight adjustments (ĐmightĐ have a positive effect on
                  model performance)
            Cons:
                >less accurate estimation
		Tokenization: //(0x0000036d)➞
			>encoding for NNs
			>neural networks can only understand arrays of numbers;
			  yet for their usefulness feeding something more complex would be ideal
			>any data to be fed to a NN must be encoded
			>in the case of average NNs, this means the data points are resized
			  to fit the bounds of the activation function and
			  is flattened so that every data point has its own input neuron
			  in a 1 dimensional manner
			{ // Assume an image (BELOW is trying to be the classing Windows XP hills background)
				┌───────┐
				│   # # │
				│/''--__│
				│_---'''│
				└───────┘
			  // We could encode pixel data as grayscale,
			  //  leaving us with pixel values 0-255.
			  // Assume our activation function is the Signmoid.
			  // The Sigmoids value span is 0-1.
			  // Every pixel will be representable as:
			   ${GRAYSCALE_VALUE}
			  ────────────────────
					  255
			  // Or, sticking with our ascii art, we could take the ascii values (box omitted).
			  // Using ISO ascii, we will only need 128 (7 bit) values..
				${ASCII_VALUE}
			  ──────────────────
					 127
			  // Lets write out each ascii value:
				' ' (#32); ' ' (#32); ' ' (#32); '#' (#35); ' ' (#32); '#' (#35); ' ' (#32);
				'/' (#47); ''' (#39); ''' (#39); '-' (#45); '-' (#45); '_' (#95); '_' (#95);
				'_' (#95); '-' (#45); '-' (#45); '-' (#45); ''' (#39); ''' (#39); ''' (#39);
			  // Lets force these values between bounds (with rounding here):
				' ' (#0.25); ' ' (#0.25); ' ' (#0.25); '#' (#0.28); ' ' (#0.25); '#' (#0.28); ' ' (#0.25);
				'/' (#0.37); ''' (#0.31); ''' (#0.31); '-' (#0.35); '-' (#0.35); '_' (#0.75); '_' (#0.75);
				'_' (#0.75); '-' (#0.35); '-' (#0.35); '-' (#0.35); ''' (#0.31); ''' (#0.31); ''' (#0.31);
			  // Now flatten it into a 1 dimension:
				' ' (#0.25); ' ' (#0.25); ' ' (#0.25); '#' (#0.28); ' ' (#0.25); '#' (#0.28); ' ' (#0.25); '/' (#0.37); ''' (#0.31); ''' (#0.31); '-' (#0.35); '-' (#0.35); '_' (#0.75); '_' (#0.75); '_' (#0.75); '-' (#0.35); '-' (#0.35); '-' (#0.35); ''' (#0.31); ''' (#0.31); ''' (#0.31);
			  // Omitting the visualization meta data for humans, we are left with the following array,
			  //  which could easily be easily fed to a neural network:
				[0.25, 0.25, 0.25, 0.28, 0.25, 0.28, 0.25, 0.37, 0.31, 0.31, 0.35, 0.35, 0.75, 0.75, 0.75, 0.35, 0.35, 0.35, 0.31, 0.31, 0.31]
			}
			Natural_language: //(0x0000036e)➞
				>when tokenizing natural language, per character encoding is usually not the best idea
				>tokenizing by words / word segments can yield better results and require smaller networks
				{ @begin=python@
					> # Word tokenization in Tensorflow
					> import tensorflow as tf
					> from tensorflow import keras
					> from tensorflow.keras.preprocessing.text import Tokenizer
					> examples = ['Heyo world!', 'Goodbye cruel world']
					> print(Tokenizer.fit_on_texts(examples).word_index)
					> t = Tokenizer()
					> t.fit_on_texts(examples)
					> print(t.word_index)
					{'world': 1, 'heyo': 2, 'goodbye': 3, 'cruel': 4}
				@end=python@ }

    Autoencoder:    //?!; organize
        >encodes/decodes
        >translates data to a more efficient representation then attempts to reconstruct it
                                            Yellow(
            Encoding     Decoding          )Blue(
                _           _
               |i|'       '|o|
               |n| '  _  ' |u|
               |p|  '|#|'  |t|
               |u|  .|#|.  |p|
               |t| .  ‾  . |u|
               | |.   A   .|t|
                ‾     |     ‾                   )
            dense representation
                                        Green(
              input ~ output                 )
        >it teaches the AI to do its own PCA (see AT ?!; "principal component analisys")
        >can be used to remove noise {damaged images} from input
        >often used as a component for larger systems (?!)

    FCN:
        >"Fully Connected neural Network"

    Convolution:
        YYY:
            "?!/Image recognition/kernel"
        >kernel operation
        >${N} dimensional (usually 2)
        >a ĐĐCNNĐĐ or "Convolutional Neural Network" contails atleast one convolutional layer
        >retains spacial information
        >generally good at computer vision tasks
        >smaller kernels generally perform better
        >with stride results in an output of different size
        ¤hyperparameters
            >kernel size
            >strides (kernel shift amount) (>1 further reduces the output size)
            >activation
            >padding (dummy border for the input to modify {preserve} output size)
            sizeof(output) := sizeof(input) - sizeof(kernel) + 1
                     ₘ₋₁ ₘ₋₁
            y₍ᵢ,ₕ₎ := ∑   ∑  f₍ₖ,ₗ₎ * x₍ᵢ₊ₖ,ₕ₊ₗ₎
                         ᵏ⁼⁰ ˡ⁼⁰
                                                    Blue(
                          +--+--+   
                          | 1| 2|   
               ┌──────────+--+--+────────┐
               │          | 2| 1|        │
               │          +--+--+        │
               │                         │
               │          Kernel         │
               │                         │               )
    Green(  #=====#--+--+    )Yellow(  #==#--+--+        )
    Green(  I 1| 2I 2| 1|    )Yellow(  I13I11| 6|        )
    Green(  I--+--I--+--+    )Yellow(  #==#--+--+        )
    Green(  I 3| 2I 1| 0|    )Yellow(  |11|11|11|        )
    Green(  #=====#--+--+    )Yellow(  +--+--+--+        )
    Green(  | 1| 2| 3| 4|    )Yellow(  |12|22|26|        )
    Green(  +--+--+--+--+    )Yellow(  +--+--+--+        )
    Green(  | 3| 1| 1| 3|    )        
    Green(  +--+--+--+--+    )        

              Input                       Output

        -max pooling:
            >simply outputs the max value inside the kerner
        
        
	RNN:
		>"Recurrent Neural Network"
		>neurons are layout in a self feeding architecture
		>the information flow is recursive
		>traditionally used to solve sequence-to-sequence (seq2seq) problems {translation}

	Transformers:
		YYY:
			https://www.youtube.com/watch?v=iDulhoQ2pro
			arXiv:1706.03762
		>modified feedforward networks
		>have the advanteges of RNNs
		>unlike RNNs they can be easily parallelized on a large scale
		Multihead_attention:
						 ┌────┴────┐
						 │ Concat  │
						 └─────────┘
							  ▲
							  │ 
							 ┌┼┐
							 │││
					 ┌───────││┴──────────┐
					┌────────│┴──────────┐│
				   ┌─────────┴──────────┐││
				   │ Scaled Dot-Product ││┘
				   │     Attention      │┘
				   └─┬───────┬────────┬─┘
				 ┌───┘││     │││      ││└──┐
				 │┌───┘│     │││      │└──┐│
				 ││┌───┘     │││      └──┐││
			  ┌──││┴───┐  ┌──││┴───┐  ┌──││┴───┐
			 ┌───│┴───┐│ ┌───│┴───┐│ ┌───│┴───┐│
			┌────┴───┐│┘┌────┴───┐│┘┌────┴───┐│┘
			│ Linear │┘ │ Linear │┘ │ Linear │┘ 
			└────────┘  └────────┘  └────────┘  
			     ▲           ▲           ▲
			     │           │           │
			   Query        Key        Value
		Architecture:
										Output Probabilities
												 ▲
												 │
											┌─────────┐
											│ Softmax │
											└─────────┘
												 ▲
												 │
											 ┌────────┐
											 │ Linear │
											 └────────┘
												 ▲
												 ├─┐
												 ├┐│
										  ┌──────││┼──────────┐
										 ┌───────│┼──────────┐│
										┌────────┼──────────┐││ 
										│ ┌──────┴──────┐   │││
										│ │ Add & Norm  │<┐ │││
										│ └──────┬──────┘ │ │││
				   ┌────────────────┐   │ ┌──────┴──────┐ │ │││
				  ┌────────────────┐│   │ │     Feed    │ │ │││
				 ┌────────────────┐││   │ │   Forward   │ │ │││
				 │││              │││   │ └─────────────┘ │ │││
		  ┌──────││┼──────────┐   │││   │        ▲        │ │││
		 ┌───────│┼──────────┐│   │││   │        ├────────┘ │││
		┌────────┼──────────┐││   │││   │ ┌─────────────┐   │││
		│ ┌──────┴──────┐   │││   │││   │ │ Add & Norm  │<┐ │││
		│ │ Add & Norm  │<┐ │││   │││   │ └──────┬──────┘ │ │││
		│ └──────┬──────┘ │ │││   │││   │ ┌──────┴──────┐ │ │││
		│ ┌──────┴──────┐ │ │││   │││   │ │   Masked    │ │ │││
		│ │     Feed    │ │ │││   │││   │ │ Multi-Head  │ │ │││
		│ │   Forward   │ │ │││   │││   │ │  Attention  │ │ │││
		│ └─────────────┘ │ │││   ││└───│ └─────────────┘ │ │││
		│        ▲        │ │││   │└────│   ▲    ▲    ▲   │ │││
		│        ├────────┘ │││   └─────┼───┴────┘    ├───┘ │││
		│ ┌─────────────┐   │││         │ ┌─────────────┐   │││
		│ │ Add & Norm  │<┐ │││         │ │ Add & Norm  │<┐ │││
		│ └──────┬──────┘ │ │││         │ └──────┬──────┘ │ │││
		│ ┌──────┴──────┐ │ │││         │ ┌──────┴──────┐ │ │││
		│ │             │ │ │││         │ │   Masked    │ │ │││
		│ │ Multi-Head  │ │ │││         │ │ Multi-Head  │ │ │││
		│ │  Attention  │ │ │││         │ │  Attention  │ │ │││
		│ └─────────────┘ │ │││         │ └─────────────┘ │ │││
		│   ▲    ▲    ▲   │ │││         │   ▲    ▲    ▲   │ │││
		│   └────┼────┘   │ ││┘         │   └────┼────┘   │ ││┘
		│        ├────────┘ │┘          │        ├────────┘ │┘
		└────────┼──────────┘           └────────┼──────────┘
				 ▲                               ▲
				 │                               │
				/‾\                             /‾\
			   | + |   Positonal - Encodings   | + |
				\_/                             \_/
				 ▲                               ▲
				 │                               │
		   ┌───────────┐                   ┌───────────┐
		   │   Input   │                   │  output   │
		   │ Embedding │                   │ Embedding │
		   └───────────┘                   └───────────┘
				 ▲                               ▲
				 │                               │
			  Inputs                   Outputs shifted right


    LLM:
        >"Large Language Models"
        -the ĐĐcontext windowĐĐ is the largest input a model can take;
          since they have no other "mental" storage, this is practically their memory span;
          measured in tokens

    Hyperparameter_optimization:
        >a ĐĐhyperparameterĐĐ is a configurable setting of the model that is
          not fine-tuned during training {architecture; activation function}
        >the problem with hyperparameter optimization in the field of AI is that
          we have no mathematical way of knowing how different hyperparameters will
          perform, except for eval-ing them of course, but thats expensively expensive
        >educated guessing while eval-ing a few different setups is the best we can do


#define irc\
I------------------------------------\
I------------------------------------\
I------------------------------------\
I     /$$$$$$ /$$$$$$$   /$$$$$$     \
I    |_  $$_/| $$__  $$ /$$__  $$    \
I      | $$  | $$  \ $$| $$  \__/    \
I      | $$  | $$$$$$$/| $$          \
I      | $$  | $$__  $$| $$          \
I      | $$  | $$  \ $$| $$    $$    \
I     /$$$$$$| $$  | $$|  $$$$$$/    \
I    |______/|__/  |__/ \______/     \
I------------------------------------\
I------------------------------------\
I------------------------------------I
	>"Internet Relay Chat"
	>chat protocol
	>plain text/ssl
	>minimal overhead
	>does not implement accounts
	>ephemeral
	>many FOSS servers, clients and bots
	>very hackable


/*****************************\
 / __| ___ _ ___ _____ _ _ ___
 \__ \/ -_) '_\ V / -_) '_(_-<
 |___/\___|_|  \_/\___|_| /__/
\*****************************/
	¤largest servers
		irc.rizon.net      -    home to many IB related groups; basically chaos
		irc.dal.net
		irc.libera.chat    -    home to many large projects {GNU}

	¤ports
		6665..6669 - plain text
		6667       - default plan text
		6695..6699 - ssl
		6697       - default ssl

	Channels:
		>the main component of servers
		>they are chat rooms
		>one must connect ("join") them individually
		#channel	: network wide channel; default; most common
		&channel	: server wide channel
		!channel	: netsplit riding channel takeover exploit resistant channel; deprecated

	Commands:
		/<command> (<args>)
		>NOTE: these are purely conventional, any client has the right to override them
		server <verb>
			add <name> <address>
			del <name>
		connect <server>		: connect to saved server named <server>
		join <channel>			: join channel <channel>
		nick <nick>				: change nick name to <nick>
		me <action>				: "perform" action; signal that you are doing and not saying something

	Private_messages:
		>irc supports them
		>NOTE: all private messages go through the server unencrypted

	Conventions:
		NickServ	: "NICKname SERVer" is an iconic bot responsible for reserving nick names and
					  providing user identity credibility
			/msg NickServ <command>
				REGISTER <password> <email>
				IDENTIFY <nick> <password>

	ircd-hybrid	: "IRC Daemon HYBRID"
		Files:
			/etc/ircd-hybrid/


/*************************\
  / __| (_)___ _ _| |_ ___
 | (__| | / -_) ' \  _(_-<
  \___|_|_\___|_||_\__/__/
\*************************/
	weechat	: terminal irc client
		Text_formatting:
			[Ctrl] + [c] && <code>
				b			: bold
				i			: italics
				v			: reverse
				_			: underline
				o			: reset to normal
				c <color>
					00 - white
					01 - black
					02 - blue
					03 - green
					04 - lightred
					05 - red
					06 - magenta
					07 - brown
					08 - yellow
					09 - lightgreen
					10 - cyan
					11 - lightcyan
					12 - lightblue
					13 - lightmagenta
					14 - darkgray
					15 - gray
		Fset:
			>plugin
			>the preferred way for configuring
			/fset
				<arrow-keys>
				[Alt] + [Enter] / [Mouse2]
		Commands:
			/<command>
			connect <server>
			reconnect <server>
			disconnect <server>
			join (-server <server>) <channel>
			quote (-server <server>) (PASS) <...>	: send raw data to a server;
													   send special commands to your bouncer this way
			server <verb>
				add <name> <address>/port
			whois <name>	: list client information on <name> and joined channels


	mIRC	: graphical irc client
	kiwi	: browser irc client


/***********************************\
 | _ ) ___ _  _ _ _  __ ___ _ _ ___
 | _ \/ _ \ || | ' \/ _/ -_) '_(_-<
 |___/\___/\_,_|_||_\__\___|_| /__/
\***********************************/
	>irc connection proxies
	>it connects to a real server, as a regular irc client, clients connect to it as a server
	  and the bouncer internally syncs messages
	>it stays connected indefinitely, meaning no messages are lost
	>great for mobile devices (where connection is unreliable)

	Example:
		               +---------+ 
		               | Bouncer | 
		+------+       +. . . . .+ 
		| Kiwi | <---> | Server  |
		+------+       |         |
		               |    A    |
		               |    |    |
		               |    V    |
		               |         |       +-------------+
		               | Client  | <---> | IRCd-Hybrid |
		               +---------+       +-------------+

	znc		: advanced irc bouncer with webadmin

	Files:
		~/.znc/
		/var/lib/znc/
		<znc_dir>/config/znc.conf

	Webadmin:
.		localhost:<config::Listener::Port>
		>light weight
		>dependency less
		>ĐactuallyĐ good UX design

	Commands:
		(<esc>)znc <command>
		>all commands live behind the znc namespace
		{ // invoking ZNC commands from weechat
			/quote -server myBouncer znc help
		}


.   ### Bouncing to Onion servers ###
        /etc/init.d/bouncer-tor-ncat {    // openrc service for netcat hacking
            command="/usr/bin/ncat" 
            command_args="-lk ircre.localhost 6699 -e '/usr/bin/ncat ircre.localhost 6697 --proxy 127.0.0.1:9050 --proxy-type socks5'"
            command_background=true
        }
        /etc/hosts + {
            127.0.69.1      ircre.localhost
        }
        /etc/tor/torrc + {
            MapAddress irc.localhost ausidhiahdiahslajdahudlalkjadkahdiuhsajojjjjzuiasidhahad.onion
        }
    #





#define miscellaneous: //(0x0000036f)➞\
I-----------------------------------------------------\
I-----------------------------------------------------\
I-----------------------------------------------------\
I	  /$$      /$$ /$$$$$$  /$$$$$$   /$$$$$$    	  \
I	 | $$$    /$$$|_  $$_/ /$$__  $$ /$$__  $$   	  \
I	 | $$$$  /$$$$  | $$  | $$  \__/| $$  \__/    	  \
I	 | $$ $$/$$ $$  | $$  |  $$$$$$ | $$         	  \
I	 | $$  $$$| $$  | $$   \____  $$| $$         	  \
I	 | $$\  $ | $$  | $$   /$$  \ $$| $$    $$   	  \
I	 | $$ \/  | $$ /$$$$$$|  $$$$$$/|  $$$$$$/ /$$	  \
I	 |__/     |__/|______/ \______/  \______/ |__/	  \
I-----------------------------------------------------\
I-----------------------------------------------------\
I-----------------------------------------------------I



	Gradle:
		Programs:
			gradle <options> <task>	: main build program; auto sources "build.gradle"
				-q	: quite
			gradlew <options> <task>	: "GRADLE Wrapper"; conventional wrapper script for gradle;
										   maintains its own gradle instance;
										   passes all arguments to gradle
		Files:
			build.gradle	: 
		Tasks:
			>equivalent of make targets
			tasks.<action>(<arg>+){ <body> }
			<action>
				create(<string name>)
			<body>
				dependsOn tasks.<name>
				doLast {
					[Kotlin | Groovy]
				}
		Plugins:
			>define their own tasks
			Tasks:
			Java:
				clean
				jar
				build
				test
			org.springframework.boot:
				bootRun


	?!:
		urwin	//python
		raii

	gimp:
		>"GNU Image Manipulator Program"/"Green Is My Pepper"
		>Photoshop alternative
		>featureful, but not as convenient to use as could be / one would hope so
		>OK, but not great for drawing, its primary job is in fact image manipulation
		Scripting:
			>uses the Scheme dialect called "Script-fu"
			>allows for python bindings
			>under "/Filters" one can find the options to launch a console with an interpreter
			>has a piss easy server/client protocol // if only browsers had this; but clearly Google just doesnt have the resources to finance such a complicated task

// ---------

---------
 httrack
---------
    >website cloning utility

// ---

    Fish:
        >"Friendly Interactive SHell"
        >shell designed around interactive usage instead of scripting
        >NOT POSIX compliant
        -out of the box:
            >syntax highlighting
            >command completion
            >path completion

    Big_data:
        >"bigdata"
        >"An alternate definition of Big Data is “when the cost of keeping data around is less \
          than the cost of figuring out what to throw away.” I like this definition because    \
          it encapsulates why people end up with Big Data. It isn’t because they need it;      \
          they just haven’t bothered to delete it."

C GNU obstack   // ?!

    tempered <files> : general purpose templating engine
        >NOTE: you wont believe how long i have been looking for something like this
        -syntax:
            <...> {{ <shell code> }} <...>

    Sandbox_envirnments: // ?!; might not be the best name
        >encapsulates the application and its dependencies
        >its an admission to some software being a cluster fuck
        { docker; flatpak; appimage; python venv; node }
        cons:
            >takes up insane amounts of space
            >could result in runtime overhead
        pros:
            -just works:
                >the setup time is minimalized
                >eliminates the possibility of breaking other applications (or the system)
            >could improve security
            >the packaging overhead is eliminated


Physics:
    Kinematics:
        >the science of motion
        Speed:
             distance
            ──────────
               time
        Velocity:
             displacement
            ──────────────
                 time
            >speed and direction
